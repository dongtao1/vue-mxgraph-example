{"version":3,"sources":["webpack:///./node_modules/mxgraph/javascript/mxClient.js"],"names":["mxClient","VERSION","IS_IE","navigator","userAgent","indexOf","IS_IE6","IS_IE11","match","IS_EDGE","IS_QUIRKS","document","documentMode","IS_EM","createElement","VML_PREFIX","OFFICE_PREFIX","IS_NS","IS_OP","IS_OT","IS_SF","IS_IOS","IS_GC","IS_CHROMEAPP","window","chrome","app","runtime","IS_FF","IS_MT","IS_SVG","NO_FO","createElementNS","IS_VML","appName","toUpperCase","IS_WIN","appVersion","IS_MAC","IS_TOUCH","documentElement","IS_POINTER","PointerEvent","IS_LOCAL","location","href","defaultBundles","isBrowserSupported","link","rel","doc","write","setAttribute","head","getElementsByTagName","appendChild","loadResources","fn","lan","pending","length","callback","i","mxResources","add","include","src","mxLoadResources","mxForceIncludes","mxResourceExtension","mxLoadStylesheets","mxBasePath","substring","basePath","mxImageBasePath","imageBasePath","mxLanguage","language","userLanguage","mxDefaultLanguage","defaultLanguage","mxLanguages","languages","namespaces","styleSheets","node","type","styleSheet","cssText","createStyleSheet","mxLog","consoleName","TRACE","DEBUG","WARN","buffer","init","body","title","table","tbody","tr","td","style","verticalAlign","textarea","height","resize","value","compatMode","width","addButton","evt","info","content","mxUtils","getInnerHtml","debug","copy","err","alert","popup","h","w","innerHeight","innerWidth","clientHeight","clientWidth","mxWindow","Math","max","setMaximizable","setScrollable","setResizable","setClosable","destroyOnClose","elt","getElement","resizeHandler","sender","offsetHeight","addListener","mxEvent","RESIZE_END","MAXIMIZE","NORMALIZE","writeln","toString","lab","funct","button","isVisible","show","setVisible","visible","enter","string","Date","getTime","leave","t0","dt","apply","this","arguments","warn","visibility","scrollTop","scrollHeight","mxObjectIdentity","FIELD_NAME","counter","get","obj","ctor","getFunctionName","constructor","clear","mxDictionary","prototype","map","key","id","put","previous","remove","getKeys","result","push","getValues","visit","visitor","resources","extension","resourcesEncoded","loadDefaultBundle","loadSpecialBundle","isLanguageSupported","getDefaultBundle","basename","getSpecialBundle","dash","toLowerCase","mxConstants","NONE","defaultBundle","specialBundle","req","parse","getText","load","isReady","e","text","lines","split","charAt","index","idx","charCodeAt","replace","unescape","params","defaultValue","replacePlaceholders","c","parseInt","join","mxPoint","x","y","mxRectangle","call","equals","clone","setRect","getCenterX","getCenterY","rect","minX","min","minY","maxX","maxY","intersect","r1","r2","b1","b2","grow","amount","getPoint","rotate90","t","tmp","fromRectangle","mxEffects","animateChanges","graph","changes","done","maxStep","step","animate","isRequired","change","mxGeometryChange","mxTerminalChange","mxValueChange","mxChildChange","mxStyleChange","state","getView","getState","cell","child","model","isEdge","setOpacity","shape","scale","dx","geometry","dy","sx","sy","cellRenderer","redraw","cascadeOpacity","setTimeout","delay","opacity","childCount","getChildCount","getChildAt","childState","edges","getEdges","edgeState","fadeOut","from","isEnabled","f","parentNode","removeChild","errorResource","closeResource","errorImage","removeCursors","element","cursor","children","childNodes","getCurrentStyle","currentStyle","getComputedStyle","parseCssNumber","parseFloat","isNaN","setPrefixedStyle","prefix","name","hasScrollbars","overflow","bind","scope","eval","expr","_mxJavaScriptExpression","message","findNode","attr","nodeType","NODETYPE_ELEMENT","getAttribute","firstChild","nextSibling","str","trim","test","ltrim","idx2","array","forEach","splice","isNode","nodeName","attributeName","attributeValue","isAncestorNode","ancestor","parent","getChildNodes","importNode","allChildren","newNode","attributes","createTextNode","createXmlDocument","implementation","createDocument","ActiveXObject","parseXml","DOMParser","xml","parser","parseFromString","async","validateOnParse","resolveExternals","loadXML","clearSelection","selection","empty","getSelection","removeAllRanges","getPrettyXml","tab","indent","NODETYPE_TEXT","getTextContent","htmlEntities","attrs","val","removeWhitespace","before","previousSibling","next","s","newline","String","isVml","tagUrn","getXml","linefeed","XMLSerializer","xmlSerializer","serializeToString","extractTextWithWhitespace","elems","blocks","ret","doExtract","elts","innerHTML","elem","nodeValue","replaceTrailingNewlines","pattern","postfix","undefined","innerText","textContent","setTextContent","serializer","getOuterHtml","outerHTML","ownerDocument","br","count","label","para","p","addTransparentBackgroundFilter","filter","linkAction","editor","action","pad","execute","linkInvoke","functName","arg","a","color","textDecoration","paddingLeft","fit","left","offsetLeft","offsetWidth","offset","getDocumentScrollOrigin","sl","st","b","d","right","top","offsetTop","bottom","url","mxXmlRequest","send","onload","onerror","binary","timeout","ontimeout","setBinary","getAll","urls","remain","errors","status","getStatus","post","submit","target","simulate","loadInto","onreadystatechange","readyState","addEventListener","getValue","getNumber","Number","getColor","transients","shallow","equalPoints","equalEntries","removeDuplicates","arr","dict","extend","superCtor","output","toRadians","deg","PI","toDegree","rad","arcToCurves","x0","y0","angle","largeArcFlag","sweepFlag","fS","psai","abs","sds","ctx","cty","cpsi","cos","spsi","sin","rxd","ryd","rxdd","rydd","r1x","r2y","lamda","sqrt","seif","txd","tyd","tx","ty","atan2","s1","dr","sse","seg","ceil","segr","cpsir1","cpsir2","spsir1","spsir2","mc","ms","x2","y2","x3","y3","n","getBoundingBox","rotation","cx","p1","p2","p3","p4","getRotatedPoint","pt","x1","y1","getPortConstraints","terminal","edge","source","STYLE_PORT_CONSTRAINT","STYLE_SOURCE_PORT_CONSTRAINT","STYLE_TARGET_PORT_CONSTRAINT","directions","returnValue","DIRECTION_MASK_NONE","constraintRotationEnabled","STYLE_PORT_CONSTRAINT_ROTATION","STYLE_ROTATION","quad","DIRECTION_NORTH","DIRECTION_MASK_NORTH","DIRECTION_MASK_EAST","DIRECTION_MASK_SOUTH","DIRECTION_MASK_WEST","DIRECTION_WEST","DIRECTION_SOUTH","DIRECTION_EAST","reversePortConstraints","constraint","findNearestSegment","absolutePoints","last","current","dist","ptSegDistSq","getDirectedBounds","m","flipH","flipV","STYLE_DIRECTION","STYLE_FLIPH","STYLE_FLIPV","round","m2","getPerimeterPoint","pts","center","point","intersection","ip","distSq","rectangleIntersectsSegment","bounds","contains","intersects","tw","th","rw","rh","rx","ry","intersectsHotspot","hotspot","cy","start","STYLE_STARTSIZE","view","STYLE_HORIZONTAL","alpha","getOffset","container","scrollOffset","fixed","position","r","getBoundingClientRect","scrollLeft","wnd","defaultView","parentWindow","pageXOffset","pageYOffset","getScrollOrigin","includeAncestors","includeDocument","origin","convertPoint","chars","RegExp","rtrim","isNumeric","isFinite","isInteger","mod","denom","nume_a","nume_b","ua","ub","px","py","projlenSq","dotprod","lenSq","ptLineDist","relativeCcw","ccw","createImage","imageNode","borderStyle","sortCells","cells","ascending","lookup","sort","o1","o2","mxCellPath","create","PATH_SEPARATOR","comp","compare","getStylename","pairs","stylename","getStylenames","indexOfStylename","tokens","pos","addStylename","removeStylename","removeAllStylenames","setCellStyles","beginUpdate","setStyle","getStyle","endUpdate","isValue","sep","setCellStyleFlags","flag","setStyleFlag","cont","getAlignmentAsPoint","align","valign","ALIGN_CENTER","ALIGN_RIGHT","ALIGN_MIDDLE","ALIGN_BOTTOM","getSizeForString","fontSize","fontFamily","textWidth","DEFAULT_FONTSIZE","DEFAULT_FONTFAMILY","div","lineHeight","LINE_HEIGHT","display","zoom","whiteSpace","size","getViewXml","getModel","getRoot","eventsEnabled","isEventsEnabled","setEventsEnabled","drawPane","overlayPane","dialect","DIALECT_SVG","NS_SVG","canvas","cloneNode","translate","getTranslate","temp","mxTemporaryCellStates","enc","mxCodec","encode","destroy","getScaleForPageCount","pageCount","pageFormat","border","PAGE_FORMAT_A4_PORTRAIT","availablePageWidth","availablePageHeight","graphBounds","getGraphBounds","sc","getScale","graphWidth","graphHeight","pageFormatAspectRatio","graphAspectRatio","pagesAspectRatio","pageRoot","pagesAspectRatioSqrt","numRowPages","numColumnPages","scaleChange","currentTotalPages","numLoops","roundRowDownProportion","floor","roundColumnDownProportion","posterWidth","open","html","base","close","links","styles","outer","svg","ownerSVGElement","minWidth","minHeight","printScreen","print","focus","isInternalWindow","pre","prompt","confirm","error","icon","padding","img","makeDraggable","graphF","dragElement","autoscroll","scalePreview","highlightDropTargets","getDropTarget","dragSource","mxDragSource","dragOffset","TOOLTIP_VERTICAL_OFFSET","setGuidesEnabled","getGraphForEvent","createDragElement","createPreviewElement","DEFAULT_HOTSPOT","MIN_HOTSPOT_SIZE","MAX_HOTSPOT_SIZE","RENDERING_HINT_EXACT","RENDERING_HINT_FASTER","RENDERING_HINT_FASTEST","DIALECT_VML","DIALECT_MIXEDHTML","DIALECT_PREFERHTML","DIALECT_STRICTHTML","NS_XHTML","NS_XLINK","SHADOWCOLOR","VML_SHADOWCOLOR","SHADOW_OFFSET_X","SHADOW_OFFSET_Y","SHADOW_OPACITY","NODETYPE_ATTRIBUTE","NODETYPE_CDATA","NODETYPE_ENTITY_REFERENCE","NODETYPE_ENTITY","NODETYPE_PROCESSING_INSTRUCTION","NODETYPE_COMMENT","NODETYPE_DOCUMENT","NODETYPE_DOCUMENTTYPE","NODETYPE_DOCUMENT_FRAGMENT","NODETYPE_NOTATION","DEFAULT_VALID_COLOR","DEFAULT_INVALID_COLOR","OUTLINE_HIGHLIGHT_COLOR","OUTLINE_HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_STROKEWIDTH","HIGHLIGHT_SIZE","HIGHLIGHT_OPACITY","CURSOR_MOVABLE_VERTEX","CURSOR_MOVABLE_EDGE","CURSOR_LABEL_HANDLE","CURSOR_TERMINAL_HANDLE","CURSOR_BEND_HANDLE","CURSOR_VIRTUAL_BEND_HANDLE","CURSOR_CONNECT","HIGHLIGHT_COLOR","CONNECT_TARGET_COLOR","INVALID_CONNECT_TARGET_COLOR","DROP_TARGET_COLOR","VALID_COLOR","INVALID_COLOR","EDGE_SELECTION_COLOR","VERTEX_SELECTION_COLOR","VERTEX_SELECTION_STROKEWIDTH","EDGE_SELECTION_STROKEWIDTH","VERTEX_SELECTION_DASHED","EDGE_SELECTION_DASHED","GUIDE_COLOR","GUIDE_STROKEWIDTH","OUTLINE_COLOR","OUTLINE_STROKEWIDTH","HANDLE_SIZE","LABEL_HANDLE_SIZE","HANDLE_FILLCOLOR","HANDLE_STROKECOLOR","LABEL_HANDLE_FILLCOLOR","CONNECT_HANDLE_FILLCOLOR","LOCKED_HANDLE_FILLCOLOR","OUTLINE_HANDLE_FILLCOLOR","OUTLINE_HANDLE_STROKECOLOR","DEFAULT_TEXT_DIRECTION","WORD_WRAP","ABSOLUTE_LINE_HEIGHT","DEFAULT_FONTSTYLE","DEFAULT_STARTSIZE","DEFAULT_MARKERSIZE","DEFAULT_IMAGESIZE","ENTITY_SEGMENT","RECTANGLE_ROUNDING_FACTOR","LINE_ARCSIZE","ARROW_SPACING","ARROW_WIDTH","ARROW_SIZE","PAGE_FORMAT_A4_LANDSCAPE","PAGE_FORMAT_LETTER_PORTRAIT","PAGE_FORMAT_LETTER_LANDSCAPE","STYLE_PERIMETER","STYLE_SOURCE_PORT","STYLE_TARGET_PORT","STYLE_OPACITY","STYLE_FILL_OPACITY","STYLE_STROKE_OPACITY","STYLE_TEXT_OPACITY","STYLE_TEXT_DIRECTION","STYLE_OVERFLOW","STYLE_ORTHOGONAL","STYLE_EXIT_X","STYLE_EXIT_Y","STYLE_EXIT_PERIMETER","STYLE_ENTRY_X","STYLE_ENTRY_Y","STYLE_ENTRY_PERIMETER","STYLE_WHITE_SPACE","STYLE_FILLCOLOR","STYLE_POINTER_EVENTS","STYLE_SWIMLANE_FILLCOLOR","STYLE_MARGIN","STYLE_GRADIENTCOLOR","STYLE_GRADIENT_DIRECTION","STYLE_STROKECOLOR","STYLE_SEPARATORCOLOR","STYLE_STROKEWIDTH","STYLE_ALIGN","STYLE_VERTICAL_ALIGN","STYLE_LABEL_WIDTH","STYLE_LABEL_POSITION","STYLE_VERTICAL_LABEL_POSITION","STYLE_IMAGE_ASPECT","STYLE_IMAGE_ALIGN","STYLE_IMAGE_VERTICAL_ALIGN","STYLE_GLASS","STYLE_IMAGE","STYLE_IMAGE_WIDTH","STYLE_IMAGE_HEIGHT","STYLE_IMAGE_BACKGROUND","STYLE_IMAGE_BORDER","STYLE_NOLABEL","STYLE_NOEDGESTYLE","STYLE_LABEL_BACKGROUNDCOLOR","STYLE_LABEL_BORDERCOLOR","STYLE_LABEL_PADDING","STYLE_INDICATOR_SHAPE","STYLE_INDICATOR_IMAGE","STYLE_INDICATOR_COLOR","STYLE_INDICATOR_STROKECOLOR","STYLE_INDICATOR_GRADIENTCOLOR","STYLE_INDICATOR_SPACING","STYLE_INDICATOR_WIDTH","STYLE_INDICATOR_HEIGHT","STYLE_INDICATOR_DIRECTION","STYLE_SHADOW","STYLE_SEGMENT","STYLE_ENDARROW","STYLE_STARTARROW","STYLE_ENDSIZE","STYLE_SWIMLANE_LINE","STYLE_ENDFILL","STYLE_STARTFILL","STYLE_DASHED","STYLE_DASH_PATTERN","STYLE_FIX_DASH","STYLE_ROUNDED","STYLE_CURVED","STYLE_ARCSIZE","STYLE_ABSOLUTE_ARCSIZE","STYLE_SOURCE_PERIMETER_SPACING","STYLE_TARGET_PERIMETER_SPACING","STYLE_PERIMETER_SPACING","STYLE_SPACING","STYLE_SPACING_TOP","STYLE_SPACING_LEFT","STYLE_SPACING_BOTTOM","STYLE_SPACING_RIGHT","STYLE_ANCHOR_POINT_DIRECTION","STYLE_ELBOW","STYLE_FONTCOLOR","STYLE_FONTFAMILY","STYLE_FONTSIZE","STYLE_FONTSTYLE","STYLE_ASPECT","STYLE_AUTOSIZE","STYLE_FOLDABLE","STYLE_EDITABLE","STYLE_BACKGROUND_OUTLINE","STYLE_BENDABLE","STYLE_MOVABLE","STYLE_RESIZABLE","STYLE_RESIZE_WIDTH","STYLE_RESIZE_HEIGHT","STYLE_ROTATABLE","STYLE_CLONEABLE","STYLE_DELETABLE","STYLE_SHAPE","STYLE_EDGE","STYLE_JETTY_SIZE","STYLE_SOURCE_JETTY_SIZE","STYLE_TARGET_JETTY_SIZE","STYLE_LOOP","STYLE_ORTHOGONAL_LOOP","STYLE_ROUTING_CENTER_X","STYLE_ROUTING_CENTER_Y","FONT_BOLD","FONT_ITALIC","FONT_UNDERLINE","SHAPE_RECTANGLE","SHAPE_ELLIPSE","SHAPE_DOUBLE_ELLIPSE","SHAPE_RHOMBUS","SHAPE_LINE","SHAPE_IMAGE","SHAPE_ARROW","SHAPE_ARROW_CONNECTOR","SHAPE_LABEL","SHAPE_CYLINDER","SHAPE_SWIMLANE","SHAPE_CONNECTOR","SHAPE_ACTOR","SHAPE_CLOUD","SHAPE_TRIANGLE","SHAPE_HEXAGON","ARROW_CLASSIC","ARROW_CLASSIC_THIN","ARROW_BLOCK","ARROW_BLOCK_THIN","ARROW_OPEN","ARROW_OPEN_THIN","ARROW_OVAL","ARROW_DIAMOND","ARROW_DIAMOND_THIN","ALIGN_LEFT","ALIGN_TOP","TEXT_DIRECTION_DEFAULT","TEXT_DIRECTION_AUTO","TEXT_DIRECTION_LTR","TEXT_DIRECTION_RTL","DIRECTION_MASK_ALL","ELBOW_VERTICAL","ELBOW_HORIZONTAL","EDGESTYLE_ELBOW","EDGESTYLE_ENTITY_RELATION","EDGESTYLE_LOOP","EDGESTYLE_SIDETOSIDE","EDGESTYLE_TOPTOBOTTOM","EDGESTYLE_ORTHOGONAL","EDGESTYLE_SEGMENT","PERIMETER_ELLIPSE","PERIMETER_RECTANGLE","PERIMETER_RHOMBUS","PERIMETER_HEXAGON","PERIMETER_TRIANGLE","mxEventObject","properties","mxMouseEvent","sourceState","mxEventSource","eventSource","setEventSource","consumed","getName","getProperties","getProperty","isConsumed","consume","graphX","graphY","getEvent","getSource","isSource","getX","getClientX","getY","getClientY","getGraphX","getGraphY","getCell","isPopupTrigger","preventDefault","eventListeners","getEventSource","removeListener","fireEvent","args","listen","updateListenerList","eventName","mxListenerList","entry","attachEvent","updateListener","listenerCount","removeEventListener","detachEvent","removeAllListeners","list","addGestureListeners","startListener","moveListener","endListener","removeGestureListeners","redirectMouseEvents","down","move","up","dblClick","fireMouseEvent","MOUSE_DOWN","MOUSE_MOVE","MOUSE_UP","release","addMouseWheelListener","wheelHandler","event","delta","detail","wheelDelta","disableContextMenu","srcElement","isTouchEvent","pointerType","MSPOINTER_TYPE_TOUCH","mozInputSource","isPenEvent","MSPOINTER_TYPE_PEN","isMultiTouchEvent","touches","isMouseEvent","MSPOINTER_TYPE_MOUSE","isLeftMouseButton","buttons","which","isMiddleMouseButton","isRightMouseButton","isControlDown","isShiftDown","isMetaDown","isAltDown","shiftKey","altKey","ctrlKey","metaKey","getMainEvent","changedTouches","clientX","clientY","stopPropagation","cancelBubble","LABEL_HANDLE","ROTATION_HANDLE","CUSTOM_HANDLE","VIRTUAL_HANDLE","ACTIVATE","RESIZE_START","RESIZE","MOVE_START","MOVE","MOVE_END","PAN_START","PAN","PAN_END","MINIMIZE","HIDE","SHOW","CLOSE","DESTROY","REFRESH","SIZE","SELECT","FIRED","FIRE_MOUSE_EVENT","GESTURE","TAP_AND_HOLD","GET","RECEIVE","CONNECT","DISCONNECT","SUSPEND","RESUME","MARK","ROOT","POST","OPEN","SAVE","BEFORE_ADD_VERTEX","ADD_VERTEX","AFTER_ADD_VERTEX","DONE","EXECUTE","EXECUTED","BEGIN_UPDATE","START_EDIT","END_UPDATE","END_EDIT","BEFORE_UNDO","UNDO","REDO","CHANGE","NOTIFY","LAYOUT_CELLS","CLICK","SCALE","TRANSLATE","SCALE_AND_TRANSLATE","UP","DOWN","ADD","REMOVE","CLEAR","ADD_CELLS","CELLS_ADDED","MOVE_CELLS","CELLS_MOVED","RESIZE_CELLS","CELLS_RESIZED","TOGGLE_CELLS","CELLS_TOGGLED","ORDER_CELLS","CELLS_ORDERED","REMOVE_CELLS","CELLS_REMOVED","GROUP_CELLS","UNGROUP_CELLS","REMOVE_CELLS_FROM_PARENT","FOLD_CELLS","CELLS_FOLDED","ALIGN_CELLS","LABEL_CHANGED","CONNECT_CELL","CELL_CONNECTED","SPLIT_EDGE","FLIP_EDGE","START_EDITING","EDITING_STARTED","EDITING_STOPPED","ADD_OVERLAY","REMOVE_OVERLAY","UPDATE_CELL_SIZE","ESCAPE","DOUBLE_CLICK","START","RESET","method","username","password","withCredentials","request","decodeSimulateValues","isBinary","responseText","getDocumentElement","responseXML","XMLHttpRequest","overrideMimeType","onreadystatechaange","setRequestHeaders","setRequestHeader","old","onbeforeunload","form","pars","decodeURIComponent","mxClipboard","STEPSIZE","insertCount","setCells","getCells","isEmpty","cut","removeCells","getSelectionCells","getExportableCells","getTopmostCells","cloneCells","paste","getImportableCells","getDefaultParent","importCells","setSelectionCells","minimizable","movable","replaceNode","installMaximizeHandler","installMinimizeHandler","installCloseHandler","setMinimizable","setTitle","installMoveHandler","replaceChild","mxForm","className","mxImage","mxDivResizer","resizeWidth","resizeHeight","handlingResize","dropHandler","mouseDown","eventConsumer","evtName","me","mxToolbar","mxUndoableEdit","significant","mxUndoManager","closeImage","minimizeImage","normalizeImage","maximizeImage","resizeImage","minimumSize","contentHeightCorrection","touchAction","contentWrapper","activator","activate","hide","scrollable","activeWindow","zIndex","previousWindow","isResizable","resizable","startX","startY","dragHandler","setSize","minimize","getMinimumSize","marginLeft","minimized","maxDisplay","maximize","minSize","maximizable","maximized","minDisplay","docHeight","setLocation","closeImg","setImage","image","marginRight","marginTop","insertBefore","closable","getTable","addButtons","okFunct","cancelFunct","addText","input","addField","addCheckbox","checked","addTextarea","rows","addCombo","isMultiSelect","select","addOption","combo","isSelected","option","getDocumentWidth","getDocumentHeight","l","previewElement","enabled","currentGraph","currentDropTarget","currentPoint","currentGuide","currentHighlight","guidesEnabled","gridEnabled","dragElementZIndex","dragElementOpacity","checkEventSource","setEnabled","isGuidesEnabled","isGridEnabled","setGridEnabled","getCellAt","isActive","mouseMoveHandler","reset","dragExit","removeDragElement","removeListeners","stopDrag","startDrag","mouseMove","mouseUpHandler","mouseUp","pointerEvents","getElementForEvent","elementFromPoint","graphContainsEvent","dragEnter","dragOver","drop","isMouseDown","isMouseTrigger","mxGuide","graphHandler","getGuideStates","mxCellHighlight","panDx","panDy","autoScroll","scrollPointToVisible","autoExtend","isDropEnabled","highlight","isGridEnabledEvent","hideGuide","isEnabledForEvent","off","gridSize","snap","previewOffset","dropTarget","noReset","updateDefaultMode","addItem","pressedIcon","factoryMethod","initialClassName","mouseHandler","backgroundColor","menu","mxPopupMenu","currentImg","isMenuShowing","hideMenu","addActionCombo","options","selectedIndex","addSwitchMode","altIcon","selectedMode","defaultMode","selectMode","addMode","toggle","defaultFunction","domNode","resetMode","forced","addSeparator","addBreak","addLine","hr","undone","redone","isSignificant","notify","die","undo","redo","history","indexOfNextAdd","canUndo","edit","canRedo","undoableEditHappened","undoableEdit","shift","edits","mxUrlConverter","mxPanningManager","thread","active","tdx","tdy","t0x","t0y","scrollbars","mouseListener","stop","addMouseListener","mouseUpListener","createThread","setInterval","panGraph","getDx","getDy","panTo","handleMouseOut","damper","clearInterval","setTranslate","removeMouseListener","mxAutoSaveManager","changeHandler","graphModelChanged","setGraph","mxAnimation","mxMorphing","steps","ease","mxImageBundle","alt","images","mxImageExport","mxAbstractCanvas2D","converter","createUrlConverter","mxXmlCanvas2D","root","writeDefaults","mxSvgCanvas2D","styleEnabled","gradients","defs","createStyle","baseUrl","baseDomain","updateBaseUrl","protocol","host","pathname","lastIndexOf","getBaseUrl","setBaseUrl","getBaseDomain","setBaseDomain","isRelativeUrl","convert","submenuImage","useLeftButtonForPopup","itemCount","autoExpand","smartSeparators","labels","iconCls","willAddSeparator","containsItems","col1","col2","col3","paddingRight","textAlign","createSubmenu","currentSelection","eventReceiver","activeRow","hideSubmenu","showSubmenu","createRange","addCheckmark","item","backgroundImage","backgroundRepeat","backgroundPosition","row","force","showMenu","autoSaveDelay","autoSaveThrottle","autoSaveThreshold","ignoredChanges","lastSnapshot","save","now","isRunning","startAnimation","updateAnimation","stopAnimation","mxCellStatePreview","animateCell","recurse","getDelta","isVertex","moveState","stopRecursion","getOriginForCell","getParent","geo","getCellGeometry","relative","pgeo","putImage","fallback","getImage","includeOverlays","drawState","visitStatesRecursive","drawCellState","drawOverlays","getLinkForCellState","setLink","drawShape","drawText","mxShape","checkBounds","paint","restore","overlays","states","path","rotateHtml","lastX","lastY","moveOp","lineOp","quadOp","curveOp","closeOp","createState","fillAlpha","strokeAlpha","fillColor","gradientFillAlpha","gradientColor","gradientAlpha","gradientDirection","strokeColor","strokeWidth","dashed","dashPattern","fixDash","lineCap","lineJoin","miterLimit","fontColor","fontBackgroundColor","fontBorderColor","fontStyle","shadow","shadowColor","shadowAlpha","shadowDx","shadowDy","rotationCx","rotationCy","format","addOp","rotatePoint","theta","pop","rotate","setAlpha","setFillAlpha","setStrokeAlpha","setFillColor","setGradient","color1","color2","direction","alpha1","alpha2","setStrokeColor","setStrokeWidth","setDashed","setDashPattern","setLineCap","setLineJoin","setMiterLimit","setFontColor","setFontBackgroundColor","setFontBorderColor","setFontSize","setFontFamily","setFontStyle","setShadow","setShadowColor","setShadowAlpha","setShadowOffset","begin","moveTo","lineTo","quadTo","curveTo","arcTo","curves","end","textEnabled","compressed","toFixed","roundrect","ellipse","aspect","wrap","clip","dir","stroke","fill","fillAndStroke","useDomParser","matchHtmlAlignment","foEnabled","foAltText","foOffset","textOffset","imageOffset","strokeTolerance","minStrokeWidth","refCount","blockImagePointerEvents","lineHeightCorrection","pointerEventsValue","fontMetricsPadding","cacheOffsetSize","hash","tagName","namespace","createAlternateContent","fo","createGradientId","getSvgGradient","gradient","tmpId","getElementById","createSvgGradient","op","addNode","filled","stroked","updateFill","updateStroke","transform","createShadow","createTolerance","originalRoot","IS_CHROME_APP","getCurrentStrokeWidth","sw","updateStrokeAttributes","createDashPattern","pat","tol","removeAttribute","setAttributeNS","convertHtml","xd","xb","adoptNode","ta","createDiv","lh","css","invalidateCachedOffsetSize","mxCachedOffsetWidth","mxCachedFinalOffsetWidth","mxCachedFinalOffsetHeight","updateText","group","maxHeight","maxWidth","ow","oh","padX","sizeDiv","padY","wordWrap","ws","div2","padDx","plainText","createClip","updateFont","anchor","textHeight","addTextBackground","bbox","getBBox","ie","fontWeight","mxVmlCanvas2D","setStates","mxStencil","desc","parseDescription","parseConstraints","stencil","initStyles","rotatedHtmlBackground","vmlScale","createVmlElement","coordsize","strokeweight","strokecolor","createStroke","createFill","createTransparentFill","flip","endcap","joinstyle","miterlimit","dashstyle","getVmlDashStyle","tok","createShadowStroke","createShadowFill","cpx0","cpy0","qpx1","qpy1","cpx3","cpy3","cpx1","cpy1","cpx2","cpy2","createRect","box","margin","inner","rot","real_cos","real_sin","top_fix","left_fix","divParent","textpathok","v","tp","on","horizontal","vertical","guideX","guideY","getGuideTolerance","createGuideShape","guide","mxPolyline","isDashed","trx","overrideX","stateX","valueX","overrideY","stateY","valueY","tt","ttX","ttY","middle","snapX","override","getOverlayPane","snapY","points","getGuideColor","scrollWidth","defaultLocalized","allowEval","constraints","w0","h0","bgNode","fgNode","strokewidth","conns","parseConstraint","perimeter","mxConnectionConstraint","evaluateTextAttribute","attribute","evaluateAttribute","loc","computeAspect","minScale","drawChildren","outline","disableShadow","drawNode","inverse","childNode","arcsize","factor","mxStencilRegistry","getStencil","antiAlias","minSvgStrokeWidth","boundingBox","svgStrokeTolerance","svgPointerEvents","shapePointerEvents","stencilPointerEvents","useSvgBoundingBox","fillOpacity","strokeOpacity","isParseVml","isHtmlAllowed","getSvgScreenOffset","createSvg","createHtml","createVml","reconfigure","updateBoundsFromPoints","redrawShape","redrawHtmlShape","updateBoundingBox","lastChild","getLabelBounds","isPaintBoundsInverted","getLabelMargins","createVmlGroup","createCanvas","insertAdjacentHTML","destroyCanvas","createSvgCanvas","updateVmlContainer","createVmlCanvas","updateHtmlBounds","updateHtmlFilters","updateHtmlColors","isShadow","east","south","west","north","borderColor","borderWidth","setTransparentBackgroundImage","mxRefCount","releaseSvgGradients","oldGradients","strokeDrawn","updateTransform","configureCanvas","bg","bb","createBoundingBox","createTransparentSvgRectangle","paintEdgeShape","paintVertexShape","getGradientBounds","getShapeRotation","paintBackground","paintForeground","getArcSize","paintGlassEffect","arc","isRounded","addPoints","rounded","arcSize","exclude","initialMove","pe","slice","p0","wp","nx1","ny1","nx2","ny2","resetStyles","spacing","startSize","endSize","startArrow","endArrow","glass","setCursor","getCursor","isRoundable","augmentBoundingBox","getRotation","getTextRotation","mxText","verticalTextRotation","grads","stencils","addStencil","mxMarker","markers","addMarker","createMarker","unitX","unitY","mxActor","mxCloud","mxRectangleShape","mxEllipse","mxDoubleEllipse","mxRhombus","mxArrow","arrowWidth","mxArrowConnector","arrowSpacing","family","spacingTop","spacingRight","spacingBottom","spacingLeft","background","clipped","labelPadding","textDirection","updateMargin","mxTriangle","mxHexagon","mxLine","mxImageShape","mxLabel","mxCylinder","mxConnector","mxSwimlane","mxGraphLayout","WeightedCellSorter","weightedValue","mxStackLayout","mxPartitionLayout","mxCompactTreeLayout","invert","mxRadialTreeLayout","mxFastOrganicLayout","mxCircleLayout","radius","mxParallelEdgeLayout","mxCompositeLayout","layouts","master","mxEdgeLabelLayout","mxGraphAbstractHierarchyCell","mxGraphHierarchyNode","connectsAsTarget","connectsAsSource","mxGraphHierarchyEdge","ids","mxGraphHierarchyModel","layout","vertices","roots","tightenToSource","getGraph","vertexMapper","edgeMapper","maxRank","internalVertices","getChildVertices","SOURCESCANSTARTRANK","createInternalCells","j","internalEdge","realEdges","realEdge","targetCell","getVisibleTerminal","internalTargetCell","mxSwimlaneModel","mxHierarchicalLayoutStage","mxMedianHybridCrossingReduction","MedianCellSorter","mxMinimumCycleRemover","mxCoordinateAssignment","intraCellSpacing","interRankCellSpacing","orientation","initialX","parallelEdgeSpacing","mxSwimlaneOrdering","mxHierarchicalLayout","deterministic","createArrow","widthFactor","endOffsetX","endOffsetY","createOpenArrow","diamond","swFactor","tk","redrawPath","events","hw","hh","paintLine","paintCurvedLine","ix","iy","arrow","nx","ny","basex","basey","floorx","floory","p0x","p0y","p1x","p1y","p2x","p2y","p3x","p3y","p5x","p5y","getEdgeWidth","isMarkerStart","getStartArrowWidth","isMarkerEnd","getEndArrowWidth","startWidth","endWidth","edgeWidth","openEnded","isOpenEnded","markerStart","markerEnd","isArrowRounded","i0","orthx","orthy","fns","startNx","startNy","paintMarker","outStartX","outStartY","inEndX","inEndY","dx1","dy1","dist1","tmp1","dist2","strokeWidthFactor","angleFactor","outX","outY","inX","inY","c1x","c1y","c2x","c2y","inStartX","inStartY","ptX","ptY","widthArrowRatio","spaceX","spaceY","baseSpacingTop","baseSpacingBottom","baseSpacingLeft","baseSpacingRight","replaceLinefeeds","ignoreClippedStringSize","ignoreStringSize","textWidthPadding","lastValue","cacheEnabled","update","unscaledWidth","lastUnscaledWidth","realHtml","fmt","getAutoDirection","updateSize","textDiv","updateHtmlFilter","updateHtmlTransform","exec","updateInnerHtml","divs","unrotatedBoundingBox","updateValue","bd","enableWrap","prev","getSpacing","mid","preserveImageAspect","useVml","imageSize","indicatorSize","indicatorSpacing","indicatorShape","indicator","indicatorColor","indicatorStrokeColor","indicatorGradientColor","indicatorDirection","paintImage","paintIndicator","getImageBounds","getIndicatorBounds","indicatorImage","hasChildNodes","getCylinderSize","isForeground","sourceMarker","targetMarker","getTitleSize","isHorizontal","shapeVertical","realHorizontal","realFlipH","realFlipV","swimlaneLine","paintRoundedSwimlane","paintSwimlane","paintSeparator","paintDivider","useBoundingBox","moveCell","getConstraint","getCellStyle","traverse","vertex","directed","func","visited","edgeCount","getEdgeCount","getEdgeAt","getTerminal","isAncestor","traverseAncestors","isVertexMovable","isCellMovable","isVertexIgnored","isCellVisible","isEdgeIgnored","setEdgeStyleEnabled","setOrthogonalEdge","getParentOffset","parentGeo","getGeometry","setEdgePoints","mxGeometry","setRelative","parentOffset","setGeometry","setVertexLocation","getVertexBounds","dx0","dy0","arrangeGroups","topBorder","rightBorder","bottomBorder","leftBorder","updateGroupBounds","nudge","rankIndex","marginBottom","keepFirstLocation","resizeParent","resizeParentMax","resizeLast","borderCollapse","pstate","getIndex","getParentSize","isLayer","currentRoot","fillValue","isSwimlane","horz","childStyle","setChildGeometry","isCellCollapsed","updateParentGeometry","geo2","pgeo2","resizeVertices","other","getStartSize","maintainParentLocation","groupPadding","groupPaddingTop","groupPaddingRight","groupPaddingBottom","groupPaddingLeft","parentsChanged","moveTree","levelDistance","nodeDistance","resetEdges","prefHozEdgeSep","prefVertEdgeOff","minEdgeJetty","channelBuffer","edgeRouting","sortEdges","alignRanks","maxRankHeight","getConnections","findTreeRoots","Object","parentX","parentY","dfs","findRankHeights","setCellHeights","g","horizontalLayout","verticalLayout","moveNode","adjustParents","localEdgeProcessing","sortOutgoingEdges","e1","e2","end1","end2","rank","createNode","out","attachParent","layoutLeaf","offsetX","offsetY","siblingOffset","contour","upperHead","createLine","lowerHead","upperTail","lowerTail","sum","merge","total","upper","lower","bridge","a1","a2","line1","line2","line","processNodeOutgoing","parentCell","sortedCells","sortingCriterion","availableWidth","requiredWidth","edgeSpacing","currentXOffset","currentYOffset","maxYOffset","parentBounds","childCell","childBounds","getEdgesBetween","newPoints","angleOffset","rootx","rooty","autoRadius","rowMinX","rowMaxX","rowMinCenX","rowMaxCenX","rowRadi","rootBounds","centerX","centerY","vertexBounds","calcRowDims","maxLeftGrad","maxRightGrad","leftGrad","rightGrad","xLeftLimit","xRightLimit","fullWidth","xProportion","totalTheta","averTheta","nextTheta","lastTheta","rowNum","rowHasChildren","useInputOrigin","disableEdgeStyle","forceConstant","forceConstantSquared","minDistanceLimit","maxDistanceLimit","minDistanceLimitSquared","initialTemp","temperature","maxIterations","iteration","vertexArray","dispX","dispY","cellLocation","radiusSquared","isMoveable","neighbours","indices","allowedToRun","initialBounds","getBoundingBoxFromGeometry","getOpposites","resetEdge","calcRepulsion","calcAttraction","calcPositions","reduceTemperature","minx","miny","moveCells","deltaLength","newXDisp","newYDisp","k","xDelta","yDelta","deltaLengthSquared","displacementX","displacementY","vertexCount","random","deltaLengthWithRadius","moveCircle","getRadius","circle","phi","findParallels","parallels","getEdgeId","trg","route","scx","scy","tcx","tcy","len","placeLabels","avoid","labRect","dy2","dx2","minRank","nextLayerConnectedCells","previousLayerConnectedCells","getNextLayerConnectedCells","layer","getPreviousLayerConnectedCells","getGeneralPurposeVariable","setGeneralPurposeVariable","setX","setY","hashCode","getRankValue","otherNode","getCoreCell","isReversed","ranks","dfsCount","undirectedEdges","directedEdges","initialRank","startNodes","internalNode","internalNodes","startNodesCopy","edgesToBeMarked","layerDeterminingEdges","allEdgesScanned","minimumLayer","removedCell","currentMaxLayer","fixRanks","rankList","rootsArray","oldRootsArray","seen","parentToCellRankDifference","dfsRoots","trackAncestors","seenNodes","extendedDfs","connectingEdge","rootId","outgoingEdges","targetNode","ancestors","childHash","hashCodeLength","ranksPerGroup","swimlanes","swimlaneIndex","ii","maxChainDfs","lowerRank","upperRank","chainCount","slIndex","incomingEdges","nestedBestRanks","currentBestCrossings","iterationsWithoutImprovement","maxNoImprovementIterations","calculateCrossings","weightedMedian","transpose","candidateCrossings","numRanks","totalCrossings","calculateRankCrossing","previousRank","tmpIndices","rankPosition","connectedCells","nodeIndices","connectedNode","otherCellRankPosition","concat","firstIndex","treeSize","tree","treeIndex","mainLoopIteration","improved","maxCount","orderedCells","tempRank","leftCellAboveConnections","leftCellBelowConnections","rightCellAboveConnections","rightCellBelowConnections","leftAbovePositions","leftBelowPositions","rightAbovePositions","rightBelowPositions","leftCell","rightCell","totalCurrentCrossings","totalSwitchedCrossings","ik","downwardSweep","medianRank","rankValue","numCellsForRank","medianValues","reservedPositions","nextLevelConnectedCells","nextRankValue","sorterEntry","medianValue","arrayCount","medianPoint","leftMedian","rightMedian","unseenNodesArray","unseenNodes","modelRoots","seenNodesCopy","jettyPositions","limitX","currentXDelta","widestRank","rankTopY","rankBottomY","widestRankValue","rankWidths","rankY","fineTuning","nextLayerConnectedCache","previousLayerConnectedCache","printStatus","initialCoords","minNode","bestXDelta","medianPos","minPath","setCellLocations","nodeList","nodeWrapper","maxTries","tolerance","cellWrapper","numNextLayerConnected","numPreviousLayerConnected","medianNextLevel","medianXValue","medianPreviousLevel","numConnectedNeighbours","currentPosition","cellMedian","positionChanged","leftLimit","rankSize","rightLimit","connectedCell","connectedCellWrapper","rankMedianPosition","weightedValues","cellMap","currentCell","calculatedWeightedValue","numConnectionsNextLevel","leftBuffer","rightBuffer","collection","totalWeight","facade","calculateWidestRank","rankCoordinates","localX","boundsWarning","numEdges","lastRankMaxCellHeight","maxCellHeight","distanceToNextRank","referenceX","edgeStraight","refSegCount","upSegCount","downSegCount","upXPositions","downXPositions","currentX","nextX","repositionValid","rankArray","MAX_VALUE","edgeStyle","mxHierarchicalEdgeStyle","ORTHOGONAL","POLYLINE","CURVE","setEdgePosition","cellIndex","currentCells","currentRank","sorter","connectedEdgeCount","connectedEdges","connections","innerCell","connIndex","connectedEdgeGroupCount","numActualEdges","parallelEdgeCount","jettys","layoutReversed","realSource","reversed","arrayOffset","jetty","modelSource","isPort","loopStart","loopLimit","loopDelta","positionX","topChannelY","bottomChannelY","modelTarget","realTarget","processReversedEdge","realCell","positionY","reversedOverSwimlane","cellId","STRAIGHT","mxSwimlaneLayout","mxGraphModel","currentEdit","createUndoableEdit","setRoot","mxRootChange","previousIndex","mxCollapseChange","collapsed","mxVisibleChange","mxCellAttributeChange","mxCell","onInit","moveParent","parentBorder","interHierarchySpacing","edgesCache","edgeSourceTermCache","edgesTargetTermCache","Array","rootsCopy","run","findRoots","best","maxDiff","fanOut","fanIn","diff","cachedEdges","isCollapsed","terminalCache","term","hierarchyVertices","allVertexSet","filledVertexSet","filterDescendants","filledVertexSetEmpty","candidateRoots","vertexSet","cycleStage","layeringStage","crossingStage","placementStage","allVertices","currentComp","vertexID","edgeIsSource","netCount","isSource2","otherTerm","dummyVertices","dummyVertexWidth","getChildCells","insertVertex","layoutBounds","lane","childrenY","maxChildrenY","newGeo","leftGroupBorder","isValidAncestor","laneCounter","otherVertex","otherIndex","maintainEdgeParent","ignoreRelativeEdgeParent","createIds","nextId","updateLevel","endingUpdate","createRoot","isCreateIds","setCreateIds","insert","filterCells","getDescendants","rootChanged","oldRoot","cellAdded","isRoot","parentChanged","updateEdgeParents","getId","setId","createId","collision","updateEdgeParent","getNearestCommonAncestor","origin1","getOrigin","origin2","cell1","cell2","getParentPath","cellRemoved","parentForCellChanged","oldIndex","getChildren","getChildEdges","setTerminal","terminalChanged","setTerminals","terminalForCellChanged","insertEdge","removeEdge","getDirectedEdgeCount","outgoing","ignoredEdge","getIncomingEdges","getOutgoingEdges","incoming","includeLoops","tmp2","directedMatch","oppositeMatch","sources","targets","terminals","topmost","isConnectable","setValue","valueForCellChanged","valueChanged","geometryForCellChanged","styleForCellChanged","setCollapsed","collapsedStateForCellChanged","visibleStateForCellChanged","mergeChildren","to","cloneAllEdges","mapping","mergeChildrenImpl","getParents","parents","cloneCell","includeChildren","clones","cloneCellImpl","restoreClone","ident","cellCloned","cloneChild","connect","isConnect","connectable","mxTransient","newValue","setVertex","setEdge","setConnectable","setParent","removeFromParent","getEdgeIndex","isOutgoing","removeFromTerminal","hasAttribute","userObject","cloneValue","TRANSLATE_CONTROL_POINTS","alternateBounds","sourcePoint","targetPoint","swap","getTerminalPoint","setTerminalPoint","ct","fixedAspect","resolve","t1","t2","mxPerimeter","RectanglePerimeter","orthogonal","pi","pi2","beta","tan","EllipsePerimeter","det","xout1","xout2","yout1","yout2","pow","xout","yout","RhombusPerimeter","TrianglePerimeter","corner","HexagonPerimeter","mxPrintPreview","pageSelector","pageScale","mxStylesheet","putDefaultVertexStyle","createDefaultVertexStyle","putDefaultEdgeStyle","createDefaultEdgeStyle","mxCellState","absoluteOffset","mxGraphSelectionModel","mxSelectionChange","selectionModel","added","removed","mxCellEditor","zoomHandler","isEditing","editingCell","stopEditing","mxCellRenderer","autoOrigin","printOverlays","printControls","printBackgroundImage","targetWindow","clipping","getWindow","getDoctype","appendGraph","forcePageBreaks","keepOpen","previousInitializeOverlay","initializeOverlay","overlay","getDrawPane","initControl","control","handleEvents","clickHandler","isNewWindow","writeHead","currentScale","availableHeight","hpages","vpages","writePageSelector","createPageSelector","addPage","pageBreakAfter","addPageBreak","cov","getCoverPages","apx","getAppendices","pageNum","renderPage","addGraphFragment","insertBackgroundImage","closeDocument","writePostfix","js","pageNumber","pageBreakInside","innerDiv","viewport","previousContainer","getCanvas","backgroundPane","getBackgroundPane","graphEnabled","tempClip","rendering","orig","svgs","getLinkForCell","putCellStyle","getDefaultVertexStyle","getDefaultEdgeStyle","defaultStyle","tmpStyle","invalid","visibleSourceState","visibleTargetState","terminalDistance","segments","getPerimeterBounds","setAbsoluteTerminalPoint","getVisibleTerminalState","setVisibleTerminalState","terminalState","getCellBounds","cellBounds","getPaintBounds","paintBounds","updateCachedBounds","setState","doneResource","updatingSelectionResource","singleSelection","isSingleSelection","setSingleSelection","changeSelection","setCell","getFirstSelectableCell","isCellSelectable","addCell","addCells","removeCell","trigger","modified","autoSize","selectText","emptyLabelText","escapeCancelsEditing","textNode","minResize","wordWrapPadding","blurEnabled","initialValue","contentEditable","isLegacyEditor","installListeners","applyValue","labelChanged","getInitialValue","getEditingValue","getCurrentValue","isCancelEditingKeyEvent","focusLost","isStopEditingEvent","keyCode","keypressHandler","clearOnChange","getEmptyLabelText","keyupHandler","resizeThread","clearTimeout","isEnterStopsCellEditing","isEventSource","lw","bds","hpos","vpos","legacySpacing","isWrapping","getEditorBounds","isInvokesStopCellEditing","getBackgroundColor","absoluteRoot","startEditing","tooltipHandler","hideTooltip","bold","italic","uline","isHideLabel","isSelectText","execCommand","cancel","initial","blur","prepareTextarea","getEditingCell","defaultShapes","defaultEdgeShape","defaultVertexShape","defaultTextShape","legacyControlPosition","forceControlClickHandler","registerShape","initializeShape","configureShape","createShape","getShapeConstructor","createIndicatorShape","getShape","getIndicatorShape","getIndicatorColor","getIndicatorGradientColor","getIndicatorImage","postConfigureShape","resolveColor","checkPlaceholderStyles","values","field","referenced","getSwimlane","swimlaneIndicatorColorAttribute","rstate","getLabelValue","getLabel","createLabel","isForceHtml","isHtmlLabel","getVerticalAlign","isLabelClipped","initializeLabel","forceGetCell","isLabelEvent","nativeDblClickEnabled","createCellOverlays","getCellOverlays","installCellOverlayListeners","createControl","getFoldingImage","foldingEnabled","createControlClickHandler","collapse","foldCells","innerNode","first","isShapeEvent","redrawLabel","wrapping","isTextShapeInvalid","nextScale","getTextScale","isClipping","vis","redrawLabelShape","check","property","dh","rotateLabelBounds","redrawCellOverlays","getBounds","redrawControl","getControlBounds","insertStateAfter","htmlNode","shapes","getShapesForState","shapeChanged","selectionCellsHandler","updateHandler","isShapeInvalid","doRedrawShape","mxEdgeStyle","EntityRelation","segment","isSourceLeft","sourceGeometry","isTargetLeft","targetGeometry","getRoutingCenterY","xe","ye","dep","midY","Loop","transformControlPoint","getRoutingCenterX","ElbowConnector","SideToSide","TopToBottom","SegmentConnector","hints","lastPushed","hint","pushPoint","lastInx","newHints","currentTerm","currentPt","hozChan","vertChan","currentHint","fixedVertAlign","fixedHozAlign","inHozChan","inVertChan","orthBuffer","orthPointsFallback","dirVectors","wayPoints1","routePatterns","inlineRoutePatterns","vertexSeperations","limits","LEFT_MASK","TOP_MASK","RIGHT_MASK","BOTTOM_MASK","LEFT","TOP","RIGHT","BOTTOM","SIDE_MASK","CENTER_MASK","SOURCE_MASK","TARGET_MASK","VERTEX_MASK","getJettySize","OrthConnector","sourceEdge","targetEdge","sourceX","sourceY","sourceWidth","sourceHeight","targetX","targetY","targetWidth","targetHeight","scaledSourceBuffer","scaledTargetBuffer","totalBuffer","tooShort","portConstraint","newRect","sourceCenX","sourceCenY","targetCenX","targetCenY","sourceTopDist","sourceLeftDist","sourceBottomDist","sourceRightDist","dirPref","horPref","vertPref","preferredHorizDist","preferredVertDist","prefOrdering","preferredOrderSet","sourceIndex","targetIndex","routePattern","currentIndex","lastOrientation","initialOrientation","currentOrientation","nextDirection","directionIndex","tar","sou","side","limit","souTar","deltaX","deltaY","targetOrientation","sameOrient","getRoutePattern","mxStyleRegistry","putValue","mxGraphView","mxCurrentRootChange","isUp","mxGraph","renderHint","stylesheet","mouseListeners","multiplicities","imageBundles","createCellRenderer","setSelectionModel","createSelectionModel","setStylesheet","createStylesheet","createGraphView","graphModelChangeListener","createHandlers","revalidate","mxCellOverlay","tooltip","mxOutline","mxMultiplicity","validNeighbors","countError","typeError","validNeighborsAllowed","mxLayoutManager","undoHandler","beforeUndo","moveHandler","cellsMoved","mxSwimlaneManager","addEnabled","resizeEnabled","addHandler","isAddEnabled","cellsAdded","isResizeEnabled","cellsResized","isCellVisibleFn","oldValidateCellState","validateCellState","oldBounds","oldStates","getStates","oldScale","oldDoRedrawShape","self","oldPaint","resurse","setScale","resetValidationState","validateCell","setGraphBounds","deltas","mxGraphHandler","panHandler","updatePreviewShape","updateHint","escapeHandler","refreshHandler","pBounds","getPreviewBounds","mxPanningHandler","forcePanningHandler","isForcePanningEvent","gestureHandler","eo","isPinchEnabled","initialScale","mouseDownEvent","maxScale","zoomTo","mxPopupMenuHandler","inTolerance","mxCellMarker","validColor","invalidColor","mxSelectionCellsHandler","handlers","refresh","getSelectionModel","mxConnectionHandler","mxConstraintHandler","resetHandler","currentFocus","mxRubberband","forceRubberbandHandler","isForceRubberbandEvent","repaint","mxHandle","mxVertexHandler","livePreview","invalidate","validate","mxEdgeHandler","dirty","isRendering","mxElbowEdgeHandler","mxEdgeSegmentHandler","mxKeyHandler","normalKeys","shiftKeys","controlKeys","controlShiftKeys","keydownHandler","keyDown","mxTooltipHandler","mxCellTracker","highlightColor","repaintHandler","mxDefaultKeyHandler","handler","escape","hideProperties","mxDefaultPopupMenu","config","mxDefaultToolbar","mxEditor","actions","addActions","cycleAttributeValues","popupHandler","undoManager","createGraph","toolbar","createToolbar","keyHandler","configure","cycleAttributeName","EMPTY_POINT","updatingDocumentResource","captureDocumentGesture","optimizeVmlReflows","updateStyle","lastNode","lastHtmlNode","lastForegroundNode","lastForegroundHtmlNode","setCurrentRoot","sizeDidChange","scaleAndTranslate","previousScale","previousTranslate","viewStateChanged","removeState","includeEdges","invalidating","prevDisplay","placeholder","getEmptyBounds","validateBackground","createBackgroundPageShape","validateBackgroundImage","validateBackgroundPage","getBackgroundImage","redrawBackgroundImage","pageVisible","getBackgroundPageBounds","backgroundPageShape","isHideOnHover","ps","updateCellState","stateValidated","pState","getChildOffsetForCell","updateVertexState","updateEdgeState","updateVertexLabelOffset","updateFixedTerminalPoints","updatePoints","updateFloatingTerminalPoints","updateEdgeBounds","updateEdgeLabelOffset","fg","keepEdgesInForeground","keepEdgesInBackground","updateFixedTerminalPoint","getConnectionConstraint","getFixedTerminalPoint","getConnectionPoint","updateBoundsFromStencil","asp","getEdgeStyle","getTerminalPort","srcBounds","trgBounds","isLoopStyleEnabled","tc","defaultLoopStyle","isAllowEval","updateFloatingTerminalPoint","getFloatingTerminalPoint","getNextPoint","orth","isOrthogonal","getPerimeterFunction","opposite","markerSize","gx","pointCount","gy","getRelativePoint","totalLength","minDist","xSegment","ySegment","projlen","yDistance","setRendering","setAllowEval","getCellStates","getDecoratorPane","decoratorPane","isContainerEvent","isScrollEvent","outWidth","inWidth","outHeight","inHeight","fireGestureEvent","popupMenuHandler","endHandler","createHtmlPane","updateContainerStyle","onResize","updateHtmlCanvasSize","pane","createVmlPane","getTranslateForRoot","EMPTY_ARRAY","cellEditor","portsEnabled","doubleTapEnabled","doubleTapTimeout","doubleTapTolerance","lastTouchY","lastTouchTime","tapAndHoldEnabled","tapAndHoldDelay","tapAndHoldInProgress","tapAndHoldValid","initialTouchX","initialTouchY","defaultOverlap","defaultParent","alternateEdgeStyle","pageBreaksVisible","pageBreakColor","pageBreakDashed","minPageBreakDist","preferPageSize","escapeEnabled","invokesStopCellEditing","enterStopsCellEditing","useScrollbarsForPanning","exportEnabled","importEnabled","cellsLocked","cellsCloneable","cellsEditable","cellsDeletable","cellsMovable","edgeLabelsMovable","vertexLabelsMovable","dropEnabled","splitEnabled","cellsResizable","cellsBendable","cellsSelectable","cellsDisconnectable","autoSizeCells","autoSizeCellsOnAdd","ignoreScrollbars","translateToScrollPosition","timerAutoScroll","allowAutoPanning","maximumGraphBounds","minimumGraphSize","minimumContainerSize","maximumContainerSize","resizeContainer","allowNegativeCoordinates","constrainChildren","constrainRelativeChildren","extendParents","extendParentsOnAdd","extendParentsOnMove","recursiveResize","collapseToPreferredSize","zoomFactor","keepSelectionVisibleOnZoom","centerZoom","resetViewOnRootChange","resetEdgesOnResize","resetEdgesOnMove","resetEdgesOnConnect","allowLoops","multigraph","connectableEdges","allowDanglingEdges","cloneInvalidEdges","disconnectOnMove","labelsVisible","htmlLabels","swimlaneSelectionEnabled","swimlaneNesting","minFitScale","maxFitScale","collapsedImage","expandedImage","warningImage","alreadyConnectedResource","containsValidationErrorsResource","collapseExpandResource","createCellEditor","createTooltipHandler","createSelectionCellsHandler","connectionHandler","createConnectionHandler","createGraphHandler","panningHandler","createPanningHandler","panningEnabled","createPopupMenuHandler","getStylesheet","getSelectionCellsForChanges","processChange","removeSelectionCells","getRemovedCellsForChanges","setDefaultParent","removeStateForCell","newParent","home","addCellOverlay","removeCellOverlay","removeCellOverlays","clearCellOverlays","setCellWarning","warning","isSelect","setSelectionCell","startEditingAtCell","getSelectionCell","isCellEditable","convertValueToString","cellLabelChanged","isAutoSizeCell","cellSizeUpdated","click","mxe","isTransparentClickEvent","selected","isCellSelected","selectCellForEvent","swimlane","isSwimlaneSelectionEnabled","getSwimlaneAt","isToggleEvent","tapAndHold","panningTrigger","marker","currentColor","markedState","mark","createEdgeState","panningManager","createPanningManager","getBorderSizes","borderLeftStyle","borderLeftWidth","paddingTop","borderTopStyle","borderTopWidth","borderRightStyle","borderRightWidth","paddingBottom","borderBottomStyle","borderBottomWidth","getPreferredPageSize","page","hCount","vCount","keepOrigin","ignoreWidth","ignoreHeight","getBorder","cssBorder","w1","h1","w2","h2","s2","doResizeContainer","updatePageBreaks","gb","horizontalCount","verticalCount","horizontalPageBreaks","verticalPageBreaks","drawPageBreaks","breaks","pageBreak","postProcessCellStyle","getImageFromBundles","encodeURIComponent","comma","setCellStyle","toggleCellStyle","toggleCellStyles","toggleCellStyleFlags","alignCells","param","resizeCell","flipEdge","addImageBundle","bundle","removeImageBundle","orderCells","back","cellsOrdered","groupCells","getCellsForGroup","createGroupCell","getBoundsForGroup","ungroupCells","removeCellsAfterUngroup","cellsRemoved","addAllEdges","removeCellsFromParent","moveGroup","allowInvalidEdges","keepPosition","trans","getEdgeValidationError","createVertex","createEdge","addEdge","absolute","constrain","parentState","zero","oldState","isAllowNegativeCoordinates","autoSizeCell","isExtendParentsOnAdd","isExtendParent","extendParent","constrainChild","cellConnected","updateCellSize","getDeletableCells","getAllEdges","disconnectTerminal","connected","splitEdge","newEdge","toggleCells","cellsToggled","checkFoldable","getFoldableCells","cellsFolded","isCellFoldable","swapBounds","willCollapse","updateAlternateBounds","getPreferredSizeForCell","allCells","ignoreChildren","cellStyle","gs2","resizeCells","isRecursiveResize","cellResized","ignoreRelative","resizeChildCells","constrainChildCells","scaleCell","isCellResizable","isCloneInvalidEdges","setAllowNegativeCoordinates","isDisconnectOnMove","isAllowDanglingEdges","isExtendParentsOnMove","disconnect","disconnectGraph","translateCell","getCellContainmentArea","getMaximumGraphBounds","sizeFirst","isConstrainRelativeChildren","isConstrainChild","overlap","getOverlap","getOutlineConstraint","getAllConnectionConstraints","setConnectionConstraint","connectCell","isPortsEnabled","getTerminalForPort","isCellDisconnectable","getCurrentRoot","enterGroup","isValidRoot","exitGroup","includeDescendants","addPoint","shiftPreview1","shiftPreview2","zoomIn","zoomOut","zoomActual","cw","ch","sh","scrollRectToVisible","zoomToRect","scaleX","scaleY","aspectFactor","rectRight","rectBottom","newHeight","deltaHeightBuffer","upperBuffer","newWidth","deltaWidthBuffer","newScale","scrollCellToVisible","tr2","isChanged","widthLimit","heightLimit","ddx","ddy","isCellConnectable","isLoop","isCloneEvent","isConstrainedEvent","isIgnoreTerminalEvent","validationAlert","isEdgeValid","isValidConnection","sourceOut","targetIn","validateEdge","validateGraph","context","isValid","getCellValidationError","outCount","inCount","rule","setBackgroundImage","isHtmlLabels","setHtmlLabels","getTooltip","tip","getHandler","getTooltipForNode","getTooltipForCell","getCursorForMouseEvent","getCursorForCell","setBorder","isResizeContainer","setResizeContainer","isEscapeEnabled","setEscapeEnabled","setInvokesStopCellEditing","setEnterStopsCellEditing","isCellLocked","isCellsLocked","setCellsLocked","getCloneableCells","isCellCloneable","isCellsCloneable","setCellsCloneable","canExportCell","canImportCell","isCellsSelectable","setCellsSelectable","isCellDeletable","isCellsDeletable","setCellsDeletable","isLabelMovable","isCellRotatable","getMovableCells","isCellsMovable","setCellsMovable","setPortsEnabled","getGridSize","setGridSize","getTolerance","setTolerance","isVertexLabelsMovable","setVertexLabelsMovable","isEdgeLabelsMovable","setEdgeLabelsMovable","isSwimlaneNesting","setSwimlaneNesting","setSwimlaneSelectionEnabled","isMultigraph","setMultigraph","isAllowLoops","setAllowDanglingEdges","setConnectableEdges","isConnectableEdges","setCloneInvalidEdges","setAllowLoops","setDisconnectOnMove","setDropEnabled","isSplitEnabled","setSplitEnabled","isCellsResizable","setCellsResizable","isTerminalPointMovable","isCellBendable","isCellsBendable","setCellsBendable","isCellsEditable","setCellsEditable","isCellsDisconnectable","setCellsDisconnectable","isValidSource","isValidTarget","setTooltips","setPanning","isAutoSizeCells","setAutoSizeCells","isExtendParents","setExtendParents","setExtendParentsOnAdd","setExtendParentsOnMove","setRecursiveResize","isConstrainChildren","setConstrainChildren","setConstrainRelativeChildren","isAllowOverlapParent","isValidDropTarget","isSplitTarget","ignoreFn","hitsSwimlaneContent","getPointForEvent","addOffset","getCellsBeyond","rightHalfpane","bottomHalfpane","isolate","isSelectionEmpty","getSelectionCount","addSelectionCell","addSelectionCells","removeSelectionCell","selectRegion","selectCellsForEvent","selectNextCell","selectCell","selectPreviousCell","selectParentCell","selectChildCell","isNext","isParent","isChild","sel","selectAll","descendants","selectVertices","selectCells","selectEdges","createHandler","createEdgeHandler","createVertexHandler","createElbowEdgeHandler","createEdgeSegmentHandler","listener","updateMouseEvent","getStateForTouchEvent","isEventIgnored","mouseEvent","lastEvent","mouseMoveRedirect","mouseUpRedirect","isSyntheticEventIgnored","lastMouseX","lastMouseY","ignoreMouseEvents","isEventSourceIgnored","candidate","getEventState","currentTime","fireDoubleClick","lastTouchEvent","lastTouchX","doubleClickCounter","doubleClickFired","lastTouchCell","valid","tapAndHoldThread","consumeMouseEvent","destroyed","graphRenderHint","showViewport","sizerSize","updateOnPan","sizerImage","suspended","forceVmlHandles","outlineGraphModelChanged","selectionBorder","redirect","redirect2","sizer","createSizer","setZoomEnabled","getSourceContainerSize","getOutlineOffset","getSourceGraphBounds","sourceScale","scaledGraphBounds","unscaledGraphBounds","unscaledFinderBounds","union","completeWidth","completeHeight","outlineScale","navView","scale2","scale3","hit","allowHandleBoundsCheck","getTranslateForEvent","viewRatio","checkTerminal","checkNeighbors","sourceValue","targetValue","checkType","attrValue","bubbling","isBubbling","setBubbling","getLayout","getCellsForChanges","executeLayoutForCells","sorted","reverse","layoutCells","getCellsForChange","executeLayout","setHorizontal","setAddEnabled","setResizeEnabled","isSwimlaneIgnored","isCellHorizontal","swimlaneAdded","parentHorizontal","resizeSwimlane","addEdges","translateState","revalidateState","maxCells","highlightEnabled","cloneEnabled","moveEnabled","currentDx","currentDy","updateCursor","selectEnabled","connectOnDrop","scrollOnMove","previewColor","htmlPreview","scaleGrid","rotationEnabled","isCloneEnabled","setCloneEnabled","isMoveEnabled","setMoveEnabled","isSelectEnabled","setSelectEnabled","isRemoveCellsFromParent","setRemoveCellsFromParent","getInitialCellForEvent","isDelayedSelection","delayedSelection","cellWasClicked","initialCell","createPreviewShape","useGuidesForEvent","vector","roundLength","removeHint","setHighlightColor","selectDelayed","destroyShapes","guides","shouldRemoveCellsFromParent","useLeftButtonForPanning","usePopupTrigger","ignoreCell","previewEnabled","useGrid","pinchEnabled","isPanningEnabled","setPanningEnabled","setPinchEnabled","isPanningTrigger","consumePanningTrigger","selectOnPopup","clearSelectionOnBackground","triggerX","triggerY","screenX","screenY","isSelectOnPopup","popupTrigger","getCellForPopupEvent","hotspotEnabled","validState","setHotspot","getHotspot","setHotspotEnabled","isHotspotEnabled","hasValidState","getValidState","getMarkedState","unmark","process","setCurrentState","isValidState","getMarkerColor","markCell","getStateToMark","maxHandlers","oldHandlers","isHandlerActive","moveIconFront","moveIconBack","connectImage","targetConnectImage","createTarget","constraintHandler","waypointsEnabled","ignoreMouseDown","connectIconOffset","drillHandler","mouseDownCounter","movePreviewAway","outlineConnect","insertBeforeSource","isInsertBefore","isCreateTarget","setCreateTarget","iconState","redrawIcons","icons","isConnectableCell","isConnecting","validateConnection","getConnectImage","isMoveIconToFrontForState","createIcons","currentState","getIconPosition","destroyIcons","selectedIcon","isStartEvent","currentConstraint","sourceConstraint","waypoints","isImmediateConnectSource","isOutlineConnectEvent","clientLeft","clientTop","gridX","gridY","isHighlightAt","updateCurrentState","isCellEnabled","setFocus","convertWaypoint","snapToPreview","pt2","getTargetPerimeterPoint","getSourcePerimeterPoint","originalPoint","drawPreview","hitsIcon","updateIcons","realPoints","targetPerimeter","sourcePerimeter","isStopEvent","addWaypointForEvent","checkConstraints","c1","c2","updatePreview","getEdgeColor","terminalInserted","createTargetVertex","getAlignmentTolerance","pointImage","focusIcons","focusHighlight","currentFocusArea","focusPoints","getImageForConstraint","isStateIgnored","destroyFocusHighlight","isKeepFocusEvent","getCellForEvent","existingEdge","mouseleaveHandler","grid","mouse","minDistSq","hl","createHighlightShape","cp","defaultOpacity","sharedDiv","currentY","createMouseEvent","ignoreGrid","getPosition","setPosition","copyStyle","processEvent","getTotalRotation","flipPoint","snapPoint","isHtmlRequired","initShape","ignore","singleSizer","handleImage","parentHighlightEnabled","rotationRaster","rotationCursor","manageSizers","constrainGroupByChildren","rotationHandleVSpacing","horizontalOffset","verticalOffset","selectionBounds","getSelectionBounds","createSelectionShape","sizers","labelShape","isRotationHandleVisible","rotationShape","customHandles","createCustomHandles","updateMinBounds","isCenteredEvent","minBounds","createParentHighlightShape","getSelectionColor","getSelectionStrokeWidth","isSelectionDashed","createSizerShape","isSizerVisible","moveSizerTo","getHandleForEvent","checkShape","isCustomHandleEvent","handle","isLivePreviewBorder","childOffsetX","childOffsetY","preview","hideSizers","edgeHandlers","setHandlesVisible","checkTolerance","roundAngle","moveLabel","rotateVertex","resizeVertex","currentAlpha","atan","raster","redrawHandles","unscaledBounds","dx3","dy3","dx4","dy4","dx5","dy5","updateLivePreview","tempState","rotateCell","rotateClick","constrained","moveChildren","centered","cdx","cdy","getHandlePadding","crs","da","getRotationHandlePosition","updateParentHighlight","parentHighlight","bends","removeEnabled","dblClickRemoveEnabled","mergeRemoveEnabled","straightRemoveEnabled","virtualBendsEnabled","virtualBendOpacity","preferHtml","snapToTerminals","manageLabelHandle","abspoints","getSelectionPoints","targetState","createBends","isVirtualBendsEnabled","virtualBends","createVirtualBends","createLabelHandleShape","initBend","isAddPointEvent","isRemovePointEvent","otherCell","isHandleVisible","bend","createHandleShape","removePoint","isHandleEnabled","labelHandleImage","isAddVirtualBendEvent","isTarget","isLabel","clonePreviewState","getSnapToTerminalTolerance","isSnapToTerminalsEvent","snapToPoint","snapToTerminal","getPreviewTerminalState","getPreviewPoints","checkRemove","updatePreviewState","targetConstraint","setPreviewColor","changeTerminalPoint","changePoints","isClone","addPointAt","getHandleFillColor","checkLabelHandle","xn","yn","bn","redrawInnerBends","destroyBends","flipEnabled","doubleClickOrientationResource","createVirtualBend","dblClickHandler","getCursorForBend","getCurrentPoints","pt0","pt1","rpts","straight","bindKey","code","bindShiftKey","bindControlKey","bindControlShiftKey","getFunction","isGraphEvent","boundFunction","ignoreTouchEvents","hideOnHover","setHideOnHover","getStateForEvent","stateSource","resetTimer","restart","keepOnTop","drawHighlight","getStrokeWidth","bindAction","createMenu","conditions","createConditions","addItems","condition","as","enabledCond","addAction","isCell","condNodes","insertFunction","pressed","addActionOption","mode","setMode","addPrototype","ptype","factory","installDropHandler","addVertex","horizontalFlow","edgeGeometry","sprite","loader","askZoomResource","lastSavedResource","currentFileResource","propertiesResource","tasksResource","helpResource","outlineResource","dblClickAction","swimlaneRequired","forcedInserting","templates","defaultEdge","defaultEdgeStyle","defaultGroup","groupBorderSize","filename","postParameterName","escapePostData","urlPost","urlImage","layoutDiagram","swimlaneSpacing","maintainSwimlanes","layoutSwimlanes","cycleAttributeIndex","tasks","tasksWindowImage","tasksTop","help","helpWindowImage","urlHelp","helpWidth","helpHeight","propertiesWidth","propertiesHeight","movePropertiesDialog","validating","isModified","setModified","getUrlImage","showProperties","showTasks","showHelp","showOutline","dec","decode","resetHistory","resetFirstTime","cookie","actionname","addTemplate","template","getTemplate","installDblClickHandler","installUndoHandler","installDrillHandler","installChangeHandler","installInsertHandler","createPopupMenu","createSwimlaneManager","createLayoutManager","swimlaneMgr","layoutMgr","swimlaneLayout","createSwimlaneLayout","diagramLayout","createDiagramLayout","setGraphContainer","rubberband","insertHandler","gs","setToolbarContainer","setStatusContainer","tstamp","toLocaleString","setStatus","setTitleContainer","getTitle","treeLayout","getRootTitle","createGroup","readGraphModel","getUrlPost","data","writeGraphModel","postDiagram","swapStyles","second","createProperties","isPropertiesVisible","yField","xField","widthField","heightField","texts","okFunction","cancelFunction","createTasks","refreshTasks","frame","modename","consumeCycleAttribute","cycleAttribute","isConstrainedMoving","mxCodecRegistry","codecs","aliases","register","codec","classname","addAlias","codecname","getCodec","mxObjectCodec","objects","idrefs","elements","encodeDefaults","putObject","getObject","addElement","reference","into","encodeCell","isCellCodec","decodeCell","restoreStructures","decoder","insertIntoGraph","cloneTemplate","getFieldName","attributename","mapped","getAttributeName","fieldname","isExcluded","isReference","beforeEncode","encodeObject","afterEncode","encodeValue","writeAttribute","writePrimitiveAttribute","writeComplexAttribute","convertAttributeToXml","isBooleanAttribute","convertAttributeFromXml","isNumericAttribute","beforeDecode","decodeNode","afterDecode","decodeAttributes","decodeChildren","decodeAttribute","isIgnoredAttribute","processInclude","decodeChild","getFieldTemplate","addObjectValue","isWrite","ref","object","rootNode","decodeRoot","rootCell","childRef","mxGenericChangeCodec","variable","mxStylesheetCodec","styleNode","getStringValue","mxDefaultToolbarCodec","act","inc","role","decodeTemplates","decodeUi","setMapContainer","exports"],"mappings":"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","file":"js/chunk-2d21d12f.f4e3cc88.js","sourcesContent":["/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\nvar mxClient =\n{\n\t/**\n\t * Class: mxClient\n\t *\n\t * Bootstrapping mechanism for the mxGraph thin client. The production version\n\t * of this file contains all code required to run the mxGraph thin client, as\n\t * well as global constants to identify the browser and operating system in\n\t * use. You may have to load chrome://global/content/contentAreaUtils.js in\n\t * your page to disable certain security restrictions in Mozilla.\n\t * \n\t * Variable: VERSION\n\t *\n\t * Contains the current version of the mxGraph library. The strings that\n\t * communicate versions of mxGraph use the following format.\n\t * \n\t * versionMajor.versionMinor.buildNumber.revisionNumber\n\t * \n\t * Current version is 3.9.12.\n\t */\n\tVERSION: '3.9.12',\n\n\t/**\n\t * Variable: IS_IE\n\t *\n\t * True if the current browser is Internet Explorer 10 or below. Use <mxClient.IS_IE11>\n\t * to detect IE 11.\n\t */\n\tIS_IE: navigator.userAgent.indexOf('MSIE') >= 0,\n\n\t/**\n\t * Variable: IS_IE6\n\t *\n\t * True if the current browser is Internet Explorer 6.x.\n\t */\n\tIS_IE6: navigator.userAgent.indexOf('MSIE 6') >= 0,\n\n\t/**\n\t * Variable: IS_IE11\n\t *\n\t * True if the current browser is Internet Explorer 11.x.\n\t */\n\tIS_IE11: !!navigator.userAgent.match(/Trident\\/7\\./),\n\n\t/**\n\t * Variable: IS_EDGE\n\t *\n\t * True if the current browser is Microsoft Edge.\n\t */\n\tIS_EDGE: !!navigator.userAgent.match(/Edge\\//),\n\n\t/**\n\t * Variable: IS_QUIRKS\n\t *\n\t * True if the current browser is Internet Explorer and it is in quirks mode.\n\t */\n\tIS_QUIRKS: navigator.userAgent.indexOf('MSIE') >= 0 && (document.documentMode == null || document.documentMode == 5),\n\n\t/**\n\t * Variable: IS_EM\n\t * \n\t * True if the browser is IE11 in enterprise mode (IE8 standards mode).\n\t */\n\tIS_EM: 'spellcheck' in document.createElement('textarea') && document.documentMode == 8,\n\n\t/**\n\t * Variable: VML_PREFIX\n\t * \n\t * Prefix for VML namespace in node names. Default is 'v'.\n\t */\n\tVML_PREFIX: 'v',\n\n\t/**\n\t * Variable: OFFICE_PREFIX\n\t * \n\t * Prefix for VML office namespace in node names. Default is 'o'.\n\t */\n\tOFFICE_PREFIX: 'o',\n\n\t/**\n\t * Variable: IS_NS\n\t *\n\t * True if the current browser is Netscape (including Firefox).\n\t */\n  \tIS_NS: navigator.userAgent.indexOf('Mozilla/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('MSIE') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\n\t/**\n\t * Variable: IS_OP\n\t *\n\t * True if the current browser is Opera.\n\t */\n  \tIS_OP: navigator.userAgent.indexOf('Opera/') >= 0 ||\n  \t\tnavigator.userAgent.indexOf('OPR/') >= 0,\n\n\t/**\n\t * Variable: IS_OT\n\t *\n\t * True if -o-transform is available as a CSS style, ie for Opera browsers\n\t * based on a Presto engine with version 2.5 or later.\n\t */\n  \tIS_OT: navigator.userAgent.indexOf('Presto/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.4.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.3.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.2.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/2.0.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Presto/1.') < 0,\n  \t\n\t/**\n\t * Variable: IS_SF\n\t *\n\t * True if the current browser is Safari.\n\t */\n  \tIS_SF: navigator.userAgent.indexOf('AppleWebKit/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Chrome/') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Edge/') < 0,\n  \t\n\t/**\n\t * Variable: IS_IOS\n\t * \n\t * Returns true if the user agent is an iPad, iPhone or iPod.\n\t */\n  \tIS_IOS: (navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false),\n  \t\t\n\t/**\n\t * Variable: IS_GC\n\t *\n\t * True if the current browser is Google Chrome.\n\t */\n  \tIS_GC: navigator.userAgent.indexOf('Chrome/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Edge/') < 0,\n\t\n\t/**\n\t * Variable: IS_CHROMEAPP\n\t *\n\t * True if the this is running inside a Chrome App.\n\t */\n  \tIS_CHROMEAPP: window.chrome != null && chrome.app != null && chrome.app.runtime != null,\n\t\t\n\t/**\n\t * Variable: IS_FF\n\t *\n\t * True if the current browser is Firefox.\n\t */\n  \tIS_FF: navigator.userAgent.indexOf('Firefox/') >= 0,\n  \t\n\t/**\n\t * Variable: IS_MT\n\t *\n\t * True if -moz-transform is available as a CSS style. This is the case\n\t * for all Firefox-based browsers newer than or equal 3, such as Camino,\n\t * Iceweasel, Seamonkey and Iceape.\n\t */\n  \tIS_MT: (navigator.userAgent.indexOf('Firefox/') >= 0 &&\n\t\tnavigator.userAgent.indexOf('Firefox/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Firefox/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceweasel/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/1.') < 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceweasel/2.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('SeaMonkey/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('SeaMonkey/1.') < 0) ||\n  \t\t(navigator.userAgent.indexOf('Iceape/') >= 0 &&\n  \t\tnavigator.userAgent.indexOf('Iceape/1.') < 0),\n\n\t/**\n\t * Variable: IS_SVG\n\t *\n\t * True if the browser supports SVG.\n\t */\n  \tIS_SVG: navigator.userAgent.indexOf('Firefox/') >= 0 || // FF and Camino\n\t  \tnavigator.userAgent.indexOf('Iceweasel/') >= 0 || // Firefox on Debian\n\t  \tnavigator.userAgent.indexOf('Seamonkey/') >= 0 || // Firefox-based\n\t  \tnavigator.userAgent.indexOf('Iceape/') >= 0 || // Seamonkey on Debian\n\t  \tnavigator.userAgent.indexOf('Galeon/') >= 0 || // Gnome Browser (old)\n\t  \tnavigator.userAgent.indexOf('Epiphany/') >= 0 || // Gnome Browser (new)\n\t  \tnavigator.userAgent.indexOf('AppleWebKit/') >= 0 || // Safari/Google Chrome\n\t  \tnavigator.userAgent.indexOf('Gecko/') >= 0 || // Netscape/Gecko\n\t  \tnavigator.userAgent.indexOf('Opera/') >= 0 || // Opera\n\t  \t(document.documentMode != null && document.documentMode >= 9), // IE9+\n\n\t/**\n\t * Variable: NO_FO\n\t *\n\t * True if foreignObject support is not available. This is the case for\n\t * Opera, older SVG-based browsers and all versions of IE.\n\t */\n  \tNO_FO: !document.createElementNS || document.createElementNS('http://www.w3.org/2000/svg',\n  \t\t'foreignObject') != '[object SVGForeignObjectElement]' || navigator.userAgent.indexOf('Opera/') >= 0,\n\n\t/**\n\t * Variable: IS_VML\n\t *\n\t * True if the browser supports VML.\n\t */\n  \tIS_VML: navigator.appName.toUpperCase() == 'MICROSOFT INTERNET EXPLORER',\n\n\t/**\n\t * Variable: IS_WIN\n\t *\n\t * True if the client is a Windows.\n\t */\n  \tIS_WIN: navigator.appVersion.indexOf('Win') > 0,\n\n\t/**\n\t * Variable: IS_MAC\n\t *\n\t * True if the client is a Mac.\n\t */\n  \tIS_MAC: navigator.appVersion.indexOf('Mac') > 0,\n\n\t/**\n\t * Variable: IS_TOUCH\n\t * \n\t * True if this device supports touchstart/-move/-end events (Apple iOS,\n\t * Android, Chromebook and Chrome Browser on touch-enabled devices).\n\t */\n  \tIS_TOUCH: 'ontouchstart' in document.documentElement,\n\n\t/**\n\t * Variable: IS_POINTER\n\t * \n\t * True if this device supports Microsoft pointer events (always false on Macs).\n\t */\n  \tIS_POINTER: window.PointerEvent != null && !(navigator.appVersion.indexOf('Mac') > 0),\n\n\t/**\n\t * Variable: IS_LOCAL\n\t *\n\t * True if the documents location does not start with http:// or https://.\n\t */\n  \tIS_LOCAL: document.location.href.indexOf('http://') < 0 &&\n  \t\t\t  document.location.href.indexOf('https://') < 0,\n\n\t/**\n\t * Variable: defaultBundles\n\t * \n\t * Contains the base names of the default bundles if mxLoadResources is false.\n\t */\n  \tdefaultBundles: [],\n\n\t/**\n\t * Function: isBrowserSupported\n\t *\n\t * Returns true if the current browser is supported, that is, if\n\t * <mxClient.IS_VML> or <mxClient.IS_SVG> is true.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * if (!mxClient.isBrowserSupported())\n\t * {\n\t *   mxUtils.error('Browser is not supported!', 200, false);\n\t * }\n\t * (end)\n\t */\n\tisBrowserSupported: function()\n\t{\n\t\treturn mxClient.IS_VML || mxClient.IS_SVG;\n\t},\n\n\t/**\n\t * Function: link\n\t *\n\t * Adds a link node to the head of the document. Use this\n\t * to add a stylesheet to the page as follows:\n\t *\n\t * (code)\n\t * mxClient.link('stylesheet', filename);\n\t * (end)\n\t *\n\t * where filename is the (relative) URL of the stylesheet. The charset\n\t * is hardcoded to ISO-8859-1 and the type is text/css.\n\t * \n\t * Parameters:\n\t * \n\t * rel - String that represents the rel attribute of the link node.\n\t * href - String that represents the href attribute of the link node.\n\t * doc - Optional parent document of the link node.\n\t */\n\tlink: function(rel, href, doc)\n\t{\n\t\tdoc = doc || document;\n\n\t\t// Workaround for Operation Aborted in IE6 if base tag is used in head\n\t\tif (mxClient.IS_IE6)\n\t\t{\n\t\t\tdoc.write('<link rel=\"' + rel + '\" href=\"' + href + '\" charset=\"UTF-8\" type=\"text/css\"/>');\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tvar link = doc.createElement('link');\n\t\t\t\n\t\t\tlink.setAttribute('rel', rel);\n\t\t\tlink.setAttribute('href', href);\n\t\t\tlink.setAttribute('charset', 'UTF-8');\n\t\t\tlink.setAttribute('type', 'text/css');\n\t\t\t\n\t\t\tvar head = doc.getElementsByTagName('head')[0];\n\t   \t\thead.appendChild(link);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: loadResources\n\t * \n\t * Helper method to load the default bundles if mxLoadResources is false.\n\t * \n\t * Parameters:\n\t * \n\t * fn - Function to call after all resources have been loaded.\n\t * lan - Optional string to pass to <mxResources.add>.\n\t */\n\tloadResources: function(fn, lan)\n\t{\n\t\tvar pending = mxClient.defaultBundles.length;\n\t\t\n\t\tfunction callback()\n\t\t{\n\t\t\tif (--pending == 0)\n\t\t\t{\n\t\t\t\tfn();\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < mxClient.defaultBundles.length; i++)\n\t\t{\n\t\t\tmxResources.add(mxClient.defaultBundles[i], lan, callback);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: include\n\t *\n\t * Dynamically adds a script node to the document header.\n\t * \n\t * In production environments, the includes are resolved in the mxClient.js\n\t * file to reduce the number of requests required for client startup. This\n\t * function should only be used in development environments, but not in\n\t * production systems.\n\t */\n\tinclude: function(src)\n\t{\n\t\tdocument.write('<script src=\"'+src+'\"></script>');\n\t}\n};\n\n/**\n * Variable: mxLoadResources\n * \n * Optional global config variable to toggle loading of the two resource files\n * in <mxGraph> and <mxEditor>. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient. If this is false, you can use <mxClient.loadResources>\n * with its callback to load the default bundles asynchronously.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadResources) == 'undefined')\n{\n\tmxLoadResources = true;\n}\n\n/**\n * Variable: mxForceIncludes\n * \n * Optional global config variable to force loading the JavaScript files in\n * development mode. Default is undefined. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadResources = true;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxForceIncludes) == 'undefined')\n{\n\tmxForceIncludes = false;\n}\n\n/**\n * Variable: mxResourceExtension\n * \n * Optional global config variable to specify the extension of resource files.\n * Default is true. NOTE: This is a global variable, not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxResourceExtension = '.txt';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxResourceExtension) == 'undefined')\n{\n\tmxResourceExtension = '.txt';\n}\n\n/**\n * Variable: mxLoadStylesheets\n * \n * Optional global config variable to toggle loading of the CSS files when\n * the library is initialized. Default is true. NOTE: This is a global variable,\n * not a variable of mxClient.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tvar mxLoadStylesheets = false;\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxLoadStylesheets) == 'undefined')\n{\n\tmxLoadStylesheets = true;\n}\n\n/**\n * Variable: basePath\n *\n * Basepath for all URLs in the core without trailing slash. Default is '.'.\n * Set mxBasePath prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxBasePath = '/path/to/core/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxBasePath) != 'undefined' && mxBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxBasePath.substring(mxBasePath.length - 1) == '/')\n\t{\n\t\tmxBasePath = mxBasePath.substring(0, mxBasePath.length - 1);\n\t}\n\n\tmxClient.basePath = mxBasePath;\n}\nelse\n{\n\tmxClient.basePath = '.';\n}\n\n/**\n * Variable: imageBasePath\n *\n * Basepath for all images URLs in the core without trailing slash. Default is\n * <mxClient.basePath> + '/images'. Set mxImageBasePath prior to loading the\n * mxClient library as follows to override this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxImageBasePath = '/path/to/image/directory';\n * </script>\n * <script type=\"text/javascript\" src=\"/path/to/core/directory/js/mxClient.js\"></script>\n * (end)\n * \n * When using a relative path, the path is relative to the URL of the page that\n * contains the assignment. Trailing slashes are automatically removed.\n */\nif (typeof(mxImageBasePath) != 'undefined' && mxImageBasePath.length > 0)\n{\n\t// Adds a trailing slash if required\n\tif (mxImageBasePath.substring(mxImageBasePath.length - 1) == '/')\n\t{\n\t\tmxImageBasePath = mxImageBasePath.substring(0, mxImageBasePath.length - 1);\n\t}\n\n\tmxClient.imageBasePath = mxImageBasePath;\n}\nelse\n{\n\tmxClient.imageBasePath = mxClient.basePath + '/images';\t\n}\n\n/**\n * Variable: language\n *\n * Defines the language of the client, eg. en for english, de for german etc.\n * The special value 'none' will disable all built-in internationalization and\n * resource loading. See <mxResources.getSpecialBundle> for handling identifiers\n * with and without a dash.\n * \n * Set mxLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguage = 'en';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * If internationalization is disabled, then the following variables should be\n * overridden to reflect the current language of the system. These variables are\n * cleared when i18n is disabled.\n * <mxEditor.askZoomResource>, <mxEditor.lastSavedResource>,\n * <mxEditor.currentFileResource>, <mxEditor.propertiesResource>,\n * <mxEditor.tasksResource>, <mxEditor.helpResource>, <mxEditor.outlineResource>,\n * <mxElbowEdgeHandler.doubleClickOrientationResource>, <mxUtils.errorResource>,\n * <mxUtils.closeResource>, <mxGraphSelectionModel.doneResource>,\n * <mxGraphSelectionModel.updatingSelectionResource>, <mxGraphView.doneResource>,\n * <mxGraphView.updatingDocumentResource>, <mxCellRenderer.collapseExpandResource>,\n * <mxGraph.containsValidationErrorsResource> and\n * <mxGraph.alreadyConnectedResource>.\n */\nif (typeof(mxLanguage) != 'undefined' && mxLanguage != null)\n{\n\tmxClient.language = mxLanguage;\n}\nelse\n{\n\tmxClient.language = (mxClient.IS_IE) ? navigator.userLanguage : navigator.language;\n}\n\n/**\n * Variable: defaultLanguage\n * \n * Defines the default language which is used in the common resource files. Any\n * resources for this language will only load the common resource file, but not\n * the language-specific resource file. Default is 'en'.\n * \n * Set mxDefaultLanguage prior to loading the mxClient library as follows to override\n * this setting:\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxDefaultLanguage = 'de';\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n */\nif (typeof(mxDefaultLanguage) != 'undefined' && mxDefaultLanguage != null)\n{\n\tmxClient.defaultLanguage = mxDefaultLanguage;\n}\nelse\n{\n\tmxClient.defaultLanguage = 'en';\n}\n\n// Adds all required stylesheets and namespaces\nif (mxLoadStylesheets)\n{\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css');\n}\n\n/**\n * Variable: languages\n *\n * Defines the optional array of all supported language extensions. The default\n * language does not have to be part of this list. See\n * <mxResources.isLanguageSupported>.\n *\n * (code)\n * <script type=\"text/javascript\">\n * \t\tmxLanguages = ['de', 'it', 'fr'];\n * </script>\n * <script type=\"text/javascript\" src=\"js/mxClient.js\"></script>\n * (end)\n * \n * This is used to avoid unnecessary requests to language files, ie. if a 404\n * will be returned.\n */\nif (typeof(mxLanguages) != 'undefined' && mxLanguages != null)\n{\n\tmxClient.languages = mxLanguages;\n}\n\n// Adds required namespaces, stylesheets and memory handling for older IE browsers\nif (mxClient.IS_VML)\n{\n\tif (mxClient.IS_SVG)\n\t{\n\t\tmxClient.IS_VML = false;\n\t}\n\telse\n\t{\n\t\t// Enables support for IE8 standards mode. Note that this requires all attributes for VML\n\t\t// elements to be set using direct notation, ie. node.attr = value. The use of setAttribute\n\t\t// is not possible.\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml', '#default#VML');\n\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office', '#default#VML');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.namespaces.add(mxClient.VML_PREFIX, 'urn:schemas-microsoft-com:vml');\n\t\t\tdocument.namespaces.add(mxClient.OFFICE_PREFIX, 'urn:schemas-microsoft-com:office:office');\n\t\t}\n\n\t\t// Workaround for limited number of stylesheets in IE (does not work in standards mode)\n\t\tif (mxClient.IS_QUIRKS && document.styleSheets.length >= 30)\n\t\t{\n\t\t\t(function()\n\t\t\t{\n\t\t\t\tvar node = document.createElement('style');\n\t\t\t\tnode.type = 'text/css';\n\t\t\t\tnode.styleSheet.cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t        \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t        document.getElementsByTagName('head')[0].appendChild(node);\n\t\t\t})();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{behavior:url(#default#VML)}' +\n\t\t    \tmxClient.OFFICE_PREFIX + '\\\\:*{behavior:url(#default#VML)}';\n\t\t}\n\t    \n\t    if (mxLoadStylesheets)\n\t    {\n\t    \tmxClient.link('stylesheet', mxClient.basePath + '/css/explorer.css');\n\t    }\n\t}\n}\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxLog =\n{\n\t/**\n\t * Class: mxLog\n\t * \n\t * A singleton class that implements a simple console.\n\t * \n\t * Variable: consoleName\n\t * \n\t * Specifies the name of the console window. Default is 'Console'.\n\t */\n\tconsoleName: 'Console',\n\t\n\t/**\n\t * Variable: TRACE\n\t * \n\t * Specified if the output for <enter> and <leave> should be visible in the\n\t * console. Default is false.\n\t */\n\tTRACE: false,\n\n\t/**\n\t * Variable: DEBUG\n\t * \n\t * Specifies if the output for <debug> should be visible in the console.\n\t * Default is true.\n\t */\n\tDEBUG: true,\n\n\t/**\n\t * Variable: WARN\n\t * \n\t * Specifies if the output for <warn> should be visible in the console.\n\t * Default is true.\n\t */\n\tWARN: true,\n\n\t/**\n\t * Variable: buffer\n\t * \n\t * Buffer for pre-initialized content.\n\t */\n\tbuffer: '',\n\t\n\t/**\n\t * Function: init\n\t *\n\t * Initializes the DOM node for the console. This requires document.body to\n\t * point to a non-null value. This is called from within <setVisible> if the\n\t * log has not yet been initialized.\n\t */\n\tinit: function()\n\t{\n\t\tif (mxLog.window == null && document.body != null)\n\t\t{\n\t\t\tvar title = mxLog.consoleName + ' - mxGraph ' + mxClient.VERSION;\n\n\t\t\t// Creates a table that maintains the layout\n\t\t\tvar table = document.createElement('table');\n\t\t\ttable.setAttribute('width', '100%');\n\t\t\ttable.setAttribute('height', '100%');\n\n\t\t\tvar tbody = document.createElement('tbody');\n\t\t\tvar tr = document.createElement('tr');\n\t\t\tvar td = document.createElement('td');\n\t\t\ttd.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t// Adds the actual console as a textarea\n\t\t\tmxLog.textarea = document.createElement('textarea');\n\t\t\tmxLog.textarea.setAttribute('wrap', 'off');\n\t\t\tmxLog.textarea.setAttribute('readOnly', 'true');\n\t\t\tmxLog.textarea.style.height = '100%';\n\t\t\tmxLog.textarea.style.resize = 'none';\n\t\t\tmxLog.textarea.value = mxLog.buffer;\n\n\t\t\t// Workaround for wrong width in standards mode\n\t\t\tif (mxClient.IS_NS && document.compatMode != 'BackCompat')\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '99%';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.width = '100%';\n\t\t\t}\n\t\t\t\n\t\t\ttd.appendChild(mxLog.textarea);\n\t\t\ttr.appendChild(td);\n\t\t\ttbody.appendChild(tr);\n\n\t\t\t// Creates the container div\n\t\t\ttr = document.createElement('tr');\n\t\t\tmxLog.td = document.createElement('td');\n\t\t\tmxLog.td.style.verticalAlign = 'top';\n\t\t\tmxLog.td.setAttribute('height', '30px');\n\t\t\t\n\t\t\ttr.appendChild(mxLog.td);\n\t\t\ttbody.appendChild(tr);\n\t\t\ttable.appendChild(tbody);\n\n\t\t\t// Adds various debugging buttons\n\t\t\tmxLog.addButton('Info', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.info();\n\t\t\t});\n\t\t\n\t\t\tmxLog.addButton('DOM', function (evt)\n\t\t\t{\n\t\t\t\tvar content = mxUtils.getInnerHtml(document.body);\n\t\t\t\tmxLog.debug(content);\n\t\t\t});\n\t\n\t\t\tmxLog.addButton('Trace', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.TRACE = !mxLog.TRACE;\n\t\t\t\t\n\t\t\t\tif (mxLog.TRACE)\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing enabled');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.debug('Tracing disabled');\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tmxLog.addButton('Copy', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.copy(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\t\t\n\n\t\t\tmxLog.addButton('Show', function (evt)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tmxUtils.popup(mxLog.textarea.value);\n\t\t\t\t}\n\t\t\t\tcatch (err)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.alert(err);\n\t\t\t\t}\n\t\t\t});\t\n\t\t\t\n\t\t\tmxLog.addButton('Clear', function (evt)\n\t\t\t{\n\t\t\t\tmxLog.textarea.value = '';\n\t\t\t});\n\n\t\t\t// Cross-browser code to get window size\n\t\t\tvar h = 0;\n\t\t\tvar w = 0;\n\t\t\t\n\t\t\tif (typeof(window.innerWidth) === 'number')\n\t\t\t{\n\t\t\t\th = window.innerHeight;\n\t\t\t\tw = window.innerWidth;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\th = (document.documentElement.clientHeight || document.body.clientHeight);\n\t\t\t\tw = document.body.clientWidth;\n\t\t\t}\n\n\t\t\tmxLog.window = new mxWindow(title, table, Math.max(0, w - 320), Math.max(0, h - 210), 300, 160);\n\t\t\tmxLog.window.setMaximizable(true);\n\t\t\tmxLog.window.setScrollable(false);\n\t\t\tmxLog.window.setResizable(true);\n\t\t\tmxLog.window.setClosable(true);\n\t\t\tmxLog.window.destroyOnClose = false;\n\t\t\t\n\t\t\t// Workaround for ignored textarea height in various setups\n\t\t\tif (((mxClient.IS_NS || mxClient.IS_IE) && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_SF && document.compatMode != 'BackCompat') ||\n\t\t\t\tdocument.documentMode == 11)\n\t\t\t{\n\t\t\t\tvar elt = mxLog.window.getElement();\n\t\t\t\t\n\t\t\t\tvar resizeHandler = function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tmxLog.textarea.style.height = Math.max(0, elt.offsetHeight - 70) + 'px';\n\t\t\t\t}; \n\t\t\t\t\n\t\t\t\tmxLog.window.addListener(mxEvent.RESIZE_END, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.MAXIMIZE, resizeHandler);\n\t\t\t\tmxLog.window.addListener(mxEvent.NORMALIZE, resizeHandler);\n\n\t\t\t\tmxLog.textarea.style.height = '92px';\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: info\n\t * \n\t * Writes the current navigator information to the console.\n\t */\n\tinfo: function()\n\t{\n\t\tmxLog.writeln(mxUtils.toString(navigator));\n\t},\n\t\t\t\n\t/**\n\t * Function: addButton\n\t * \n\t * Adds a button to the console using the given label and function.\n\t */\n\taddButton: function(lab, funct)\n\t{\n\t\tvar button = document.createElement('button');\n\t\tmxUtils.write(button, lab);\n\t\tmxEvent.addListener(button, 'click', funct);\n\t\tmxLog.td.appendChild(button);\n\t},\n\t\t\t\t\n\t/**\n\t * Function: isVisible\n\t * \n\t * Returns true if the console is visible.\n\t */\n\tisVisible: function()\n\t{\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\treturn mxLog.window.isVisible();\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\n\t/**\n\t * Function: show\n\t * \n\t * Shows the console.\n\t */\n\tshow: function()\n\t{\n\t\tmxLog.setVisible(true);\n\t},\n\n\t/**\n\t * Function: setVisible\n\t * \n\t * Shows or hides the console.\n\t */\n\tsetVisible: function(visible)\n\t{\n\t\tif (mxLog.window == null)\n\t\t{\n\t\t\tmxLog.init();\n\t\t}\n\n\t\tif (mxLog.window != null)\n\t\t{\n\t\t\tmxLog.window.setVisible(visible);\n\t\t}\n\t},\n\n\t/**\n\t * Function: enter\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and returns the current \n\t * time in milliseconds.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * var t0 = mxLog.enter('Hello');\n\t * // Do something\n\t * mxLog.leave('World!', t0);\n\t * (end)\n\t */\n\tenter: function(string)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tmxLog.writeln('Entering '+string);\n\t\t\t\n\t\t\treturn new Date().getTime();\n\t\t}\n\t},\n\n\t/**\n\t * Function: leave\n\t * \n\t * Writes the specified string to the console\n\t * if <TRACE> is true and computes the difference\n\t * between the current time and t0 in milliseconds.\n\t * See <enter> for an example.\n\t */\n\tleave: function(string, t0)\n\t{\n\t\tif (mxLog.TRACE)\n\t\t{\n\t\t\tvar dt = (t0 != 0) ? ' ('+(new Date().getTime() - t0)+' ms)' : '';\n\t\t\tmxLog.writeln('Leaving '+string+dt);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: debug\n\t * \n\t * Adds all arguments to the console if <DEBUG> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.debug('Hello, World!');\n\t * (end)\n\t */\n\tdebug: function()\n\t{\n\t\tif (mxLog.DEBUG)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: warn\n\t * \n\t * Adds all arguments to the console if <WARN> is enabled.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxLog.show();\n\t * mxLog.warn('Hello, World!');\n\t * (end)\n\t */\n\twarn: function()\n\t{\n\t\tif (mxLog.WARN)\n\t\t{\n\t\t\tmxLog.writeln.apply(this, arguments);\n\t\t}\n\t},\n\n\t/**\n\t * Function: write\n\t * \n\t * Adds the specified strings to the console.\n\t */\n\twrite: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (mxLog.textarea != null)\n\t\t{\n\t\t\tmxLog.textarea.value = mxLog.textarea.value + string;\n\n\t\t\t// Workaround for no update in Presto 2.5.22 (Opera 10.5)\n\t\t\tif (navigator.userAgent.indexOf('Presto/2.5') >= 0)\n\t\t\t{\n\t\t\t\tmxLog.textarea.style.visibility = 'hidden';\n\t\t\t\tmxLog.textarea.style.visibility = 'visible';\n\t\t\t}\n\t\t\t\n\t\t\tmxLog.textarea.scrollTop = mxLog.textarea.scrollHeight;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxLog.buffer += string;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Adds the specified strings to the console, appending a linefeed at the\n\t * end of each string.\n\t */\n\twriteln: function()\n\t{\n\t\tvar string = '';\n\t\t\n\t\tfor (var i = 0; i < arguments.length; i++)\n\t\t{\n\t\t\tstring += arguments[i];\n\t\t\t\n\t\t\tif (i < arguments.length - 1)\n\t\t\t{\n\t\t\t\tstring += ' ';\n\t\t\t}\n\t\t}\n\n\t\tmxLog.write(string + '\\n');\n\t}\n\t\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxObjectIdentity =\n{\n\t/**\n\t * Class: mxObjectIdentity\n\t * \n\t * Identity for JavaScript objects and functions. This is implemented using\n\t * a simple incrementing counter which is stored in each object under\n\t * <FIELD_NAME>.\n\t * \n\t * The identity for an object does not change during its lifecycle.\n\t * \n\t * Variable: FIELD_NAME\n\t * \n\t * Name of the field to be used to store the object ID. Default is\n\t * <code>mxObjectId</code>.\n\t */\n\tFIELD_NAME: 'mxObjectId',\n\n\t/**\n\t * Variable: counter\n\t * \n\t * Current counter.\n\t */\n\tcounter: 0,\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the ID for the given object or function or null if no object\n\t * is specified.\n\t */\n\tget: function(obj)\n\t{\n\t\tif (obj != null)\n\t\t{\n\t\t\tif (obj[mxObjectIdentity.FIELD_NAME] == null)\n\t\t\t{\n\t\t\t\tif (typeof obj === 'object')\n\t\t\t\t{\n\t\t\t\t\tvar ctor = mxUtils.getFunctionName(obj.constructor);\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = ctor + '#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t\telse if (typeof obj === 'function')\n\t\t\t\t{\n\t\t\t\t\tobj[mxObjectIdentity.FIELD_NAME] = 'Function#' + mxObjectIdentity.counter++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: clear\n\t * \n\t * Deletes the ID from the given object or function.\n\t */\n\tclear: function(obj)\n\t{\n\t\tif (typeof(obj) === 'object' || typeof obj === 'function')\n\t\t{\n\t\t\tdelete obj[mxObjectIdentity.FIELD_NAME];\n\t\t}\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDictionary\n *\n * A wrapper class for an associative array with object keys. Note: This\n * implementation uses <mxObjectIdentitiy> to turn object keys into strings.\n * \n * Constructor: mxEventSource\n *\n * Constructs a new dictionary which allows object to be used as keys.\n */\nfunction mxDictionary()\n{\n\tthis.clear();\n};\n\n/**\n * Function: map\n *\n * Stores the (key, value) pairs in this dictionary.\n */\nmxDictionary.prototype.map = null;\n\n/**\n * Function: clear\n *\n * Clears the dictionary.\n */\nmxDictionary.prototype.clear = function()\n{\n\tthis.map = {};\n};\n\n/**\n * Function: get\n *\n * Returns the value for the given key.\n */\nmxDictionary.prototype.get = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\t\n\treturn this.map[id];\n};\n\n/**\n * Function: put\n *\n * Stores the value under the given key and returns the previous\n * value for that key.\n */\nmxDictionary.prototype.put = function(key, value)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tthis.map[id] = value;\n\t\n\treturn previous;\n};\n\n/**\n * Function: remove\n *\n * Removes the value for the given key and returns the value that\n * has been removed.\n */\nmxDictionary.prototype.remove = function(key)\n{\n\tvar id = mxObjectIdentity.get(key);\n\tvar previous = this.map[id];\n\tdelete this.map[id];\n\t\n\treturn previous;\n};\n\n/**\n * Function: getKeys\n *\n * Returns all keys as an array.\n */\nmxDictionary.prototype.getKeys = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(key);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getValues\n *\n * Returns all values as an array.\n */\nmxDictionary.prototype.getValues = function()\n{\n\tvar result = [];\n\t\n\tfor (var key in this.map)\n\t{\n\t\tresult.push(this.map[key]);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: visit\n *\n * Visits all entries in the dictionary using the given function with the\n * following signature: function(key, value) where key is a string and\n * value is an object.\n * \n * Parameters:\n * \n * visitor - A function that takes the key and value as arguments.\n */\nmxDictionary.prototype.visit = function(visitor)\n{\n\tfor (var key in this.map)\n\t{\n\t\tvisitor(key, this.map[key]);\n\t}\n};\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\nvar mxResources =\n{\n\t/**\n\t * Class: mxResources\n\t * \n\t * Implements internationalization. You can provide any number of \n\t * resource files on the server using the following format for the \n\t * filename: name[-en].properties. The en stands for any lowercase \n\t * 2-character language shortcut (eg. de for german, fr for french).\n\t *\n\t * If the optional language extension is omitted, then the file is used as a \n\t * default resource which is loaded in all cases. If a properties file for a \n\t * specific language exists, then it is used to override the settings in the \n\t * default resource. All entries in the file are of the form key=value. The\n\t * values may then be accessed in code via <get>. Lines without \n\t * equal signs in the properties files are ignored.\n\t *\n\t * Resource files may either be added programmatically using\n\t * <add> or via a resource tag in the UI section of the \n\t * editor configuration file, eg:\n\t * \n\t * (code)\n\t * <mxEditor>\n\t *   <ui>\n\t *     <resource basename=\"examples/resources/mxWorkflow\"/>\n\t * (end)\n\t * \n\t * The above element will load examples/resources/mxWorkflow.properties as well\n\t * as the language specific file for the current language, if it exists.\n\t * \n\t * Values may contain placeholders of the form {1}...{n} where each placeholder\n\t * is replaced with the value of the corresponding array element in the params\n\t * argument passed to <mxResources.get>. The placeholder {1} maps to the first\n\t * element in the array (at index 0).\n\t * \n\t * See <mxClient.language> for more information on specifying the default\n\t * language or disabling all loading of resources.\n\t * \n\t * Lines that start with a # sign will be ignored.\n\t * \n\t * Special characters\n\t * \n\t * To use unicode characters, use the standard notation (eg. \\u8fd1) or %u as a\n\t * prefix (eg. %u20AC will display a Euro sign). For normal hex encoded strings,\n\t * use % as a prefix, eg. %F6 will display a \"o umlaut\" (&ouml;).\n\t * \n\t * See <resourcesEncoded> to disable this. If you disable this, make sure that\n\t * your files are UTF-8 encoded.\n\t * \n\t * Asynchronous loading\n\t * \n\t * By default, the core adds two resource files synchronously at load time.\n\t * To load these files asynchronously, set <mxLoadResources> to false\n\t * before loading mxClient.js and use <mxResources.loadResources> instead.\n\t * \n\t * Variable: resources\n\t * \n\t * Object that maps from keys to values.\n\t */\n\tresources: {},\n\n\t/**\n\t * Variable: extension\n\t * \n\t * Specifies the extension used for language files. Default is <mxResourceExtension>.\n\t */\n\textension: mxResourceExtension,\n\n\t/**\n\t * Variable: resourcesEncoded\n\t * \n\t * Specifies whether or not values in resource files are encoded with \\u or\n\t * percentage. Default is false.\n\t */\n\tresourcesEncoded: false,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the default file for a given basename should be loaded.\n\t * Default is true.\n\t */\n\tloadDefaultBundle: true,\n\n\t/**\n\t * Variable: loadDefaultBundle\n\t * \n\t * Specifies if the specific language file file for a given basename should\n\t * be loaded. Default is true.\n\t */\n\tloadSpecialBundle: true,\n\n\t/**\n\t * Function: isLanguageSupported\n\t * \n\t * Hook for subclassers to disable support for a given language. This\n\t * implementation returns true if lan is in <mxClient.languages>.\n\t * \n\t * Parameters:\n\t *\n\t * lan - The current language.\n\t */\n\tisLanguageSupported: function(lan)\n\t{\n\t\tif (mxClient.languages != null)\n\t\t{\n\t\t\treturn mxUtils.indexOf(mxClient.languages, lan) >= 0;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getDefaultBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + <extension> or null if\n\t * <loadDefaultBundle> is false.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The current language.\n\t */\n\tgetDefaultBundle: function(basename, lan)\n\t{\n\t\tif (mxResources.loadDefaultBundle || !mxResources.isLanguageSupported(lan))\n\t\t{\n\t\t\treturn basename + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: getSpecialBundle\n\t * \n\t * Hook for subclassers to return the URL for the special bundle. This\n\t * implementation returns basename + '_' + lan + <extension> or null if\n\t * <loadSpecialBundle> is false or lan equals <mxClient.defaultLanguage>.\n\t * \n\t * If <mxResources.languages> is not null and <mxClient.language> contains\n\t * a dash, then this method checks if <isLanguageSupported> returns true\n\t * for the full language (including the dash). If that returns false the\n\t * first part of the language (up to the dash) will be tried as an extension.\n\t * \n\t * If <mxResources.language> is null then the first part of the language is\n\t * used to maintain backwards compatibility.\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t */\n\tgetSpecialBundle: function(basename, lan)\n\t{\n\t\tif (mxClient.languages == null || !this.isLanguageSupported(lan))\n\t\t{\n\t\t\tvar dash = lan.indexOf('-');\n\t\t\t\n\t\t\tif (dash > 0)\n\t\t\t{\n\t\t\t\tlan = lan.substring(0, dash);\n\t\t\t}\n\t\t}\n\n\t\tif (mxResources.loadSpecialBundle && mxResources.isLanguageSupported(lan) && lan != mxClient.defaultLanguage)\n\t\t{\n\t\t\treturn basename + '_' + lan + mxResources.extension;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t},\n\n\t/**\n\t * Function: add\n\t * \n\t * Adds the default and current language properties file for the specified\n\t * basename. Existing keys are overridden as new files are added. If no\n\t * callback is used then the request is synchronous.\n\t *\n\t * Example:\n\t * \n\t * At application startup, additional resources may be \n\t * added using the following code:\n\t * \n\t * (code)\n\t * mxResources.add('resources/editor');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * basename - The basename for which the file should be loaded.\n\t * lan - The language for which the file should be loaded.\n\t * callback - Optional callback for asynchronous loading.\n\t */\n\tadd: function(basename, lan, callback)\n\t{\n\t\tlan = (lan != null) ? lan : ((mxClient.language != null) ?\n\t\t\tmxClient.language.toLowerCase() : mxConstants.NONE);\n\t\t\n\t\tif (lan != mxConstants.NONE)\n\t\t{\n\t\t\tvar defaultBundle = mxResources.getDefaultBundle(basename, lan);\n\t\t\tvar specialBundle = mxResources.getSpecialBundle(basename, lan);\n\t\t\t\n\t\t\tvar loadSpecialBundle = function()\n\t\t\t{\n\t\t\t\tif (specialBundle != null)\n\t\t\t\t{\n\t\t\t\t\tif (callback)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxUtils.get(specialBundle, function(req)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t}, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcallback();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t   \t\tvar req = mxUtils.load(specialBundle);\n\t\t\t\t\t   \t\t\n\t\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t\t   \t\t{\n\t\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t\t   \t\t}\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\tcatch (e)\n\t\t\t\t   \t\t{\n\t\t\t\t   \t\t\t// ignore\n\t\t\t\t\t   \t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (callback != null)\n\t\t\t\t{\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (defaultBundle != null)\n\t\t\t{\n\t\t\t\tif (callback)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.get(defaultBundle, function(req)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxResources.parse(req.getText());\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t}, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tloadSpecialBundle();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t   \t\tvar req = mxUtils.load(defaultBundle);\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tif (req.isReady())\n\t\t\t\t   \t\t{\n\t\t\t\t \t   \t\tmxResources.parse(req.getText());\n\t\t\t\t   \t\t}\n\t\t\t\t   \t\t\n\t\t\t\t   \t\tloadSpecialBundle();\n\t\t\t\t  \t}\n\t\t\t\t  \tcatch (e)\n\t\t\t\t  \t{\n\t\t\t\t  \t\t// ignore\n\t\t\t\t  \t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Overlays the language specific file (_lan-extension)\n\t\t\t\tloadSpecialBundle();\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: parse\n\t * \n\t * Parses the key, value pairs in the specified\n\t * text and stores them as local resources.\n\t */\n\tparse: function(text)\n\t{\n\t\tif (text != null)\n\t\t{\n\t\t\tvar lines = text.split('\\n');\n\t\t\t\n\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t{\n\t\t\t\tif (lines[i].charAt(0) != '#')\n\t\t\t\t{\n\t\t\t\t\tvar index = lines[i].indexOf('=');\n\t\t\t\t\t\n\t\t\t\t\tif (index > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar key = lines[i].substring(0, index);\n\t\t\t\t\t\tvar idx = lines[i].length;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (lines[i].charCodeAt(idx - 1) == 13)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tidx--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar value = lines[i].substring(index + 1, idx);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.resourcesEncoded)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = value.replace(/\\\\(?=u[a-fA-F\\d]{4})/g,\"%\");\n\t\t\t\t\t\t\tmxResources.resources[key] = unescape(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxResources.resources[key] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Returns the value for the specified resource key.\n\t *\n\t * Example:\n\t * To read the value for 'welomeMessage', use the following:\n\t * (code)\n\t * var result = mxResources.get('welcomeMessage') || '';\n\t * (end)\n\t *\n\t * This would require an entry of the following form in\n\t * one of the English language resource files:\n\t * (code)\n\t * welcomeMessage=Welcome to mxGraph!\n\t * (end)\n\t * \n\t * The part behind the || is the string value to be used if the given\n\t * resource is not available.\n\t * \n\t * Parameters:\n\t * \n\t * key - String that represents the key of the resource to be returned.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t * defaultValue - Optional string that specifies the default return value.\n\t */\n\tget: function(key, params, defaultValue)\n\t{\n\t\tvar value = mxResources.resources[key];\n\t\t\n\t\t// Applies the default value if no resource was found\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\t\n\t\t// Replaces the placeholders with the values in the array\n\t\tif (value != null && params != null)\n\t\t{\n\t\t\tvalue = mxResources.replacePlaceholders(value, params);\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: replacePlaceholders\n\t * \n\t * Replaces the given placeholders with the given parameters.\n\t * \n\t * Parameters:\n\t * \n\t * value - String that contains the placeholders.\n\t * params - Array of the values for the placeholders of the form {1}...{n}\n\t * to be replaced with in the resulting string.\n\t */\n\treplacePlaceholders: function(value, params)\n\t{\n\t\tvar result = [];\n\t\tvar index = null;\n\t\t\n\t\tfor (var i = 0; i < value.length; i++)\n\t\t{\n\t\t\tvar c = value.charAt(i);\n\n\t\t\tif (c == '{')\n\t\t\t{\n\t\t\t\tindex = '';\n\t\t\t}\n\t\t\telse if (index != null && \tc == '}')\n\t\t\t{\n\t\t\t\tindex = parseInt(index)-1;\n\t\t\t\t\n\t\t\t\tif (index >= 0 && index < params.length)\n\t\t\t\t{\n\t\t\t\t\tresult.push(params[index]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tindex = null;\n\t\t\t}\n\t\t\telse if (index != null)\n\t\t\t{\n\t\t\t\tindex += c;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(c);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\n\t/**\n\t * Function: loadResources\n\t * \n\t * Loads all required resources asynchronously. Use this to load the graph and\n\t * editor resources if <mxLoadResources> is false.\n\t * \n\t * Parameters:\n\t * \n\t * callback - Callback function for asynchronous loading.\n\t */\n\tloadResources: function(callback)\n\t{\n\t\tmxResources.add(mxClient.basePath+'/resources/editor', null, function()\n\t\t{\n\t\t\tmxResources.add(mxClient.basePath+'/resources/graph', null, callback);\n\t\t});\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPoint\n *\n * Implements a 2-dimensional vector with double precision coordinates.\n * \n * Constructor: mxPoint\n *\n * Constructs a new point for the optional x and y coordinates. If no\n * coordinates are given, then the default values for <x> and <y> are used.\n */\nfunction mxPoint(x, y)\n{\n\tthis.x = (x != null) ? x : 0;\n\tthis.y = (y != null) ? y : 0;\n};\n\n/**\n * Variable: x\n *\n * Holds the x-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.x = null;\n\n/**\n * Variable: y\n *\n * Holds the y-coordinate of the point. Default is 0.\n */\nmxPoint.prototype.y = null;\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this point.\n */\nmxPoint.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxPoint.prototype.clone = function()\n{\n\t// Handles subclasses as well\n\treturn mxUtils.clone(this);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangle\n *\n * Extends <mxPoint> to implement a 2-dimensional rectangle with double\n * precision coordinates.\n * \n * Constructor: mxRectangle\n *\n * Constructs a new rectangle for the optional parameters. If no parameters\n * are given then the respective default values are used.\n */\nfunction mxRectangle(x, y, width, height)\n{\n\tmxPoint.call(this, x, y);\n\n\tthis.width = (width != null) ? width : 0;\n\tthis.height = (height != null) ? height : 0;\n};\n\n/**\n * Extends mxPoint.\n */\nmxRectangle.prototype = new mxPoint();\nmxRectangle.prototype.constructor = mxRectangle;\n\n/**\n * Variable: width\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxRectangle.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxRectangle.prototype.height = null;\n\n/**\n * Function: setRect\n * \n * Sets this rectangle to the specified values\n */\nmxRectangle.prototype.setRect = function(x, y, w, h)\n{\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n};\n\n/**\n * Function: getCenterX\n * \n * Returns the x-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterX = function ()\n{\n\treturn this.x + this.width/2;\n};\n\n/**\n * Function: getCenterY\n * \n * Returns the y-coordinate of the center point.\n */\nmxRectangle.prototype.getCenterY = function ()\n{\n\treturn this.y + this.height/2;\n};\n\n/**\n * Function: add\n *\n * Adds the given rectangle to this rectangle.\n */\nmxRectangle.prototype.add = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar minX = Math.min(this.x, rect.x);\n\t\tvar minY = Math.min(this.y, rect.y);\n\t\tvar maxX = Math.max(this.x + this.width, rect.x + rect.width);\n\t\tvar maxY = Math.max(this.y + this.height, rect.y + rect.height);\n\t\t\n\t\tthis.x = minX;\n\t\tthis.y = minY;\n\t\tthis.width = maxX - minX;\n\t\tthis.height = maxY - minY;\n\t}\n};\n\n/**\n * Function: intersect\n * \n * Changes this rectangle to where it overlaps with the given rectangle.\n */\nmxRectangle.prototype.intersect = function(rect)\n{\n\tif (rect != null)\n\t{\n\t\tvar r1 = this.x + this.width;\n\t\tvar r2 = rect.x + rect.width;\n\t\t\n\t\tvar b1 = this.y + this.height;\n\t\tvar b2 = rect.y + rect.height;\n\t\t\n\t\tthis.x = Math.max(this.x, rect.x);\n\t\tthis.y = Math.max(this.y, rect.y);\n\t\tthis.width = Math.min(r1, r2) - this.x;\n\t\tthis.height = Math.min(b1, b2) - this.y;\n\t}\n};\n\n/**\n * Function: grow\n *\n * Grows the rectangle by the given amount, that is, this method subtracts\n * the given amount from the x- and y-coordinates and adds twice the amount\n * to the width and height.\n */\nmxRectangle.prototype.grow = function(amount)\n{\n\tthis.x -= amount;\n\tthis.y -= amount;\n\tthis.width += 2 * amount;\n\tthis.height += 2 * amount;\n};\n\n/**\n * Function: getPoint\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxRectangle.prototype.getPoint = function()\n{\n\treturn new mxPoint(this.x, this.y);\n};\n\n/**\n * Function: rotate90\n * \n * Rotates this rectangle by 90 degree around its center point.\n */\nmxRectangle.prototype.rotate90 = function()\n{\n\tvar t = (this.width - this.height) / 2;\n\tthis.x += t;\n\tthis.y -= t;\n\tvar tmp = this.width;\n\tthis.width = this.height;\n\tthis.height = tmp;\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this rectangle.\n */\nmxRectangle.prototype.equals = function(obj)\n{\n\treturn obj != null && obj.x == this.x && obj.y == this.y &&\n\t\tobj.width == this.width && obj.height == this.height;\n};\n\n/**\n * Function: fromRectangle\n * \n * Returns a new <mxRectangle> which is a copy of the given rectangle.\n */\nmxRectangle.fromRectangle = function(rect)\n{\n\treturn new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEffects =\n{\n\n\t/**\n\t * Class: mxEffects\n\t * \n\t * Provides animation effects.\n\t */\n\n\t/**\n\t * Function: animateChanges\n\t * \n\t * Asynchronous animated move operation. See also: <mxMorphing>.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n\t * {\n\t *   var changes = evt.getProperty('edit').changes;\n\t * \n\t *   if (changes.length < 10)\n\t *   {\n\t *     mxEffects.animateChanges(graph, changes);\n\t *   }\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that received the changes.\n\t * changes - Array of changes to be animated.\n\t * done - Optional function argument that is invoked after the\n\t * last step of the animation.\n\t */\n\tanimateChanges: function(graph, changes, done)\n\t{\n\t\tvar maxStep = 10;\n\t\tvar step = 0;\n\n\t\tvar animate = function() \n\t\t{\n\t\t\tvar isRequired = false;\n\t\t\t\n\t\t\tfor (var i = 0; i < changes.length; i++)\n\t\t\t{\n\t\t\t\tvar change = changes[i];\n\t\t\t\t\n\t\t\t\tif (change instanceof mxGeometryChange ||\n\t\t\t\t\tchange instanceof mxTerminalChange ||\n\t\t\t\t\tchange instanceof mxValueChange ||\n\t\t\t\t\tchange instanceof mxChildChange ||\n\t\t\t\t\tchange instanceof mxStyleChange)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.getView().getState(change.cell || change.child, false);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tisRequired = true;\n\t\t\t\t\t\n\t\t\t\t\t\tif (change.constructor != mxGeometryChange || graph.model.isEdge(change.cell))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxUtils.setOpacity(state.shape.node, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\t\n\n\t\t\t\t\t\t\tvar dx = (change.geometry.x - change.previous.x) * scale;\n\t\t\t\t\t\t\tvar dy = (change.geometry.y - change.previous.y) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar sx = (change.geometry.width - change.previous.width) * scale;\n\t\t\t\t\t\t\tvar sy = (change.geometry.height - change.previous.height) * scale;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (step == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x -= dx;\n\t\t\t\t\t\t\t\tstate.y -= dy;\n\t\t\t\t\t\t\t\tstate.width -= sx;\n\t\t\t\t\t\t\t\tstate.height -= sy;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.x += dx / maxStep;\n\t\t\t\t\t\t\t\tstate.y += dy / maxStep;\n\t\t\t\t\t\t\t\tstate.width += sx / maxStep;\n\t\t\t\t\t\t\t\tstate.height += sy / maxStep;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tgraph.cellRenderer.redraw(state);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Fades all connected edges and children\n\t\t\t\t\t\t\tmxEffects.cascadeOpacity(graph, change.cell, 100 * step / maxStep);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (step < maxStep && isRequired)\n\t\t\t{\n\t\t\t\tstep++;\n\t\t\t\twindow.setTimeout(animate, delay);\n\t\t\t}\n\t\t\telse if (done != null)\n\t\t\t{\n\t\t\t\tdone();\n\t\t\t}\n\t\t};\n\t\t\n\t\tvar delay = 30;\n\t\tanimate();\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * Sets the opacity on the given cell and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells.\n\t * cell - <mxCell> to set the opacity for.\n\t * opacity - New value for the opacity in %.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\t// Fades all children\n\t\tvar childCount = graph.model.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar child = graph.model.getChildAt(cell, i);\n\t\t\tvar childState = graph.getView().getState(child);\n\t\t\t\n\t\t\tif (childState != null)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(childState.shape.node, opacity);\n\t\t\t\tmxEffects.cascadeOpacity(graph, child, opacity);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Fades all connected edges\n\t\tvar edges = graph.model.getEdges(cell);\n\t\t\n\t\tif (edges != null)\n\t\t{\n\t\t\tfor (var i=0; i<edges.length; i++)\n\t\t\t{\n\t\t\t\tvar edgeState = graph.getView().getState(edges[i]);\n\t\t\t\t\n\t\t\t\tif (edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmxUtils.setOpacity(edgeState.shape.node, opacity);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * Asynchronous fade-out operation.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tstep = step || 40;\n\t\tdelay = delay || 30;\n\t\t\n\t\tvar opacity = from || 100;\n\t\t\n\t\tmxUtils.setOpacity(node, opacity);\n\t\t\n\t\tif (isEnabled || isEnabled == null)\n\t\t{\n\t\t\tvar f = function()\n\t\t\t{\n\t\t\t    opacity = Math.max(opacity-step, 0);\n\t\t\t\tmxUtils.setOpacity(node, opacity);\n\t\t\t\t\n\t\t\t\tif (opacity > 0)\n\t\t\t\t{\n\t\t\t\t\twindow.setTimeout(f, delay);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\t\t\n\t\t\t\t\tif (remove && node.parentNode)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\twindow.setTimeout(f, delay);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\n\t\t\tif (remove && node.parentNode)\n\t\t\t{\n\t\t\t\tnode.parentNode.removeChild(node);\n\t\t\t}\n\t\t}\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxUtils =\n{\n\t/**\n\t * Class: mxUtils\n\t * \n\t * A singleton class that provides cross-browser helper methods.\n\t * This is a global functionality. To access the functions in this\n\t * class, use the global classname appended by the functionname.\n\t * You may have to load chrome://global/content/contentAreaUtils.js\n\t * to disable certain security restrictions in Mozilla for the <open>,\n\t * <save>, <saveAs> and <copy> function.\n\t * \n\t * For example, the following code displays an error message:\n\t * \n\t * (code)\n\t * mxUtils.error('Browser is not supported!', 200, false);\n\t * (end)\n\t * \n\t * Variable: errorResource\n\t * \n\t * Specifies the resource key for the title of the error window. If the\n\t * resource for this key does not exist then the value is used as\n\t * the title. Default is 'error'.\n\t */\n\terrorResource: (mxClient.language != 'none') ? 'error' : '',\n\t\n\t/**\n\t * Variable: closeResource\n\t * \n\t * Specifies the resource key for the label of the close button. If the\n\t * resource for this key does not exist then the value is used as\n\t * the label. Default is 'close'.\n\t */\n\tcloseResource: (mxClient.language != 'none') ? 'close' : '',\n\n\t/**\n\t * Variable: errorImage\n\t * \n\t * Defines the image used for error dialogs.\n\t */\n\terrorImage: mxClient.imageBasePath + '/error.gif',\n\t\n\t/**\n\t * Function: removeCursors\n\t * \n\t * Removes the cursors from the style of the given DOM node and its\n\t * descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the cursor style from.\n\t */\n\tremoveCursors: function(element)\n\t{\n\t\tif (element.style != null)\n\t\t{\n\t\t\telement.style.cursor = '';\n\t\t}\n\t\t\n\t\tvar children = element.childNodes;\n\t\t\n\t\tif (children != null)\n\t\t{\n\t        var childCount = children.length;\n\t        \n\t        for (var i = 0; i < childCount; i += 1)\n\t        {\n\t            mxUtils.removeCursors(children[i]);\n\t        }\n\t    }\n\t},\n\n\t/**\n\t * Function: getCurrentStyle\n\t * \n\t * Returns the current style of the specified element.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node whose current style should be returned.\n\t */\n\tgetCurrentStyle: function()\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 9))\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ? element.currentStyle : null;\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element)\n\t\t\t{\n\t\t\t\treturn (element != null) ?\n\t\t\t\t\twindow.getComputedStyle(element, '') :\n\t\t\t\t\tnull;\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: parseCssNumber\n\t * \n\t * Parses the given CSS numeric value adding handling for the values thin,\n\t * medium and thick (2, 4 and 6).\n\t */\n\tparseCssNumber: function(value)\n\t{\n\t\tif (value == 'thin')\n\t\t{\n\t\t\tvalue = '2';\n\t\t}\n\t\telse if (value == 'medium')\n\t\t{\n\t\t\tvalue = '4';\n\t\t}\n\t\telse if (value == 'thick')\n\t\t{\n\t\t\tvalue = '6';\n\t\t}\n\t\t\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: setPrefixedStyle\n\t * \n\t * Adds the given style with the standard name and an optional vendor prefix for the current\n\t * browser.\n\t * \n\t * (code)\n\t * mxUtils.setPrefixedStyle(node.style, 'transformOrigin', '0% 0%');\n\t * (end)\n\t */\n\tsetPrefixedStyle: function()\n\t{\n\t\tvar prefix = null;\n\t\t\n\t\tif (mxClient.IS_OT)\n\t\t{\n\t\t\tprefix = 'O';\n\t\t}\n\t\telse if (mxClient.IS_SF || mxClient.IS_GC)\n\t\t{\n\t\t\tprefix = 'Webkit';\n\t\t}\n\t\telse if (mxClient.IS_MT)\n\t\t{\n\t\t\tprefix = 'Moz';\n\t\t}\n\t\telse if (mxClient.IS_IE && document.documentMode >= 9 && document.documentMode < 10)\n\t\t{\n\t\t\tprefix = 'ms';\n\t\t}\n\n\t\treturn function(style, name, value)\n\t\t{\n\t\t\tstyle[name] = value;\n\t\t\t\n\t\t\tif (prefix != null && name.length > 0)\n\t\t\t{\n\t\t\t\tname = prefix + name.substring(0, 1).toUpperCase() + name.substring(1);\n\t\t\t\tstyle[name] = value;\n\t\t\t}\n\t\t};\n\t}(),\n\t\n\t/**\n\t * Function: hasScrollbars\n\t * \n\t * Returns true if the overflow CSS property of the given node is either\n\t * scroll or auto.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose style should be checked for scrollbars.\n\t */\n\thasScrollbars: function(node)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(node);\n\n\t\treturn style != null && (style.overflow == 'scroll' || style.overflow == 'auto');\n\t},\n\t\n\t/**\n\t * Function: bind\n\t * \n\t * Returns a wrapper function that locks the execution scope of the given\n\t * function to the specified scope. Inside funct, the \"this\" keyword\n\t * becomes a reference to that scope.\n\t */\n\tbind: function(scope, funct)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\treturn funct.apply(scope, arguments);\n\t\t};\n\t},\n\t\n\t/**\n\t * Function: eval\n\t * \n\t * Evaluates the given expression using eval and returns the JavaScript\n\t * object that represents the expression result. Supports evaluation of\n\t * expressions that define functions and returns the function object for\n\t * these expressions.\n\t * \n\t * Parameters:\n\t * \n\t * expr - A string that represents a JavaScript expression.\n\t */\n\teval: function(expr)\n\t{\n\t\tvar result = null;\n\n\t\tif (expr.indexOf('function') >= 0)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\teval('var _mxJavaScriptExpression='+expr);\n\t\t\t\tresult = _mxJavaScriptExpression;\n\t\t\t\t// TODO: Use delete here?\n\t\t\t\t_mxJavaScriptExpression = null;\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tresult = eval(expr);\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\tmxLog.warn(e.message + ' while evaluating ' + expr);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNode\n\t * \n\t * Returns the first node where attr equals value.\n\t * This implementation does not use XPath.\n\t */\n\tfindNode: function(node, attr, value)\n\t{\n\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\tvar tmp = node.getAttribute(attr);\n\t\n\t\t\tif (tmp != null && tmp == value)\n\t\t\t{\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tvar result = mxUtils.findNode(node, attr, value);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: getFunctionName\n\t * \n\t * Returns the name for the given function.\n\t * \n\t * Parameters:\n\t * \n\t * f - JavaScript object that represents a function.\n\t */\n\tgetFunctionName: function(f)\n\t{\n\t\tvar str = null;\n\n\t\tif (f != null)\n\t\t{\n\t\t\tif (f.name != null)\n\t\t\t{\n\t\t\t\tstr = f.name;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstr = mxUtils.trim(f.toString());\n\t\t\t\t\n\t\t\t\tif (/^function\\s/.test(str))\n\t\t\t\t{\n\t\t\t\t\tstr = mxUtils.ltrim(str.substring(9));\n\t\t\t\t\tvar idx2 = str.indexOf('(');\n\t\t\t\t\t\n\t\t\t\t\tif (idx2 > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tstr = str.substring(0, idx2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn str;\n\t},\n\n\t/**\n\t * Function: indexOf\n\t * \n\t * Returns the index of obj in array or -1 if the array does not contain\n\t * the given object.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array to check for the given obj.\n\t * obj - Object to find in the given array.\n\t */\n\tindexOf: function(array, obj)\n\t{\n\t\tif (array != null && obj != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tif (array[i] == obj)\n\t\t\t\t{\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn -1;\n\t},\n\n\t/**\n\t * Function: forEach\n\t * \n\t * Calls the given function for each element of the given array and returns\n\t * the array.\n\t * \n\t * Parameters:\n\t * \n\t * array - Array that contains the elements.\n\t * fn - Function to be called for each object.\n\t */\n\tforEach: function(array, fn)\n\t{\n\t\tif (array != null && fn != null)\n\t\t{\n\t\t\tfor (var i = 0; i < array.length; i++)\n\t\t\t{\n\t\t\t\tfn(array[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array;\n\t},\n\n\t/**\n\t * Function: remove\n\t * \n\t * Removes all occurrences of the given object in the given array or\n\t * object. If there are multiple occurrences of the object, be they\n\t * associative or as an array entry, all occurrences are removed from\n\t * the array or deleted from the object. By removing the object from\n\t * the array, all elements following the removed element are shifted\n\t * by one step towards the beginning of the array.\n\t * \n\t * The length of arrays is not modified inside this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to find in the given array.\n\t * array - Array to check for the given obj.\n\t */\n\tremove: function(obj, array)\n\t{\n\t\tvar result = null;\n\t\t\n\t\tif (typeof(array) == 'object')\n\t\t{\n\t\t\tvar index = mxUtils.indexOf(array, obj);\n\t\t\t\n\t\t\twhile (index >= 0)\n\t\t\t{\n\t\t\t\tarray.splice(index, 1);\n\t\t\t\tresult = obj;\n\t\t\t\tindex = mxUtils.indexOf(array, obj);\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in array)\n\t\t{\n\t\t\tif (array[key] == obj)\n\t\t\t{\n\t\t\t\tdelete array[key];\n\t\t\t\tresult = obj;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNode\n\t * \n\t * Returns true if the given value is an XML node with the node name\n\t * and if the optional attribute has the specified value.\n\t * \n\t * This implementation assumes that the given value is a DOM node if the\n\t * nodeType property is numeric, that is, if isNaN returns false for\n\t * value.nodeType.\n\t * \n\t * Parameters:\n\t * \n\t * value - Object that should be examined as a node.\n\t * nodeName - String that specifies the node name.\n\t * attributeName - Optional attribute name to check.\n\t * attributeValue - Optional attribute value to check.\n\t */\n\t isNode: function(value, nodeName, attributeName, attributeValue)\n\t {\n\t \tif (value != null && !isNaN(value.nodeType) && (nodeName == null ||\n\t \t\tvalue.nodeName.toLowerCase() == nodeName.toLowerCase()))\n \t\t{\n \t\t\treturn attributeName == null ||\n \t\t\t\tvalue.getAttribute(attributeName) == attributeValue;\n \t\t}\n\t \t\n\t \treturn false;\n\t },\n\t\n\t/**\n\t * Function: isAncestorNode\n\t * \n\t * Returns true if the given ancestor is an ancestor of the\n\t * given DOM node in the DOM. This also returns true if the\n\t * child is the ancestor.\n\t * \n\t * Parameters:\n\t * \n\t * ancestor - DOM node that represents the ancestor.\n\t * child - DOM node that represents the child.\n\t */\n\t isAncestorNode: function(ancestor, child)\n\t {\n\t \tvar parent = child;\n\t \t\n\t \twhile (parent != null)\n\t \t{\n\t \t\tif (parent == ancestor)\n\t \t\t{\n\t \t\t\treturn true;\n\t \t\t}\n\n\t \t\tparent = parent.parentNode;\n\t \t}\n\t \t\n\t \treturn false;\n\t },\n\n\t/**\n\t * Function: getChildNodes\n\t * \n\t * Returns an array of child nodes that are of the given node type.\n\t * \n\t * Parameters:\n\t * \n\t * node - Parent DOM node to return the children from.\n\t * nodeType - Optional node type to return. Default is\n\t * <mxConstants.NODETYPE_ELEMENT>.\n\t */\n\tgetChildNodes: function(node, nodeType)\n\t{\n\t\tnodeType = nodeType || mxConstants.NODETYPE_ELEMENT;\n\t\t\n\t\tvar children = [];\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == nodeType)\n\t\t\t{\n\t\t\t\tchildren.push(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t\t\n\t\treturn children;\n\t},\n\n\t/**\n\t * Function: importNode\n\t * \n\t * Cross browser implementation for document.importNode. Uses document.importNode\n\t * in all browsers but IE, where the node is cloned by creating a new node and\n\t * copying all attributes and children into it using importNode, recursively.\n\t * \n\t * Parameters:\n\t * \n\t * doc - Document to import the node into.\n\t * node - Node to be imported.\n\t * allChildren - If all children should be imported.\n\t */\n\timportNode: function(doc, node, allChildren)\n\t{\n\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode < 10))\n\t\t{\n\t\t\tswitch (node.nodeType)\n\t\t\t{\n\t\t\t\tcase 1: /* element */\n\t\t\t\t{\n\t\t\t\t\tvar newNode = doc.createElement(node.nodeName);\n\t\t\t\t\t\n\t\t\t\t\tif (node.attributes && node.attributes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var i = 0; i < node.attributes.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnewNode.setAttribute(node.attributes[i].nodeName,\n\t\t\t\t\t\t\t\tnode.getAttribute(node.attributes[i].nodeName));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (allChildren && node.childNodes && node.childNodes.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnewNode.appendChild(mxUtils.importNode(doc, node.childNodes[i], allChildren));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn newNode;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 3: /* text */\n\t\t\t    case 4: /* cdata-section */\n\t\t\t    case 8: /* comment */\n\t\t\t    {\n\t\t\t      return doc.createTextNode(node.value);\n\t\t\t      break;\n\t\t\t    }\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn doc.importNode(node, allChildren);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createXmlDocument\n\t * \n\t * Returns a new, empty XML document.\n\t */\n\tcreateXmlDocument: function()\n\t{\n\t\tvar doc = null;\n\t\t\n\t\tif (document.implementation && document.implementation.createDocument)\n\t\t{\n\t\t\tdoc = document.implementation.createDocument('', '', null);\n\t\t}\n\t\telse if (window.ActiveXObject)\n\t\t{\n\t\t\tdoc = new ActiveXObject('Microsoft.XMLDOM');\n\t \t}\n\t \t\n\t \treturn doc;\n\t},\n\n\t/**\n\t * Function: parseXml\n\t * \n\t * Parses the specified XML string into a new XML document and returns the\n\t * new document.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var doc = mxUtils.parseXml(\n\t *   '<mxGraphModel><root><MyDiagram id=\"0\"><mxCell/></MyDiagram>'+\n\t *   '<MyLayer id=\"1\"><mxCell parent=\"0\" /></MyLayer><MyObject id=\"2\">'+\n\t *   '<mxCell style=\"strokeColor=blue;fillColor=red\" parent=\"1\" vertex=\"1\">'+\n\t *   '<mxGeometry x=\"10\" y=\"10\" width=\"80\" height=\"30\" as=\"geometry\"/>'+\n\t *   '</mxCell></MyObject></root></mxGraphModel>');\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * xml - String that contains the XML data.\n\t */\n\tparseXml: function()\n\t{\n\t\tif (window.DOMParser)\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\n\t\t\t\treturn parser.parseFromString(xml, 'text/xml');\n\t\t\t};\n\t\t}\n\t\telse // IE<=9\n\t\t{\n\t\t\treturn function(xml)\n\t\t\t{\n\t\t\t\tvar result = mxUtils.createXmlDocument();\n\t\t\t\tresult.async = false;\n\t\t\t\t// Workaround for parsing errors with SVG DTD\n\t\t\t\tresult.validateOnParse = false;\n\t\t\t\tresult.resolveExternals = false;\n\t\t\t\tresult.loadXML(xml);\n\t\t\t\t\n\t\t\t\treturn result;\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: clearSelection\n\t * \n\t * Clears the current selection in the page.\n\t */\n\tclearSelection: function()\n\t{\n\t\tif (document.selection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tdocument.selection.empty();\n\t\t\t};\n\t\t}\n\t\telse if (window.getSelection)\n\t\t{\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tif (window.getSelection().empty)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().empty();\n\t\t\t\t}\n\t\t\t\telse if (window.getSelection().removeAllRanges)\n\t\t\t\t{\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function() { };\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getPrettyXML\n\t * \n\t * Returns a pretty printed string that represents the XML tree for the\n\t * given node. This method should only be used to print XML for reading,\n\t * use <getXml> instead to obtain a string for processing.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * tab - Optional string that specifies the indentation for one level.\n\t * Default is two spaces.\n\t * indent - Optional string that represents the current indentation.\n\t * Default is an empty string.\n\t */\n\tgetPrettyXml: function(node, tab, indent)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\ttab = tab || '  ';\n\t\t\tindent = indent || '';\n\t\t\t\n\t\t\tif (node.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t\t{\n\t\t\t\tvar value =  mxUtils.trim(mxUtils.getTextContent(node));\n\t\t\t\t\n\t\t\t\tif (value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(indent + mxUtils.htmlEntities(value) + '\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(indent + '<' + node.nodeName);\n\t\t\t\t\n\t\t\t\t// Creates the string with the node attributes\n\t\t\t\t// and converts all HTML entities in the values\n\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\n\t\t\t\tif (attrs != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar val = mxUtils.htmlEntities(attrs[i].value);\n\t\t\t\t\t\tresult.push(' ' + attrs[i].nodeName + '=\"' + val + '\"');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Recursively creates the XML string for each\n\t\t\t\t// child nodes and appends it here with an\n\t\t\t\t// indentation\n\t\t\t\tvar tmp = node.firstChild;\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tresult.push('>\\n');\n\t\t\t\t\t\n\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(mxUtils.getPrettyXml(tmp, tab, indent + tab));\n\t\t\t\t\t\ttmp = tmp.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresult.push(indent + '</'+node.nodeName + '>\\n');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult.push('/>\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join('');\n\t},\n\t\n\t/**\n\t * Function: removeWhitespace\n\t * \n\t * Removes the sibling text nodes for the given node that only consists\n\t * of tabs, newlines and spaces.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose siblings should be removed.\n\t * before - Optional boolean that specifies the direction of the traversal.\n\t */\n\tremoveWhitespace: function(node, before)\n\t{\n\t\tvar tmp = (before) ? node.previousSibling : node.nextSibling;\n\t\t\n\t\twhile (tmp != null && tmp.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tvar next = (before) ? tmp.previousSibling : tmp.nextSibling;\n\t\t\tvar text = mxUtils.getTextContent(tmp);\n\t\t\t\n\t\t\tif (mxUtils.trim(text).length == 0)\n\t\t\t{\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = next;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: htmlEntities\n\t * \n\t * Replaces characters (less than, greater than, newlines and quotes) with\n\t * their HTML entities in the given string and returns the result.\n\t * \n\t * Parameters:\n\t * \n\t * s - String that contains the characters to be converted.\n\t * newline - If newlines should be replaced. Default is true.\n\t */\n\thtmlEntities: function(s, newline)\n\t{\n\t\ts = String(s || '');\n\t\t\n\t\ts = s.replace(/&/g,'&amp;'); // 38 26\n\t\ts = s.replace(/\"/g,'&quot;'); // 34 22\n\t\ts = s.replace(/\\'/g,'&#39;'); // 39 27\n\t\ts = s.replace(/</g,'&lt;'); // 60 3C\n\t\ts = s.replace(/>/g,'&gt;'); // 62 3E\n\n\t\tif (newline == null || newline)\n\t\t{\n\t\t\ts = s.replace(/\\n/g, '&#xa;');\n\t\t}\n\t\t\n\t\treturn s;\n\t},\n\t\n\t/**\n\t * Function: isVml\n\t * \n\t * Returns true if the given node is in the VML namespace.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose tag urn should be checked.\n\t */\n\tisVml: function(node)\n\t{\n\t\treturn node != null && node.tagUrn == 'urn:schemas-microsoft-com:vml';\n\t},\n\n\t/**\n\t * Function: getXml\n\t * \n\t * Returns the XML content of the specified node. For Internet Explorer,\n\t * all \\r\\n\\t[\\t]* are removed from the XML string and the remaining \\r\\n\n\t * are replaced by \\n. All \\n are then replaced with linefeed, or &#xa; if\n\t * no linefeed is defined.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the XML for.\n\t * linefeed - Optional string that linefeeds are converted into. Default is\n\t * &#xa;\n\t */\n\tgetXml: function(node, linefeed)\n\t{\n\t\tvar xml = '';\n\n\t\tif (window.XMLSerializer != null)\n\t\t{\n\t\t\tvar xmlSerializer = new XMLSerializer();\n\t\t\txml = xmlSerializer.serializeToString(node);     \n\t\t}\n\t\telse if (node.xml != null)\n\t\t{\n\t\t\txml = node.xml.replace(/\\r\\n\\t[\\t]*/g, '').\n\t\t\t\treplace(/>\\r\\n/g, '>').\n\t\t\t\treplace(/\\r\\n/g, '\\n');\n\t\t}\n\n\t\t// Replaces linefeeds with HTML Entities.\n\t\tlinefeed = linefeed || '&#xa;';\n\t\txml = xml.replace(/\\n/g, linefeed);\n\t\t  \n\t\treturn xml;\n\t},\n\t\n\t/**\n\t * Function: extractTextWithWhitespace\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * elems - DOM nodes to return the text for.\n\t */\n\textractTextWithWhitespace: function(elems)\n\t{\n\t    // Known block elements for handling linefeeds (list is not complete)\n\t\tvar blocks = ['BLOCKQUOTE', 'DIV', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'OL', 'P', 'PRE', 'TABLE', 'UL'];\n\t\tvar ret = [];\n\t\t\n\t\tfunction doExtract(elts)\n\t\t{\n\t\t\t// Single break should be ignored\n\t\t\tif (elts.length == 1 && (elts[0].nodeName == 'BR' ||\n\t\t\t\telts[0].innerHTML == '\\n'))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t    for (var i = 0; i < elts.length; i++)\n\t\t    {\n\t\t        var elem = elts[i];\n\n\t\t\t\t// DIV with a br or linefeed forces a linefeed\n\t\t\t\tif (elem.nodeName == 'BR' || elem.innerHTML == '\\n' ||\n\t\t\t\t\t((elts.length == 1 || i == 0) && (elem.nodeName == 'DIV' &&\n\t\t\t\t\telem.innerHTML.toLowerCase() == '<br>')))\n\t\t    \t{\n\t    \t\t\tret.push('\\n');\n\t\t    \t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t        if (elem.nodeType === 3 || elem.nodeType === 4)\n\t\t\t        {\n\t\t\t        \tif (elem.nodeValue.length > 0)\n\t\t\t        \t{\n\t\t\t        \t\tret.push(elem.nodeValue);\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        else if (elem.nodeType !== 8 && elem.childNodes.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdoExtract(elem.childNodes);\n\t\t\t\t\t}\n\t\t\t        \n\t        \t\tif (i < elts.length - 1 && mxUtils.indexOf(blocks, elts[i + 1].nodeName) >= 0)\n\t        \t\t{\n\t        \t\t\tret.push('\\n');\t\t\n\t        \t\t}\n\t\t\t\t}\n\t\t    }\n\t\t};\n\t\t\n\t\tdoExtract(elems);\n\t    \n\t    return ret.join('');\n\t},\n\n\t/**\n\t * Function: replaceTrailingNewlines\n\t * \n\t * Replaces each trailing newline with the given pattern.\n\t */\n\treplaceTrailingNewlines: function(str, pattern)\n\t{\n\t\t// LATER: Check is this can be done with a regular expression\n\t\tvar postfix = '';\n\t\t\n\t\twhile (str.length > 0 && str.charAt(str.length - 1) == '\\n')\n\t\t{\n\t\t\tstr = str.substring(0, str.length - 1);\n\t\t\tpostfix += pattern;\n\t\t}\n\t\t\n\t\treturn str + postfix;\n\t},\n\n\t/**\n\t * Function: getTextContent\n\t * \n\t * Returns the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the text content for.\n\t */\n\tgetTextContent: function(node)\n\t{\n\t\t// Only IE10-\n\t\tif (mxClient.IS_IE && node.innerText !== undefined)\n\t\t{\n\t\t\treturn node.innerText;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn (node != null) ? node[(node.textContent === undefined) ? 'text' : 'textContent'] : '';\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setTextContent\n\t * \n\t * Sets the text content of the specified node.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the text content for.\n\t * text - String that represents the text content.\n\t */\n\tsetTextContent: function(node, text)\n\t{\n\t\tif (node.innerText !== undefined)\n\t\t{\n\t\t\tnode.innerText = text;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode[(node.textContent === undefined) ? 'text' : 'textContent'] = text;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getInnerHtml\n\t * \n\t * Returns the inner HTML for the given node as a string or an empty string\n\t * if no node was specified. The inner HTML is the text representing all\n\t * children of the node, but not the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the inner HTML for.\n\t */\n\tgetInnerHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\treturn node.innerHTML;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: getOuterHtml\n\t * \n\t * Returns the outer HTML for the given node as a string or an empty\n\t * string if no node was specified. The outer HTML is the text representing\n\t * all children of the node including the node itself.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to return the outer HTML for.\n\t */\n\tgetOuterHtml: function()\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tif (node.outerHTML != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn node.outerHTML;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = [];\n\t\t\t\t\t\ttmp.push('<'+node.nodeName);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar attrs = node.attributes;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (attrs != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar value = attrs[i].value;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (value != null && value.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.push(' ');\n\t\t\t\t\t\t\t\t\ttmp.push(attrs[i].nodeName);\n\t\t\t\t\t\t\t\t\ttmp.push('=\"');\n\t\t\t\t\t\t\t\t\ttmp.push(value);\n\t\t\t\t\t\t\t\t\ttmp.push('\"');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (node.innerHTML.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('/>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttmp.push('>');\n\t\t\t\t\t\t\ttmp.push(node.innerHTML);\n\t\t\t\t\t\t\ttmp.push('</'+node.nodeName+'>');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn tmp.join('');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(node)\n\t\t\t{\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tvar serializer = new XMLSerializer();\n\t\t\t\t\treturn serializer.serializeToString(node);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn '';\n\t\t\t};\n\t\t}\n\t}(),\n\t\n\t/**\n\t * Function: write\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twrite: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: writeln\n\t * \n\t * Creates a text node for the given string and appends it to the given\n\t * parent with an additional linefeed. Returns the text node.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text to be added.\n\t */\n\twriteln: function(parent, text)\n\t{\n\t\tvar doc = parent.ownerDocument;\n\t\tvar node = doc.createTextNode(text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(node);\n\t\t\tparent.appendChild(document.createElement('br'));\n\t\t}\n\t\t\n\t\treturn node;\n\t},\n\t\n\t/**\n\t * Function: br\n\t * \n\t * Appends a linebreak to the given parent and returns the linebreak.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the linebreak to.\n\t */\n\tbr: function(parent, count)\n\t{\n\t\tcount = count || 1;\n\t\tvar br = null;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tif (parent != null)\n\t\t\t{\n\t\t\t\tbr = parent.ownerDocument.createElement('br');\n\t\t\t\tparent.appendChild(br);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn br;\n\t},\n\t\t\n\t/**\n\t * Function: button\n\t * \n\t * Returns a new button with the given level and function as an onclick\n\t * event handler.\n\t * \n\t * (code)\n\t * document.body.appendChild(mxUtils.button('Test', function(evt)\n\t * {\n\t *   alert('Hello, World!');\n\t * }));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * label - String that represents the label of the button.\n\t * funct - Function to be called if the button is pressed.\n\t * doc - Optional document to be used for creating the button. Default is the\n\t * current document.\n\t */\n\tbutton: function(label, funct, doc)\n\t{\n\t\tdoc = (doc != null) ? doc : document;\n\t\t\n\t\tvar button = doc.createElement('button');\n\t\tmxUtils.write(button, label);\n\n\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t{\n\t\t\tfunct(evt);\n\t\t});\n\t\t\n\t\treturn button;\n\t},\n\t\n\t/**\n\t * Function: para\n\t * \n\t * Appends a new paragraph with the given text to the specified parent and\n\t * returns the paragraph.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to append the text node to.\n\t * text - String representing the text for the new paragraph.\n\t */\n\tpara: function(parent, text)\n\t{\n\t\tvar p = document.createElement('p');\n\t\tmxUtils.write(p, text);\n\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(p);\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: addTransparentBackgroundFilter\n\t * \n\t * Adds a transparent background to the filter of the given node. This\n\t * background can be used in IE8 standards mode (native IE8 only) to pass\n\t * events through the node.\n\t */\n\taddTransparentBackgroundFilter: function(node)\n\t{\n\t\tnode.style.filter += 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\\'' +\n\t\t\tmxClient.imageBasePath + '/transparent.gif\\', sizingMethod=\\'scale\\')';\n\t},\n\n\t/**\n\t * Function: linkAction\n\t * \n\t * Adds a hyperlink to the specified parent that invokes action on the\n\t * specified editor.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> that will execute the action.\n\t * action - String that defines the name of the action to be executed.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkAction: function(parent, text, editor, action, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor.execute(action);\n\t\t}, pad);\n\t},\n\n\t/**\n\t * Function: linkInvoke\n\t * \n\t * Adds a hyperlink to the specified parent that invokes the specified\n\t * function on the editor passing along the specified argument. The\n\t * function name is the name of a function of the editor instance,\n\t * not an action name.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * editor - <mxEditor> instance to execute the function on.\n\t * functName - String that represents the name of the function.\n\t * arg - Object that represents the argument to the function.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlinkInvoke: function(parent, text, editor, functName, arg, pad)\n\t{\n\t\treturn mxUtils.link(parent, text, function()\n\t\t{\n\t\t\teditor[functName](arg);\n\t\t}, pad);\n\t},\n\t\n\t/**\n\t * Function: link\n\t * \n\t * Adds a hyperlink to the specified parent and invokes the given function\n\t * when the link is clicked.\n\t * \n\t * Parameters:\n\t * \n\t * parent - DOM node to contain the new link.\n\t * text - String that is used as the link label.\n\t * funct - Function to execute when the link is clicked.\n\t * pad - Optional left-padding for the link. Default is 0.\n\t */\n\tlink: function(parent, text, funct, pad)\n\t{\n\t\tvar a = document.createElement('span');\n\t\t\n\t\ta.style.color = 'blue';\n\t\ta.style.textDecoration = 'underline';\n\t\ta.style.cursor = 'pointer';\n\t\t\n\t\tif (pad != null)\n\t\t{\n\t\t\ta.style.paddingLeft = pad+'px';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(a, 'click', funct);\n\t\tmxUtils.write(a, text);\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tparent.appendChild(a);\n\t\t}\n\t\t\n\t\treturn a;\n\t},\n\n\t/**\n\t * Function: fit\n\t * \n\t * Makes sure the given node is inside the visible area of the window. This\n\t * is done by setting the left and top in the style. \n\t */\n\tfit: function(node)\n\t{\n\t\tvar left = parseInt(node.offsetLeft);\n\t\tvar width = parseInt(node.offsetWidth);\n\t\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(node.ownerDocument);\n\t\tvar sl = offset.x;\n\t\tvar st = offset.y;\n\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\tvar right = (sl) + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\tnode.style.left = Math.max(sl, right - width) + 'px';\n\t\t}\n\t\t\n\t\tvar top = parseInt(node.offsetTop);\n\t\tvar height = parseInt(node.offsetHeight);\n\t\t\n\t\tvar bottom = st + Math.max(b.clientHeight || 0, d.clientHeight);\n\t\t\n\t\tif (top + height > bottom)\n\t\t{\n\t\t\tnode.style.top = Math.max(st, bottom - height) + 'px';\n\t\t}\n\t},\n\n\t/**\n\t * Function: load\n\t * \n\t * Loads the specified URL *synchronously* and returns the <mxXmlRequest>.\n\t * Throws an exception if the file cannot be loaded. See <mxUtils.get> for\n\t * an asynchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * try\n\t * {\n\t *   var req = mxUtils.load(filename);\n\t *   var root = req.getDocumentElement();\n\t *   // Process XML DOM...\n\t * }\n\t * catch (ex)\n\t * {\n\t *   mxUtils.alert('Cannot load '+filename+': '+ex);\n\t * }\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t */\n\tload: function(url)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET', false);\n\t\treq.send();\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: get\n\t * \n\t * Loads the specified URL *asynchronously* and invokes the given functions\n\t * depending on the request status. Returns the <mxXmlRequest> in use. Both\n\t * functions take the <mxXmlRequest> as the only parameter. See\n\t * <mxUtils.load> for a synchronous implementation.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *    var node = req.getDocumentElement();\n\t *    // Process XML DOM...\n\t * });\n\t * (end)\n\t * \n\t * So for example, to load a diagram into an existing graph model, the\n\t * following code is used.\n\t * \n\t * (code)\n\t * mxUtils.get(url, function(req)\n\t * {\n\t *   var node = req.getDocumentElement();\n\t *   var dec = new mxCodec(node.ownerDocument);\n\t *   dec.decode(node, graph.getModel());\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t * binary - Optional boolean parameter that specifies if the request is\n\t * binary.\n\t * timeout - Optional timeout in ms before calling ontimeout.\n\t * ontimeout - Optional function to execute on timeout.\n\t */\n\tget: function(url, onload, onerror, binary, timeout, ontimeout)\n\t{\n\t\tvar req = new mxXmlRequest(url, null, 'GET');\n\t\t\n\t\tif (binary != null)\n\t\t{\n\t\t\treq.setBinary(binary);\n\t\t}\n\t\t\n\t\treq.send(onload, onerror, timeout, ontimeout);\n\t\t\n\t\treturn req;\n\t},\n\n\t/**\n\t * Function: getAll\n\t * \n\t * Loads the URLs in the given array *asynchronously* and invokes the given function\n\t * if all requests returned with a valid 2xx status. The error handler is invoked\n\t * once on the first error or invalid response.\n\t *\n\t * Parameters:\n\t * \n\t * urls - Array of URLs to be loaded.\n\t * onload - Callback with array of <mxXmlRequests>.\n\t * onerror - Optional function to execute on error.\n\t */\n\tgetAll: function(urls, onload, onerror)\n\t{\n\t\tvar remain = urls.length;\n\t\tvar result = [];\n\t\tvar errors = 0;\n\t\tvar err = function()\n\t\t{\n\t\t\tif (errors == 0 && onerror != null)\n\t\t\t{\n\t\t\t\tonerror();\n\t\t\t}\n\n\t\t\terrors++;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < urls.length; i++)\n\t\t{\n\t\t\t(function(url, index)\n\t\t\t{\n\t\t\t\tmxUtils.get(url, function(req)\n\t\t\t\t{\n\t\t\t\t\tvar status = req.getStatus();\n\t\t\t\t\t\n\t\t\t\t\tif (status < 200 || status > 299)\n\t\t\t\t\t{\n\t\t\t\t\t\terr();\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult[index] = req;\n\t\t\t\t\t\tremain--;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (remain == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tonload(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, err);\n\t\t\t})(urls[i], i);\n\t\t}\n\t\t\n\t\tif (remain == 0)\n\t\t{\n\t\t\tonload(result);\t\t\t\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: post\n\t * \n\t * Posts the specified params to the given URL *asynchronously* and invokes\n\t * the given functions depending on the request status. Returns the\n\t * <mxXmlRequest> in use. Both functions take the <mxXmlRequest> as the\n\t * only parameter. Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxUtils.post(url, 'key=value', function(req)\n\t * {\n\t * \tmxUtils.alert('Ready: '+req.isReady()+' Status: '+req.getStatus());\n\t *  // Process req.getDocumentElement() using DOM API if OK...\n\t * });\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the post request.\n\t * onload - Optional function to execute for a successful response.\n\t * onerror - Optional function to execute on error.\n\t */\n\tpost: function(url, params, onload, onerror)\n\t{\n\t\treturn new mxXmlRequest(url, params).send(onload, onerror);\n\t},\n\t\n\t/**\n\t * Function: submit\n\t * \n\t * Submits the given parameters to the specified URL using\n\t * <mxXmlRequest.simulate> and returns the <mxXmlRequest>.\n\t * Make sure to use encodeURIComponent for the parameter\n\t * values.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * params - Parameters for the form.\n\t * doc - Document to create the form in.\n\t * target - Target to send the form result to.\n\t */\n\tsubmit: function(url, params, doc, target)\n\t{\n\t\treturn new mxXmlRequest(url, params).simulate(doc, target);\n\t},\n\t\n\t/**\n\t * Function: loadInto\n\t * \n\t * Loads the specified URL *asynchronously* into the specified document,\n\t * invoking onload after the document has been loaded. This implementation\n\t * does not use <mxXmlRequest>, but the document.load method.\n\t * \n\t * Parameters:\n\t * \n\t * url - URL to get the data from.\n\t * doc - The document to load the URL into.\n\t * onload - Function to execute when the URL has been loaded.\n\t */\n\tloadInto: function(url, doc, onload)\n\t{\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tdoc.onreadystatechange = function ()\n\t\t\t{\n\t\t\t\tif (doc.readyState == 4)\n\t\t\t\t{\n\t\t\t\t\tonload();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.addEventListener('load', onload, false);\n\t\t}\n\t\t\n\t\tdoc.load(url);\n\t},\n\t\n\t/**\n\t * Function: getValue\n\t * \n\t * Returns the value for the given key in the given associative array or\n\t * the given default value if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null.\n\t */\n\tgetValue: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\t\t\t\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\t\n\t/**\n\t * Function: getNumber\n\t * \n\t * Returns the numeric value for the given key in the given associative\n\t * array or the given default value (or 0) if the value is null. The value\n\t * is converted to a numeric value using the Number function.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is 0.\n\t */\n\tgetNumber: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue || 0;\t\t\t\n\t\t}\n\t\t\n\t\treturn Number(value);\n\t},\n\t\n\t/**\n\t * Function: getColor\n\t * \n\t * Returns the color value for the given key in the given associative\n\t * array or the given default value if the value is null. If the value\n\t * is <mxConstants.NONE> then null is returned.\n\t * \n\t * Parameters:\n\t * \n\t * array - Associative array that contains the value for the key.\n\t * key - Key whose value should be returned.\n\t * defaultValue - Value to be returned if the value for the given\n\t * key is null. Default is null.\n\t */\n\tgetColor: function(array, key, defaultValue)\n\t{\n\t\tvar value = (array != null) ? array[key] : null;\n\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\telse if (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: clone\n\t * \n\t * Recursively clones the specified object ignoring all fieldnames in the\n\t * given array of transient fields. <mxObjectIdentity.FIELD_NAME> is always\n\t * ignored by this function.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to be cloned.\n\t * transients - Optional array of strings representing the fieldname to be\n\t * ignored.\n\t * shallow - Optional boolean argument to specify if a shallow clone should\n\t * be created, that is, one where all object references are not cloned or,\n\t * in other words, one where only atomic (strings, numbers) values are\n\t * cloned. Default is false.\n\t */\n\tclone: function(obj, transients, shallow)\n\t{\n\t\tshallow = (shallow != null) ? shallow : false;\n\t\tvar clone = null;\n\t\t\n\t\tif (obj != null && typeof(obj.constructor) == 'function')\n\t\t{\n\t\t\tclone = new obj.constructor();\n\t\t\t\n\t\t    for (var i in obj)\n\t\t    {\n\t\t    \tif (i != mxObjectIdentity.FIELD_NAME && (transients == null ||\n\t\t    \t\tmxUtils.indexOf(transients, i) < 0))\n\t\t    \t{\n\t\t\t    \tif (!shallow && typeof(obj[i]) == 'object')\n\t\t\t    \t{\n\t\t\t            clone[i] = mxUtils.clone(obj[i]);\n\t\t\t        }\n\t\t\t        else\n\t\t\t        {\n\t\t\t            clone[i] = obj[i];\n\t\t\t        }\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t    return clone;\n\t},\n\n\t/**\n\t * Function: equalPoints\n\t * \n\t * Compares all mxPoints in the given lists.\n\t * \n\t * Parameters:\n\t * \n\t * a - Array of <mxPoints> to be compared.\n\t * b - Array of <mxPoints> to be compared.\n\t */\n\tequalPoints: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\tfor (var i = 0; i < a.length; i++)\n\t\t\t{\n\t\t\t\tif (a[i] == b[i] || (a[i] != null && !a[i].equals(b[i])))\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: equalEntries\n\t * \n\t * Returns true if all properties of the given objects are equal. Values\n\t * with NaN are equal to NaN and unequal to any other value.\n\t * \n\t * Parameters:\n\t * \n\t * a - First object to be compared.\n\t * b - Second object to be compared.\n\t */\n\tequalEntries: function(a, b)\n\t{\n\t\tif ((a == null && b != null) || (a != null && b == null) ||\n\t\t\t(a != null && b != null && a.length != b.length))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse if (a != null && b != null)\n\t\t{\n\t\t\t// Counts keys in b to check if all values have been compared\n\t\t\tvar count = 0;\n\t\t\t\n\t\t\tfor (var key in b)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\t\n\t\t\tfor (var key in a)\n\t\t\t{\n\t\t\t\tcount--\n\t\t\t\t\n\t\t\t\tif ((!mxUtils.isNaN(a[key]) || !mxUtils.isNaN(b[key])) && a[key] != b[key])\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn count == 0;\n\t},\n\t\n\t/**\n\t * Function: removeDuplicates\n\t * \n\t * Removes all duplicates from the given array.\n\t */\n\tremoveDuplicates: function(arr)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < arr.length; i++)\n\t\t{\n\t\t\tif (!dict.get(arr[i]))\n\t\t\t{\n\t\t\t\tresult.push(arr[i]);\n\t\t\t\tdict.put(arr[i], true);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: isNaN\n\t *\n\t * Returns true if the given value is of type number and isNaN returns true.\n\t */\n\tisNaN: function(value)\n\t{\n\t\treturn typeof(value) == 'number' && isNaN(value);\n\t},\n\t\n\t/**\n\t * Function: extend\n\t *\n\t * Assigns a copy of the superclass prototype to the subclass prototype.\n\t * Note that this does not call the constructor of the superclass at this\n\t * point, the superclass constructor should be called explicitely in the\n\t * subclass constructor. Below is an example.\n\t * \n\t * (code)\n\t * MyGraph = function(container, model, renderHint, stylesheet)\n\t * {\n\t *   mxGraph.call(this, container, model, renderHint, stylesheet);\n\t * }\n\t * \n\t * mxUtils.extend(MyGraph, mxGraph);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * ctor - Constructor of the subclass.\n\t * superCtor - Constructor of the superclass.\n\t */\n\textend: function(ctor, superCtor)\n\t{\n\t\tvar f = function() {};\n\t\tf.prototype = superCtor.prototype;\n\t\t\n\t\tctor.prototype = new f();\n\t\tctor.prototype.constructor = ctor;\n\t},\n\n\t/**\n\t * Function: toString\n\t * \n\t * Returns a textual representation of the specified object.\n\t * \n\t * Parameters:\n\t * \n\t * obj - Object to return the string representation for.\n\t */\n\ttoString: function(obj)\n\t{\n\t    var output = '';\n\t    \n\t    for (var i in obj)\n\t    {\n\t    \ttry\n\t    \t{\n\t\t\t    if (obj[i] == null)\n\t\t\t    {\n\t\t            output += i + ' = [null]\\n';\n\t\t\t    }\n\t\t\t    else if (typeof(obj[i]) == 'function')\n\t\t\t    {\n\t\t            output += i + ' => [Function]\\n';\n\t\t        }\n\t\t        else if (typeof(obj[i]) == 'object')\n\t\t        {\n\t\t        \tvar ctor = mxUtils.getFunctionName(obj[i].constructor); \n\t\t            output += i + ' => [' + ctor + ']\\n';\n\t\t        }\n\t\t        else\n\t\t        {\n\t\t            output += i + ' = ' + obj[i] + '\\n';\n\t\t        }\n\t    \t}\n\t    \tcatch (e)\n\t    \t{\n\t    \t\toutput += i + '=' + e.message;\n\t    \t}\n\t    }\n\t    \n\t    return output;\n\t},\n\n\t/**\n\t * Function: toRadians\n\t * \n\t * Converts the given degree to radians.\n\t */\n\ttoRadians: function(deg)\n\t{\n\t\treturn Math.PI * deg / 180;\n\t},\n\n\t/**\n\t * Function: toDegree\n\t * \n\t * Converts the given radians to degree.\n\t */\n\ttoDegree: function(rad)\n\t{\n\t\treturn rad * 180 / Math.PI;\n\t},\n\t\n\t/**\n\t * Function: arcToCurves\n\t * \n\t * Converts the given arc to a series of curves.\n\t */\n\tarcToCurves: function(x0, y0, r1, r2, angle, largeArcFlag, sweepFlag, x, y)\n\t{\n\t\tx -= x0;\n\t\ty -= y0;\n\t\t\n        if (r1 === 0 || r2 === 0) \n        {\n        \treturn result;\n        }\n        \n        var fS = sweepFlag;\n        var psai = angle;\n        r1 = Math.abs(r1);\n        r2 = Math.abs(r2);\n        var ctx = -x / 2;\n        var cty = -y / 2;\n        var cpsi = Math.cos(psai * Math.PI / 180);\n        var spsi = Math.sin(psai * Math.PI / 180);\n        var rxd = cpsi * ctx + spsi * cty;\n        var ryd = -1 * spsi * ctx + cpsi * cty;\n        var rxdd = rxd * rxd;\n        var rydd = ryd * ryd;\n        var r1x = r1 * r1;\n        var r2y = r2 * r2;\n        var lamda = rxdd / r1x + rydd / r2y;\n        var sds;\n        \n        if (lamda > 1) \n        {\n        \tr1 = Math.sqrt(lamda) * r1;\n        \tr2 = Math.sqrt(lamda) * r2;\n        \tsds = 0;\n        }  \n        else\n        {\n        \tvar seif = 1;\n            \n        \tif (largeArcFlag === fS) \n        \t{\n        \t\tseif = -1;\n        \t}\n            \n        \tsds = seif * Math.sqrt((r1x * r2y - r1x * rydd - r2y * rxdd) / (r1x * rydd + r2y * rxdd));\n        }\n        \n        var txd = sds * r1 * ryd / r2;\n        var tyd = -1 * sds * r2 * rxd / r1;\n        var tx = cpsi * txd - spsi * tyd + x / 2;\n        var ty = spsi * txd + cpsi * tyd + y / 2;\n        var rad = Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1) - Math.atan2(0, 1);\n        var s1 = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        rad = Math.atan2((-ryd - tyd) / r2, (-rxd - txd) / r1) - Math.atan2((ryd - tyd) / r2, (rxd - txd) / r1);\n        var dr = (rad >= 0) ? rad : 2 * Math.PI + rad;\n        \n        if (fS == 0 && dr > 0) \n        {\n        \tdr -= 2 * Math.PI;\n        }\n        else if (fS != 0 && dr < 0) \n        {\n        \tdr += 2 * Math.PI;\n        }\n        \n        var sse = dr * 2 / Math.PI;\n        var seg = Math.ceil(sse < 0 ? -1 * sse : sse);\n        var segr = dr / seg;\n        var t = 8/3 * Math.sin(segr / 4) * Math.sin(segr / 4) / Math.sin(segr / 2);\n        var cpsir1 = cpsi * r1;\n        var cpsir2 = cpsi * r2;\n        var spsir1 = spsi * r1;\n        var spsir2 = spsi * r2;\n        var mc = Math.cos(s1);\n        var ms = Math.sin(s1);\n        var x2 = -t * (cpsir1 * ms + spsir2 * mc);\n        var y2 = -t * (spsir1 * ms - cpsir2 * mc);\n        var x3 = 0;\n        var y3 = 0;\n\n\t\tvar result = [];\n        \n        for (var n = 0; n < seg; ++n) \n        {\n            s1 += segr;\n            mc = Math.cos(s1);\n            ms = Math.sin(s1);\n            \n            x3 = cpsir1 * mc - spsir2 * ms + tx;\n            y3 = spsir1 * mc + cpsir2 * ms + ty;\n            var dx = -t * (cpsir1 * ms + spsir2 * mc);\n            var dy = -t * (spsir1 * ms - cpsir2 * mc);\n            \n            // CurveTo updates x0, y0 so need to restore it\n            var index = n * 6;\n            result[index] = Number(x2 + x0);\n            result[index + 1] = Number(y2 + y0);\n            result[index + 2] = Number(x3 - dx + x0);\n            result[index + 3] = Number(y3 - dy + y0);\n            result[index + 4] = Number(x3 + x0);\n            result[index + 5] = Number(y3 + y0);\n            \n\t\t\tx2 = x3 + dx;\n            y2 = y3 + dy;\n        }\n        \n        return result;\n\t},\n\n\t/**\n\t * Function: getBoundingBox\n\t * \n\t * Returns the bounding box for the rotated rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * rect - <mxRectangle> to be rotated.\n\t * angle - Number that represents the angle (in degrees).\n\t * cx - Optional <mxPoint> that represents the rotation center. If no\n\t * rotation center is given then the center of rect is used.\n\t */\n\tgetBoundingBox: function(rect, rotation, cx)\n\t{\n        var result = null;\n\n        if (rect != null && rotation != null && rotation != 0)\n        {\n            var rad = mxUtils.toRadians(rotation);\n            var cos = Math.cos(rad);\n            var sin = Math.sin(rad);\n\n            cx = (cx != null) ? cx : new mxPoint(rect.x + rect.width / 2, rect.y  + rect.height / 2);\n\n            var p1 = new mxPoint(rect.x, rect.y);\n            var p2 = new mxPoint(rect.x + rect.width, rect.y);\n            var p3 = new mxPoint(p2.x, rect.y + rect.height);\n            var p4 = new mxPoint(rect.x, p3.y);\n\n            p1 = mxUtils.getRotatedPoint(p1, cos, sin, cx);\n            p2 = mxUtils.getRotatedPoint(p2, cos, sin, cx);\n            p3 = mxUtils.getRotatedPoint(p3, cos, sin, cx);\n            p4 = mxUtils.getRotatedPoint(p4, cos, sin, cx);\n\n            result = new mxRectangle(p1.x, p1.y, 0, 0);\n            result.add(new mxRectangle(p2.x, p2.y, 0, 0));\n            result.add(new mxRectangle(p3.x, p3.y, 0, 0));\n            result.add(new mxRectangle(p4.x, p4.y, 0, 0));\n        }\n\n        return result;\n\t},\n\n\t/**\n\t * Function: getRotatedPoint\n\t * \n\t * Rotates the given point by the given cos and sin.\n\t */\n\tgetRotatedPoint: function(pt, cos, sin, c)\n\t{\n\t\tc = (c != null) ? c : new mxPoint();\n\t\tvar x = pt.x - c.x;\n\t\tvar y = pt.y - c.y;\n\n\t\tvar x1 = x * cos - y * sin;\n\t\tvar y1 = y * cos + x * sin;\n\n\t\treturn new mxPoint(x1 + c.x, y1 + c.y);\n\t},\n\t\n\t/**\n\t * Returns an integer mask of the port constraints of the given map\n\t * @param dict the style map to determine the port constraints for\n\t * @param defaultValue Default value to return if the key is undefined.\n\t * @return the mask of port constraint directions\n\t * \n\t * Parameters:\n\t * \n\t * terminal - <mxCelState> that represents the terminal.\n\t * edge - <mxCellState> that represents the edge.\n\t * source - Boolean that specifies if the terminal is the source terminal.\n\t * defaultValue - Default value to be returned.\n\t */\n\tgetPortConstraints: function(terminal, edge, source, defaultValue)\n\t{\n\t\tvar value = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT,\n\t\t\tmxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_SOURCE_PORT_CONSTRAINT :\n\t\t\t\tmxConstants.STYLE_TARGET_PORT_CONSTRAINT, null));\n\t\t\n\t\tif (value == null)\n\t\t{\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar directions = value.toString();\n\t\t\tvar returnValue = mxConstants.DIRECTION_MASK_NONE;\n\t\t\tvar constraintRotationEnabled = mxUtils.getValue(terminal.style, mxConstants.STYLE_PORT_CONSTRAINT_ROTATION, 0);\n\t\t\tvar rotation = 0;\n\t\t\t\n\t\t\tif (constraintRotationEnabled == 1)\n\t\t\t{\n\t\t\t\trotation = mxUtils.getValue(terminal.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tvar quad = 0;\n\n\t\t\tif (rotation > 45)\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t\t\n\t\t\t\tif (rotation >= 135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (rotation < -45)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\tif (rotation <= -135)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_NORTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_WEST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_SOUTH) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (directions.indexOf(mxConstants.DIRECTION_EAST) >= 0)\n\t\t\t{\n\t\t\t\tswitch (quad)\n\t\t\t\t{\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturnValue |= mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn returnValue;\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: reversePortConstraints\n\t * \n\t * Reverse the port constraint bitmask. For example, north | east\n\t * becomes south | west\n\t */\n\treversePortConstraints: function(constraint)\n\t{\n\t\tvar result = 0;\n\t\t\n\t\tresult = (constraint & mxConstants.DIRECTION_MASK_WEST) << 3;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_NORTH) << 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_SOUTH) >> 1;\n\t\tresult |= (constraint & mxConstants.DIRECTION_MASK_EAST) >> 3;\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: findNearestSegment\n\t * \n\t * Finds the index of the nearest segment on the given cell state for\n\t * the specified coordinate pair.\n\t */\n\tfindNearestSegment: function(state, x, y)\n\t{\n\t\tvar index = -1;\n\t\t\n\t\tif (state.absolutePoints.length > 0)\n\t\t{\n\t\t\tvar last = state.absolutePoints[0];\n\t\t\tvar min = null;\n\t\t\t\n\t\t\tfor (var i = 1; i < state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tvar current = state.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(last.x, last.y,\n\t\t\t\t\tcurrent.x, current.y, x, y);\n\t\t\t\t\n\t\t\t\tif (min == null || dist < min)\n\t\t\t\t{\n\t\t\t\t\tmin = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t}\n\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn index;\n\t},\n\n\t/**\n\t * Function: getDirectedBounds\n\t * \n\t * Adds the given margins to the given rectangle and rotates and flips the\n\t * rectangle according to the respective styles in style.\n\t */\n\tgetDirectedBounds: function (rect, m, style, flipH, flipV)\n\t{\n\t\tvar d = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\tflipH = (flipH != null) ? flipH : mxUtils.getValue(style, mxConstants.STYLE_FLIPH, false);\n\t\tflipV = (flipV != null) ? flipV : mxUtils.getValue(style, mxConstants.STYLE_FLIPV, false);\n\n\t\tm.x = Math.round(Math.max(0, Math.min(rect.width, m.x)));\n\t\tm.y = Math.round(Math.max(0, Math.min(rect.height, m.y)));\n\t\tm.width = Math.round(Math.max(0, Math.min(rect.width, m.width)));\n\t\tm.height = Math.round(Math.max(0, Math.min(rect.height, m.height)));\n\t\t\n\t\tif ((flipV && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipH && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.width;\n\t\t\tm.width = tmp;\n\t\t}\n\t\t\t\n\t\tif ((flipH && (d == mxConstants.DIRECTION_SOUTH || d == mxConstants.DIRECTION_NORTH)) ||\n\t\t\t(flipV && (d == mxConstants.DIRECTION_EAST || d == mxConstants.DIRECTION_WEST)))\n\t\t{\n\t\t\tvar tmp = m.y;\n\t\t\tm.y = m.height;\n\t\t\tm.height = tmp;\n\t\t}\n\t\t\n\t\tvar m2 = mxRectangle.fromRectangle(m);\n\t\t\n\t\tif (d == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tm2.y = m.x;\n\t\t\tm2.x = m.height;\n\t\t\tm2.width = m.y;\n\t\t\tm2.height = m.width;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tm2.y = m.height;\n\t\t\tm2.x = m.width;\n\t\t\tm2.width = m.x;\n\t\t\tm2.height = m.y;\n\t\t}\n\t\telse if (d == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tm2.y = m.width;\n\t\t\tm2.x = m.y;\n\t\t\tm2.width = m.height;\n\t\t\tm2.height = m.x;\n\t\t}\n\t\t\n\t\treturn new mxRectangle(rect.x + m2.x, rect.y + m2.y, rect.width - m2.width - m2.x, rect.height - m2.height - m2.y);\n\t},\n\n\t/**\n\t * Function: getPerimeterPoint\n\t * \n\t * Returns the intersection between the polygon defined by the array of\n\t * points and the line between center and point.\n\t */\n\tgetPerimeterPoint: function (pts, center, point)\n\t{\n\t\tvar min = null;\n\t\t\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tvar pt = mxUtils.intersection(pts[i].x, pts[i].y, pts[i + 1].x, pts[i + 1].y,\n\t\t\t\tcenter.x, center.y, point.x, point.y);\n\t\t\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar dx = point.x - pt.x;\n\t\t\t\tvar dy = point.y - pt.y;\n\t\t\t\tvar ip = {p: pt, distSq: dy * dy + dx * dx};\n\t\t\t\t\n\t\t\t\tif (ip != null && (min == null || min.distSq > ip.distSq))\n\t\t\t\t{\n\t\t\t\t\tmin = ip;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (min != null) ? min.p : null;\n\t},\n\n\t/**\n\t * Function: rectangleIntersectsSegment\n\t * \n\t * Returns true if the given rectangle intersects the given segment.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the rectangle.\n\t * p1 - <mxPoint> that represents the first point of the segment.\n\t * p2 - <mxPoint> that represents the second point of the segment.\n\t */\n\trectangleIntersectsSegment: function(bounds, p1, p2)\n\t{\n\t\tvar top = bounds.y;\n\t\tvar left = bounds.x;\n\t\tvar bottom = top + bounds.height;\n\t\tvar right = left + bounds.width;\n\t\t\t\n\t\t// Find min and max X for the segment\n\t\tvar minX = p1.x;\n\t\tvar maxX = p2.x;\n\t\t\n\t\tif (p1.x > p2.x)\n\t\t{\n\t\t  minX = p2.x;\n\t\t  maxX = p1.x;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's x-projections\n\t\tif (maxX > right)\n\t\t{\n\t\t  maxX = right;\n\t\t}\n\t\t\n\t\tif (minX < left)\n\t\t{\n\t\t  minX = left;\n\t\t}\n\t\t\n\t\tif (minX > maxX) // If their projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\t// Find corresponding min and max Y for min and max X we found before\n\t\tvar minY = p1.y;\n\t\tvar maxY = p2.y;\n\t\tvar dx = p2.x - p1.x;\n\t\t\n\t\tif (Math.abs(dx) > 0.0000001)\n\t\t{\n\t\t  var a = (p2.y - p1.y) / dx;\n\t\t  var b = p1.y - a * p1.x;\n\t\t  minY = a * minX + b;\n\t\t  maxY = a * maxX + b;\n\t\t}\n\t\t\n\t\tif (minY > maxY)\n\t\t{\n\t\t  var tmp = maxY;\n\t\t  maxY = minY;\n\t\t  minY = tmp;\n\t\t}\n\t\t\n\t\t// Find the intersection of the segment's and rectangle's y-projections\n\t\tif (maxY > bottom)\n\t\t{\n\t\t  maxY = bottom;\n\t\t}\n\t\t\n\t\tif (minY < top)\n\t\t{\n\t\t  minY = top;\n\t\t}\n\t\t\n\t\tif (minY > maxY) // If Y-projections do not intersect return false\n\t\t{\n\t\t  return false;\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\t\n\t/**\n\t * Function: contains\n\t * \n\t * Returns true if the specified point (x, y) is contained in the given rectangle.\n\t * \n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the area.\n\t * x - X-coordinate of the point.\n\t * y - Y-coordinate of the point.\n\t */\n\tcontains: function(bounds, x, y)\n\t{\n\t\treturn (bounds.x <= x && bounds.x + bounds.width >= x &&\n\t\t\t\tbounds.y <= y && bounds.y + bounds.height >= y);\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersects: function(a, b)\n\t{\n\t\tvar tw = a.width;\n\t\tvar th = a.height;\n\t\tvar rw = b.width;\n\t\tvar rh = b.height;\n\t\t\n\t\tif (rw <= 0 || rh <= 0 || tw <= 0 || th <= 0)\n\t\t{\n\t\t    return false;\n\t\t}\n\t\t\n\t\tvar tx = a.x;\n\t\tvar ty = a.y;\n\t\tvar rx = b.x;\n\t\tvar ry = b.y;\n\t\t\n\t\trw += rx;\n\t\trh += ry;\n\t\ttw += tx;\n\t\tth += ty;\n\n\t\treturn ((rw < rx || rw > tx) &&\n\t\t\t(rh < ry || rh > ty) &&\n\t\t\t(tw < tx || tw > rx) &&\n\t\t\t(th < ty || th > ry));\n\t},\n\n\t/**\n\t * Function: intersects\n\t * \n\t * Returns true if the two rectangles intersect.\n\t * \n\t * Parameters:\n\t * \n\t * a - <mxRectangle> to be checked for intersection.\n\t * b - <mxRectangle> to be checked for intersection.\n\t */\n\tintersectsHotspot: function(state, x, y, hotspot, min, max)\n\t{\n\t\thotspot = (hotspot != null) ? hotspot : 1;\n\t\tmin = (min != null) ? min : 0;\n\t\tmax = (max != null) ? max : 0;\n\t\t\n\t\tif (hotspot > 0)\n\t\t{\n\t\t\tvar cx = state.getCenterX();\n\t\t\tvar cy = state.getCenterY();\n\t\t\tvar w = state.width;\n\t\t\tvar h = state.height;\n\t\t\t\n\t\t\tvar start = mxUtils.getValue(state.style, mxConstants.STYLE_STARTSIZE) * state.view.scale;\n\n\t\t\tif (start > 0)\n\t\t\t{\n\t\t\t\tif (mxUtils.getValue(state.style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tcy = state.y + start / 2;\n\t\t\t\t\th = start;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcx = state.x + start / 2;\n\t\t\t\t\tw = start;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tw = Math.max(min, w * hotspot);\n\t\t\th = Math.max(min, h * hotspot);\n\t\t\t\n\t\t\tif (max > 0)\n\t\t\t{\n\t\t\t\tw = Math.min(w, max);\n\t\t\t\th = Math.min(h, max);\n\t\t\t}\n\t\t\t\n\t\t\tvar rect = new mxRectangle(cx - w / 2, cy - h / 2, w, h);\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\treturn mxUtils.contains(rect, x, y);\t\t\t\n\t\t}\n\t\t\n\t\treturn true;\n\t},\n\n\t/**\n\t * Function: getOffset\n\t * \n\t * Returns the offset for the specified container as an <mxPoint>. The\n\t * offset is the distance from the top left corner of the container to the\n\t * top left corner of the document.\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to return the offset for.\n\t * scollOffset - Optional boolean to add the scroll offset of the document.\n\t * Default is false.\n\t */\n\tgetOffset: function(container, scrollOffset)\n\t{\n\t\tvar offsetLeft = 0;\n\t\tvar offsetTop = 0;\n\t\t\n\t\t// Ignores document scroll origin for fixed elements\n\t\tvar fixed = false;\n\t\tvar node = container;\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\n\t\twhile (node != null && node != b && node != d && !fixed)\n\t\t{\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tif (!scrollOffset && !fixed)\n\t\t{\n\t\t\tvar offset = mxUtils.getDocumentScrollOrigin(container.ownerDocument);\n\t\t\toffsetLeft += offset.x;\n\t\t\toffsetTop += offset.y;\n\t\t}\n\t\t\n\t\tvar r = container.getBoundingClientRect();\n\t\t\n\t\tif (r != null)\n\t\t{\n\t\t\toffsetLeft += r.left;\n\t\t\toffsetTop += r.top;\n\t\t}\n\t\t\n\t\treturn new mxPoint(offsetLeft, offsetTop);\n\t},\n\n\t/**\n\t * Function: getDocumentScrollOrigin\n\t * \n\t * Returns the scroll origin of the given document or the current document\n\t * if no document is given.\n\t */\n\tgetDocumentScrollOrigin: function(doc)\n\t{\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\treturn new mxPoint(doc.body.scrollLeft, doc.body.scrollTop);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar wnd = doc.defaultView || doc.parentWindow;\n\t\t\t\n\t\t\tvar x = (wnd != null && window.pageXOffset !== undefined) ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft;\n\t\t\tvar y = (wnd != null && window.pageYOffset !== undefined) ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop;\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: getScrollOrigin\n\t * \n\t * Returns the top, left corner of the viewrect as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node whose scroll origin should be returned.\n\t * includeAncestors - Whether the scroll origin of the ancestors should be\n\t * included. Default is false.\n\t * includeDocument - Whether the scroll origin of the document should be\n\t * included. Default is true.\n\t */\n\tgetScrollOrigin: function(node, includeAncestors, includeDocument)\n\t{\n\t\tincludeAncestors = (includeAncestors != null) ? includeAncestors : false;\n\t\tincludeDocument = (includeDocument != null) ? includeDocument : true;\n\t\t\n\t\tvar doc = (node != null) ? node.ownerDocument : document;\n\t\tvar b = doc.body;\n\t\tvar d = doc.documentElement;\n\t\tvar result = new mxPoint();\n\t\tvar fixed = false;\n\n\t\twhile (node != null && node != b && node != d)\n\t\t{\n\t\t\tif (!isNaN(node.scrollLeft) && !isNaN(node.scrollTop))\n\t\t\t{\n\t\t\t\tresult.x += node.scrollLeft;\n\t\t\t\tresult.y += node.scrollTop;\n\t\t\t}\n\t\t\t\n\t\t\tvar style = mxUtils.getCurrentStyle(node);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tfixed = fixed || style.position == 'fixed';\n\t\t\t}\n\n\t\t\tnode = (includeAncestors) ? node.parentNode : null;\n\t\t}\n\n\t\tif (!fixed && includeDocument)\n\t\t{\n\t\t\tvar origin = mxUtils.getDocumentScrollOrigin(doc);\n\n\t\t\tresult.x += origin.x;\n\t\t\tresult.y += origin.y;\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: convertPoint\n\t * \n\t * Converts the specified point (x, y) using the offset of the specified\n\t * container and returns a new <mxPoint> with the result.\n\t * \n\t * (code)\n\t * var pt = mxUtils.convertPoint(graph.container,\n\t *   mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * container - DOM node to use for the offset.\n\t * x - X-coordinate of the point to be converted.\n\t * y - Y-coordinate of the point to be converted.\n\t */\n\tconvertPoint: function(container, x, y)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(container, false);\n\t\tvar offset = mxUtils.getOffset(container);\n\n\t\toffset.x -= origin.x;\n\t\toffset.y -= origin.y;\n\t\t\n\t\treturn new mxPoint(x - offset.x, y - offset.y);\n\t},\n\t\n\t/**\n\t * Function: ltrim\n\t * \n\t * Strips all whitespaces from the beginning of the string. Without the\n\t * second parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\tltrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"^[\" + chars + \"]+\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: rtrim\n\t * \n\t * Strips all whitespaces from the end of the string. Without the second\n\t * parameter, this will trim these characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\trtrim: function(str, chars)\n\t{\n\t\tchars = chars || \"\\\\s\";\n\t\t\n\t\treturn (str != null) ? str.replace(new RegExp(\"[\" + chars + \"]+$\", \"g\"), \"\") : null;\n\t},\n\t\n\t/**\n\t * Function: trim\n\t * \n\t * Strips all whitespaces from both end of the string.\n\t * Without the second parameter, Javascript function will trim these\n\t * characters:\n\t * \n\t * - \" \" (ASCII 32 (0x20)), an ordinary space\n\t * - \"\\t\" (ASCII 9 (0x09)), a tab\n\t * - \"\\n\" (ASCII 10 (0x0A)), a new line (line feed)\n\t * - \"\\r\" (ASCII 13 (0x0D)), a carriage return\n\t * - \"\\0\" (ASCII 0 (0x00)), the NUL-byte\n\t * - \"\\x0B\" (ASCII 11 (0x0B)), a vertical tab\n\t */\n\ttrim: function(str, chars)\n\t{\n\t\treturn mxUtils.ltrim(mxUtils.rtrim(str, chars), chars);\n\t},\n\t\n\t/**\n\t * Function: isNumeric\n\t * \n\t * Returns true if the specified value is numeric, that is, if it is not\n\t * null, not an empty string, not a HEX number and isNaN returns false.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisNumeric: function(n)\n\t{\n\t\treturn !isNaN(parseFloat(n)) && isFinite(n) && (typeof(n) != 'string' || n.toLowerCase().indexOf('0x') < 0);\n\t},\n\n\t/**\n\t * Function: isInteger\n\t * \n\t * Returns true if the given value is an valid integer number.\n\t * \n\t * Parameters:\n\t * \n\t * n - String representing the possibly numeric value.\n\t */\n\tisInteger: function(n)\n\t{\n\t\treturn String(parseInt(n)) === String(n);\n\t},\n\n\t/**\n\t * Function: mod\n\t * \n\t * Returns the remainder of division of n by m. You should use this instead\n\t * of the built-in operation as the built-in operation does not properly\n\t * handle negative numbers.\n\t */\n\tmod: function(n, m)\n\t{\n\t\treturn ((n % m) + m) % m;\n\t},\n\n\t/**\n\t * Function: intersection\n\t * \n\t * Returns the intersection of two lines as an <mxPoint>.\n\t * \n\t * Parameters:\n\t * \n\t * x0 - X-coordinate of the first line's startpoint.\n\t * y0 - X-coordinate of the first line's startpoint.\n\t * x1 - X-coordinate of the first line's endpoint.\n\t * y1 - Y-coordinate of the first line's endpoint.\n\t * x2 - X-coordinate of the second line's startpoint.\n\t * y2 - Y-coordinate of the second line's startpoint.\n\t * x3 - X-coordinate of the second line's endpoint.\n\t * y3 - Y-coordinate of the second line's endpoint.\n\t */\n\tintersection: function (x0, y0, x1, y1, x2, y2, x3, y3)\n\t{\n\t\tvar denom = ((y3 - y2) * (x1 - x0)) - ((x3 - x2) * (y1 - y0));\n\t\tvar nume_a = ((x3 - x2) * (y0 - y2)) - ((y3 - y2) * (x0 - x2));\n\t\tvar nume_b = ((x1 - x0) * (y0 - y2)) - ((y1 - y0) * (x0 - x2));\n\n\t\tvar ua = nume_a / denom;\n\t\tvar ub = nume_b / denom;\n\t\t\n\t\tif(ua >= 0.0 && ua <= 1.0 && ub >= 0.0 && ub <= 1.0)\n\t\t{\n\t\t\t// Get the intersection point\n\t\t\tvar x = x0 + ua * (x1 - x0);\n\t\t\tvar y = y0 + ua * (y1 - y0);\n\t\t\t\n\t\t\treturn new mxPoint(x, y);\n\t\t}\n\t\t\n\t\t// No intersection\n\t\treturn null;\n\t},\n\t\n\t/**\n\t * Function: ptSegDistSq\n\t * \n\t * Returns the square distance between a segment and a point. To get the\n\t * distance between a point and a line (with infinite length) use\n\t * <mxUtils.ptLineDist>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\tptSegDistSq: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\n\t\tpx -= x1;\n\t\tpy -= y1;\n\n\t\tvar dotprod = px * x2 + py * y2;\n\t\tvar projlenSq;\n\n\t\tif (dotprod <= 0.0)\n\t\t{\n\t\t    projlenSq = 0.0;\n\t\t}\n\t\telse\n\t\t{\n\t\t    px = x2 - px;\n\t\t    py = y2 - py;\n\t\t    dotprod = px * x2 + py * y2;\n\n\t\t    if (dotprod <= 0.0)\n\t\t    {\n\t\t\t\tprojlenSq = 0.0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t\tprojlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);\n\t\t    }\n\t\t}\n\n\t\tvar lenSq = px * px + py * py - projlenSq;\n\t\t\n\t\tif (lenSq < 0)\n\t\t{\n\t\t    lenSq = 0;\n\t\t}\n\t\t\n\t\treturn lenSq;\n    },\n\t\n\t/**\n\t * Function: ptLineDist\n\t * \n\t * Returns the distance between a line defined by two points and a point.\n\t * To get the distance between a point and a segment (with a specific\n\t * length) use <mxUtils.ptSeqDistSq>.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of point 1 of the line.\n\t * y1 - Y-coordinate of point 1 of the line.\n\t * x2 - X-coordinate of point 1 of the line.\n\t * y2 - Y-coordinate of point 1 of the line.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n    ptLineDist: function(x1, y1, x2, y2, px, py)\n    {\n\t\treturn Math.abs((y2 - y1) * px - (x2 - x1) * py + x2 * y1 - y2 * x1) /\n\t\t\tMath.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n    },\n    \t\n\t/**\n\t * Function: relativeCcw\n\t * \n\t * Returns 1 if the given point on the right side of the segment, 0 if its\n\t * on the segment, and -1 if the point is on the left side of the segment.\n\t * \n\t * Parameters:\n\t * \n\t * x1 - X-coordinate of the startpoint of the segment.\n\t * y1 - Y-coordinate of the startpoint of the segment.\n\t * x2 - X-coordinate of the endpoint of the segment.\n\t * y2 - Y-coordinate of the endpoint of the segment.\n\t * px - X-coordinate of the point.\n\t * py - Y-coordinate of the point.\n\t */\n\trelativeCcw: function(x1, y1, x2, y2, px, py)\n    {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\tpx -= x1;\n\t\tpy -= y1;\n\t\tvar ccw = px * y2 - py * x2;\n\t\t\n\t\tif (ccw == 0.0)\n\t\t{\n\t\t    ccw = px * x2 + py * y2;\n\t\t    \n\t\t    if (ccw > 0.0)\n\t\t    {\n\t\t\t\tpx -= x2;\n\t\t\t\tpy -= y2;\n\t\t\t\tccw = px * x2 + py * y2;\n\t\t\t\t\n\t\t\t\tif (ccw < 0.0)\n\t\t\t\t{\n\t\t\t\t    ccw = 0.0;\n\t\t\t\t}\n\t\t    }\n\t\t}\n\t\t\n\t\treturn (ccw < 0.0) ? -1 : ((ccw > 0.0) ? 1 : 0);\n    },\n    \n\t/**\n\t * Function: animateChanges\n\t * \n\t * See <mxEffects.animateChanges>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tanimateChanges: function(graph, changes)\n\t{\n\t\t// LATER: Deprecated, remove this function\n    \tmxEffects.animateChanges.apply(this, arguments);\n\t},\n    \n\t/**\n\t * Function: cascadeOpacity\n\t * \n\t * See <mxEffects.cascadeOpacity>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n    cascadeOpacity: function(graph, cell, opacity)\n\t{\n\t\tmxEffects.cascadeOpacity.apply(this, arguments);\n\t},\n\n\t/**\n\t * Function: fadeOut\n\t * \n\t * See <mxEffects.fadeOut>. This is for backwards compatibility and\n\t * will be removed later.\n\t */\n\tfadeOut: function(node, from, remove, step, delay, isEnabled)\n\t{\n\t\tmxEffects.fadeOut.apply(this, arguments);\n\t},\n\t\n\t/**\n\t * Function: setOpacity\n\t * \n\t * Sets the opacity of the specified DOM node to the given value in %.\n\t * \n\t * Parameters:\n\t * \n\t * node - DOM node to set the opacity for.\n\t * value - Opacity in %. Possible values are between 0 and 100.\n\t */\n\tsetOpacity: function(node, value)\n\t{\n\t\tif (mxUtils.isVml(node))\n\t\t{\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t    \t\t// TODO: Why is the division by 5 needed in VML?\n\t\t\t    node.style.filter = 'alpha(opacity=' + (value/5) + ')';\n\t    \t}\n\t\t}\n\t\telse if (mxClient.IS_IE && (typeof(document.documentMode) === 'undefined' || document.documentMode < 9))\n\t    {\n\t    \tif (value >= 100)\n\t    \t{\n\t    \t\tnode.style.filter = '';\n\t    \t}\n\t    \telse\n\t    \t{\n\t\t\t    node.style.filter = 'alpha(opacity=' + value + ')';\n\t    \t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    node.style.opacity = (value / 100);\n\t\t}\n\t},\n\n\t/**\n\t * Function: createImage\n\t * \n\t * Creates and returns an image (IMG node) or VML image (v:image) in IE6 in\n\t * quirks mode.\n\t * \n\t * Parameters:\n\t * \n\t * src - URL that points to the image to be displayed.\n\t */\n\tcreateImage: function(src)\n\t{\n        var imageNode = null;\n        \n\t\tif (mxClient.IS_IE6 && document.compatMode != 'CSS1Compat')\n\t\t{\n        \timageNode = document.createElement(mxClient.VML_PREFIX + ':image');\n        \timageNode.setAttribute('src', src);\n        \timageNode.style.borderStyle = 'none';\n        }\n\t\telse\n\t\t{\n\t\t\timageNode = document.createElement('img');\n\t\t\timageNode.setAttribute('src', src);\n\t\t\timageNode.setAttribute('border', '0');\n\t\t}\n\t\t\n\t\treturn imageNode;\n\t},\n\n\t/**\n\t * Function: sortCells\n\t * \n\t * Sorts the given cells according to the order in the cell hierarchy.\n\t * Ascending is optional and defaults to true.\n\t */\n\tsortCells: function(cells, ascending)\n\t{\n\t\tascending = (ascending != null) ? ascending : true;\n\t\tvar lookup = new mxDictionary();\n\t\tcells.sort(function(o1, o2)\n\t\t{\n\t\t\tvar p1 = lookup.get(o1);\n\t\t\t\n\t\t\tif (p1 == null)\n\t\t\t{\n\t\t\t\tp1 = mxCellPath.create(o1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o1, p1);\n\t\t\t}\n\t\t\t\n\t\t\tvar p2 = lookup.get(o2);\n\t\t\t\n\t\t\tif (p2 == null)\n\t\t\t{\n\t\t\t\tp2 = mxCellPath.create(o2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\tlookup.put(o2, p2);\n\t\t\t}\n\t\t\t\n\t\t\tvar comp = mxCellPath.compare(p1, p2);\n\t\t\t\n\t\t\treturn (comp == 0) ? 0 : (((comp > 0) == ascending) ? 1 : -1);\n\t\t});\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: getStylename\n\t * \n\t * Returns the stylename in a style of the form [(stylename|key=value);] or\n\t * an empty string if the given style does not contain a stylename.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylename: function(style)\n\t{\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\tvar stylename = pairs[0];\n\t\t\t\n\t\t\tif (stylename.indexOf('=') < 0)\n\t\t\t{\n\t\t\t\treturn stylename;\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn '';\n\t},\n\n\t/**\n\t * Function: getStylenames\n\t * \n\t * Returns the stylenames in a style of the form [(stylename|key=value);]\n\t * or an empty array if the given style does not contain any stylenames.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t */\n\tgetStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar pairs = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < pairs.length; i++)\n\t\t\t{\n\t\t\t\tif (pairs[i].indexOf('=') < 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(pairs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: indexOfStylename\n\t * \n\t * Returns the index of the given stylename in the given style. This\n\t * returns -1 if the given stylename does not occur (as a stylename) in the\n\t * given style, otherwise it returns the index of the first character.\n\t */\n\tindexOfStylename: function(style, stylename)\n\t{\n\t\tif (style != null && stylename != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\tvar pos = 0;\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] == stylename)\n\t\t\t\t{\n\t\t\t\t\treturn pos;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpos += tokens[i].length + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1;\n\t},\n\t\n\t/**\n\t * Function: addStylename\n\t * \n\t * Adds the specified stylename to the given style if it does not already\n\t * contain the stylename.\n\t */\n\taddStylename: function(style, stylename)\n\t{\n\t\tif (mxUtils.indexOfStylename(style, stylename) < 0)\n\t\t{\n\t\t\tif (style == null)\n\t\t\t{\n\t\t\t\tstyle = '';\n\t\t\t}\n\t\t\telse if (style.length > 0 && style.charAt(style.length - 1) != ';')\n\t\t\t{\n\t\t\t\tstyle += ';';\n\t\t\t}\n\t\t\t\n\t\t\tstyle += stylename;\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: removeStylename\n\t * \n\t * Removes all occurrences of the specified stylename in the given style\n\t * and returns the updated style. Trailing semicolons are not preserved.\n\t */\n\tremoveStylename: function(style, stylename)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\tif (tokens[i] != stylename)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\t\n\t/**\n\t * Function: removeAllStylenames\n\t * \n\t * Removes all stylenames from the given style and returns the updated\n\t * style.\n\t */\n\tremoveAllStylenames: function(style)\n\t{\n\t\tvar result = [];\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvar tokens = style.split(';');\n\t\t\t\n\t\t\tfor (var i = 0; i < tokens.length; i++)\n\t\t\t{\n\t\t\t\t// Keeps the key, value assignments\n\t\t\t\tif (tokens[i].indexOf('=') >= 0)\n\t\t\t\t{\n\t\t\t\t\tresult.push(tokens[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result.join(';');\n\t},\n\n\t/**\n\t * Function: setCellStyles\n\t * \n\t * Assigns the value for the given key in the styles of the given cells, or\n\t * removes the key from the styles if the value is null.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> to execute the transaction in.\n\t * cells - Array of <mxCells> to be updated.\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetCellStyles: function(model, cells, key, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyle(model.getStyle(cells[i]), key, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyle\n\t * \n\t * Adds or removes the given key, value pair to the style and returns the\n\t * new style. If value is null or zero length then the key is removed from\n\t * the style. This is for cell styles, not for CSS styles.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * value - New value for the given key.\n\t */\n\tsetStyle: function(style, key, value)\n\t{\n\t\tvar isValue = value != null && (typeof(value.length) == 'undefined' || value.length > 0);\n\t\t\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (isValue)\n\t\t\t{\n\t\t\t\tstyle = key + '=' + value + ';';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (style.substring(0, key.length + 1) == key + '=')\n\t\t\t{\n\t\t\t\tvar next = style.indexOf(';');\n\t\t\t\t\n\t\t\t\tif (isValue)\n\t\t\t\t{\n\t\t\t\t\tstyle = key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = (next < 0 || next == style.length - 1) ? '' : style.substring(next + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar index = style.indexOf(';' + key + '=');\n\t\t\t\t\n\t\t\t\tif (index < 0)\n\t\t\t\t{\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sep = (style.charAt(style.length - 1) == ';') ? '' : ';';\n\t\t\t\t\t\tstyle = style + sep + key + '=' + value + ';';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar next = style.indexOf(';', index + 1);\n\t\t\t\t\t\n\t\t\t\t\tif (isValue)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index + 1) + key + '=' + value + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle = style.substring(0, index) + ((next < 0) ? ';' : style.substring(next));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\n\t/**\n\t * Function: setCellStyleFlags\n\t * \n\t * Sets or toggles the flag bit for the given key in the cell's styles.\n\t * If value is null then the flag is toggled.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var cells = graph.getSelectionCells();\n\t * mxUtils.setCellStyleFlags(graph.model,\n\t * \t\t\tcells,\n\t * \t\t\tmxConstants.STYLE_FONTSTYLE,\n\t * \t\t\tmxConstants.FONT_BOLD);\n\t * (end)\n\t * \n\t * Toggles the bold font style.\n\t * \n\t * Parameters:\n\t * \n\t * model - <mxGraphModel> that contains the cells.\n\t * cells - Array of <mxCells> to change the style for.\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the flag.\n\t */\n\tsetCellStyleFlags: function(model, cells, key, flag, value)\n\t{\n\t\tif (cells != null && cells.length > 0)\n\t\t{\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (cells[i] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar style = mxUtils.setStyleFlag(\n\t\t\t\t\t\t\tmodel.getStyle(cells[i]),\n\t\t\t\t\t\t\tkey, flag, value);\n\t\t\t\t\t\tmodel.setStyle(cells[i], style);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: setStyleFlag\n\t * \n\t * Sets or removes the given key from the specified style and returns the\n\t * new style. If value is null then the flag is toggled.\n\t * \n\t * Parameters:\n\t * \n\t * style - String of the form [(stylename|key=value);].\n\t * key - Key of the style to be changed.\n\t * flag - Integer for the bit to be changed.\n\t * value - Optional boolean value for the given flag.\n\t */\n\tsetStyleFlag: function(style, key, flag, value)\n\t{\n\t\tif (style == null || style.length == 0)\n\t\t{\n\t\t\tif (value || value == null)\n\t\t\t{\n\t\t\t\tstyle = key+'='+flag;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle = key+'=0';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar index = style.indexOf(key+'=');\n\t\t\t\n\t\t\tif (index < 0)\n\t\t\t{\n\t\t\t\tvar sep = (style.charAt(style.length-1) == ';') ? '' : ';';\n\n\t\t\t\tif (value || value == null)\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=' + flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstyle = style + sep + key + '=0';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar cont = style.indexOf(';', index);\n\t\t\t\tvar tmp = '';\n\t\t\t\t\n\t\t\t\tif (cont < 0)\n\t\t\t\t{\n\t\t\t\t\ttmp  = style.substring(index+key.length+1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = style.substring(index+key.length+1, cont);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value == null)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) ^ flag;\n\t\t\t\t}\n\t\t\t\telse if (value)\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) | flag;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmp = parseInt(tmp) & ~flag;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstyle = style.substring(0, index) + key + '=' + tmp +\n\t\t\t\t\t((cont >= 0) ? style.substring(cont) : '');\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn style;\n\t},\n\t\n\t/**\n\t * Function: getAlignmentAsPoint\n\t * \n\t * Returns an <mxPoint> that represents the horizontal and vertical alignment\n\t * for numeric computations. X is -0.5 for center, -1 for right and 0 for\n\t * left alignment. Y is -0.5 for middle, -1 for bottom and 0 for top\n\t * alignment. Default values for missing arguments is top, left.\n\t */\n\tgetAlignmentAsPoint: function(align, valign)\n\t{\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// Horizontal alignment\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tdx = -0.5;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx = -1;\n\t\t}\n\n\t\t// Vertical alignment\n\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tdy = -0.5;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy = -1;\n\t\t}\n\t\t\n\t\treturn new mxPoint(dx, dy);\n\t},\n\t\n\t/**\n\t * Function: getSizeForString\n\t * \n\t * Returns an <mxRectangle> with the size (width and height in pixels) of\n\t * the given string. The string may contain HTML markup. Newlines should be\n\t * converted to <br> before calling this method. The caller is responsible\n\t * for sanitizing the HTML markup.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var label = graph.getLabel(cell).replace(/\\n/g, \"<br>\");\n\t * var size = graph.getSizeForString(label);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * text - String whose size should be returned.\n\t * fontSize - Integer that specifies the font size in pixels. Default is\n\t * <mxConstants.DEFAULT_FONTSIZE>.\n\t * fontFamily - String that specifies the name of the font family. Default\n\t * is <mxConstants.DEFAULT_FONTFAMILY>.\n\t * textWidth - Optional width for text wrapping.\n\t */\n\tgetSizeForString: function(text, fontSize, fontFamily, textWidth)\n\t{\n\t\tfontSize = (fontSize != null) ? fontSize : mxConstants.DEFAULT_FONTSIZE;\n\t\tfontFamily = (fontFamily != null) ? fontFamily : mxConstants.DEFAULT_FONTFAMILY;\n\t\tvar div = document.createElement('div');\n\t\t\n\t\t// Sets the font size and family\n\t\tdiv.style.fontFamily = fontFamily;\n\t\tdiv.style.fontSize = Math.round(fontSize) + 'px';\n\t\tdiv.style.lineHeight = Math.round(fontSize * mxConstants.LINE_HEIGHT) + 'px';\n\t\t\n\t\t// Disables block layout and outside wrapping and hides the div\n\t\tdiv.style.position = 'absolute';\n\t\tdiv.style.visibility = 'hidden';\n\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tdiv.style.zoom = '1';\n\t\t\n\t\tif (textWidth != null)\n\t\t{\n\t\t\tdiv.style.width = textWidth + 'px';\n\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\t// Adds the text and inserts into DOM for updating of size\n\t\tdiv.innerHTML = text;\n\t\tdocument.body.appendChild(div);\n\t\t\n\t\t// Gets the size and removes from DOM\n\t\tvar size = new mxRectangle(0, 0, div.offsetWidth, div.offsetHeight);\n\t\tdocument.body.removeChild(div);\n\t\t\n\t\treturn size;\n\t},\n\t\n\t/**\n\t * Function: getViewXml\n\t */\n\tgetViewXml: function(graph, scale, cells, x0, y0)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\tscale = (scale != null) ? scale : 1;\n\n\t\tif (cells == null)\n\t\t{\n\t\t\tvar model = graph.getModel();\n\t\t\tcells = [model.getRoot()];\n\t\t}\n\t\t\n\t\tvar view = graph.getView();\n\t\tvar result = null;\n\n\t\t// Disables events on the view\n\t\tvar eventsEnabled = view.isEventsEnabled();\n\t\tview.setEventsEnabled(false);\n\n\t\t// Workaround for label bounds not taken into account for image export.\n\t\t// Creates a temporary draw pane which is used for rendering the text.\n\t\t// Text rendering is required for finding the bounds of the labels.\n\t\tvar drawPane = view.drawPane;\n\t\tvar overlayPane = view.overlayPane;\n\n\t\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tview.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.drawPane);\n\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tview.drawPane = view.drawPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.drawPane);\n\t\t\t\n\t\t\t// Redirects cell overlays into temporary container\n\t\t\tview.overlayPane = view.overlayPane.cloneNode(false);\n\t\t\tview.canvas.appendChild(view.overlayPane);\n\t\t}\n\n\t\t// Resets the translation\n\t\tvar translate = view.getTranslate();\n\t\tview.translate = new mxPoint(x0, y0);\n\n\t\t// Creates the temporary cell states in the view\n\t\tvar temp = new mxTemporaryCellStates(graph.getView(), scale, cells);\n\n\t\ttry\n\t\t{\n\t\t\tvar enc = new mxCodec();\n\t\t\tresult = enc.encode(graph.getView());\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttemp.destroy();\n\t\t\tview.translate = translate;\n\t\t\tview.canvas.removeChild(view.drawPane);\n\t\t\tview.canvas.removeChild(view.overlayPane);\n\t\t\tview.drawPane = drawPane;\n\t\t\tview.overlayPane = overlayPane;\n\t\t\tview.setEventsEnabled(eventsEnabled);\n\t\t}\n\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getScaleForPageCount\n\t * \n\t * Returns the scale to be used for printing the graph with the given\n\t * bounds across the specifies number of pages with the given format. The\n\t * scale is always computed such that it given the given amount or fewer\n\t * pages in the print output. See <mxPrintPreview> for an example.\n\t * \n\t * Parameters:\n\t * \n\t * pageCount - Specifies the number of pages in the print output.\n\t * graph - <mxGraph> that should be printed.\n\t * pageFormat - Optional <mxRectangle> that specifies the page format.\n\t * Default is <mxConstants.PAGE_FORMAT_A4_PORTRAIT>.\n\t * border - The border along each side of every page.\n\t */\n\tgetScaleForPageCount: function(pageCount, graph, pageFormat, border)\n\t{\n\t\tif (pageCount < 1)\n\t\t{\n\t\t\t// We can't work with less than 1 page, return no scale\n\t\t\t// change\n\t\t\treturn 1;\n\t\t}\n\t\t\n\t\tpageFormat = (pageFormat != null) ? pageFormat : mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\t\tborder = (border != null) ? border : 0;\n\t\t\n\t\tvar availablePageWidth = pageFormat.width - (border * 2);\n\t\tvar availablePageHeight = pageFormat.height - (border * 2);\n\n\t\t// Work out the number of pages required if the\n\t\t// graph is not scaled.\n\t\tvar graphBounds = graph.getGraphBounds().clone();\n\t\tvar sc = graph.getView().getScale();\n\t\tgraphBounds.width /= sc;\n\t\tgraphBounds.height /= sc;\n\t\tvar graphWidth = graphBounds.width;\n\t\tvar graphHeight = graphBounds.height;\n\n\t\tvar scale = 1;\n\t\t\n\t\t// The ratio of the width/height for each printer page\n\t\tvar pageFormatAspectRatio = availablePageWidth / availablePageHeight;\n\t\t// The ratio of the width/height for the graph to be printer\n\t\tvar graphAspectRatio = graphWidth / graphHeight;\n\t\t\n\t\t// The ratio of horizontal pages / vertical pages for this \n\t\t// graph to maintain its aspect ratio on this page format\n\t\tvar pagesAspectRatio = graphAspectRatio / pageFormatAspectRatio;\n\t\t\n\t\t// Factor the square root of the page count up and down \n\t\t// by the pages aspect ratio to obtain a horizontal and \n\t\t// vertical page count that adds up to the page count\n\t\t// and has the correct aspect ratio\n\t\tvar pageRoot = Math.sqrt(pageCount);\n\t\tvar pagesAspectRatioSqrt = Math.sqrt(pagesAspectRatio);\n\t\tvar numRowPages = pageRoot * pagesAspectRatioSqrt;\n\t\tvar numColumnPages = pageRoot / pagesAspectRatioSqrt;\n\n\t\t// These value are rarely more than 2 rounding downs away from\n\t\t// a total that meets the page count. In cases of one being less \n\t\t// than 1 page, the other value can be too high and take more iterations \n\t\t// In this case, just change that value to be the page count, since \n\t\t// we know the other value is 1\n\t\tif (numRowPages < 1 && numColumnPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numColumnPages / pageCount;\n\t\t\tnumColumnPages = pageCount;\n\t\t\tnumRowPages /= scaleChange;\n\t\t}\n\t\t\n\t\tif (numColumnPages < 1 && numRowPages > pageCount)\n\t\t{\n\t\t\tvar scaleChange = numRowPages / pageCount;\n\t\t\tnumRowPages = pageCount;\n\t\t\tnumColumnPages /= scaleChange;\n\t\t}\t\t\n\n\t\tvar currentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\n\t\tvar numLoops = 0;\n\t\t\n\t\t// Iterate through while the rounded up number of pages comes to\n\t\t// a total greater than the required number\n\t\twhile (currentTotalPages > pageCount)\n\t\t{\n\t\t\t// Round down the page count (rows or columns) that is\n\t\t\t// closest to its next integer down in percentage terms.\n\t\t\t// i.e. Reduce the page total by reducing the total\n\t\t\t// page area by the least possible amount\n\n\t\t\tvar roundRowDownProportion = Math.floor(numRowPages) / numRowPages;\n\t\t\tvar roundColumnDownProportion = Math.floor(numColumnPages) / numColumnPages;\n\t\t\t\n\t\t\t// If the round down proportion is, work out the proportion to\n\t\t\t// round down to 1 page less\n\t\t\tif (roundRowDownProportion == 1)\n\t\t\t{\n\t\t\t\troundRowDownProportion = Math.floor(numRowPages-1) / numRowPages;\n\t\t\t}\n\t\t\tif (roundColumnDownProportion == 1)\n\t\t\t{\n\t\t\t\troundColumnDownProportion = Math.floor(numColumnPages-1) / numColumnPages;\n\t\t\t}\n\t\t\t\n\t\t\t// Check which rounding down is smaller, but in the case of very small roundings\n\t\t\t// try the other dimension instead\n\t\t\tvar scaleChange = 1;\n\t\t\t\n\t\t\t// Use the higher of the two values\n\t\t\tif (roundRowDownProportion > roundColumnDownProportion)\n\t\t\t{\n\t\t\t\tscaleChange = roundRowDownProportion;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tscaleChange = roundColumnDownProportion;\n\t\t\t}\n\n\t\t\tnumRowPages = numRowPages * scaleChange;\n\t\t\tnumColumnPages = numColumnPages * scaleChange;\n\t\t\tcurrentTotalPages = Math.ceil(numRowPages) * Math.ceil(numColumnPages);\n\t\t\t\n\t\t\tnumLoops++;\n\t\t\t\n\t\t\tif (numLoops > 10)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Work out the scale from the number of row pages required\n\t\t// The column pages will give the same value\n\t\tvar posterWidth = availablePageWidth * numRowPages;\n\t\tscale = posterWidth / graphWidth;\n\t\t\n\t\t// Allow for rounding errors\n\t\treturn scale * 0.99999;\n\t},\n\t\n\t/**\n\t * Function: show\n\t * \n\t * Copies the styles and the markup from the graph's container into the\n\t * given document and removes all cursor styles. The document is returned.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * If you experience problems with missing stylesheets in IE then try adding\n\t * the domain to the trusted sites.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be copied.\n\t * doc - Document where the new graph is created.\n\t * x0 - X-coordinate of the graph view origin. Default is 0.\n\t * y0 - Y-coordinate of the graph view origin. Default is 0.\n\t * w - Optional width of the graph view.\n\t * h - Optional height of the graph view.\n\t */\n\tshow: function(graph, doc, x0, y0, w, h)\n\t{\n\t\tx0 = (x0 != null) ? x0 : 0;\n\t\ty0 = (y0 != null) ? y0 : 0;\n\t\t\n\t\tif (doc == null)\n\t\t{\n\t\t\tvar wnd = window.open();\n\t\t\tdoc = wnd.document;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.open();\n\t\t}\n\n\t\t// Workaround for missing print output in IE9 standards\n\t\tif (document.documentMode == 9)\n\t\t{\n\t\t\tdoc.writeln('<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\"><![endif]-->');\n\t\t}\n\t\t\n\t\tvar bounds = graph.getGraphBounds();\n\t\tvar dx = Math.ceil(x0 - bounds.x);\n\t\tvar dy = Math.ceil(y0 - bounds.y);\n\t\t\n\t\tif (w == null)\n\t\t{\n\t\t\tw = Math.ceil(bounds.width + x0) + Math.ceil(Math.ceil(bounds.x) - bounds.x);\n\t\t}\n\t\t\n\t\tif (h == null)\n\t\t{\n\t\t\th = Math.ceil(bounds.height + y0) + Math.ceil(Math.ceil(bounds.y) - bounds.y);\n\t\t}\n\t\t\n\t\t// Needs a special way of creating the page so that no click is required\n\t\t// to refresh the contents after the external CSS styles have been loaded.\n\t\t// To avoid a click or programmatic refresh, the styleSheets[].cssText\n\t\t// property is copied over from the original document.\n\t\tif (mxClient.IS_IE || document.documentMode == 11)\n\t\t{\n\t\t\tvar html = '<html><head>';\n\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\thtml += base[i].outerHTML;\n\t\t\t}\n\n\t\t\thtml += '<style>';\n\n\t\t\t// Copies the stylesheets without having to load them again\n\t\t\tfor (var i = 0; i < document.styleSheets.length; i++)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\thtml += document.styleSheets[i].cssText;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore security exception\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thtml += '</style></head><body style=\"margin:0px;\">';\n\t\t\t\n\t\t\t// Copies the contents of the graph container\n\t\t\thtml += '<div style=\"position:absolute;overflow:hidden;width:' + w + 'px;height:' + h + 'px;\"><div style=\"position:relative;left:' + dx + 'px;top:' + dy + 'px;\">';\n\t\t\thtml += graph.container.innerHTML;\n\t\t\thtml += '</div></div></body><html>';\n\n\t\t\tdoc.writeln(html);\n\t\t\tdoc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdoc.writeln('<html><head>');\n\t\t\t\n\t\t\tvar base = document.getElementsByTagName('base');\n\t\t\t\n\t\t\tfor (var i = 0; i < base.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(base[i]));\n\t\t\t}\n\t\t\t\n\t\t\tvar links = document.getElementsByTagName('link');\n\t\t\t\n\t\t\tfor (var i = 0; i < links.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(links[i]));\n\t\t\t}\n\t\n\t\t\tvar styles = document.getElementsByTagName('style');\n\t\t\t\n\t\t\tfor (var i = 0; i < styles.length; i++)\n\t\t\t{\n\t\t\t\tdoc.writeln(mxUtils.getOuterHtml(styles[i]));\n\t\t\t}\n\n\t\t\tdoc.writeln('</head><body style=\"margin:0px;\"></body></html>');\n\t\t\tdoc.close();\n\n\t\t\tvar outer = doc.createElement('div');\n\t\t\touter.position = 'absolute';\n\t\t\touter.overflow = 'hidden';\n\t\t\touter.style.width = w + 'px';\n\t\t\touter.style.height = h + 'px';\n\n\t\t\t// Required for HTML labels if foreignObjects are disabled\n\t\t\tvar div = doc.createElement('div');\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.left = dx + 'px';\n\t\t\tdiv.style.top = dy + 'px';\n\n\t\t\tvar node = graph.container.firstChild;\n\t\t\tvar svg = null;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tvar clone = node.cloneNode(true);\n\t\t\t\t\n\t\t\t\tif (node == graph.view.drawPane.ownerSVGElement)\n\t\t\t\t{\n\t\t\t\t\touter.appendChild(clone);\n\t\t\t\t\tsvg = clone;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdiv.appendChild(clone);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\n\t\t\tdoc.body.appendChild(outer);\n\t\t\t\n\t\t\tif (div.firstChild != null)\n\t\t\t{\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif (svg != null)\n\t\t\t{\n\t\t\t\tsvg.style.minWidth = '';\n\t\t\t\tsvg.style.minHeight = '';\n\t\t\t\tsvg.firstChild.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t}\n\t\t}\n\t\t\n\t\tmxUtils.removeCursors(doc.body);\n\t\n\t\treturn doc;\n\t},\n\t\n\t/**\n\t * Function: printScreen\n\t * \n\t * Prints the specified graph using a new window and the built-in print\n\t * dialog.\n\t * \n\t * This function should be called from within the document with the graph.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to be printed.\n\t */\n\tprintScreen: function(graph)\n\t{\n\t\tvar wnd = window.open();\n\t\tvar bounds = graph.getGraphBounds();\n\t\tmxUtils.show(graph, wnd.document);\n\t\t\n\t\tvar print = function()\n\t\t{\n\t\t\twnd.focus();\n\t\t\twnd.print();\n\t\t\twnd.close();\n\t\t};\n\t\t\n\t\t// Workaround for Google Chrome which needs a bit of a\n\t\t// delay in order to render the SVG contents\n\t\tif (mxClient.IS_GC)\n\t\t{\n\t\t\twnd.setTimeout(print, 500);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprint();\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: popup\n\t * \n\t * Shows the specified text content in a new <mxWindow> or a new browser\n\t * window if isInternalWindow is false.\n\t * \n\t * Parameters:\n\t * \n\t * content - String that specifies the text to be displayed.\n\t * isInternalWindow - Optional boolean indicating if an mxWindow should be\n\t * used instead of a new browser window. Default is false.\n\t */\n\tpopup: function(content, isInternalWindow)\n\t{\n\t   \tif (isInternalWindow)\n\t   \t{\n\t\t\tvar div = document.createElement('div');\n\t\t\t\n\t\t\tdiv.style.overflow = 'scroll';\n\t\t\tdiv.style.width = '636px';\n\t\t\tdiv.style.height = '460px';\n\t\t\t\n\t\t\tvar pre = document.createElement('pre');\n\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t\n\t\t\tdiv.appendChild(pre);\n\t\t\t\n\t\t\tvar w = document.body.clientWidth;\n\t\t\tvar h = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight)\n\t\t\tvar wnd = new mxWindow('Popup Window', div,\n\t\t\t\tw/2-320, h/2-240, 640, 480, false, true);\n\n\t\t\twnd.setClosable(true);\n\t\t\twnd.setVisible(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Wraps up the XML content in a textarea\n\t\t\tif (mxClient.IS_NS)\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t\twnd.document.writeln('<pre>'+mxUtils.htmlEntities(content)+'</pre');\n\t\t\t   \twnd.document.close();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    var wnd = window.open();\n\t\t\t    var pre = wnd.document.createElement('pre');\n\t\t\t    pre.innerHTML = mxUtils.htmlEntities(content, false).\n\t\t\t    \treplace(/\\n/g,'<br>').replace(/ /g, '&nbsp;');\n\t\t\t   \twnd.document.body.appendChild(pre);\n\t\t\t}\n\t   \t}\n\t},\n\t\n\t/**\n\t * Function: alert\n\t * \n\t * Displayss the given alert in a new dialog. This implementation uses the\n\t * built-in alert function. This is used to display validation errors when\n\t * connections cannot be changed or created.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\talert: function(message)\n\t{\n\t\talert(message);\n\t},\n\t\n\t/**\n\t * Function: prompt\n\t * \n\t * Displays the given message in a prompt dialog. This implementation uses\n\t * the built-in prompt function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * defaultValue - Optional string specifying the default value.\n\t */\n\tprompt: function(message, defaultValue)\n\t{\n\t\treturn prompt(message, (defaultValue != null) ? defaultValue : '');\n\t},\n\t\n\t/**\n\t * Function: confirm\n\t * \n\t * Displays the given message in a confirm dialog. This implementation uses\n\t * the built-in confirm function.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t */\n\tconfirm: function(message)\n\t{\n\t\treturn confirm(message);\n\t},\n\n\t/**\n\t * Function: error\n\t * \n\t * Displays the given error message in a new <mxWindow> of the given width.\n\t * If close is true then an additional close button is added to the window.\n\t * The optional icon specifies the icon to be used for the window. Default\n\t * is <mxUtils.errorImage>.\n\t * \n\t * Parameters:\n\t * \n\t * message - String specifying the message to be displayed.\n\t * width - Integer specifying the width of the window.\n\t * close - Optional boolean indicating whether to add a close button.\n\t * icon - Optional icon for the window decoration.\n\t */\n\terror: function(message, width, close, icon)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '20px';\n\n\t\tvar img = document.createElement('img');\n\t\timg.setAttribute('src', icon || mxUtils.errorImage);\n\t\timg.setAttribute('valign', 'bottom');\n\t\timg.style.verticalAlign = 'middle';\n\t\tdiv.appendChild(img);\n\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tdiv.appendChild(document.createTextNode('\\u00a0')); // &nbsp;\n\t\tmxUtils.write(div, message);\n\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\tvar warn = new mxWindow(mxResources.get(mxUtils.errorResource) ||\n\t\t\tmxUtils.errorResource, div, (w-width)/2, h/4, width, null,\n\t\t\tfalse, true);\n\n\t\tif (close)\n\t\t{\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\tvar tmp = document.createElement('p');\n\t\t\tvar button = document.createElement('button');\n\n\t\t\tif (mxClient.IS_IE)\n\t\t\t{\n\t\t\t\tbutton.style.cssText = 'float:right';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbutton.setAttribute('style', 'float:right');\n\t\t\t}\n\n\t\t\tmxEvent.addListener(button, 'click', function(evt)\n\t\t\t{\n\t\t\t\twarn.destroy();\n\t\t\t});\n\n\t\t\tmxUtils.write(button, mxResources.get(mxUtils.closeResource) ||\n\t\t\t\tmxUtils.closeResource);\n\t\t\t\n\t\t\ttmp.appendChild(button);\n\t\t\tdiv.appendChild(tmp);\n\t\t\t\n\t\t\tmxUtils.br(div);\n\t\t\t\n\t\t\twarn.setClosable(true);\n\t\t}\n\t\t\n\t\twarn.setVisible(true);\n\t\t\n\t\treturn warn;\n\t},\n\n\t/**\n\t * Function: makeDraggable\n\t * \n\t * Configures the given DOM element to act as a drag source for the\n\t * specified graph. Returns a a new <mxDragSource>. If\n\t * <mxDragSource.guideEnabled> is enabled then the x and y arguments must\n\t * be used in funct to match the preview location.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * var funct = function(graph, evt, cell, x, y)\n\t * {\n\t *   if (graph.canImportCell(cell))\n\t *   {\n\t *     var parent = graph.getDefaultParent();\n\t *     var vertex = null;\n\t *     \n\t *     graph.getModel().beginUpdate();\n\t *     try\n\t *     {\n\t * \t     vertex = graph.insertVertex(parent, null, 'Hello', x, y, 80, 30);\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.getModel().endUpdate();\n\t *     }\n\t *\n\t *     graph.setSelectionCell(vertex);\n\t *   }\n\t * }\n\t * \n\t * var img = document.createElement('img');\n\t * img.setAttribute('src', 'editors/images/rectangle.gif');\n\t * img.style.position = 'absolute';\n\t * img.style.left = '0px';\n\t * img.style.top = '0px';\n\t * img.style.width = '16px';\n\t * img.style.height = '16px';\n\t * \n\t * var dragImage = img.cloneNode(true);\n\t * dragImage.style.width = '32px';\n\t * dragImage.style.height = '32px';\n\t * mxUtils.makeDraggable(img, graph, funct, dragImage);\n\t * document.body.appendChild(img);\n\t * (end)\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM element to make draggable.\n\t * graphF - <mxGraph> that acts as the drop target or a function that takes a\n\t * mouse event and returns the current <mxGraph>.\n\t * funct - Function to execute on a successful drop.\n\t * dragElement - Optional DOM node to be used for the drag preview.\n\t * dx - Optional horizontal offset between the cursor and the drag\n\t * preview.\n\t * dy - Optional vertical offset between the cursor and the drag\n\t * preview.\n\t * autoscroll - Optional boolean that specifies if autoscroll should be\n\t * used. Default is mxGraph.autoscroll.\n\t * scalePreview - Optional boolean that specifies if the preview element\n\t * should be scaled according to the graph scale. If this is true, then\n\t * the offsets will also be scaled. Default is false.\n\t * highlightDropTargets - Optional boolean that specifies if dropTargets\n\t * should be highlighted. Default is true.\n\t * getDropTarget - Optional function to return the drop target for a given\n\t * location (x, y). Default is mxGraph.getCellAt.\n\t */\n\tmakeDraggable: function(element, graphF, funct, dragElement, dx, dy, autoscroll,\n\t\t\tscalePreview, highlightDropTargets, getDropTarget)\n\t{\n\t\tvar dragSource = new mxDragSource(element, funct);\n\t\tdragSource.dragOffset = new mxPoint((dx != null) ? dx : 0,\n\t\t\t(dy != null) ? dy : mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\t\tdragSource.autoscroll = autoscroll;\n\t\t\n\t\t// Cannot enable this by default. This needs to be enabled in the caller\n\t\t// if the funct argument uses the new x- and y-arguments.\n\t\tdragSource.setGuidesEnabled(false);\n\t\t\n\t\tif (highlightDropTargets != null)\n\t\t{\n\t\t\tdragSource.highlightDropTargets = highlightDropTargets;\n\t\t}\n\t\t\n\t\t// Overrides function to find drop target cell\n\t\tif (getDropTarget != null)\n\t\t{\n\t\t\tdragSource.getDropTarget = getDropTarget;\n\t\t}\n\t\t\n\t\t// Overrides function to get current graph\n\t\tdragSource.getGraphForEvent = function(evt)\n\t\t{\n\t\t\treturn (typeof(graphF) == 'function') ? graphF(evt) : graphF;\n\t\t};\n\t\t\n\t\t// Translates switches into dragSource customizations\n\t\tif (dragElement != null)\n\t\t{\n\t\t\tdragSource.createDragElement = function()\n\t\t\t{\n\t\t\t\treturn dragElement.cloneNode(true);\n\t\t\t};\n\t\t\t\n\t\t\tif (scalePreview)\n\t\t\t{\n\t\t\t\tdragSource.createPreviewElement = function(graph)\n\t\t\t\t{\n\t\t\t\t\tvar elt = dragElement.cloneNode(true);\n\n\t\t\t\t\tvar w = parseInt(elt.style.width);\n\t\t\t\t\tvar h = parseInt(elt.style.height);\n\t\t\t\t\telt.style.width = Math.round(w * graph.view.scale) + 'px';\n\t\t\t\t\telt.style.height = Math.round(h * graph.view.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\treturn elt;\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn dragSource;\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n var mxConstants =\n {\n\t/**\n\t * Class: mxConstants\n\t * \n\t * Defines various global constants.\n\t * \n\t * Variable: DEFAULT_HOTSPOT\n\t * \n\t * Defines the portion of the cell which is to be used as a connectable\n\t * region. Default is 0.3. Possible values are 0 < x <= 1. \n\t */\n\tDEFAULT_HOTSPOT: 0.3,\n\n\t/**\n\t * Variable: MIN_HOTSPOT_SIZE\n\t * \n\t * Defines the minimum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Default is 8.\n\t */\n\tMIN_HOTSPOT_SIZE: 8,\n\n\t/**\n\t * Variable: MAX_HOTSPOT_SIZE\n\t * \n\t * Defines the maximum size in pixels of the portion of the cell which is\n\t * to be used as a connectable region. Use 0 for no maximum. Default is 0.\n\t */\n\tMAX_HOTSPOT_SIZE: 0,\n\n\t/**\n\t * Variable: RENDERING_HINT_EXACT\n\t * \n\t * Defines the exact rendering hint.\n\t */\n\tRENDERING_HINT_EXACT: 'exact',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTER\n\t * \n\t * Defines the faster rendering hint.\n\t */\n\tRENDERING_HINT_FASTER: 'faster',\n\n\t/**\n\t * Variable: RENDERING_HINT_FASTEST\n\t * \n\t * Defines the fastest rendering hint.\n\t */\n\tRENDERING_HINT_FASTEST: 'fastest',\n\n\t/**\n\t * Variable: DIALECT_SVG\n\t * \n\t * Defines the SVG display dialect name.\n\t */\n\tDIALECT_SVG: 'svg',\n\n\t/**\n\t * Variable: DIALECT_VML\n\t * \n\t * Defines the VML display dialect name.\n\t */\n\tDIALECT_VML: 'vml',\n\n\t/**\n\t * Variable: DIALECT_MIXEDHTML\n\t * \n\t * Defines the mixed HTML display dialect name.\n\t */\n\tDIALECT_MIXEDHTML: 'mixedHtml',\n\n\t/**\n\t * Variable: DIALECT_PREFERHTML\n\t * \n\t * Defines the preferred HTML display dialect name.\n\t */\n\tDIALECT_PREFERHTML: 'preferHtml',\n\n\t/**\n\t * Variable: DIALECT_STRICTHTML\n\t * \n\t * Defines the strict HTML display dialect.\n\t */\n\tDIALECT_STRICTHTML: 'strictHtml',\n\n\t/**\n\t * Variable: NS_SVG\n\t * \n\t * Defines the SVG namespace.\n\t */\n\tNS_SVG: 'http://www.w3.org/2000/svg',\n\n\t/**\n\t * Variable: NS_XHTML\n\t * \n\t * Defines the XHTML namespace.\n\t */\n\tNS_XHTML: 'http://www.w3.org/1999/xhtml',\n\n\t/**\n\t * Variable: NS_XLINK\n\t * \n\t * Defines the XLink namespace.\n\t */\n\tNS_XLINK: 'http://www.w3.org/1999/xlink',\n\n\t/**\n\t * Variable: SHADOWCOLOR\n\t * \n\t * Defines the color to be used to draw shadows in shapes and windows.\n\t * Default is gray.\n\t */\n\tSHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: VML_SHADOWCOLOR\n\t * \n\t * Used for shadow color in filters where transparency is not supported\n\t * (Microsoft Internet Explorer). Default is gray.\n\t */\n\tVML_SHADOWCOLOR: 'gray',\n\n\t/**\n\t * Variable: SHADOW_OFFSET_X\n\t * \n\t * Specifies the x-offset of the shadow. Default is 2.\n\t */\n\tSHADOW_OFFSET_X: 2,\n\n\t/**\n\t * Variable: SHADOW_OFFSET_Y\n\t * \n\t * Specifies the y-offset of the shadow. Default is 3.\n\t */\n\tSHADOW_OFFSET_Y: 3,\n\t\n\t/**\n\t * Variable: SHADOW_OPACITY\n\t * \n\t * Defines the opacity for shadows. Default is 1.\n\t */\n\tSHADOW_OPACITY: 1,\n \n\t/**\n\t * Variable: NODETYPE_ELEMENT\n\t * \n\t * DOM node of type ELEMENT.\n\t */\n\tNODETYPE_ELEMENT: 1,\n\n\t/**\n\t * Variable: NODETYPE_ATTRIBUTE\n\t * \n\t * DOM node of type ATTRIBUTE.\n\t */\n\tNODETYPE_ATTRIBUTE: 2,\n\n\t/**\n\t * Variable: NODETYPE_TEXT\n\t * \n\t * DOM node of type TEXT.\n\t */\n\tNODETYPE_TEXT: 3,\n\n\t/**\n\t * Variable: NODETYPE_CDATA\n\t * \n\t * DOM node of type CDATA.\n\t */\n\tNODETYPE_CDATA: 4,\n\t\n\t/**\n\t * Variable: NODETYPE_ENTITY_REFERENCE\n\t * \n\t * DOM node of type ENTITY_REFERENCE.\n\t */\n\tNODETYPE_ENTITY_REFERENCE: 5,\n\n\t/**\n\t * Variable: NODETYPE_ENTITY\n\t * \n\t * DOM node of type ENTITY.\n\t */\n\tNODETYPE_ENTITY: 6,\n\n\t/**\n\t * Variable: NODETYPE_PROCESSING_INSTRUCTION\n\t * \n\t * DOM node of type PROCESSING_INSTRUCTION.\n\t */\n\tNODETYPE_PROCESSING_INSTRUCTION: 7,\n\n\t/**\n\t * Variable: NODETYPE_COMMENT\n\t * \n\t * DOM node of type COMMENT.\n\t */\n\tNODETYPE_COMMENT: 8,\n\t\t\n\t/**\n\t * Variable: NODETYPE_DOCUMENT\n\t * \n\t * DOM node of type DOCUMENT.\n\t */\n\tNODETYPE_DOCUMENT: 9,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENTTYPE\n\t * \n\t * DOM node of type DOCUMENTTYPE.\n\t */\n\tNODETYPE_DOCUMENTTYPE: 10,\n\n\t/**\n\t * Variable: NODETYPE_DOCUMENT_FRAGMENT\n\t * \n\t * DOM node of type DOCUMENT_FRAGMENT.\n\t */\n\tNODETYPE_DOCUMENT_FRAGMENT: 11,\n\n\t/**\n\t * Variable: NODETYPE_NOTATION\n\t * \n\t * DOM node of type NOTATION.\n\t */\n\tNODETYPE_NOTATION: 12,\n\t\n\t/**\n\t * Variable: TOOLTIP_VERTICAL_OFFSET\n\t * \n\t * Defines the vertical offset for the tooltip.\n\t * Default is 16.\n\t */\n\tTOOLTIP_VERTICAL_OFFSET: 16,\n\n\t/**\n\t * Variable: DEFAULT_VALID_COLOR\n\t * \n\t * Specifies the default valid color. Default is #0000FF.\n\t */\n\tDEFAULT_VALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: DEFAULT_INVALID_COLOR\n\t * \n\t * Specifies the default invalid color. Default is #FF0000.\n\t */\n\tDEFAULT_INVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Specifies the default highlight color for shape outlines.\n\t * Default is #0000FF. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: OUTLINE_HIGHLIGHT_COLOR\n\t * \n\t * Defines the strokewidth to be used for shape outlines.\n\t * Default is 5. This is used in <mxEdgeHandler>.\n\t */\n\tOUTLINE_HIGHLIGHT_STROKEWIDTH: 5,\n\n\t/**\n\t * Variable: HIGHLIGHT_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the highlights.\n\t * Default is 3.\n\t */\n\tHIGHLIGHT_STROKEWIDTH: 3,\n\n\t/**\n\t * Variable: CONSTRAINT_HIGHLIGHT_SIZE\n\t * \n\t * Size of the constraint highlight (in px). Default is 2.\n\t */\n\tHIGHLIGHT_SIZE: 2,\n\t\n\t/**\n\t * Variable: HIGHLIGHT_OPACITY\n\t * \n\t * Opacity (in %) used for the highlights (including outline).\n\t * Default is 100.\n\t */\n\tHIGHLIGHT_OPACITY: 100,\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_VERTEX\n\t * \n\t * Defines the cursor for a movable vertex. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_VERTEX: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_MOVABLE_EDGE\n\t * \n\t * Defines the cursor for a movable edge. Default is 'move'.\n\t */\n\tCURSOR_MOVABLE_EDGE: 'move',\n\t\n\t/**\n\t * Variable: CURSOR_LABEL_HANDLE\n\t * \n\t * Defines the cursor for a movable label. Default is 'default'.\n\t */\n\tCURSOR_LABEL_HANDLE: 'default',\n\t\n\t/**\n\t * Variable: CURSOR_TERMINAL_HANDLE\n\t * \n\t * Defines the cursor for a terminal handle. Default is 'pointer'.\n\t */\n\tCURSOR_TERMINAL_HANDLE: 'pointer',\n\t\n\t/**\n\t * Variable: CURSOR_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_BEND_HANDLE: 'crosshair',\n\n\t/**\n\t * Variable: CURSOR_VIRTUAL_BEND_HANDLE\n\t * \n\t * Defines the cursor for a movable bend. Default is 'crosshair'.\n\t */\n\tCURSOR_VIRTUAL_BEND_HANDLE: 'crosshair',\n\t\n\t/**\n\t * Variable: CURSOR_CONNECT\n\t * \n\t * Defines the cursor for a connectable state. Default is 'pointer'.\n\t */\n\tCURSOR_CONNECT: 'pointer',\n\n\t/**\n\t * Variable: HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for the cell highlighting.\n\t * Use 'none' for no color. Default is #00FF00.\n\t */\n\tHIGHLIGHT_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: TARGET_HIGHLIGHT_COLOR\n\t * \n\t * Defines the color to be used for highlighting a target cell for a new\n\t * or changed connection. Note that this may be either a source or\n\t * target terminal in the graph. Use 'none' for no color.\n\t * Default is #0000FF.\n\t */\n\tCONNECT_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: INVALID_CONNECT_TARGET_COLOR\n\t * \n\t * Defines the color to be used for highlighting a invalid target cells\n\t * for a new or changed connections. Note that this may be either a source\n\t * or target terminal in the graph. Use 'none' for no color. Default is\n\t * #FF0000.\n\t */\n\tINVALID_CONNECT_TARGET_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: DROP_TARGET_COLOR\n\t * \n\t * Defines the color to be used for the highlighting target parent cells\n\t * (for drag and drop). Use 'none' for no color. Default is #0000FF.\n\t */\n\tDROP_TARGET_COLOR: '#0000FF',\n\n\t/**\n\t * Variable: VALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring valid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tVALID_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: INVALID_COLOR\n\t * \n\t * Defines the color to be used for the coloring invalid connection\n\t * previews. Use 'none' for no color. Default is #FF0000.\n\t */\n\tINVALID_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: EDGE_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of edges. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tEDGE_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_COLOR\n\t * \n\t * Defines the color to be used for the selection border of vertices. Use\n\t * 'none' for no color. Default is #00FF00.\n\t */\n\tVERTEX_SELECTION_COLOR: '#00FF00',\n\n\t/**\n\t * Variable: VERTEX_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for vertex selections.\n\t * Default is 1.\n\t */\n\tVERTEX_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: EDGE_SELECTION_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for edge selections.\n\t * Default is 1.\n\t */\n\tEDGE_SELECTION_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the vertex selection\n\t * border. Default is true.\n\t */\n\tVERTEX_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: SELECTION_DASHED\n\t * \n\t * Defines the dashed state to be used for the edge selection\n\t * border. Default is true.\n\t */\n\tEDGE_SELECTION_DASHED: true,\n\n\t/**\n\t * Variable: GUIDE_COLOR\n\t * \n\t * Defines the color to be used for the guidelines in mxGraphHandler.\n\t * Default is #FF0000.\n\t */\n\tGUIDE_COLOR: '#FF0000',\n\n\t/**\n\t * Variable: GUIDE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the guidelines in mxGraphHandler.\n\t * Default is 1.\n\t */\n\tGUIDE_STROKEWIDTH: 1,\n\n\t/**\n\t * Variable: OUTLINE_COLOR\n\t * \n\t * Defines the color to be used for the outline rectangle\n\t * border.  Use 'none' for no color. Default is #0099FF.\n\t */\n\tOUTLINE_COLOR: '#0099FF',\n\n\t/**\n\t * Variable: OUTLINE_STROKEWIDTH\n\t * \n\t * Defines the strokewidth to be used for the outline rectangle\n\t * stroke width. Default is 3.\n\t */\n\tOUTLINE_STROKEWIDTH: (mxClient.IS_IE) ? 2 : 3,\n\n\t/**\n\t * Variable: HANDLE_SIZE\n\t * \n\t * Defines the default size for handles. Default is 6.\n\t */\n\tHANDLE_SIZE: 6,\n\n\t/**\n\t * Variable: LABEL_HANDLE_SIZE\n\t * \n\t * Defines the default size for label handles. Default is 4.\n\t */\n\tLABEL_HANDLE_SIZE: 4,\n\n\t/**\n\t * Variable: HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the handle fill color. Use 'none' for\n\t * no color. Default is #00FF00 (green).\n\t */\n\tHANDLE_FILLCOLOR: '#00FF00',\n\n\t/**\n\t * Variable: HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the handle stroke color. Use 'none' for\n\t * no color. Default is black.\n\t */\n\tHANDLE_STROKECOLOR: 'black',\n\n\t/**\n\t * Variable: LABEL_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the label handle fill color. Use 'none'\n\t * for no color. Default is yellow.\n\t */\n\tLABEL_HANDLE_FILLCOLOR: 'yellow',\n\n\t/**\n\t * Variable: CONNECT_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the connect handle fill color. Use\n\t * 'none' for no color. Default is #0000FF (blue).\n\t */\n\tCONNECT_HANDLE_FILLCOLOR: '#0000FF',\n\n\t/**\n\t * Variable: LOCKED_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the locked handle fill color. Use\n\t * 'none' for no color. Default is #FF0000 (red).\n\t */\n\tLOCKED_HANDLE_FILLCOLOR: '#FF0000',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_FILLCOLOR\n\t * \n\t * Defines the color to be used for the outline sizer fill color. Use\n\t * 'none' for no color. Default is #00FFFF.\n\t */\n\tOUTLINE_HANDLE_FILLCOLOR: '#00FFFF',\n\n\t/**\n\t * Variable: OUTLINE_HANDLE_STROKECOLOR\n\t * \n\t * Defines the color to be used for the outline sizer stroke color. Use\n\t * 'none' for no color. Default is #0033FF.\n\t */\n\tOUTLINE_HANDLE_STROKECOLOR: '#0033FF',\n\n\t/**\n\t * Variable: DEFAULT_FONTFAMILY\n\t * \n\t * Defines the default family for all fonts. Default is Arial,Helvetica.\n\t */\n\tDEFAULT_FONTFAMILY: 'Arial,Helvetica',\n\n\t/**\n\t * Variable: DEFAULT_FONTSIZE\n\t * \n\t * Defines the default size (in px). Default is 11.\n\t */\n\tDEFAULT_FONTSIZE: 11,\n\n\t/**\n\t * Variable: DEFAULT_TEXT_DIRECTION\n\t * \n\t * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is\n\t * defined for it in the style. Default value is an empty string which means\n\t * the default system setting is used and no direction is set.\n\t */\n\tDEFAULT_TEXT_DIRECTION: '',\n\n\t/**\n\t * Variable: LINE_HEIGHT\n\t * \n\t * Defines the default line height for text labels. Default is 1.2.\n\t */\n\tLINE_HEIGHT: 1.2,\n\n\t/**\n\t * Variable: WORD_WRAP\n\t * \n\t * Defines the CSS value for the word-wrap property. Default is \"normal\".\n\t * Change this to \"break-word\" to allow long words to be able to be broken\n\t * and wrap onto the next line.\n\t */\n\tWORD_WRAP: 'normal',\n\n\t/**\n\t * Variable: ABSOLUTE_LINE_HEIGHT\n\t * \n\t * Specifies if absolute line heights should be used (px) in CSS. Default\n\t * is false. Set this to true for backwards compatibility.\n\t */\n\tABSOLUTE_LINE_HEIGHT: false,\n\n\t/**\n\t * Variable: DEFAULT_FONTSTYLE\n\t * \n\t * Defines the default style for all fonts. Default is 0. This can be set\n\t * to any combination of font styles as follows.\n\t * \n\t * (code)\n\t * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;\n\t * (end)\n\t */\n\tDEFAULT_FONTSTYLE: 0,\n\n\t/**\n\t * Variable: DEFAULT_STARTSIZE\n\t * \n\t * Defines the default start size for swimlanes. Default is 40.\n\t */\n\tDEFAULT_STARTSIZE: 40,\n\n\t/**\n\t * Variable: DEFAULT_MARKERSIZE\n\t * \n\t * Defines the default size for all markers. Default is 6.\n\t */\n\tDEFAULT_MARKERSIZE: 6,\n\n\t/**\n\t * Variable: DEFAULT_IMAGESIZE\n\t * \n\t * Defines the default width and height for images used in the\n\t * label shape. Default is 24.\n\t */\n\tDEFAULT_IMAGESIZE: 24,\n\n\t/**\n\t * Variable: ENTITY_SEGMENT\n\t * \n\t * Defines the length of the horizontal segment of an Entity Relation.\n\t * This can be overridden using <mxConstants.STYLE_SEGMENT> style.\n\t * Default is 30.\n\t */\n\tENTITY_SEGMENT: 30,\n\n\t/**\n\t * Variable: RECTANGLE_ROUNDING_FACTOR\n\t * \n\t * Defines the rounding factor for rounded rectangles in percent between\n\t * 0 and 1. Values should be smaller than 0.5. Default is 0.15.\n\t */\n\tRECTANGLE_ROUNDING_FACTOR: 0.15,\n\n\t/**\n\t * Variable: LINE_ARCSIZE\n\t * \n\t * Defines the size of the arcs for rounded edges. Default is 20.\n\t */\n\tLINE_ARCSIZE: 20,\n\n\t/**\n\t * Variable: ARROW_SPACING\n\t * \n\t * Defines the spacing between the arrow shape and its terminals. Default is 0.\n\t */\n\tARROW_SPACING: 0,\n\n\t/**\n\t * Variable: ARROW_WIDTH\n\t * \n\t * Defines the width of the arrow shape. Default is 30.\n\t */\n\tARROW_WIDTH: 30,\n\n\t/**\n\t * Variable: ARROW_SIZE\n\t * \n\t * Defines the size of the arrowhead in the arrow shape. Default is 30.\n\t */\n\tARROW_SIZE: 30,\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_PORTRAIT: new mxRectangle(0, 0, 827, 1169),\n\n\t/**\n\t * Variable: PAGE_FORMAT_A4_PORTRAIT\n\t * \n\t * Defines the rectangle for the A4 portrait page format. The dimensions\n\t * of this page format are 826x1169 pixels.\n\t */\n\tPAGE_FORMAT_A4_LANDSCAPE: new mxRectangle(0, 0, 1169, 827),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The\n\t * dimensions of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_PORTRAIT: new mxRectangle(0, 0, 850, 1100),\n\n\t/**\n\t * Variable: PAGE_FORMAT_LETTER_PORTRAIT\n\t * \n\t * Defines the rectangle for the Letter portrait page format. The dimensions\n\t * of this page format are 850x1100 pixels.\n\t */\n\tPAGE_FORMAT_LETTER_LANDSCAPE: new mxRectangle(0, 0, 1100, 850),\n\n\t/**\n\t * Variable: NONE\n\t * \n\t * Defines the value for none. Default is \"none\".\n\t */\n\tNONE: 'none',\n\n\t/**\n\t * Variable: STYLE_PERIMETER\n\t * \n\t * Defines the key for the perimeter style. This is a function that defines\n\t * the perimeter around a particular shape. Possible values are the\n\t * functions defined in <mxPerimeter>. Alternatively, the constants in this\n\t * class that start with \"PERIMETER_\" may be used to access\n\t * perimeter styles in <mxStyleRegistry>. Value is \"perimeter\".\n\t */\n\tSTYLE_PERIMETER: 'perimeter',\n\t\n\t/**\n\t * Variable: STYLE_SOURCE_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the source for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"sourcePort\".\n\t */\n\tSTYLE_SOURCE_PORT: 'sourcePort',\n\t\n\t/**\n\t * Variable: STYLE_TARGET_PORT\n\t * \n\t * Defines the ID of the cell that should be used for computing the\n\t * perimeter point of the target for an edge. This allows for graphically\n\t * connecting to a cell while keeping the actual terminal of the edge.\n\t * Value is \"targetPort\".\n\t */\n\tSTYLE_TARGET_PORT: 'targetPort',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to cells in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, \n\t * DIRECTION_EAST\" and \"DIRECTION_WEST\". Value is\n\t * \"portConstraint\".\n\t */\n\tSTYLE_PORT_CONSTRAINT: 'portConstraint',\n\n\t/**\n\t * Variable: STYLE_PORT_CONSTRAINT_ROTATION\n\t * \n\t * Define whether port constraint directions are rotated with vertex\n\t * rotation. 0 (default) causes port constraints to remain absolute, \n\t * relative to the graph, 1 causes the constraints to rotate with\n\t * the vertex. Value is \"portConstraintRotation\".\n\t */\n\tSTYLE_PORT_CONSTRAINT_ROTATION: 'portConstraintRotation',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to sources in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"sourcePortConstraint\".\n\t */\n\tSTYLE_SOURCE_PORT_CONSTRAINT: 'sourcePortConstraint',\n\n\t/**\n\t * Variable: STYLE_TARGET_PORT_CONSTRAINT\n\t * \n\t * Defines the direction(s) that edges are allowed to connect to targets in.\n\t * Possible values are \"DIRECTION_NORTH, DIRECTION_SOUTH, DIRECTION_EAST\"\n\t * and \"DIRECTION_WEST\". Value is \"targetPortConstraint\".\n\t */\n\tSTYLE_TARGET_PORT_CONSTRAINT: 'targetPortConstraint',\n\n\t/**\n\t * Variable: STYLE_OPACITY\n\t * \n\t * Defines the key for the opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"opacity\".\n\t */\n\tSTYLE_OPACITY: 'opacity',\n\n\t/**\n\t * Variable: STYLE_FILL_OPACITY\n\t * \n\t * Defines the key for the fill opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"fillOpacity\".\n\t */\n\tSTYLE_FILL_OPACITY: 'fillOpacity',\n\n\t/**\n\t * Variable: STYLE_STROKE_OPACITY\n\t * \n\t * Defines the key for the stroke opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"strokeOpacity\".\n\t */\n\tSTYLE_STROKE_OPACITY: 'strokeOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_OPACITY\n\t * \n\t * Defines the key for the text opacity style. The type of the value is \n\t * numeric and the possible range is 0-100. Value is \"textOpacity\".\n\t */\n\tSTYLE_TEXT_OPACITY: 'textOpacity',\n\n\t/**\n\t * Variable: STYLE_TEXT_DIRECTION\n\t * \n\t * Defines the key for the text direction style. Possible values are\n\t * \"TEXT_DIRECTION_DEFAULT, TEXT_DIRECTION_AUTO, TEXT_DIRECTION_LTR\"\n\t * and \"TEXT_DIRECTION_RTL\". Value is \"textDirection\".\n\t * The default value for the style is defined in <DEFAULT_TEXT_DIRECTION>.\n\t * It is used is no value is defined for this key in a given style. This is\n\t * an experimental style that is currently ignored in the backends.\n\t */\n\tSTYLE_TEXT_DIRECTION: 'textDirection',\n\n\t/**\n\t * Variable: STYLE_OVERFLOW\n\t * \n\t * Defines the key for the overflow style. Possible values are 'visible',\n\t * 'hidden', 'fill' and 'width'. The default value is 'visible'. This value\n\t * specifies how overlapping vertex labels are handled. A value of\n\t * 'visible' will show the complete label. A value of 'hidden' will clip\n\t * the label so that it does not overlap the vertex bounds. A value of\n\t * 'fill' will use the vertex bounds and a value of 'width' will use the\n\t * the vertex width for the label. See <mxGraph.isLabelClipped>. Note that\n\t * the vertical alignment is ignored for overflow fill and for horizontal\n\t * alignment, left should be used to avoid pixel offsets in Internet Explorer\n\t * 11 and earlier or if foreignObjects are disabled. Value is \"overflow\".\n\t */\n\tSTYLE_OVERFLOW: 'overflow',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL\n\t * \n\t * Defines if the connection points on either end of the edge should be\n\t * computed so that the edge is vertical or horizontal if possible and\n\t * if the point is not at a fixed location. Default is false. This is\n\t * used in <mxGraph.isOrthogonal>, which also returns true if the edgeStyle\n\t * of the edge is an elbow or entity. Value is \"orthogonal\".\n\t */\n\tSTYLE_ORTHOGONAL: 'orthogonal',\n\n\t/**\n\t * Variable: STYLE_EXIT_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitX\".\n\t */\n\tSTYLE_EXIT_X: 'exitX',\n\n\t/**\n\t * Variable: STYLE_EXIT_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its source terminal. Value is \"exitY\".\n\t */\n\tSTYLE_EXIT_Y: 'exitY',\n\n\t/**\n\t * Variable: STYLE_EXIT_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the source. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"exitPerimeter\".\n\t */\n\tSTYLE_EXIT_PERIMETER: 'exitPerimeter',\n\n\t/**\n\t * Variable: STYLE_ENTRY_X\n\t * \n\t * Defines the key for the horizontal relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryX\".\n\t */\n\tSTYLE_ENTRY_X: 'entryX',\n\n\t/**\n\t * Variable: STYLE_ENTRY_Y\n\t * \n\t * Defines the key for the vertical relative coordinate connection point\n\t * of an edge with its target terminal. Value is \"entryY\".\n\t */\n\tSTYLE_ENTRY_Y: 'entryY',\n\n\t/**\n\t * Variable: STYLE_ENTRY_PERIMETER\n\t * \n\t * Defines if the perimeter should be used to find the exact entry point\n\t * along the perimeter of the target. Possible values are 0 (false) and\n\t * 1 (true). Default is 1 (true). Value is \"entryPerimeter\".\n\t */\n\tSTYLE_ENTRY_PERIMETER: 'entryPerimeter',\n\n\t/**\n\t * Variable: STYLE_WHITE_SPACE\n\t * \n\t * Defines the key for the white-space style. Possible values are 'nowrap'\n\t * and 'wrap'. The default value is 'nowrap'. This value specifies how\n\t * white-space inside a HTML vertex label should be handled. A value of\n\t * 'nowrap' means the text will never wrap to the next line until a\n\t * linefeed is encountered. A value of 'wrap' means text will wrap when\n\t * necessary. This style is only used for HTML labels.\n\t * See <mxGraph.isWrapping>. Value is \"whiteSpace\".\n\t */\n\tSTYLE_WHITE_SPACE: 'whiteSpace',\n\n\t/**\n\t * Variable: STYLE_ROTATION\n\t * \n\t * Defines the key for the rotation style. The type of the value is \n\t * numeric and the possible range is 0-360. Value is \"rotation\".\n\t */\n\tSTYLE_ROTATION: 'rotation',\n\n\t/**\n\t * Variable: STYLE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. Value is \"fillColor\".\n\t */\n\tSTYLE_FILLCOLOR: 'fillColor',\n\n\t/**\n\t * Variable: STYLE_POINTER_EVENTS\n\t * \n\t * Specifies if pointer events should be fired on transparent backgrounds.\n\t * This style is currently only supported in <mxRectangleShape>. Default\n\t * is true. Value is \"pointerEvents\". This is typically set to\n\t * false in groups where the transparent part should allow any underlying\n\t * cells to be clickable.\n\t */\n\tSTYLE_POINTER_EVENTS: 'pointerEvents',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_FILLCOLOR\n\t * \n\t * Defines the key for the fill color of the swimlane background. Possible\n\t * values are all HTML color names or HEX codes. Default is no background.\n\t * Value is \"swimlaneFillColor\".\n\t */\n\tSTYLE_SWIMLANE_FILLCOLOR: 'swimlaneFillColor',\n\n\t/**\n\t * Variable: STYLE_MARGIN\n\t * \n\t * Defines the key for the margin between the ellipses in the double ellipse shape.\n\t * Possible values are all positive numbers. Value is \"margin\".\n\t */\n\tSTYLE_MARGIN: 'margin',\n\n\t/**\n\t * Variable: STYLE_GRADIENTCOLOR\n\t * \n\t * Defines the key for the gradient color. Possible values are all HTML color\n\t * names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit' or 'indicated' to use the color code of a related cell or the\n\t * indicator shape. This is ignored if no fill color is defined. Value is\n\t * \"gradientColor\".\n\t */\n\tSTYLE_GRADIENTCOLOR: 'gradientColor',\n\n\t/**\n\t * Variable: STYLE_GRADIENT_DIRECTION\n\t * \n\t * Defines the key for the gradient direction. Possible values are\n\t * <DIRECTION_EAST>, <DIRECTION_WEST>, <DIRECTION_NORTH> and\n\t * <DIRECTION_SOUTH>. Default is <DIRECTION_SOUTH>. Generally, and by\n\t * default in mxGraph, gradient painting is done from the value of\n\t * <STYLE_FILLCOLOR> to the value of <STYLE_GRADIENTCOLOR>. Taking the\n\t * example of <DIRECTION_NORTH>, this means <STYLE_FILLCOLOR> color at the \n\t * bottom of paint pattern and <STYLE_GRADIENTCOLOR> at top, with a\n\t * gradient in-between. Value is \"gradientDirection\".\n\t */\n\tSTYLE_GRADIENT_DIRECTION: 'gradientDirection',\n\n\t/**\n\t * Variable: STYLE_STROKECOLOR\n\t * \n\t * Defines the key for the strokeColor style. Possible values are all HTML\n\t * color names or HEX codes, as well as special keywords such as 'swimlane,\n\t * 'inherit', 'indicated' to use the color code of a related cell or the\n\t * indicator shape or 'none' for no color. Value is \"strokeColor\".\n\t */\n\tSTYLE_STROKECOLOR: 'strokeColor',\n\n\t/**\n\t * Variable: STYLE_SEPARATORCOLOR\n\t * \n\t * Defines the key for the separatorColor style. Possible values are all\n\t * HTML color names or HEX codes. This style is only used for\n\t * <SHAPE_SWIMLANE> shapes. Value is \"separatorColor\".\n\t */\n\tSTYLE_SEPARATORCOLOR: 'separatorColor',\n\n\t/**\n\t * Variable: STYLE_STROKEWIDTH\n\t * \n\t * Defines the key for the strokeWidth style. The type of the value is \n\t * numeric and the possible range is any non-negative value larger or equal\n\t * to 1. The value defines the stroke width in pixels. Note: To hide a\n\t * stroke use strokeColor none. Value is \"strokeWidth\".\n\t */\n\tSTYLE_STROKEWIDTH: 'strokeWidth',\n\n\t/**\n\t * Variable: STYLE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. This value defines how the lines of\n\t * the label are horizontally aligned. <ALIGN_LEFT> mean label text lines\n\t * are aligned to left of the label bounds, <ALIGN_RIGHT> to the right of\n\t * the label bounds and <ALIGN_CENTER> means the center of the text lines\n\t * are aligned in the center of the label bounds. Note this value doesn't\n\t * affect the positioning of the overall label bounds relative to the\n\t * vertex, to move the label bounds horizontally, use\n\t * <STYLE_LABEL_POSITION>. Value is \"align\".\n\t */\n\tSTYLE_ALIGN: 'align',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. This value defines how\n\t * the lines of the label are vertically aligned. <ALIGN_TOP> means the\n\t * topmost label text line is aligned against the top of the label bounds,\n\t * <ALIGN_BOTTOM> means the bottom-most label text line is aligned against\n\t * the bottom of the label bounds and <ALIGN_MIDDLE> means there is equal\n\t * spacing between the topmost text label line and the top of the label\n\t * bounds and the bottom-most text label line and the bottom of the label\n\t * bounds. Note this value doesn't affect the positioning of the overall\n\t * label bounds relative to the vertex, to move the label bounds\n\t * vertically, use <STYLE_VERTICAL_LABEL_POSITION>. Value is \"verticalAlign\".\n\t */\n\tSTYLE_VERTICAL_ALIGN: 'verticalAlign',\n\n\t/**\n\t * Variable: STYLE_LABEL_WIDTH\n\t * \n\t * Defines the key for the width of the label if the label position is not\n\t * center. Value is \"labelWidth\".\n\t */\n\tSTYLE_LABEL_WIDTH: 'labelWidth',\n\n\t/**\n\t * Variable: STYLE_LABEL_POSITION\n\t * \n\t * Defines the key for the horizontal label position of vertices. Possible\n\t * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>. Default is\n\t * <ALIGN_CENTER>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_LEFT> means the entire label bounds is\n\t * placed completely just to the left of the vertex, <ALIGN_RIGHT> means\n\t * adjust to the right and <ALIGN_CENTER> means the label bounds are\n\t * vertically aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label horizontally within the label bounds, use <STYLE_ALIGN>.\n\t * Value is \"labelPosition\".\n\t */\n\tSTYLE_LABEL_POSITION: 'labelPosition',\n\n\t/**\n\t * Variable: STYLE_VERTICAL_LABEL_POSITION\n\t * \n\t * Defines the key for the vertical label position of vertices. Possible\n\t * values are <ALIGN_TOP>, <ALIGN_BOTTOM> and <ALIGN_MIDDLE>. Default is\n\t * <ALIGN_MIDDLE>. The label align defines the position of the label\n\t * relative to the cell. <ALIGN_TOP> means the entire label bounds is\n\t * placed completely just on the top of the vertex, <ALIGN_BOTTOM> means\n\t * adjust on the bottom and <ALIGN_MIDDLE> means the label bounds are\n\t * horizontally aligned with the bounds of the vertex. Note this value\n\t * doesn't affect the positioning of label within the label bounds, to move\n\t * the label vertically within the label bounds, use\n\t * <STYLE_VERTICAL_ALIGN>. Value is \"verticalLabelPosition\".\n\t */\n\tSTYLE_VERTICAL_LABEL_POSITION: 'verticalLabelPosition',\n\t\n\t/**\n\t * Variable: STYLE_IMAGE_ASPECT\n\t * \n\t * Defines the key for the image aspect style. Possible values are 0 (do\n\t * not preserve aspect) or 1 (keep aspect). This is only used in\n\t * <mxImageShape>. Default is 1. Value is \"imageAspect\".\n\t */\n\tSTYLE_IMAGE_ASPECT: 'imageAspect',\n\n\t/**\n\t * Variable: STYLE_IMAGE_ALIGN\n\t * \n\t * Defines the key for the align style. Possible values are <ALIGN_LEFT>,\n\t * <ALIGN_CENTER> and <ALIGN_RIGHT>. The value defines how any image in the\n\t * vertex label is aligned horizontally within the label bounds of a\n\t * <SHAPE_LABEL> shape. Value is \"imageAlign\".\n\t */\n\tSTYLE_IMAGE_ALIGN: 'imageAlign',\n\n\t/**\n\t * Variable: STYLE_IMAGE_VERTICAL_ALIGN\n\t * \n\t * Defines the key for the verticalAlign style. Possible values are\n\t * <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>. The value defines how\n\t * any image in the vertex label is aligned vertically within the label\n\t * bounds of a <SHAPE_LABEL> shape. Value is \"imageVerticalAlign\".\n\t */\n\tSTYLE_IMAGE_VERTICAL_ALIGN: 'imageVerticalAlign',\n\n\t/**\n\t * Variable: STYLE_GLASS\n\t * \n\t * Defines the key for the glass style. Possible values are 0 (disabled) and\n\t * 1(enabled). The default value is 0. This is used in <mxLabel>. Value is\n\t * \"glass\".\n\t */\n\tSTYLE_GLASS: 'glass',\n\n\t/**\n\t * Variable: STYLE_IMAGE\n\t * \n\t * Defines the key for the image style. Possible values are any image URL,\n\t * the type of the value is String. This is the path to the image that is\n\t * to be displayed within the label of a vertex. Data URLs should use the\n\t * following format: data:image/png,xyz where xyz is the base64 encoded\n\t * data (without the \"base64\"-prefix). Note that Data URLs are only\n\t * supported in modern browsers. Value is \"image\".\n\t */\n\tSTYLE_IMAGE: 'image',\n\n\t/**\n\t * Variable: STYLE_IMAGE_WIDTH\n\t * \n\t * Defines the key for the imageWidth style. The type of this value is\n\t * int, the value is the image width in pixels and must be greater than 0.\n\t * Value is \"imageWidth\".\n\t */\n\tSTYLE_IMAGE_WIDTH: 'imageWidth',\n\n\t/**\n\t * Variable: STYLE_IMAGE_HEIGHT\n\t * \n\t * Defines the key for the imageHeight style. The type of this value is\n\t * int, the value is the image height in pixels and must be greater than 0.\n\t * Value is \"imageHeight\".\n\t */\n\tSTYLE_IMAGE_HEIGHT: 'imageHeight',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BACKGROUND\n\t * \n\t * Defines the key for the image background color. This style is only used\n\t * in <mxImageShape>. Possible values are all HTML color names or HEX\n\t * codes. Value is \"imageBackground\".\n\t */\n\tSTYLE_IMAGE_BACKGROUND: 'imageBackground',\n\n\t/**\n\t * Variable: STYLE_IMAGE_BORDER\n\t * \n\t * Defines the key for the image border color. This style is only used in\n\t * <mxImageShape>. Possible values are all HTML color names or HEX codes.\n\t * Value is \"imageBorder\".\n\t */\n\tSTYLE_IMAGE_BORDER: 'imageBorder',\n\n\t/**\n\t * Variable: STYLE_FLIPH\n\t * \n\t * Defines the key for the horizontal image flip. This style is only used\n\t * in <mxImageShape>. Possible values are 0 and 1. Default is 0. Value is\n\t * \"flipH\".\n\t */\n\tSTYLE_FLIPH: 'flipH',\n\n\t/**\n\t * Variable: STYLE_FLIPV\n\t * \n\t * Defines the key for the vertical flip. Possible values are 0 and 1.\n\t * Default is 0. Value is \"flipV\".\n\t */\n\tSTYLE_FLIPV: 'flipV',\n\n\t/**\n\t * Variable: STYLE_NOLABEL\n\t * \n\t * Defines the key for the noLabel style. If this is true then no label is\n\t * visible for a given cell. Possible values are true or false (1 or 0).\n\t * Default is false. Value is \"noLabel\".\n\t */\n\tSTYLE_NOLABEL: 'noLabel',\n\n\t/**\n\t * Variable: STYLE_NOEDGESTYLE\n\t * \n\t * Defines the key for the noEdgeStyle style. If this is true then no edge\n\t * style is applied for a given edge. Possible values are true or false\n\t * (1 or 0). Default is false. Value is \"noEdgeStyle\".\n\t */\n\tSTYLE_NOEDGESTYLE: 'noEdgeStyle',\n\n\t/**\n\t * Variable: STYLE_LABEL_BACKGROUNDCOLOR\n\t * \n\t * Defines the key for the label background color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBackgroundColor\".\n\t */\n\tSTYLE_LABEL_BACKGROUNDCOLOR: 'labelBackgroundColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_BORDERCOLOR\n\t * \n\t * Defines the key for the label border color. Possible values are all\n\t * HTML color names or HEX codes. Value is \"labelBorderColor\".\n\t */\n\tSTYLE_LABEL_BORDERCOLOR: 'labelBorderColor',\n\n\t/**\n\t * Variable: STYLE_LABEL_PADDING\n\t * \n\t * Defines the key for the label padding, ie. the space between the label\n\t * border and the label. Value is \"labelPadding\".\n\t */\n\tSTYLE_LABEL_PADDING: 'labelPadding',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SHAPE\n\t * \n\t * Defines the key for the indicator shape used within an <mxLabel>.\n\t * Possible values are all SHAPE_* constants or the names of any new\n\t * shapes. The indicatorShape has precedence over the indicatorImage.\n\t * Value is \"indicatorShape\".\n\t */\n\tSTYLE_INDICATOR_SHAPE: 'indicatorShape',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_IMAGE\n\t * \n\t * Defines the key for the indicator image used within an <mxLabel>.\n\t * Possible values are all image URLs. The indicatorShape has\n\t * precedence over the indicatorImage. Value is \"indicatorImage\".\n\t */\n\tSTYLE_INDICATOR_IMAGE: 'indicatorImage',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_COLOR\n\t * \n\t * Defines the key for the indicatorColor style. Possible values are all\n\t * HTML color names or HEX codes, as well as the special 'swimlane' keyword\n\t * to refer to the color of the parent swimlane if one exists. Value is\n\t * \"indicatorColor\".\n\t */\n\tSTYLE_INDICATOR_COLOR: 'indicatorColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_STROKECOLOR\n\t * \n\t * Defines the key for the indicator stroke color in <mxLabel>.\n\t * Possible values are all color codes. Value is \"indicatorStrokeColor\".\n\t */\n\tSTYLE_INDICATOR_STROKECOLOR: 'indicatorStrokeColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_GRADIENTCOLOR\n\t * \n\t * Defines the key for the indicatorGradientColor style. Possible values\n\t * are all HTML color names or HEX codes. This style is only supported in\n\t * <SHAPE_LABEL> shapes. Value is \"indicatorGradientColor\".\n\t */\n\tSTYLE_INDICATOR_GRADIENTCOLOR: 'indicatorGradientColor',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_SPACING\n\t * \n\t * The defines the key for the spacing between the label and the\n\t * indicator in <mxLabel>. Possible values are in pixels. Value is\n\t * \"indicatorSpacing\".\n\t */\n\tSTYLE_INDICATOR_SPACING: 'indicatorSpacing',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_WIDTH\n\t * \n\t * Defines the key for the indicator width. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorWidth\".\n\t */\n\tSTYLE_INDICATOR_WIDTH: 'indicatorWidth',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_HEIGHT\n\t * \n\t * Defines the key for the indicator height. Possible values start at 0 (in\n\t * pixels). Value is \"indicatorHeight\".\n\t */\n\tSTYLE_INDICATOR_HEIGHT: 'indicatorHeight',\n\n\t/**\n\t * Variable: STYLE_INDICATOR_DIRECTION\n\t * \n\t * Defines the key for the indicatorDirection style. The direction style is\n\t * used to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"indicatorDirection\".\n\t */\n\tSTYLE_INDICATOR_DIRECTION: 'indicatorDirection',\n\n\t/**\n\t * Variable: STYLE_SHADOW\n\t * \n\t * Defines the key for the shadow style. The type of the value is Boolean.\n\t * Value is \"shadow\".\n\t */\n\tSTYLE_SHADOW: 'shadow',\n\t\n\t/**\n\t * Variable: STYLE_SEGMENT\n\t * \n\t * Defines the key for the segment style. The type of this value is float\n\t * and the value represents the size of the horizontal segment of the\n\t * entity relation style. Default is ENTITY_SEGMENT. Value is \"segment\".\n\t */\n\tSTYLE_SEGMENT: 'segment',\n\t\n\t/**\n\t * Variable: STYLE_ENDARROW\n\t *\n\t * Defines the key for the end arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * Value is \"endArrow\".\n\t *\n\t * Example:\n\t * (code)\n\t * style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\t * (end)\n\t */\n\tSTYLE_ENDARROW: 'endArrow',\n\n\t/**\n\t * Variable: STYLE_STARTARROW\n\t * \n\t * Defines the key for the start arrow marker. Possible values are all\n\t * constants with an ARROW-prefix. This is only used in <mxConnector>.\n\t * See <STYLE_ENDARROW>. Value is \"startArrow\".\n\t */\n\tSTYLE_STARTARROW: 'startArrow',\n\n\t/**\n\t * Variable: STYLE_ENDSIZE\n\t * \n\t * Defines the key for the endSize style. The type of this value is numeric\n\t * and the value represents the size of the end marker in pixels. Value is\n\t * \"endSize\".\n\t */\n\tSTYLE_ENDSIZE: 'endSize',\n\n\t/**\n\t * Variable: STYLE_STARTSIZE\n\t * \n\t * Defines the key for the startSize style. The type of this value is\n\t * numeric and the value represents the size of the start marker or the\n\t * size of the swimlane title region depending on the shape it is used for.\n\t * Value is \"startSize\".\n\t */\n\tSTYLE_STARTSIZE: 'startSize',\n\n\t/**\n\t * Variable: STYLE_SWIMLANE_LINE\n\t * \n\t * Defines the key for the swimlaneLine style. This style specifies whether\n\t * the line between the title regio of a swimlane should be visible. Use 0\n\t * for hidden or 1 (default) for visible. Value is \"swimlaneLine\".\n\t */\n\tSTYLE_SWIMLANE_LINE: 'swimlaneLine',\n\n\t/**\n\t * Variable: STYLE_ENDFILL\n\t * \n\t * Defines the key for the endFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"endFill\".\n\t */\n\tSTYLE_ENDFILL: 'endFill',\n\n\t/**\n\t * Variable: STYLE_STARTFILL\n\t * \n\t * Defines the key for the startFill style. Use 0 for no fill or 1 (default)\n\t * for fill. (This style is only exported via <mxImageExport>.) Value is\n\t * \"startFill\".\n\t */\n\tSTYLE_STARTFILL: 'startFill',\n\n\t/**\n\t * Variable: STYLE_DASHED\n\t * \n\t * Defines the key for the dashed style. Use 0 (default) for non-dashed or 1\n\t * for dashed. Value is \"dashed\".\n\t */\n\tSTYLE_DASHED: 'dashed',\n\n\t/**\n\t * Defines the key for the dashed pattern style in SVG and image exports.\n\t * The type of this value is a space separated list of numbers that specify\n\t * a custom-defined dash pattern. Dash styles are defined in terms of the\n\t * length of the dash (the drawn part of the stroke) and the length of the\n\t * space between the dashes. The lengths are relative to the line width: a\n\t * length of \"1\" is equal to the line width. VML ignores this style and\n\t * uses dashStyle instead as defined in the VML specification. This style\n\t * is only used in the <mxConnector> shape. Value is \"dashPattern\".\n\t */\n\tSTYLE_DASH_PATTERN: 'dashPattern',\n\n\t/**\n\t * Variable: STYLE_FIX_DASH\n\t * \n\t * Defines the key for the fixDash style. Use 0 (default) for dash patterns\n\t * that depend on the linewidth and 1 for dash patterns that ignore the\n\t * line width. Value is \"fixDash\".\n\t */\n\tSTYLE_FIX_DASH: 'fixDash',\n\n\t/**\n\t * Variable: STYLE_ROUNDED\n\t * \n\t * Defines the key for the rounded style. The type of this value is\n\t * Boolean. For edges this determines whether or not joins between edges\n\t * segments are smoothed to a rounded finish. For vertices that have the\n\t * rectangle shape, this determines whether or not the rectangle is\n\t * rounded. Use 0 (default) for non-rounded or 1 for rounded. Value is\n\t * \"rounded\".\n\t */\n\tSTYLE_ROUNDED: 'rounded',\n\n\t/**\n\t * Variable: STYLE_CURVED\n\t * \n\t * Defines the key for the curved style. The type of this value is\n\t * Boolean. It is only applicable for connector shapes. Use 0 (default)\n\t * for non-curved or 1 for curved. Value is \"curved\".\n\t */\n\tSTYLE_CURVED: 'curved',\n\n\t/**\n\t * Variable: STYLE_ARCSIZE\n\t * \n\t * Defines the rounding factor for a rounded rectangle in percent (without\n\t * the percent sign). Possible values are between 0 and 100. If this value\n\t * is not specified then RECTANGLE_ROUNDING_FACTOR * 100 is used. For\n\t * edges, this defines the absolute size of rounded corners in pixels. If\n\t * this values is not specified then LINE_ARCSIZE is used.\n\t * (This style is only exported via <mxImageExport>.) Value is \"arcSize\".\n\t */\n\tSTYLE_ARCSIZE: 'arcSize',\n\n\t/**\n\t * Variable: STYLE_ABSOLUTE_ARCSIZE\n\t * \n\t * Defines the key for the absolute arc size style. This specifies if\n\t * arcSize for rectangles is abolute or relative. Possible values are 1\n\t * and 0 (default). Value is \"absoluteArcSize\".\n\t */\n\tSTYLE_ABSOLUTE_ARCSIZE: 'absoluteArcSize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the source perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the source connection point of\n\t * an edge and the perimeter of the source vertex in pixels. This style\n\t * only applies to edges. Value is \"sourcePerimeterSpacing\".\n\t */\n\tSTYLE_SOURCE_PERIMETER_SPACING: 'sourcePerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_TARGET_PERIMETER_SPACING\n\t * \n\t * Defines the key for the target perimeter spacing. The type of this value\n\t * is numeric. This is the distance between the target connection point of\n\t * an edge and the perimeter of the target vertex in pixels. This style\n\t * only applies to edges. Value is \"targetPerimeterSpacing\".\n\t */\n\tSTYLE_TARGET_PERIMETER_SPACING: 'targetPerimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_PERIMETER_SPACING\n\t * \n\t * Defines the key for the perimeter spacing. This is the distance between\n\t * the connection point and the perimeter in pixels. When used in a vertex\n\t * style, this applies to all incoming edges to floating ports (edges that\n\t * terminate on the perimeter of the vertex). When used in an edge style,\n\t * this spacing applies to the source and target separately, if they\n\t * terminate in floating ports (on the perimeter of the vertex). Value is\n\t * \"perimeterSpacing\".\n\t */\n\tSTYLE_PERIMETER_SPACING: 'perimeterSpacing',\n\n\t/**\n\t * Variable: STYLE_SPACING\n\t * \n\t * Defines the key for the spacing. The value represents the spacing, in\n\t * pixels, added to each side of a label in a vertex (style applies to\n\t * vertices only). Value is \"spacing\".\n\t */\n\tSTYLE_SPACING: 'spacing',\n\n\t/**\n\t * Variable: STYLE_SPACING_TOP\n\t * \n\t * Defines the key for the spacingTop style. The value represents the\n\t * spacing, in pixels, added to the top side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingTop\".\n\t */\n\tSTYLE_SPACING_TOP: 'spacingTop',\n\n\t/**\n\t * Variable: STYLE_SPACING_LEFT\n\t * \n\t * Defines the key for the spacingLeft style. The value represents the\n\t * spacing, in pixels, added to the left side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingLeft\".\n\t */\n\tSTYLE_SPACING_LEFT: 'spacingLeft',\n\n\t/**\n\t * Variable: STYLE_SPACING_BOTTOM\n\t * \n\t * Defines the key for the spacingBottom style The value represents the\n\t * spacing, in pixels, added to the bottom side of a label in a vertex\n\t * (style applies to vertices only). Value is \"spacingBottom\".\n\t */\n\tSTYLE_SPACING_BOTTOM: 'spacingBottom',\n\n\t/**\n\t * Variable: STYLE_SPACING_RIGHT\n\t * \n\t * Defines the key for the spacingRight style The value represents the\n\t * spacing, in pixels, added to the right side of a label in a vertex (style\n\t * applies to vertices only). Value is \"spacingRight\".\n\t */\n\tSTYLE_SPACING_RIGHT: 'spacingRight',\n\n\t/**\n\t * Variable: STYLE_HORIZONTAL\n\t * \n\t * Defines the key for the horizontal style. Possible values are\n\t * true or false. This value only applies to vertices. If the <STYLE_SHAPE>\n\t * is \"SHAPE_SWIMLANE\" a value of false indicates that the\n\t * swimlane should be drawn vertically, true indicates to draw it\n\t * horizontally. If the shape style does not indicate that this vertex is a\n\t * swimlane, this value affects only whether the label is drawn\n\t * horizontally or vertically. Value is \"horizontal\".\n\t */\n\tSTYLE_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: STYLE_DIRECTION\n\t * \n\t * Defines the key for the direction style. The direction style is used\n\t * to specify the direction of certain shapes (eg. <mxTriangle>).\n\t * Possible values are <DIRECTION_EAST> (default), <DIRECTION_WEST>,\n\t * <DIRECTION_NORTH> and <DIRECTION_SOUTH>. Value is \"direction\".\n\t */\n\tSTYLE_DIRECTION: 'direction',\n\n\t/**\n\t * Variable: STYLE_ANCHOR_POINT_DIRECTION\n\t * \n\t * Defines the key for the anchorPointDirection style. The defines if the\n\t * direction style should be taken into account when computing the fixed\n\t * point location for connected edges. Default is 1 (yes). Set this to 0\n\t * to ignore the direction style for fixed connection points. Value is\n\t * \"anchorPointDirection\".\n\t */\n\tSTYLE_ANCHOR_POINT_DIRECTION: 'anchorPointDirection',\n\n\t/**\n\t * Variable: STYLE_ELBOW\n\t * \n\t * Defines the key for the elbow style. Possible values are\n\t * <ELBOW_HORIZONTAL> and <ELBOW_VERTICAL>. Default is <ELBOW_HORIZONTAL>.\n\t * This defines how the three segment orthogonal edge style leaves its\n\t * terminal vertices. The vertical style leaves the terminal vertices at\n\t * the top and bottom sides. Value is \"elbow\".\n\t */\n\tSTYLE_ELBOW: 'elbow',\n\n\t/**\n\t * Variable: STYLE_FONTCOLOR\n\t * \n\t * Defines the key for the fontColor style. Possible values are all HTML\n\t * color names or HEX codes. Value is \"fontColor\".\n\t */\n\tSTYLE_FONTCOLOR: 'fontColor',\n\n\t/**\n\t * Variable: STYLE_FONTFAMILY\n\t * \n\t * Defines the key for the fontFamily style. Possible values are names such\n\t * as Arial; Dialog; Verdana; Times New Roman. The value is of type String.\n\t * Value is fontFamily.\n\t */\n\tSTYLE_FONTFAMILY: 'fontFamily',\n\n\t/**\n\t * Variable: STYLE_FONTSIZE\n\t * \n\t * Defines the key for the fontSize style (in px). The type of the value\n\t * is int. Value is \"fontSize\".\n\t */\n\tSTYLE_FONTSIZE: 'fontSize',\n\n\t/**\n\t * Variable: STYLE_FONTSTYLE\n\t * \n\t * Defines the key for the fontStyle style. Values may be any logical AND\n\t * (sum) of <FONT_BOLD>, <FONT_ITALIC> and <FONT_UNDERLINE>.\n\t * The type of the value is int. Value is \"fontStyle\".\n\t */\n\tSTYLE_FONTSTYLE: 'fontStyle',\n\t\n\t/**\n\t * Variable: STYLE_ASPECT\n\t * \n\t * Defines the key for the aspect style. Possible values are empty or fixed.\n\t * If fixed is used then the aspect ratio of the cell will be maintained\n\t * when resizing. Default is empty. Value is \"aspect\".\n\t */\n\tSTYLE_ASPECT: 'aspect',\n\n\t/**\n\t * Variable: STYLE_AUTOSIZE\n\t * \n\t * Defines the key for the autosize style. This specifies if a cell should be\n\t * resized automatically if the value has changed. Possible values are 0 or 1.\n\t * Default is 0. See <mxGraph.isAutoSizeCell>. This is normally combined with\n\t * <STYLE_RESIZABLE> to disable manual sizing. Value is \"autosize\".\n\t */\n\tSTYLE_AUTOSIZE: 'autosize',\n\n\t/**\n\t * Variable: STYLE_FOLDABLE\n\t * \n\t * Defines the key for the foldable style. This specifies if a cell is foldable\n\t * using a folding icon. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellFoldable>. Value is \"foldable\".\n\t */\n\tSTYLE_FOLDABLE: 'foldable',\n\n\t/**\n\t * Variable: STYLE_EDITABLE\n\t * \n\t * Defines the key for the editable style. This specifies if the value of\n\t * a cell can be edited using the in-place editor. Possible values are 0 or\n\t * 1. Default is 1. See <mxGraph.isCellEditable>. Value is \"editable\".\n\t */\n\tSTYLE_EDITABLE: 'editable',\n\n\t/**\n\t * Variable: STYLE_BACKGROUND_OUTLINE\n\t * \n\t * Defines the key for the backgroundOutline style. This specifies if a\n\t * only the background of a cell should be painted when it is highlighted.\n\t * Possible values are 0 or 1. Default is 0. Value is \"backgroundOutline\".\n\t */\n\tSTYLE_BACKGROUND_OUTLINE: 'backgroundOutline',\n\n\t/**\n\t * Variable: STYLE_BENDABLE\n\t * \n\t * Defines the key for the bendable style. This specifies if the control\n\t * points of an edge can be moved. Possible values are 0 or 1. Default is\n\t * 1. See <mxGraph.isCellBendable>. Value is \"bendable\".\n\t */\n\tSTYLE_BENDABLE: 'bendable',\n\n\t/**\n\t * Variable: STYLE_MOVABLE\n\t * \n\t * Defines the key for the movable style. This specifies if a cell can\n\t * be moved. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellMovable>. Value is \"movable\".\n\t */\n\tSTYLE_MOVABLE: 'movable',\n\n\t/**\n\t * Variable: STYLE_RESIZABLE\n\t * \n\t * Defines the key for the resizable style. This specifies if a cell can\n\t * be resized. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellResizable>. Value is \"resizable\".\n\t */\n\tSTYLE_RESIZABLE: 'resizable',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeWidth style. This specifies if a cell's\n\t * width is resized if the parent is resized. If this is 1 then the width\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's width will not be resized. Default is not defined. Value\n\t * is \"resizeWidth\".\n\t */\n\tSTYLE_RESIZE_WIDTH: 'resizeWidth',\n\n\t/**\n\t * Variable: STYLE_RESIZE_WIDTH\n\t * \n\t * Defines the key for the resizeHeight style. This specifies if a cell's\n\t * height if resize if the parent is resized. If this is 1 then the height\n\t * will be resized even if the cell's geometry is relative. If this is 0\n\t * then the cell's height will not be resized. Default is not defined. Value\n\t * is \"resizeHeight\".\n\t */\n\tSTYLE_RESIZE_HEIGHT: 'resizeHeight',\n\n\t/**\n\t * Variable: STYLE_ROTATABLE\n\t * \n\t * Defines the key for the rotatable style. This specifies if a cell can\n\t * be rotated. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellRotatable>. Value is \"rotatable\".\n\t */\n\tSTYLE_ROTATABLE: 'rotatable',\n\n\t/**\n\t * Variable: STYLE_CLONEABLE\n\t * \n\t * Defines the key for the cloneable style. This specifies if a cell can\n\t * be cloned. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellCloneable>. Value is \"cloneable\".\n\t */\n\tSTYLE_CLONEABLE: 'cloneable',\n\n\t/**\n\t * Variable: STYLE_DELETABLE\n\t * \n\t * Defines the key for the deletable style. This specifies if a cell can be\n\t * deleted. Possible values are 0 or 1. Default is 1. See\n\t * <mxGraph.isCellDeletable>. Value is \"deletable\".\n\t */\n\tSTYLE_DELETABLE: 'deletable',\n\n\t/**\n\t * Variable: STYLE_SHAPE\n\t * \n\t * Defines the key for the shape. Possible values are all constants with\n\t * a SHAPE-prefix or any newly defined shape names. Value is \"shape\".\n\t */\n\tSTYLE_SHAPE: 'shape',\n\n\t/**\n\t * Variable: STYLE_EDGE\n\t * \n\t * Defines the key for the edge style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"edgeStyle\".\n\t */\n\tSTYLE_EDGE: 'edgeStyle',\n\n\t/**\n\t * Variable: STYLE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are all numeric values or \"auto\".\n\t * Value is \"jettySize\".\n\t */\n\tSTYLE_JETTY_SIZE: 'jettySize',\n\n\t/**\n\t * Variable: STYLE_SOURCE_JETTY_SIZE\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"sourceJettySize\".\n\t */\n\tSTYLE_SOURCE_JETTY_SIZE: 'sourceJettySize',\n\n\t/**\n\t * Variable: targetJettySize\n\t * \n\t * Defines the key for the jetty size in <mxEdgeStyle.OrthConnector>.\n\t * Default is 10. Possible values are numeric values or \"auto\". This has\n\t * precedence over <STYLE_JETTY_SIZE>. Value is \"targetJettySize\".\n\t */\n\tSTYLE_TARGET_JETTY_SIZE: 'targetJettySize',\n\n\t/**\n\t * Variable: STYLE_LOOP\n\t * \n\t * Defines the key for the loop style. Possible values are the functions\n\t * defined in <mxEdgeStyle>. Value is \"loopStyle\".\n\t */\n\tSTYLE_LOOP: 'loopStyle',\n\n\t/**\n\t * Variable: STYLE_ORTHOGONAL_LOOP\n\t * \n\t * Defines the key for the orthogonal loop style. Possible values are 0 and\n\t * 1. Default is 0. Value is \"orthogonalLoop\". Use this style to specify\n\t * if loops should be routed using an orthogonal router. Currently, this\n\t * uses <mxEdgeStyle.OrthConnector> but will be replaced with a dedicated\n\t * orthogonal loop router in later releases.\n\t */\n\tSTYLE_ORTHOGONAL_LOOP: 'orthogonalLoop',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_X\n\t * \n\t * Defines the key for the horizontal routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterX\".\n\t */\n\tSTYLE_ROUTING_CENTER_X: 'routingCenterX',\n\n\t/**\n\t * Variable: STYLE_ROUTING_CENTER_Y\n\t * \n\t * Defines the key for the vertical routing center. Possible values are\n\t * between -0.5 and 0.5. This is the relative offset from the center used\n\t * for connecting edges. The type of this value is numeric. Value is\n\t * \"routingCenterY\".\n\t */\n\tSTYLE_ROUTING_CENTER_Y: 'routingCenterY',\n\n\t/**\n\t * Variable: FONT_BOLD\n\t * \n\t * Constant for bold fonts. Default is 1.\n\t */\n\tFONT_BOLD: 1,\n\n\t/**\n\t * Variable: FONT_ITALIC\n\t * \n\t * Constant for italic fonts. Default is 2.\n\t */\n\tFONT_ITALIC: 2,\n\n\t/**\n\t * Variable: FONT_UNDERLINE\n\t * \n\t * Constant for underlined fonts. Default is 4.\n\t */\n\tFONT_UNDERLINE: 4,\n\n\t/**\n\t * Variable: SHAPE_RECTANGLE\n\t * \n\t * Name under which <mxRectangleShape> is registered in <mxCellRenderer>.\n\t * Default is rectangle.\n\t */\n\tSHAPE_RECTANGLE: 'rectangle',\n\n\t/**\n\t * Variable: SHAPE_ELLIPSE\n\t * \n\t * Name under which <mxEllipse> is registered in <mxCellRenderer>.\n\t * Default is ellipse.\n\t */\n\tSHAPE_ELLIPSE: 'ellipse',\n\n\t/**\n\t * Variable: SHAPE_DOUBLE_ELLIPSE\n\t * \n\t * Name under which <mxDoubleEllipse> is registered in <mxCellRenderer>.\n\t * Default is doubleEllipse.\n\t */\n\tSHAPE_DOUBLE_ELLIPSE: 'doubleEllipse',\n\n\t/**\n\t * Variable: SHAPE_RHOMBUS\n\t * \n\t * Name under which <mxRhombus> is registered in <mxCellRenderer>.\n\t * Default is rhombus.\n\t */\n\tSHAPE_RHOMBUS: 'rhombus',\n\n\t/**\n\t * Variable: SHAPE_LINE\n\t * \n\t * Name under which <mxLine> is registered in <mxCellRenderer>.\n\t * Default is line.\n\t */\n\tSHAPE_LINE: 'line',\n\n\t/**\n\t * Variable: SHAPE_IMAGE\n\t * \n\t * Name under which <mxImageShape> is registered in <mxCellRenderer>.\n\t * Default is image.\n\t */\n\tSHAPE_IMAGE: 'image',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW\n\t * \n\t * Name under which <mxArrow> is registered in <mxCellRenderer>.\n\t * Default is arrow.\n\t */\n\tSHAPE_ARROW: 'arrow',\n\t\n\t/**\n\t * Variable: SHAPE_ARROW_CONNECTOR\n\t * \n\t * Name under which <mxArrowConnector> is registered in <mxCellRenderer>.\n\t * Default is arrowConnector.\n\t */\n\tSHAPE_ARROW_CONNECTOR: 'arrowConnector',\n\t\n\t/**\n\t * Variable: SHAPE_LABEL\n\t * \n\t * Name under which <mxLabel> is registered in <mxCellRenderer>.\n\t * Default is label.\n\t */\n\tSHAPE_LABEL: 'label',\n\t\n\t/**\n\t * Variable: SHAPE_CYLINDER\n\t * \n\t * Name under which <mxCylinder> is registered in <mxCellRenderer>.\n\t * Default is cylinder.\n\t */\n\tSHAPE_CYLINDER: 'cylinder',\n\t\n\t/**\n\t * Variable: SHAPE_SWIMLANE\n\t * \n\t * Name under which <mxSwimlane> is registered in <mxCellRenderer>.\n\t * Default is swimlane.\n\t */\n\tSHAPE_SWIMLANE: 'swimlane',\n\t\t\n\t/**\n\t * Variable: SHAPE_CONNECTOR\n\t * \n\t * Name under which <mxConnector> is registered in <mxCellRenderer>.\n\t * Default is connector.\n\t */\n\tSHAPE_CONNECTOR: 'connector',\n\n\t/**\n\t * Variable: SHAPE_ACTOR\n\t * \n\t * Name under which <mxActor> is registered in <mxCellRenderer>.\n\t * Default is actor.\n\t */\n\tSHAPE_ACTOR: 'actor',\n\t\t\n\t/**\n\t * Variable: SHAPE_CLOUD\n\t * \n\t * Name under which <mxCloud> is registered in <mxCellRenderer>.\n\t * Default is cloud.\n\t */\n\tSHAPE_CLOUD: 'cloud',\n\t\t\n\t/**\n\t * Variable: SHAPE_TRIANGLE\n\t * \n\t * Name under which <mxTriangle> is registered in <mxCellRenderer>.\n\t * Default is triangle.\n\t */\n\tSHAPE_TRIANGLE: 'triangle',\n\t\t\n\t/**\n\t * Variable: SHAPE_HEXAGON\n\t * \n\t * Name under which <mxHexagon> is registered in <mxCellRenderer>.\n\t * Default is hexagon.\n\t */\n\tSHAPE_HEXAGON: 'hexagon',\n\n\t/**\n\t * Variable: ARROW_CLASSIC\n\t * \n\t * Constant for classic arrow markers.\n\t */\n\tARROW_CLASSIC: 'classic',\n\n\t/**\n\t * Variable: ARROW_CLASSIC_THIN\n\t * \n\t * Constant for thin classic arrow markers.\n\t */\n\tARROW_CLASSIC_THIN: 'classicThin',\n\n\t/**\n\t * Variable: ARROW_BLOCK\n\t * \n\t * Constant for block arrow markers.\n\t */\n\tARROW_BLOCK: 'block',\n\n\t/**\n\t * Variable: ARROW_BLOCK_THIN\n\t * \n\t * Constant for thin block arrow markers.\n\t */\n\tARROW_BLOCK_THIN: 'blockThin',\n\n\t/**\n\t * Variable: ARROW_OPEN\n\t * \n\t * Constant for open arrow markers.\n\t */\n\tARROW_OPEN: 'open',\n\n\t/**\n\t * Variable: ARROW_OPEN_THIN\n\t * \n\t * Constant for thin open arrow markers.\n\t */\n\tARROW_OPEN_THIN: 'openThin',\n\n\t/**\n\t * Variable: ARROW_OVAL\n\t * \n\t * Constant for oval arrow markers.\n\t */\n\tARROW_OVAL: 'oval',\n\n\t/**\n\t * Variable: ARROW_DIAMOND\n\t * \n\t * Constant for diamond arrow markers.\n\t */\n\tARROW_DIAMOND: 'diamond',\n\n\t/**\n\t * Variable: ARROW_DIAMOND_THIN\n\t * \n\t * Constant for thin diamond arrow markers.\n\t */\n\tARROW_DIAMOND_THIN: 'diamondThin',\n\n\t/**\n\t * Variable: ALIGN_LEFT\n\t * \n\t * Constant for left horizontal alignment. Default is left.\n\t */\n\tALIGN_LEFT: 'left',\n\n\t/**\n\t * Variable: ALIGN_CENTER\n\t * \n\t * Constant for center horizontal alignment. Default is center.\n\t */\n\tALIGN_CENTER: 'center',\n\n\t/**\n\t * Variable: ALIGN_RIGHT\n\t * \n\t * Constant for right horizontal alignment. Default is right.\n\t */\n\tALIGN_RIGHT: 'right',\n\n\t/**\n\t * Variable: ALIGN_TOP\n\t * \n\t * Constant for top vertical alignment. Default is top.\n\t */\n\tALIGN_TOP: 'top',\n\n\t/**\n\t * Variable: ALIGN_MIDDLE\n\t * \n\t * Constant for middle vertical alignment. Default is middle.\n\t */\n\tALIGN_MIDDLE: 'middle',\n\n\t/**\n\t * Variable: ALIGN_BOTTOM\n\t * \n\t * Constant for bottom vertical alignment. Default is bottom.\n\t */\n\tALIGN_BOTTOM: 'bottom',\n\n\t/**\n\t * Variable: DIRECTION_NORTH\n\t * \n\t * Constant for direction north. Default is north.\n\t */\n\tDIRECTION_NORTH: 'north',\n\n\t/**\n\t * Variable: DIRECTION_SOUTH\n\t * \n\t * Constant for direction south. Default is south.\n\t */\n\tDIRECTION_SOUTH: 'south',\n\n\t/**\n\t * Variable: DIRECTION_EAST\n\t * \n\t * Constant for direction east. Default is east.\n\t */\n\tDIRECTION_EAST: 'east',\n\n\t/**\n\t * Variable: DIRECTION_WEST\n\t * \n\t * Constant for direction west. Default is west.\n\t */\n\tDIRECTION_WEST: 'west',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_DEFAULT\n\t * \n\t * Constant for text direction default. Default is an empty string. Use\n\t * this value to use the default text direction of the operating system. \n\t */\n\tTEXT_DIRECTION_DEFAULT: '',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_AUTO\n\t * \n\t * Constant for text direction automatic. Default is auto. Use this value\n\t * to find the direction for a given text with <mxText.getAutoDirection>. \n\t */\n\tTEXT_DIRECTION_AUTO: 'auto',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_LTR\n\t * \n\t * Constant for text direction left to right. Default is ltr. Use this\n\t * value for left to right text direction.\n\t */\n\tTEXT_DIRECTION_LTR: 'ltr',\n\n\t/**\n\t * Variable: TEXT_DIRECTION_RTL\n\t * \n\t * Constant for text direction right to left. Default is rtl. Use this\n\t * value for right to left text direction.\n\t */\n\tTEXT_DIRECTION_RTL: 'rtl',\n\n\t/**\n\t * Variable: DIRECTION_MASK_NONE\n\t * \n\t * Constant for no direction.\n\t */\n\tDIRECTION_MASK_NONE: 0,\n\n\t/**\n\t * Variable: DIRECTION_MASK_WEST\n\t * \n\t * Bitwise mask for west direction.\n\t */\n\tDIRECTION_MASK_WEST: 1,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_NORTH\n\t * \n\t * Bitwise mask for north direction.\n\t */\n\tDIRECTION_MASK_NORTH: 2,\n\n\t/**\n\t * Variable: DIRECTION_MASK_SOUTH\n\t * \n\t * Bitwise mask for south direction.\n\t */\n\tDIRECTION_MASK_SOUTH: 4,\n\n\t/**\n\t * Variable: DIRECTION_MASK_EAST\n\t * \n\t * Bitwise mask for east direction.\n\t */\n\tDIRECTION_MASK_EAST: 8,\n\t\n\t/**\n\t * Variable: DIRECTION_MASK_ALL\n\t * \n\t * Bitwise mask for all directions.\n\t */\n\tDIRECTION_MASK_ALL: 15,\n\n\t/**\n\t * Variable: ELBOW_VERTICAL\n\t * \n\t * Constant for elbow vertical. Default is horizontal.\n\t */\n\tELBOW_VERTICAL: 'vertical',\n\n\t/**\n\t * Variable: ELBOW_HORIZONTAL\n\t * \n\t * Constant for elbow horizontal. Default is horizontal.\n\t */\n\tELBOW_HORIZONTAL: 'horizontal',\n\n\t/**\n\t * Variable: EDGESTYLE_ELBOW\n\t * \n\t * Name of the elbow edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ELBOW: 'elbowEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ENTITY_RELATION\n\t * \n\t * Name of the entity relation edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ENTITY_RELATION: 'entityRelationEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_LOOP\n\t * \n\t * Name of the loop edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_LOOP: 'loopEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SIDETOSIDE\n\t * \n\t * Name of the side to side edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SIDETOSIDE: 'sideToSideEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_TOPTOBOTTOM\n\t * \n\t * Name of the top to bottom edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_TOPTOBOTTOM: 'topToBottomEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_ORTHOGONAL\n\t * \n\t * Name of the generic orthogonal edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_ORTHOGONAL: 'orthogonalEdgeStyle',\n\n\t/**\n\t * Variable: EDGESTYLE_SEGMENT\n\t * \n\t * Name of the generic segment edge style. Can be used as a string value\n\t * for the STYLE_EDGE style.\n\t */\n\tEDGESTYLE_SEGMENT: 'segmentEdgeStyle',\n \n\t/**\n\t * Variable: PERIMETER_ELLIPSE\n\t * \n\t * Name of the ellipse perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_ELLIPSE: 'ellipsePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RECTANGLE\n\t *\n\t * Name of the rectangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RECTANGLE: 'rectanglePerimeter',\n\n\t/**\n\t * Variable: PERIMETER_RHOMBUS\n\t * \n\t * Name of the rhombus perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_RHOMBUS: 'rhombusPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_HEXAGON\n\t * \n\t * Name of the hexagon perimeter. Can be used as a string value \n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_HEXAGON: 'hexagonPerimeter',\n\n\t/**\n\t * Variable: PERIMETER_TRIANGLE\n\t * \n\t * Name of the triangle perimeter. Can be used as a string value\n\t * for the STYLE_PERIMETER style.\n\t */\n\tPERIMETER_TRIANGLE: 'trianglePerimeter'\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventObject\n * \n * The mxEventObject is a wrapper for all properties of a single event.\n * Additionally, it also offers functions to consume the event and check if it\n * was consumed as follows:\n * \n * (code)\n * evt.consume();\n * INV: evt.isConsumed() == true\n * (end)\n * \n * Constructor: mxEventObject\n *\n * Constructs a new event object with the specified name. An optional\n * sequence of key, value pairs can be appended to define properties.\n * \n * Example:\n *\n * (code)\n * new mxEventObject(\"eventName\", key1, val1, .., keyN, valN)\n * (end)\n */\nfunction mxEventObject(name)\n{\n\tthis.name = name;\n\tthis.properties = [];\n\t\n\tfor (var i = 1; i < arguments.length; i += 2)\n\t{\n\t\tif (arguments[i + 1] != null)\n\t\t{\n\t\t\tthis.properties[arguments[i]] = arguments[i + 1];\n\t\t}\n\t}\n};\n\n/**\n * Variable: name\n *\n * Holds the name.\n */\nmxEventObject.prototype.name = null;\n\n/**\n * Variable: properties\n *\n * Holds the properties as an associative array.\n */\nmxEventObject.prototype.properties = null;\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state. Default is false.\n */\nmxEventObject.prototype.consumed = false;\n\n/**\n * Function: getName\n * \n * Returns <name>.\n */\nmxEventObject.prototype.getName = function()\n{\n\treturn this.name;\n};\n\n/**\n * Function: getProperties\n * \n * Returns <properties>.\n */\nmxEventObject.prototype.getProperties = function()\n{\n\treturn this.properties;\n};\n\n/**\n * Function: getProperty\n * \n * Returns the property for the given key.\n */\nmxEventObject.prototype.getProperty = function(key)\n{\n\treturn this.properties[key];\n};\n\n/**\n * Function: isConsumed\n *\n * Returns true if the event has been consumed.\n */\nmxEventObject.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Consumes the event.\n */\nmxEventObject.prototype.consume = function()\n{\n\tthis.consumed = true;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMouseEvent\n * \n * Base class for all mouse events in mxGraph. A listener for this event should\n * implement the following methods:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   mouseDown: function(sender, evt)\n *   {\n *     mxLog.debug('mouseDown');\n *   },\n *   mouseMove: function(sender, evt)\n *   {\n *     mxLog.debug('mouseMove');\n *   },\n *   mouseUp: function(sender, evt)\n *   {\n *     mxLog.debug('mouseUp');\n *   }\n * });\n * (end)\n * \n * Constructor: mxMouseEvent\n *\n * Constructs a new event object for the given arguments.\n * \n * Parameters:\n * \n * evt - Native mouse event.\n * state - Optional <mxCellState> under the mouse.\n * \n */\nfunction mxMouseEvent(evt, state)\n{\n\tthis.evt = evt;\n\tthis.state = state;\n\tthis.sourceState = state;\n};\n\n/**\n * Variable: consumed\n *\n * Holds the consumed state of this event.\n */\nmxMouseEvent.prototype.consumed = false;\n\n/**\n * Variable: evt\n *\n * Holds the inner event object.\n */\nmxMouseEvent.prototype.evt = null;\n\n/**\n * Variable: graphX\n *\n * Holds the x-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphX = null;\n\n/**\n * Variable: graphY\n *\n * Holds the y-coordinate of the event in the graph. This value is set in\n * <mxGraph.fireMouseEvent>.\n */\nmxMouseEvent.prototype.graphY = null;\n\n/**\n * Variable: state\n *\n * Holds the optional <mxCellState> associated with this event.\n */\nmxMouseEvent.prototype.state = null;\n\n/**\n * Variable: sourceState\n * \n * Holds the <mxCellState> that was passed to the constructor. This can be\n * different from <state> depending on the result of <mxGraph.getEventState>.\n */\nmxMouseEvent.prototype.sourceState = null;\n\n/**\n * Function: getEvent\n * \n * Returns <evt>.\n */\nmxMouseEvent.prototype.getEvent = function()\n{\n\treturn this.evt;\n};\n\n/**\n * Function: getSource\n * \n * Returns the target DOM element using <mxEvent.getSource> for <evt>.\n */\nmxMouseEvent.prototype.getSource = function()\n{\n\treturn mxEvent.getSource(this.evt);\n};\n\n/**\n * Function: isSource\n * \n * Returns true if the given <mxShape> is the source of <evt>.\n */\nmxMouseEvent.prototype.isSource = function(shape)\n{\n\tif (shape != null)\n\t{\n\t\treturn mxUtils.isAncestorNode(shape.node, this.getSource());\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getX\n * \n * Returns <evt.clientX>.\n */\nmxMouseEvent.prototype.getX = function()\n{\n\treturn mxEvent.getClientX(this.getEvent());\n};\n\n/**\n * Function: getY\n * \n * Returns <evt.clientY>.\n */\nmxMouseEvent.prototype.getY = function()\n{\n\treturn mxEvent.getClientY(this.getEvent());\n};\n\n/**\n * Function: getGraphX\n * \n * Returns <graphX>.\n */\nmxMouseEvent.prototype.getGraphX = function()\n{\n\treturn this.graphX;\n};\n\n/**\n * Function: getGraphY\n * \n * Returns <graphY>.\n */\nmxMouseEvent.prototype.getGraphY = function()\n{\n\treturn this.graphY;\n};\n\n/**\n * Function: getState\n * \n * Returns <state>.\n */\nmxMouseEvent.prototype.getState = function()\n{\n\treturn this.state;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> in <state> is not null.\n */\nmxMouseEvent.prototype.getCell = function()\n{\n\tvar state = this.getState();\n\t\n\tif (state != null)\n\t{\n\t\treturn state.cell;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isPopupTrigger\n *\n * Returns true if the event is a popup trigger.\n */\nmxMouseEvent.prototype.isPopupTrigger = function()\n{\n\treturn mxEvent.isPopupTrigger(this.getEvent());\n};\n\n/**\n * Function: isConsumed\n *\n * Returns <consumed>.\n */\nmxMouseEvent.prototype.isConsumed = function()\n{\n\treturn this.consumed;\n};\n\n/**\n * Function: consume\n *\n * Sets <consumed> to true and invokes preventDefault on the native event\n * if such a method is defined. This is used mainly to avoid the cursor from\n * being changed to a text cursor in Webkit. You can use the preventDefault\n * flag to disable this functionality.\n * \n * Parameters:\n * \n * preventDefault - Specifies if the native event should be canceled. Default\n * is true.\n */\nmxMouseEvent.prototype.consume = function(preventDefault)\n{\n\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\n\tif (preventDefault && this.evt.preventDefault)\n\t{\n\t\tthis.evt.preventDefault();\n\t}\n\n\t// Workaround for images being dragged in IE\n\t// Does not change returnValue in Opera\n\tif (mxClient.IS_IE)\n\t{\n\t\tthis.evt.returnValue = true;\n\t}\n\n\t// Sets local consumed state\n\tthis.consumed = true;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEventSource\n *\n * Base class for objects that dispatch named events. To create a subclass that\n * inherits from mxEventSource, the following code is used.\n *\n * (code)\n * function MyClass() { };\n *\n * MyClass.prototype = new mxEventSource();\n * MyClass.prototype.constructor = MyClass;\n * (end)\n *\n * Known Subclasses:\n *\n * <mxGraphModel>, <mxGraph>, <mxGraphView>, <mxEditor>, <mxCellOverlay>,\n * <mxToolbar>, <mxWindow>\n * \n * Constructor: mxEventSource\n *\n * Constructs a new event source.\n */\nfunction mxEventSource(eventSource)\n{\n\tthis.setEventSource(eventSource);\n};\n\n/**\n * Variable: eventListeners\n *\n * Holds the event names and associated listeners in an array. The array\n * contains the event name followed by the respective listener for each\n * registered listener.\n */\nmxEventSource.prototype.eventListeners = null;\n\n/**\n * Variable: eventsEnabled\n *\n * Specifies if events can be fired. Default is true.\n */\nmxEventSource.prototype.eventsEnabled = true;\n\n/**\n * Variable: eventSource\n *\n * Optional source for events. Default is null.\n */\nmxEventSource.prototype.eventSource = null;\n\n/**\n * Function: isEventsEnabled\n * \n * Returns <eventsEnabled>.\n */\nmxEventSource.prototype.isEventsEnabled = function()\n{\n\treturn this.eventsEnabled;\n};\n\n/**\n * Function: setEventsEnabled\n * \n * Sets <eventsEnabled>.\n */\nmxEventSource.prototype.setEventsEnabled = function(value)\n{\n\tthis.eventsEnabled = value;\n};\n\n/**\n * Function: getEventSource\n * \n * Returns <eventSource>.\n */\nmxEventSource.prototype.getEventSource = function()\n{\n\treturn this.eventSource;\n};\n\n/**\n * Function: setEventSource\n * \n * Sets <eventSource>.\n */\nmxEventSource.prototype.setEventSource = function(value)\n{\n\tthis.eventSource = value;\n};\n\n/**\n * Function: addListener\n *\n * Binds the specified function to the given event name. If no event name\n * is given, then the listener is registered for all events.\n * \n * The parameters of the listener are the sender and an <mxEventObject>.\n */\nmxEventSource.prototype.addListener = function(name, funct)\n{\n\tif (this.eventListeners == null)\n\t{\n\t\tthis.eventListeners = [];\n\t}\n\t\n\tthis.eventListeners.push(name);\n\tthis.eventListeners.push(funct);\n};\n\n/**\n * Function: removeListener\n *\n * Removes all occurrences of the given listener from <eventListeners>.\n */\nmxEventSource.prototype.removeListener = function(funct)\n{\n\tif (this.eventListeners != null)\n\t{\n\t\tvar i = 0;\n\t\t\n\t\twhile (i < this.eventListeners.length)\n\t\t{\n\t\t\tif (this.eventListeners[i+1] == funct)\n\t\t\t{\n\t\t\t\tthis.eventListeners.splice(i, 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fireEvent\n *\n * Dispatches the given event to the listeners which are registered for\n * the event. The sender argument is optional. The current execution scope\n * (\"this\") is used for the listener invocation (see <mxUtils.bind>).\n *\n * Example:\n *\n * (code)\n * fireEvent(new mxEventObject(\"eventName\", key1, val1, .., keyN, valN))\n * (end)\n * \n * Parameters:\n *\n * evt - <mxEventObject> that represents the event.\n * sender - Optional sender to be passed to the listener. Default value is\n * the return value of <getEventSource>.\n */\nmxEventSource.prototype.fireEvent = function(evt, sender)\n{\n\tif (this.eventListeners != null && this.isEventsEnabled())\n\t{\n\t\tif (evt == null)\n\t\t{\n\t\t\tevt = new mxEventObject();\n\t\t}\n\t\t\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this.getEventSource();\n\t\t}\n\n\t\tif (sender == null)\n\t\t{\n\t\t\tsender = this;\n\t\t}\n\n\t\tvar args = [sender, evt];\n\t\t\n\t\tfor (var i = 0; i < this.eventListeners.length; i += 2)\n\t\t{\n\t\t\tvar listen = this.eventListeners[i];\n\t\t\t\n\t\t\tif (listen == null || listen == evt.getName())\n\t\t\t{\n\t\t\t\tthis.eventListeners[i+1].apply(this, args);\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEvent =\n{\n\n\t/**\n\t * Class: mxEvent\n\t * \n\t * Cross-browser DOM event support. For internal event handling,\n\t * <mxEventSource> and the graph event dispatch loop in <mxGraph> are used.\n\t * \n\t * Memory Leaks:\n\t * \n\t * Use this class for adding and removing listeners to/from DOM nodes. The\n\t * <removeAllListeners> function is provided to remove all listeners that\n\t * have been added using <addListener>. The function should be invoked when\n\t * the last reference is removed in the JavaScript code, typically when the\n\t * referenced DOM node is removed from the DOM.\n\t *\n\t * Function: addListener\n\t * \n\t * Binds the function to the specified event on the given element. Use\n\t * <mxUtils.bind> in order to bind the \"this\" keyword inside the function\n\t * to a given execution scope.\n\t */\n\taddListener: function()\n\t{\n\t\tvar updateListenerList = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList == null)\n\t\t\t{\n\t\t\t\telement.mxListenerList = [];\n\t\t\t}\n\t\t\t\n\t\t\tvar entry = {name: eventName, f: funct};\n\t\t\telement.mxListenerList.push(entry);\n\t\t};\n\t\t\n\t\tif (window.addEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.addEventListener(eventName, funct, false);\n\t\t\t\tupdateListenerList(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.attachEvent('on' + eventName, funct);\n\t\t\t\tupdateListenerList(element, eventName, funct);\t\t\t\t\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeListener\n\t *\n\t * Removes the specified listener from the given element.\n\t */\n\tremoveListener: function()\n\t{\n\t\tvar updateListener = function(element, eventName, funct)\n\t\t{\n\t\t\tif (element.mxListenerList != null)\n\t\t\t{\n\t\t\t\tvar listenerCount = element.mxListenerList.length;\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < listenerCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar entry = element.mxListenerList[i];\n\t\t\t\t\t\n\t\t\t\t\tif (entry.f == funct)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.mxListenerList.splice(i, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (element.mxListenerList.length == 0)\n\t\t\t\t{\n\t\t\t\t\telement.mxListenerList = null;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\tif (window.removeEventListener)\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.removeEventListener(eventName, funct, false);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn function(element, eventName, funct)\n\t\t\t{\n\t\t\t\telement.detachEvent('on' + eventName, funct);\n\t\t\t\tupdateListener(element, eventName, funct);\n\t\t\t};\n\t\t}\n\t}(),\n\n\t/**\n\t * Function: removeAllListeners\n\t * \n\t * Removes all listeners from the given element.\n\t */\n\tremoveAllListeners: function(element)\n\t{\n\t\tvar list = element.mxListenerList;\n\n\t\tif (list != null)\n\t\t{\n\t\t\twhile (list.length > 0)\n\t\t\t{\n\t\t\t\tvar entry = list[0];\n\t\t\t\tmxEvent.removeListener(element, entry.name, entry.f);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: addGestureListeners\n\t * \n\t * Adds the given listeners for touch, mouse and/or pointer events. If\n\t * <mxClient.IS_POINTER> is true then pointer events will be registered,\n\t * else the respective mouse events will be registered. If <mxClient.IS_POINTER>\n\t * is false and <mxClient.IS_TOUCH> is true then the respective touch events\n\t * will be registered as well as the mouse events.\n\t */\n\taddGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.addListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: removeGestureListeners\n\t * \n\t * Removes the given listeners from mousedown, mousemove, mouseup and the\n\t * respective touch events if <mxClient.IS_TOUCH> is true.\n\t */\n\tremoveGestureListeners: function(node, startListener, moveListener, endListener)\n\t{\n\t\tif (startListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', startListener);\n\t\t}\n\t\t\n\t\tif (moveListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointermove' : 'mousemove', moveListener);\n\t\t}\n\t\t\n\t\tif (endListener != null)\n\t\t{\n\t\t\tmxEvent.removeListener(node, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', endListener);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_POINTER && mxClient.IS_TOUCH)\n\t\t{\n\t\t\tif (startListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchstart', startListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (moveListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchmove', moveListener);\n\t\t\t}\n\t\t\t\n\t\t\tif (endListener != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeListener(node, 'touchend', endListener);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: redirectMouseEvents\n\t *\n\t * Redirects the mouse events from the given DOM node to the graph dispatch\n\t * loop using the event and given state as event arguments. State can\n\t * either be an instance of <mxCellState> or a function that returns an\n\t * <mxCellState>. The down, move, up and dblClick arguments are optional\n\t * functions that take the trigger event as arguments and replace the\n\t * default behaviour.\n\t */\n\tredirectMouseEvents: function(node, graph, state, down, move, up, dblClick)\n\t{\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\treturn (typeof(state) == 'function') ? state(evt) : state;\n\t\t};\n\t\t\n\t\tmxEvent.addGestureListeners(node, function (evt)\n\t\t{\n\t\t\tif (down != null)\n\t\t\t{\n\t\t\t\tdown(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (move != null)\n\t\t\t{\n\t\t\t\tmove(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tif (up != null)\n\t\t\t{\n\t\t\t\tup(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.addListener(node, 'dblclick', function (evt)\n\t\t{\n\t\t\tif (dblClick != null)\n\t\t\t{\n\t\t\t\tdblClick(evt);\n\t\t\t}\n\t\t\telse if (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tvar tmp = getState(evt);\n\t\t\t\tgraph.dblClick(evt, (tmp != null) ? tmp.cell : null);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Function: release\n\t * \n\t * Removes the known listeners from the given DOM node and its descendants.\n\t * \n\t * Parameters:\n\t * \n\t * element - DOM node to remove the listeners from.\n\t */\n\trelease: function(element)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (element != null)\n\t\t\t{\n\t\t\t\tmxEvent.removeAllListeners(element);\n\t\t\t\t\n\t\t\t\tvar children = element.childNodes;\n\t\t\t\t\n\t\t\t\tif (children != null)\n\t\t\t\t{\n\t\t\t        var childCount = children.length;\n\t\t\t        \n\t\t\t        for (var i = 0; i < childCount; i += 1)\n\t\t\t        {\n\t\t\t        \tmxEvent.release(children[i]);\n\t\t\t        }\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignores errors as this is typically called in cleanup code\n\t\t}\n\t},\n\n\t/**\n\t * Function: addMouseWheelListener\n\t * \n\t * Installs the given function as a handler for mouse wheel events. The\n\t * function has two arguments: the mouse event and a boolean that specifies\n\t * if the wheel was moved up or down.\n\t * \n\t * This has been tested with IE 6 and 7, Firefox (all versions), Opera and\n\t * Safari. It does currently not work on Safari for Mac.\n\t * \n\t * Example:\n\t * \n\t * (code)\n\t * mxEvent.addMouseWheelListener(function (evt, up)\n\t * {\n\t *   mxLog.show();\n\t *   mxLog.debug('mouseWheel: up='+up);\n\t * });\n\t *(end)\n\t * \n\t * Parameters:\n\t * \n\t * funct - Handler function that takes the event argument and a boolean up\n\t * argument for the mousewheel direction.\n\t */\n\taddMouseWheelListener: function(funct)\n\t{\n\t\tif (funct != null)\n\t\t{\n\t\t\tvar wheelHandler = function(evt)\n\t\t\t{\n\t\t\t\t// IE does not give an event object but the\n\t\t\t\t// global event object is the mousewheel event\n\t\t\t\t// at this point in time.\n\t\t\t\tif (evt == null)\n\t\t\t\t{\n\t\t\t\t\tevt = window.event;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar delta = 0;\n\t\t\t\t\n\t\t\t\tif (mxClient.IS_FF)\n\t\t\t\t{\n\t\t\t\t\tdelta = -evt.detail / 2;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdelta = evt.wheelDelta / 120;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Handles the event using the given function\n\t\t\t\tif (delta != 0)\n\t\t\t\t{\n\t\t\t\t\tfunct(evt, delta > 0);\n\t\t\t\t}\n\t\t\t};\n\t\n\t\t\t// Webkit has NS event API, but IE event name and details \n\t\t\tif (mxClient.IS_NS && document.documentMode == null)\n\t\t\t{\n\t\t\t\tvar eventName = (mxClient.IS_SF || \tmxClient.IS_GC) ? 'mousewheel' : 'DOMMouseScroll';\n\t\t\t\tmxEvent.addListener(window, eventName, wheelHandler);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.addListener(document, 'mousewheel', wheelHandler);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: disableContextMenu\n\t *\n\t * Disables the context menu for the given element.\n\t */\n\tdisableContextMenu: function(element)\n\t{\n\t\tmxEvent.addListener(element, 'contextmenu', function(evt)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t},\n\t\n\t/**\n\t * Function: getSource\n\t * \n\t * Returns the event's target or srcElement depending on the browser.\n\t */\n\tgetSource: function(evt)\n\t{\n\t\treturn (evt.srcElement != null) ? evt.srcElement : evt.target;\n\t},\n\n\t/**\n\t * Function: isConsumed\n\t * \n\t * Returns true if the event has been consumed using <consume>.\n\t */\n\tisConsumed: function(evt)\n\t{\n\t\treturn evt.isConsumed != null && evt.isConsumed;\n\t},\n\n\t/**\n\t * Function: isTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisTouchEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'touch' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_TOUCH) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 5 : evt.type.indexOf('touch') == 0);\n\t},\n\n\t/**\n\t * Function: isPenEvent\n\t * \n\t * Returns true if the event was generated using a pen (not a touch device or mouse).\n\t */\n\tisPenEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'pen' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_PEN) : ((evt.mozInputSource != null) ?\n\t\t\t\t\tevt.mozInputSource == 2 : evt.type.indexOf('pen') == 0);\n\t},\n\n\t/**\n\t * Function: isMultiTouchEvent\n\t * \n\t * Returns true if the event was generated using a touch device (not a pen or mouse).\n\t */\n\tisMultiTouchEvent: function(evt)\n\t{\n\t\treturn (evt.type != null && evt.type.indexOf('touch') == 0 && evt.touches != null && evt.touches.length > 1);\n\t},\n\n\t/**\n\t * Function: isMouseEvent\n\t * \n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\n\t */\n\tisMouseEvent: function(evt)\n\t{\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\n\t},\n\t\n\t/**\n\t * Function: isLeftMouseButton\n\t * \n\t * Returns true if the left mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\n\t * for control+left-click on the Mac.\n\t */\n\tisLeftMouseButton: function(evt)\n\t{\n\t\t// Special case for mousemove and mousedown we check the buttons\n\t\t// if it exists because which is 0 even if no button is pressed\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\n\t\t{\n\t\t\treturn evt.buttons == 1;\n\t\t}\n\t\telse if ('which' in evt)\n\t\t{\n\t        return evt.which === 1;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 1;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isMiddleMouseButton\n\t * \n\t * Returns true if the middle mouse button is pressed for the given event.\n\t * To check if a button is pressed during a mouseMove you should use the\n\t * <mxGraph.isMouseDown> property.\n\t */\n\tisMiddleMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 2;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 4;\n\t    }\n\t},\n\t\n\t/**\n\t * Function: isRightMouseButton\n\t * \n\t * Returns true if the right mouse button was pressed. Note that this\n\t * button might not be available on some systems. For handling a popup\n\t * trigger <isPopupTrigger> should be used.\n\t */\n\tisRightMouseButton: function(evt)\n\t{\n\t\tif ('which' in evt)\n\t\t{\n\t        return evt.which === 3;\n\t    }\n\t\telse\n\t\t{\n\t        return evt.button === 2;\n\t    }\n\t},\n\n\t/**\n\t * Function: isPopupTrigger\n\t * \n\t * Returns true if the event is a popup trigger. This implementation\n\t * returns true if the right button or the left button and control was\n\t * pressed on a Mac.\n\t */\n\tisPopupTrigger: function(evt)\n\t{\n\t\treturn mxEvent.isRightMouseButton(evt) || (mxClient.IS_MAC && mxEvent.isControlDown(evt) &&\n\t\t\t!mxEvent.isShiftDown(evt) && !mxEvent.isMetaDown(evt) && !mxEvent.isAltDown(evt));\n\t},\n\n\t/**\n\t * Function: isShiftDown\n\t * \n\t * Returns true if the shift key is pressed for the given event.\n\t */\n\tisShiftDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.shiftKey : false;\n\t},\n\n\t/**\n\t * Function: isAltDown\n\t * \n\t * Returns true if the alt key is pressed for the given event.\n\t */\n\tisAltDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.altKey : false;\n\t},\n\n\t/**\n\t * Function: isControlDown\n\t * \n\t * Returns true if the control key is pressed for the given event.\n\t */\n\tisControlDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.ctrlKey : false;\n\t},\n\n\t/**\n\t * Function: isMetaDown\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tisMetaDown: function(evt)\n\t{\n\t\treturn (evt != null) ? evt.metaKey : false;\n\t},\n\n\t/**\n\t * Function: getMainEvent\n\t * \n\t * Returns the touch or mouse event that contains the mouse coordinates.\n\t */\n\tgetMainEvent: function(e)\n\t{\n\t\tif ((e.type == 'touchstart' || e.type == 'touchmove') && e.touches != null && e.touches[0] != null)\n\t\t{\n\t\t\te = e.touches[0];\n\t\t}\n\t\telse if (e.type == 'touchend' && e.changedTouches != null && e.changedTouches[0] != null)\n\t\t{\n\t\t\te = e.changedTouches[0];\n\t\t}\n\t\t\n\t\treturn e;\n\t},\n\t\n\t/**\n\t * Function: getClientX\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientX: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientX;\n\t},\n\n\t/**\n\t * Function: getClientY\n\t * \n\t * Returns true if the meta key is pressed for the given event.\n\t */\n\tgetClientY: function(e)\n\t{\n\t\treturn mxEvent.getMainEvent(e).clientY;\n\t},\n\n\t/**\n\t * Function: consume\n\t * \n\t * Consumes the given event.\n\t * \n\t * Parameters:\n\t * \n\t * evt - Native event to be consumed.\n\t * preventDefault - Optional boolean to prevent the default for the event.\n\t * Default is true.\n\t * stopPropagation - Option boolean to stop event propagation. Default is\n\t * true.\n\t */\n\tconsume: function(evt, preventDefault, stopPropagation)\n\t{\n\t\tpreventDefault = (preventDefault != null) ? preventDefault : true;\n\t\tstopPropagation = (stopPropagation != null) ? stopPropagation : true;\n\t\t\n\t\tif (preventDefault)\n\t\t{\n\t\t\tif (evt.preventDefault)\n\t\t\t{\n\t\t\t\tif (stopPropagation)\n\t\t\t\t{\n\t\t\t\t\tevt.stopPropagation();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t\telse if (stopPropagation)\n\t\t\t{\n\t\t\t\tevt.cancelBubble = true;\n\t\t\t}\n\t\t}\n\n\t\t// Opera\n\t\tevt.isConsumed = true;\n\n\t\t// Other browsers\n\t\tif (!evt.preventDefault)\n\t\t{\n\t\t\tevt.returnValue = false;\n\t\t}\n\t},\n\t\n\t//\n\t// Special handles in mouse events\n\t//\n\t\n\t/**\n\t * Variable: LABEL_HANDLE\n\t * \n\t * Index for the label handle in an mxMouseEvent. This should be a negative\n\t * value that does not interfere with any possible handle indices. Default\n\t * is -1.\n\t */\n\tLABEL_HANDLE: -1,\n\t\n\t/**\n\t * Variable: ROTATION_HANDLE\n\t * \n\t * Index for the rotation handle in an mxMouseEvent. This should be a\n\t * negative value that does not interfere with any possible handle indices.\n\t * Default is -2.\n\t */\n\tROTATION_HANDLE: -2,\n\t\n\t/**\n\t * Variable: CUSTOM_HANDLE\n\t * \n\t * Start index for the custom handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * custom handle. Default is -100.\n\t */\n\tCUSTOM_HANDLE: -100,\n\t\n\t/**\n\t * Variable: VIRTUAL_HANDLE\n\t * \n\t * Start index for the virtual handles in an mxMouseEvent. This should be a\n\t * negative value and is the start index which is decremented for each\n\t * virtual handle. Default is -100000. This assumes that there are no more\n\t * than VIRTUAL_HANDLE - CUSTOM_HANDLE custom handles.\n\t * \n\t */\n\tVIRTUAL_HANDLE: -100000,\n\t\n\t//\n\t// Event names\n\t//\n\t\n\t/**\n\t * Variable: MOUSE_DOWN\n\t *\n\t * Specifies the event name for mouseDown.\n\t */\n\tMOUSE_DOWN: 'mouseDown',\n\t\n\t/**\n\t * Variable: MOUSE_MOVE\n\t *\n\t * Specifies the event name for mouseMove. \n\t */\n\tMOUSE_MOVE: 'mouseMove',\n\t\n\t/**\n\t * Variable: MOUSE_UP\n\t *\n\t * Specifies the event name for mouseUp. \n\t */\n\tMOUSE_UP: 'mouseUp',\n\n\t/**\n\t * Variable: ACTIVATE\n\t *\n\t * Specifies the event name for activate.\n\t */\n\tACTIVATE: 'activate',\n\n\t/**\n\t * Variable: RESIZE_START\n\t *\n\t * Specifies the event name for resizeStart.\n\t */\n\tRESIZE_START: 'resizeStart',\n\n\t/**\n\t * Variable: RESIZE\n\t *\n\t * Specifies the event name for resize.\n\t */\n\tRESIZE: 'resize',\n\n\t/**\n\t * Variable: RESIZE_END\n\t *\n\t * Specifies the event name for resizeEnd.\n\t */\n\tRESIZE_END: 'resizeEnd',\n\n\t/**\n\t * Variable: MOVE_START\n\t *\n\t * Specifies the event name for moveStart.\n\t */\n\tMOVE_START: 'moveStart',\n\n\t/**\n\t * Variable: MOVE\n\t *\n\t * Specifies the event name for move.\n\t */\n\tMOVE: 'move',\n\n\t/**\n\t * Variable: MOVE_END\n\t *\n\t * Specifies the event name for moveEnd.\n\t */\n\tMOVE_END: 'moveEnd',\n\n\t/**\n\t * Variable: PAN_START\n\t *\n\t * Specifies the event name for panStart.\n\t */\n\tPAN_START: 'panStart',\n\n\t/**\n\t * Variable: PAN\n\t *\n\t * Specifies the event name for pan.\n\t */\n\tPAN: 'pan',\n\n\t/**\n\t * Variable: PAN_END\n\t *\n\t * Specifies the event name for panEnd.\n\t */\n\tPAN_END: 'panEnd',\n\n\t/**\n\t * Variable: MINIMIZE\n\t *\n\t * Specifies the event name for minimize.\n\t */\n\tMINIMIZE: 'minimize',\n\n\t/**\n\t * Variable: NORMALIZE\n\t *\n\t * Specifies the event name for normalize.\n\t */\n\tNORMALIZE: 'normalize',\n\n\t/**\n\t * Variable: MAXIMIZE\n\t *\n\t * Specifies the event name for maximize.\n\t */\n\tMAXIMIZE: 'maximize',\n\n\t/**\n\t * Variable: HIDE\n\t *\n\t * Specifies the event name for hide.\n\t */\n\tHIDE: 'hide',\n\n\t/**\n\t * Variable: SHOW\n\t *\n\t * Specifies the event name for show.\n\t */\n\tSHOW: 'show',\n\n\t/**\n\t * Variable: CLOSE\n\t *\n\t * Specifies the event name for close.\n\t */\n\tCLOSE: 'close',\n\n\t/**\n\t * Variable: DESTROY\n\t *\n\t * Specifies the event name for destroy.\n\t */\n\tDESTROY: 'destroy',\n\n\t/**\n\t * Variable: REFRESH\n\t *\n\t * Specifies the event name for refresh.\n\t */\n\tREFRESH: 'refresh',\n\n\t/**\n\t * Variable: SIZE\n\t *\n\t * Specifies the event name for size.\n\t */\n\tSIZE: 'size',\n\t\n\t/**\n\t * Variable: SELECT\n\t *\n\t * Specifies the event name for select.\n\t */\n\tSELECT: 'select',\n\n\t/**\n\t * Variable: FIRED\n\t *\n\t * Specifies the event name for fired.\n\t */\n\tFIRED: 'fired',\n\n\t/**\n\t * Variable: FIRE_MOUSE_EVENT\n\t *\n\t * Specifies the event name for fireMouseEvent.\n\t */\n\tFIRE_MOUSE_EVENT: 'fireMouseEvent',\n\n\t/**\n\t * Variable: GESTURE\n\t *\n\t * Specifies the event name for gesture.\n\t */\n\tGESTURE: 'gesture',\n\n\t/**\n\t * Variable: TAP_AND_HOLD\n\t *\n\t * Specifies the event name for tapAndHold.\n\t */\n\tTAP_AND_HOLD: 'tapAndHold',\n\n\t/**\n\t * Variable: GET\n\t *\n\t * Specifies the event name for get.\n\t */\n\tGET: 'get',\n\n\t/**\n\t * Variable: RECEIVE\n\t *\n\t * Specifies the event name for receive.\n\t */\n\tRECEIVE: 'receive',\n\n\t/**\n\t * Variable: CONNECT\n\t *\n\t * Specifies the event name for connect.\n\t */\n\tCONNECT: 'connect',\n\n\t/**\n\t * Variable: DISCONNECT\n\t *\n\t * Specifies the event name for disconnect.\n\t */\n\tDISCONNECT: 'disconnect',\n\n\t/**\n\t * Variable: SUSPEND\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tSUSPEND: 'suspend',\n\n\t/**\n\t * Variable: RESUME\n\t *\n\t * Specifies the event name for suspend.\n\t */\n\tRESUME: 'resume',\n\n\t/**\n\t * Variable: MARK\n\t *\n\t * Specifies the event name for mark.\n\t */\n\tMARK: 'mark',\n\n\t/**\n\t * Variable: ROOT\n\t *\n\t * Specifies the event name for root.\n\t */\n\tROOT: 'root',\n\n\t/**\n\t * Variable: POST\n\t *\n\t * Specifies the event name for post.\n\t */\n\tPOST: 'post',\n\n\t/**\n\t * Variable: OPEN\n\t *\n\t * Specifies the event name for open.\n\t */\n\tOPEN: 'open',\n\n\t/**\n\t * Variable: SAVE\n\t *\n\t * Specifies the event name for open.\n\t */\n\tSAVE: 'save',\n\n\t/**\n\t * Variable: BEFORE_ADD_VERTEX\n\t *\n\t * Specifies the event name for beforeAddVertex.\n\t */\n\tBEFORE_ADD_VERTEX: 'beforeAddVertex',\n\n\t/**\n\t * Variable: ADD_VERTEX\n\t *\n\t * Specifies the event name for addVertex.\n\t */\n\tADD_VERTEX: 'addVertex',\n\n\t/**\n\t * Variable: AFTER_ADD_VERTEX\n\t *\n\t * Specifies the event name for afterAddVertex.\n\t */\n\tAFTER_ADD_VERTEX: 'afterAddVertex',\n\n\t/**\n\t * Variable: DONE\n\t *\n\t * Specifies the event name for done.\n\t */\n\tDONE: 'done',\n\n\t/**\n\t * Variable: EXECUTE\n\t *\n\t * Specifies the event name for execute.\n\t */\n\tEXECUTE: 'execute',\n\n\t/**\n\t * Variable: EXECUTED\n\t *\n\t * Specifies the event name for executed.\n\t */\n\tEXECUTED: 'executed',\n\n\t/**\n\t * Variable: BEGIN_UPDATE\n\t *\n\t * Specifies the event name for beginUpdate.\n\t */\n\tBEGIN_UPDATE: 'beginUpdate',\n\n\t/**\n\t * Variable: START_EDIT\n\t *\n\t * Specifies the event name for startEdit.\n\t */\n\tSTART_EDIT: 'startEdit',\n\n\t/**\n\t * Variable: END_UPDATE\n\t *\n\t * Specifies the event name for endUpdate.\n\t */\n\tEND_UPDATE: 'endUpdate',\n\n\t/**\n\t * Variable: END_EDIT\n\t *\n\t * Specifies the event name for endEdit.\n\t */\n\tEND_EDIT: 'endEdit',\n\n\t/**\n\t * Variable: BEFORE_UNDO\n\t *\n\t * Specifies the event name for beforeUndo.\n\t */\n\tBEFORE_UNDO: 'beforeUndo',\n\n\t/**\n\t * Variable: UNDO\n\t *\n\t * Specifies the event name for undo.\n\t */\n\tUNDO: 'undo',\n\n\t/**\n\t * Variable: REDO\n\t *\n\t * Specifies the event name for redo.\n\t */\n\tREDO: 'redo',\n\n\t/**\n\t * Variable: CHANGE\n\t *\n\t * Specifies the event name for change.\n\t */\n\tCHANGE: 'change',\n\n\t/**\n\t * Variable: NOTIFY\n\t *\n\t * Specifies the event name for notify.\n\t */\n\tNOTIFY: 'notify',\n\n\t/**\n\t * Variable: LAYOUT_CELLS\n\t *\n\t * Specifies the event name for layoutCells.\n\t */\n\tLAYOUT_CELLS: 'layoutCells',\n\n\t/**\n\t * Variable: CLICK\n\t *\n\t * Specifies the event name for click.\n\t */\n\tCLICK: 'click',\n\n\t/**\n\t * Variable: SCALE\n\t *\n\t * Specifies the event name for scale.\n\t */\n\tSCALE: 'scale',\n\n\t/**\n\t * Variable: TRANSLATE\n\t *\n\t * Specifies the event name for translate.\n\t */\n\tTRANSLATE: 'translate',\n\n\t/**\n\t * Variable: SCALE_AND_TRANSLATE\n\t *\n\t * Specifies the event name for scaleAndTranslate.\n\t */\n\tSCALE_AND_TRANSLATE: 'scaleAndTranslate',\n\n\t/**\n\t * Variable: UP\n\t *\n\t * Specifies the event name for up.\n\t */\n\tUP: 'up',\n\n\t/**\n\t * Variable: DOWN\n\t *\n\t * Specifies the event name for down.\n\t */\n\tDOWN: 'down',\n\n\t/**\n\t * Variable: ADD\n\t *\n\t * Specifies the event name for add.\n\t */\n\tADD: 'add',\n\n\t/**\n\t * Variable: REMOVE\n\t *\n\t * Specifies the event name for remove.\n\t */\n\tREMOVE: 'remove',\n\t\n\t/**\n\t * Variable: CLEAR\n\t *\n\t * Specifies the event name for clear.\n\t */\n\tCLEAR: 'clear',\n\n\t/**\n\t * Variable: ADD_CELLS\n\t *\n\t * Specifies the event name for addCells.\n\t */\n\tADD_CELLS: 'addCells',\n\n\t/**\n\t * Variable: CELLS_ADDED\n\t *\n\t * Specifies the event name for cellsAdded.\n\t */\n\tCELLS_ADDED: 'cellsAdded',\n\n\t/**\n\t * Variable: MOVE_CELLS\n\t *\n\t * Specifies the event name for moveCells.\n\t */\n\tMOVE_CELLS: 'moveCells',\n\n\t/**\n\t * Variable: CELLS_MOVED\n\t *\n\t * Specifies the event name for cellsMoved.\n\t */\n\tCELLS_MOVED: 'cellsMoved',\n\n\t/**\n\t * Variable: RESIZE_CELLS\n\t *\n\t * Specifies the event name for resizeCells.\n\t */\n\tRESIZE_CELLS: 'resizeCells',\n\n\t/**\n\t * Variable: CELLS_RESIZED\n\t *\n\t * Specifies the event name for cellsResized.\n\t */\n\tCELLS_RESIZED: 'cellsResized',\n\n\t/**\n\t * Variable: TOGGLE_CELLS\n\t *\n\t * Specifies the event name for toggleCells.\n\t */\n\tTOGGLE_CELLS: 'toggleCells',\n\n\t/**\n\t * Variable: CELLS_TOGGLED\n\t *\n\t * Specifies the event name for cellsToggled.\n\t */\n\tCELLS_TOGGLED: 'cellsToggled',\n\n\t/**\n\t * Variable: ORDER_CELLS\n\t *\n\t * Specifies the event name for orderCells.\n\t */\n\tORDER_CELLS: 'orderCells',\n\n\t/**\n\t * Variable: CELLS_ORDERED\n\t *\n\t * Specifies the event name for cellsOrdered.\n\t */\n\tCELLS_ORDERED: 'cellsOrdered',\n\n\t/**\n\t * Variable: REMOVE_CELLS\n\t *\n\t * Specifies the event name for removeCells.\n\t */\n\tREMOVE_CELLS: 'removeCells',\n\n\t/**\n\t * Variable: CELLS_REMOVED\n\t *\n\t * Specifies the event name for cellsRemoved.\n\t */\n\tCELLS_REMOVED: 'cellsRemoved',\n\n\t/**\n\t * Variable: GROUP_CELLS\n\t *\n\t * Specifies the event name for groupCells.\n\t */\n\tGROUP_CELLS: 'groupCells',\n\n\t/**\n\t * Variable: UNGROUP_CELLS\n\t *\n\t * Specifies the event name for ungroupCells.\n\t */\n\tUNGROUP_CELLS: 'ungroupCells',\n\n\t/**\n\t * Variable: REMOVE_CELLS_FROM_PARENT\n\t *\n\t * Specifies the event name for removeCellsFromParent.\n\t */\n\tREMOVE_CELLS_FROM_PARENT: 'removeCellsFromParent',\n\n\t/**\n\t * Variable: FOLD_CELLS\n\t *\n\t * Specifies the event name for foldCells.\n\t */\n\tFOLD_CELLS: 'foldCells',\n\n\t/**\n\t * Variable: CELLS_FOLDED\n\t *\n\t * Specifies the event name for cellsFolded.\n\t */\n\tCELLS_FOLDED: 'cellsFolded',\n\n\t/**\n\t * Variable: ALIGN_CELLS\n\t *\n\t * Specifies the event name for alignCells.\n\t */\n\tALIGN_CELLS: 'alignCells',\n\n\t/**\n\t * Variable: LABEL_CHANGED\n\t *\n\t * Specifies the event name for labelChanged.\n\t */\n\tLABEL_CHANGED: 'labelChanged',\n\n\t/**\n\t * Variable: CONNECT_CELL\n\t *\n\t * Specifies the event name for connectCell.\n\t */\n\tCONNECT_CELL: 'connectCell',\n\n\t/**\n\t * Variable: CELL_CONNECTED\n\t *\n\t * Specifies the event name for cellConnected.\n\t */\n\tCELL_CONNECTED: 'cellConnected',\n\n\t/**\n\t * Variable: SPLIT_EDGE\n\t *\n\t * Specifies the event name for splitEdge.\n\t */\n\tSPLIT_EDGE: 'splitEdge',\n\n\t/**\n\t * Variable: FLIP_EDGE\n\t *\n\t * Specifies the event name for flipEdge.\n\t */\n\tFLIP_EDGE: 'flipEdge',\n\n\t/**\n\t * Variable: START_EDITING\n\t *\n\t * Specifies the event name for startEditing.\n\t */\n\tSTART_EDITING: 'startEditing',\n\n\t/**\n\t * Variable: EDITING_STARTED\n\t *\n\t * Specifies the event name for editingStarted.\n\t */\n\tEDITING_STARTED: 'editingStarted',\n\n\t/**\n\t * Variable: EDITING_STOPPED\n\t *\n\t * Specifies the event name for editingStopped.\n\t */\n\tEDITING_STOPPED: 'editingStopped',\n\n\t/**\n\t * Variable: ADD_OVERLAY\n\t *\n\t * Specifies the event name for addOverlay.\n\t */\n\tADD_OVERLAY: 'addOverlay',\n\n\t/**\n\t * Variable: REMOVE_OVERLAY\n\t *\n\t * Specifies the event name for removeOverlay.\n\t */\n\tREMOVE_OVERLAY: 'removeOverlay',\n\n\t/**\n\t * Variable: UPDATE_CELL_SIZE\n\t *\n\t * Specifies the event name for updateCellSize.\n\t */\n\tUPDATE_CELL_SIZE: 'updateCellSize',\n\n\t/**\n\t * Variable: ESCAPE\n\t *\n\t * Specifies the event name for escape.\n\t */\n\tESCAPE: 'escape',\n\n\t/**\n\t * Variable: DOUBLE_CLICK\n\t *\n\t * Specifies the event name for doubleClick.\n\t */\n\tDOUBLE_CLICK: 'doubleClick',\n\n\t/**\n\t * Variable: START\n\t *\n\t * Specifies the event name for start.\n\t */\n\tSTART: 'start',\n\n\t/**\n\t * Variable: RESET\n\t *\n\t * Specifies the event name for reset.\n\t */\n\tRESET: 'reset'\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlRequest\n * \n * XML HTTP request wrapper. See also: <mxUtils.get>, <mxUtils.post> and\n * <mxUtils.load>. This class provides a cross-browser abstraction for Ajax\n * requests.\n * \n * Encoding:\n * \n * For encoding parameter values, the built-in encodeURIComponent JavaScript\n * method must be used. For automatic encoding of post data in <mxEditor> the\n * <mxEditor.escapePostData> switch can be set to true (default). The encoding\n * will be carried out using the conte type of the page. That is, the page\n * containting the editor should contain a meta tag in the header, eg.\n * <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n * \n * Example:\n * \n * (code)\n * var onload = function(req)\n * {\n *   mxUtils.alert(req.getDocumentElement());\n * }\n * \n * var onerror = function(req)\n * {\n *   mxUtils.alert('Error');\n * }\n * new mxXmlRequest(url, 'key=value').send(onload, onerror);\n * (end)\n * \n * Sends an asynchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var req = new mxXmlRequest(url, 'key=value', 'POST', false);\n * req.send();\n * mxUtils.alert(req.getDocumentElement());\n * (end)\n * \n * Sends a synchronous POST request to the specified URL.\n * \n * Example:\n * \n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = encodeURIComponent(mxUtils.getXml(result));\n * new mxXmlRequest(url, 'xml='+xml).send();\n * (end)\n * \n * Sends an encoded graph model to the specified URL using xml as the\n * parameter name. The parameter can then be retrieved in C# as follows:\n * \n * (code)\n * string xml = HttpUtility.UrlDecode(context.Request.Params[\"xml\"]);\n * (end)\n * \n * Or in Java as follows:\n * \n * (code)\n * String xml = URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\");\n * (end)\n *\n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image.\n * \n * Constructor: mxXmlRequest\n * \n * Constructs an XML HTTP request.\n * \n * Parameters:\n * \n * url - Target URL of the request.\n * params - Form encoded parameters to send with a POST request.\n * method - String that specifies the request method. Possible values are\n * POST and GET. Default is POST.\n * async - Boolean specifying if an asynchronous request should be used.\n * Default is true.\n * username - String specifying the username to be used for the request.\n * password - String specifying the password to be used for the request.\n */\nfunction mxXmlRequest(url, params, method, async, username, password)\n{\n\tthis.url = url;\n\tthis.params = params;\n\tthis.method = method || 'POST';\n\tthis.async = (async != null) ? async : true;\n\tthis.username = username;\n\tthis.password = password;\n};\n\n/**\n * Variable: url\n * \n * Holds the target URL of the request.\n */\nmxXmlRequest.prototype.url = null;\n\n/**\n * Variable: params\n * \n * Holds the form encoded data for the POST request.\n */\nmxXmlRequest.prototype.params = null;\n\n/**\n * Variable: method\n * \n * Specifies the request method. Possible values are POST and GET. Default\n * is POST.\n */\nmxXmlRequest.prototype.method = null;\n\n/**\n * Variable: async\n * \n * Boolean indicating if the request is asynchronous.\n */\nmxXmlRequest.prototype.async = null;\n\n/**\n * Variable: binary\n * \n * Boolean indicating if the request is binary. This option is ignored in IE.\n * In all other browsers the requested mime type is set to\n * text/plain; charset=x-user-defined. Default is false.\n */\nmxXmlRequest.prototype.binary = false;\n\n/**\n * Variable: withCredentials\n * \n * Specifies if withCredentials should be used in HTML5-compliant browsers. Default is\n * false.\n */\nmxXmlRequest.prototype.withCredentials = false;\n\n/**\n * Variable: username\n * \n * Specifies the username to be used for authentication.\n */\nmxXmlRequest.prototype.username = null;\n\n/**\n * Variable: password\n * \n * Specifies the password to be used for authentication.\n */\nmxXmlRequest.prototype.password = null;\n\n/**\n * Variable: request\n * \n * Holds the inner, browser-specific request object.\n */\nmxXmlRequest.prototype.request = null;\n\n/**\n * Variable: decodeSimulateValues\n * \n * Specifies if request values should be decoded as URIs before setting the\n * textarea value in <simulate>. Defaults to false for backwards compatibility,\n * to avoid another decode on the server this should be set to true.\n */\nmxXmlRequest.prototype.decodeSimulateValues = false;\n\n/**\n * Function: isBinary\n * \n * Returns <binary>.\n */\nmxXmlRequest.prototype.isBinary = function()\n{\n\treturn this.binary;\n};\n\n/**\n * Function: setBinary\n * \n * Sets <binary>.\n */\nmxXmlRequest.prototype.setBinary = function(value)\n{\n\tthis.binary = value;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: isReady\n * \n * Returns true if the response is ready.\n */\nmxXmlRequest.prototype.isReady = function()\n{\n\treturn this.request.readyState == 4;\n};\n\n/**\n * Function: getDocumentElement\n * \n * Returns the document element of the response XML document.\n */\nmxXmlRequest.prototype.getDocumentElement = function()\n{\n\tvar doc = this.getXml();\n\t\n\tif (doc != null)\n\t{\n\t\treturn doc.documentElement;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getXml\n * \n * Returns the response as an XML document. Use <getDocumentElement> to get\n * the document element of the XML document.\n */\nmxXmlRequest.prototype.getXml = function()\n{\n\tvar xml = this.request.responseXML;\n\t\n\t// Handles missing response headers in IE, the first condition handles\n\t// the case where responseXML is there, but using its nodes leads to\n\t// type errors in the mxCellCodec when putting the nodes into a new\n\t// document. This happens in IE9 standards mode and with XML user\n\t// objects only, as they are used directly as values in cells.\n\tif (document.documentMode >= 9 || xml == null || xml.documentElement == null)\n\t{\n\t\txml = mxUtils.parseXml(this.request.responseText);\n\t}\n\t\n\treturn xml;\n};\n\n/**\n * Function: getText\n * \n * Returns the response as a string.\n */\nmxXmlRequest.prototype.getText = function()\n{\n\treturn this.request.responseText;\n};\n\n/**\n * Function: getStatus\n * \n * Returns the status as a number, eg. 404 for \"Not found\" or 200 for \"OK\".\n * Note: The NS_ERROR_NOT_AVAILABLE for invalid responses cannot be cought.\n */\nmxXmlRequest.prototype.getStatus = function()\n{\n\treturn this.request.status;\n};\n\n/**\n * Function: create\n * \n * Creates and returns the inner <request> object.\n */\nmxXmlRequest.prototype.create = function()\n{\n\tif (window.XMLHttpRequest)\n\t{\n\t\treturn function()\n\t\t{\n\t\t\tvar req = new XMLHttpRequest();\n\t\t\t\n\t\t\t// TODO: Check for overrideMimeType required here?\n\t\t\tif (this.isBinary() && req.overrideMimeType)\n\t\t\t{\n\t\t\t\treq.overrideMimeType('text/plain; charset=x-user-defined');\n\t\t\t}\n\n\t\t\treturn req;\n\t\t};\n\t}\n\telse if (typeof(ActiveXObject) != 'undefined')\n\t{\n\t\treturn function()\n\t\t{\n\t\t\t// TODO: Implement binary option\n\t\t\treturn new ActiveXObject('Microsoft.XMLHTTP');\n\t\t};\n\t}\n}();\n\n/**\n * Function: send\n * \n * Send the <request> to the target URL using the specified functions to\n * process the response asychronously.\n * \n * Note: Due to technical limitations, onerror is currently ignored.\n * \n * Parameters:\n * \n * onload - Function to be invoked if a successful response was received.\n * onerror - Function to be called on any error.\n * timeout - Optional timeout in ms before calling ontimeout.\n * ontimeout - Optional function to execute on timeout.\n */\nmxXmlRequest.prototype.send = function(onload, onerror, timeout, ontimeout)\n{\n\tthis.request = this.create();\n\t\n\tif (this.request != null)\n\t{\n\t\tif (onload != null)\n\t\t{\n\t\t\tthis.request.onreadystatechange = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (this.isReady())\n\t\t\t\t{\n\t\t\t\t\tonload(this);\n\t\t\t\t\tthis.request.onreadystatechaange = null;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.request.open(this.method, this.url, this.async,\n\t\t\tthis.username, this.password);\n\t\tthis.setRequestHeaders(this.request, this.params);\n\t\t\n\t\tif (window.XMLHttpRequest && this.withCredentials)\n\t\t{\n\t\t\tthis.request.withCredentials = 'true';\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_QUIRKS && (document.documentMode == null || document.documentMode > 9) &&\n\t\t\twindow.XMLHttpRequest && timeout != null && ontimeout != null)\n\t\t{\n\t\t\tthis.request.timeout = timeout;\n\t\t\tthis.request.ontimeout = ontimeout;\n\t\t}\n\t\t\t\t\n\t\tthis.request.send(this.params);\n\t}\n};\n\n/**\n * Function: setRequestHeaders\n * \n * Sets the headers for the given request and parameters. This sets the\n * content-type to application/x-www-form-urlencoded if any params exist.\n * \n * Example:\n * \n * (code)\n * request.setRequestHeaders = function(request, params)\n * {\n *   if (params != null)\n *   {\n *     request.setRequestHeader('Content-Type',\n *             'multipart/form-data');\n *     request.setRequestHeader('Content-Length',\n *             params.length);\n *   }\n * };\n * (end)\n * \n * Use the code above before calling <send> if you require a\n * multipart/form-data request.   \n */\nmxXmlRequest.prototype.setRequestHeaders = function(request, params)\n{\n\tif (params != null)\n\t{\n\t\trequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t}\n};\n\n/**\n * Function: simulate\n * \n * Creates and posts a request to the given target URL using a dynamically\n * created form inside the given document.\n * \n * Parameters:\n * \n * docs - Document that contains the form element.\n * target - Target to send the form result to.\n */\nmxXmlRequest.prototype.simulate = function(doc, target)\n{\n\tdoc = doc || document;\n\tvar old = null;\n\n\tif (doc == document)\n\t{\n\t\told = window.onbeforeunload;\t\t\n\t\twindow.onbeforeunload = null;\n\t}\n\t\t\t\n\tvar form = doc.createElement('form');\n\tform.setAttribute('method', this.method);\n\tform.setAttribute('action', this.url);\n\n\tif (target != null)\n\t{\n\t\tform.setAttribute('target', target);\n\t}\n\n\tform.style.display = 'none';\n\tform.style.visibility = 'hidden';\n\t\n\tvar pars = (this.params.indexOf('&') > 0) ?\n\t\tthis.params.split('&') :\n\t\tthis.params.split();\n\n\t// Adds the parameters as textareas to the form\n\tfor (var i=0; i<pars.length; i++)\n\t{\n\t\tvar pos = pars[i].indexOf('=');\n\t\t\n\t\tif (pos > 0)\n\t\t{\n\t\t\tvar name = pars[i].substring(0, pos);\n\t\t\tvar value = pars[i].substring(pos+1);\n\t\t\t\n\t\t\tif (this.decodeSimulateValues)\n\t\t\t{\n\t\t\t\tvalue = decodeURIComponent(value);\n\t\t\t}\n\t\t\t\n\t\t\tvar textarea = doc.createElement('textarea');\n\t\t\ttextarea.setAttribute('wrap', 'off');\n\t\t\ttextarea.setAttribute('name', name);\n\t\t\tmxUtils.write(textarea, value);\n\t\t\tform.appendChild(textarea);\n\t\t}\n\t}\n\t\n\tdoc.body.appendChild(form);\n\tform.submit();\n\t\n\tif (form.parentNode != null)\n\t{\n\t\tform.parentNode.removeChild(form);\n\t}\n\n\tif (old != null)\n\t{\t\t\n\t\twindow.onbeforeunload = old;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxClipboard =\n{\n\t/**\n\t * Class: mxClipboard\n\t * \n\t * Singleton that implements a clipboard for graph cells.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * mxClipboard.copy(graph);\n\t * mxClipboard.paste(graph2);\n\t * (end)\n\t *\n\t * This copies the selection cells from the graph to the clipboard and\n\t * pastes them into graph2.\n\t * \n\t * For fine-grained control of the clipboard data the <mxGraph.canExportCell>\n\t * and <mxGraph.canImportCell> functions can be overridden.\n\t * \n\t * To restore previous parents for pasted cells, the implementation for\n\t * <copy> and <paste> can be changed as follows.\n\t * \n\t * (code)\n\t * mxClipboard.copy = function(graph, cells)\n\t * {\n\t *   cells = cells || graph.getSelectionCells();\n\t *   var result = graph.getExportableCells(cells);\n\t *   \n\t *   mxClipboard.parents = new Object();\n\t *   \n\t *   for (var i = 0; i < result.length; i++)\n\t *   {\n\t *     mxClipboard.parents[i] = graph.model.getParent(cells[i]);\n\t *   }\n\t *   \n\t *   mxClipboard.insertCount = 1;\n\t *   mxClipboard.setCells(graph.cloneCells(result));\n\t *   \n\t *   return result;\n\t * };\n\t * \n\t * mxClipboard.paste = function(graph)\n\t * {\n\t *   if (!mxClipboard.isEmpty())\n\t *   {\n\t *     var cells = graph.getImportableCells(mxClipboard.getCells());\n\t *     var delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t *     var parent = graph.getDefaultParent();\n\t *     \n\t *     graph.model.beginUpdate();\n\t *     try\n\t *     {\n\t *       for (var i = 0; i < cells.length; i++)\n\t *       {\n\t *         var tmp = (mxClipboard.parents != null && graph.model.contains(mxClipboard.parents[i])) ?\n\t *              mxClipboard.parents[i] : parent;\n\t *         cells[i] = graph.importCells([cells[i]], delta, delta, tmp)[0];\n\t *       }\n\t *     }\n\t *     finally\n\t *     {\n\t *       graph.model.endUpdate();\n\t *     }\n\t *     \n\t *     // Increments the counter and selects the inserted cells\n\t *     mxClipboard.insertCount++;\n\t *     graph.setSelectionCells(cells);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * Variable: STEPSIZE\n\t * \n\t * Defines the step size to offset the cells after each paste operation.\n\t * Default is 10.\n\t */\n\tSTEPSIZE: 10,\n\n\t/**\n\t * Variable: insertCount\n\t * \n\t * Counts the number of times the clipboard data has been inserted.\n\t */\n\tinsertCount: 1,\n\n\t/**\n\t * Variable: cells\n\t * \n\t * Holds the array of <mxCells> currently in the clipboard.\n\t */\n\tcells: null,\n\n\t/**\n\t * Function: setCells\n\t * \n\t * Sets the cells in the clipboard. Fires a <mxEvent.CHANGE> event.\n\t */\n\tsetCells: function(cells)\n\t{\n\t\tmxClipboard.cells = cells;\n\t},\n\n\t/**\n\t * Function: getCells\n\t * \n\t * Returns  the cells in the clipboard.\n\t */\n\tgetCells: function()\n\t{\n\t\treturn mxClipboard.cells;\n\t},\n\t\n\t/**\n\t * Function: isEmpty\n\t * \n\t * Returns true if the clipboard currently has not data stored.\n\t */\n\tisEmpty: function()\n\t{\n\t\treturn mxClipboard.getCells() == null;\n\t},\n\t\n\t/**\n\t * Function: cut\n\t * \n\t * Cuts the given array of <mxCells> from the specified graph.\n\t * If cells is null then the selection cells of the graph will\n\t * be used. Returns the cells that have been cut from the graph.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Optional array of <mxCells> to be cut.\n\t */\n\tcut: function(graph, cells)\n\t{\n\t\tcells = mxClipboard.copy(graph, cells);\n\t\tmxClipboard.insertCount = 0;\n\t\tmxClipboard.removeCells(graph, cells);\n\t\t\n\t\treturn cells;\n\t},\n\n\t/**\n\t * Function: removeCells\n\t * \n\t * Hook to remove the given cells from the given graph after\n\t * a cut operation.\n\t *\n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be cut.\n\t * cells - Array of <mxCells> to be cut.\n\t */\n\tremoveCells: function(graph, cells)\n\t{\n\t\tgraph.removeCells(cells);\n\t},\n\n\t/**\n\t * Function: copy\n\t * \n\t * Copies the given array of <mxCells> from the specified\n\t * graph to <cells>. Returns the original array of cells that has\n\t * been cloned. Descendants of cells in the array are ignored.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> that contains the cells to be copied.\n\t * cells - Optional array of <mxCells> to be copied.\n\t */\n\tcopy: function(graph, cells)\n\t{\n\t\tcells = cells || graph.getSelectionCells();\n\t\tvar result = graph.getExportableCells(graph.model.getTopmostCells(cells));\n\t\tmxClipboard.insertCount = 1;\n\t\tmxClipboard.setCells(graph.cloneCells(result));\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * Function: paste\n\t * \n\t * Pastes the <cells> into the specified graph restoring\n\t * the relation to <parents>, if possible. If the parents\n\t * are no longer in the graph or invisible then the\n\t * cells are added to the graph's default or into the\n\t * swimlane under the cell's new location if one exists.\n\t * The cells are added to the graph using <mxGraph.importCells>\n\t * and returned.\n\t * \n\t * Parameters:\n\t * \n\t * graph - <mxGraph> to paste the <cells> into.\n\t */\n\tpaste: function(graph)\n\t{\n\t\tvar cells = null;\n\t\t\n\t\tif (!mxClipboard.isEmpty())\n\t\t{\n\t\t\tcells = graph.getImportableCells(mxClipboard.getCells());\n\t\t\tvar delta = mxClipboard.insertCount * mxClipboard.STEPSIZE;\n\t\t\tvar parent = graph.getDefaultParent();\n\t\t\tcells = graph.importCells(cells, delta, delta, parent);\n\t\t\t\n\t\t\t// Increments the counter and selects the inserted cells\n\t\t\tmxClipboard.insertCount++;\n\t\t\tgraph.setSelectionCells(cells);\n\t\t}\n\t\t\n\t\treturn cells;\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxWindow\n * \n * Basic window inside a document.\n * \n * Examples:\n * \n * Creating a simple window.\n *\n * (code)\n * var tb = document.createElement('div');\n * var wnd = new mxWindow('Title', tb, 100, 100, 200, 200, true, true);\n * wnd.setVisible(true); \n * (end)\n *\n * Creating a window that contains an iframe. \n * \n * (code)\n * var frame = document.createElement('iframe');\n * frame.setAttribute('width', '192px');\n * frame.setAttribute('height', '172px');\n * frame.setAttribute('src', 'http://www.example.com/');\n * frame.style.backgroundColor = 'white';\n * \n * var w = document.body.clientWidth;\n * var h = (document.body.clientHeight || document.documentElement.clientHeight);\n * var wnd = new mxWindow('Title', frame, (w-200)/2, (h-200)/3, 200, 200);\n * wnd.setVisible(true);\n * (end)\n * \n * To limit the movement of a window, eg. to keep it from being moved beyond\n * the top, left corner the following method can be overridden (recommended):\n * \n * (code)\n * wnd.setLocation = function(x, y)\n * {\n *   x = Math.max(0, x);\n *   y = Math.max(0, y);\n *   mxWindow.prototype.setLocation.apply(this, arguments);\n * };\n * (end)\n * \n * Or the following event handler can be used:\n * \n * (code)\n * wnd.addListener(mxEvent.MOVE, function(e)\n * {\n *   wnd.setLocation(Math.max(0, wnd.getX()), Math.max(0, wnd.getY()));\n * });\n * (end)\n * \n * To keep a window inside the current window:\n * \n * (code)\n * mxEvent.addListener(window, 'resize', mxUtils.bind(this, function()\n * {\n *   var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n *   var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n *   \n *   var x = this.window.getX();\n *   var y = this.window.getY();\n *   \n *   if (x + this.window.table.clientWidth > iw)\n *   {\n *     x = Math.max(0, iw - this.window.table.clientWidth);\n *   }\n *   \n *   if (y + this.window.table.clientHeight > ih)\n *   {\n *     y = Math.max(0, ih - this.window.table.clientHeight);\n *   }\n *   \n *   if (this.window.getX() != x || this.window.getY() != y)\n *   {\n *     this.window.setLocation(x, y);\n *   }\n * }));\n * (end)\n *\n * Event: mxEvent.MOVE_START\n *\n * Fires before the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MOVE\n *\n * Fires while the window is being moved. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.MOVE_END\n *\n * Fires after the window is moved. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_START\n *\n * Fires before the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE\n *\n * Fires while the window is being resized. The <code>event</code> property\n * contains the corresponding mouse event.\n *\n * Event: mxEvent.RESIZE_END\n *\n * Fires after the window is resized. The <code>event</code> property contains\n * the corresponding mouse event.\n *\n * Event: mxEvent.MAXIMIZE\n * \n * Fires after the window is maximized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.MINIMIZE\n * \n * Fires after the window is minimized. The <code>event</code> property\n * contains the corresponding mouse event.\n * \n * Event: mxEvent.NORMALIZE\n * \n * Fires after the window is normalized, that is, it returned from\n * maximized or minimized state. The <code>event</code> property contains the\n * corresponding mouse event.\n *  \n * Event: mxEvent.ACTIVATE\n * \n * Fires after a window is activated. The <code>previousWindow</code> property\n * contains the previous window. The event sender is the active window.\n * \n * Event: mxEvent.SHOW\n * \n * Fires after the window is shown. This event has no properties.\n * \n * Event: mxEvent.HIDE\n * \n * Fires after the window is hidden. This event has no properties.\n * \n * Event: mxEvent.CLOSE\n * \n * Fires before the window is closed. The <code>event</code> property contains\n * the corresponding mouse event.\n * \n * Event: mxEvent.DESTROY\n * \n * Fires before the window is destroyed. This event has no properties.\n * \n * Constructor: mxWindow\n * \n * Constructs a new window with the given dimension and title to display\n * the specified content. The window elements use the given style as a\n * prefix for the classnames of the respective window elements, namely,\n * the window title and window pane. The respective postfixes are appended\n * to the given stylename as follows:\n * \n *   style - Base style for the window.\n *   style+Title - Style for the window title.\n *   style+Pane - Style for the window pane.\n * \n * The default value for style is mxWindow, resulting in the following\n * classnames for the window elements: mxWindow, mxWindowTitle and\n * mxWindowPane.\n * \n * If replaceNode is given then the window replaces the given DOM node in\n * the document.\n * \n * Parameters:\n * \n * title - String that represents the title of the new window.\n * content - DOM node that is used as the window content.\n * x - X-coordinate of the window location.\n * y - Y-coordinate of the window location.\n * width - Width of the window.\n * height - Optional height of the window. Default is to match the height\n * of the content at the specified width.\n * minimizable - Optional boolean indicating if the window is minimizable.\n * Default is true.\n * movable - Optional boolean indicating if the window is movable. Default\n * is true.\n * replaceNode - Optional DOM node that the window should replace.\n * style - Optional base classname for the window elements. Default is\n * mxWindow.\n */\nfunction mxWindow(title, content, x, y, width, height, minimizable, movable, replaceNode, style)\n{\n\tif (content != null)\n\t{\n\t\tminimizable = (minimizable != null) ? minimizable : true;\n\t\tthis.content = content;\n\t\tthis.init(x, y, width, height, style);\n\t\t\n\t\tthis.installMaximizeHandler();\n\t\tthis.installMinimizeHandler();\n\t\tthis.installCloseHandler();\n\t\tthis.setMinimizable(minimizable);\n\t\tthis.setTitle(title);\n\t\t\n\t\tif (movable == null || movable)\n\t\t{\n\t\t\tthis.installMoveHandler();\n\t\t}\n\n\t\tif (replaceNode != null && replaceNode.parentNode != null)\n\t\t{\n\t\t\treplaceNode.parentNode.replaceChild(this.div, replaceNode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdocument.body.appendChild(this.div);\n\t\t}\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxWindow.prototype = new mxEventSource();\nmxWindow.prototype.constructor = mxWindow;\n\n/**\n * Variable: closeImage\n * \n * URL of the image to be used for the close icon in the titlebar.\n */\nmxWindow.prototype.closeImage = mxClient.imageBasePath + '/close.gif';\n\n/**\n * Variable: minimizeImage\n * \n * URL of the image to be used for the minimize icon in the titlebar.\n */\nmxWindow.prototype.minimizeImage = mxClient.imageBasePath + '/minimize.gif';\n\t\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the normalize icon in the titlebar.\n */\nmxWindow.prototype.normalizeImage = mxClient.imageBasePath + '/normalize.gif';\n\t\n/**\n * Variable: maximizeImage\n * \n * URL of the image to be used for the maximize icon in the titlebar.\n */\nmxWindow.prototype.maximizeImage = mxClient.imageBasePath + '/maximize.gif';\n\n/**\n * Variable: normalizeImage\n * \n * URL of the image to be used for the resize icon.\n */\nmxWindow.prototype.resizeImage = mxClient.imageBasePath + '/resize.gif';\n\n/**\n * Variable: visible\n * \n * Boolean flag that represents the visible state of the window.\n */\nmxWindow.prototype.visible = false;\n\n/**\n * Variable: minimumSize\n * \n * <mxRectangle> that specifies the minimum width and height of the window.\n * Default is (50, 40).\n */\nmxWindow.prototype.minimumSize = new mxRectangle(0, 0, 50, 40);\n\n/**\n * Variable: destroyOnClose\n * \n * Specifies if the window should be destroyed when it is closed. If this\n * is false then the window is hidden using <setVisible>. Default is true.\n */\nmxWindow.prototype.destroyOnClose = true;\n\n/**\n * Variable: contentHeightCorrection\n * \n * Defines the correction factor for computing the height of the contentWrapper.\n * Default is 6 for IE 7/8 standards mode and 2 for all other browsers and modes.\n */\nmxWindow.prototype.contentHeightCorrection = (document.documentMode == 8 || document.documentMode == 7) ? 6 : 2;\n\n/**\n * Variable: title\n * \n * Reference to the DOM node (TD) that contains the title.\n */\nmxWindow.prototype.title = null;\n\n/**\n * Variable: content\n * \n * Reference to the DOM node that represents the window content.\n */\nmxWindow.prototype.content = null;\n\n/**\n * Function: init\n * \n * Initializes the DOM tree that represents the window.\n */\nmxWindow.prototype.init = function(x, y, width, height, style)\n{\n\tstyle = (style != null) ? style : 'mxWindow';\n\t\n\tthis.div = document.createElement('div');\n\tthis.div.className = style;\n\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n\tthis.table = document.createElement('table');\n\tthis.table.className = style;\n\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.div.style.touchAction = 'none';\n\t}\n\t\n\t// Workaround for table size problems in FF\n\tif (width != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.width = width + 'px'; \n\t\t}\n\t\t\n\t\tthis.table.style.width = width + 'px';\n\t} \n\t\n\tif (height != null)\n\t{\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tthis.div.style.height = height + 'px';\n\t\t}\n\t\t\n\t\tthis.table.style.height = height + 'px';\n\t}\t\t\n\t\n\t// Creates title row\n\tvar tbody = document.createElement('tbody');\n\tvar tr = document.createElement('tr');\n\t\n\tthis.title = document.createElement('td');\n\tthis.title.className = style + 'Title';\n\t\n\tthis.buttons = document.createElement('div');\n\tthis.buttons.style.position = 'absolute';\n\tthis.buttons.style.display = 'inline-block';\n\tthis.buttons.style.right = '4px';\n\tthis.buttons.style.top = '5px';\n\tthis.title.appendChild(this.buttons);\n\t\n\ttr.appendChild(this.title);\n\ttbody.appendChild(tr);\n\t\n\t// Creates content row and table cell\n\ttr = document.createElement('tr');\n\tthis.td = document.createElement('td');\n\tthis.td.className = style + 'Pane';\n\t\n\tif (document.documentMode == 7)\n\t{\n\t\tthis.td.style.height = '100%';\n\t}\n\n\tthis.contentWrapper = document.createElement('div');\n\tthis.contentWrapper.className = style + 'Pane';\n\tthis.contentWrapper.style.width = '100%';\n\tthis.contentWrapper.appendChild(this.content);\n\n\t// Workaround for div around div restricts height\n\t// of inner div if outerdiv has hidden overflow\n\tif (mxClient.IS_QUIRKS || this.content.nodeName.toUpperCase() != 'DIV')\n\t{\n\t\tthis.contentWrapper.style.height = '100%';\n\t}\n\n\t// Puts all content into the DOM\n\tthis.td.appendChild(this.contentWrapper);\n\ttr.appendChild(this.td);\n\ttbody.appendChild(tr);\n\tthis.table.appendChild(tbody);\n\tthis.div.appendChild(this.table);\n\t\n\t// Puts the window on top of other windows when clicked\n\tvar activator = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t});\n\t\n\tmxEvent.addGestureListeners(this.title, activator);\n\tmxEvent.addGestureListeners(this.table, activator);\n\n\tthis.hide();\n};\n\n/**\n * Function: setTitle\n * \n * Sets the window title to the given string. HTML markup inside the title\n * will be escaped.\n */\nmxWindow.prototype.setTitle = function(title)\n{\n\t// Removes all text content nodes (normally just one)\n\tvar child = this.title.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar next = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_TEXT)\n\t\t{\n\t\t\tchild.parentNode.removeChild(child);\n\t\t}\n\t\t\n\t\tchild = next;\n\t}\n\t\n\tmxUtils.write(this.title, title || '');\n\tthis.title.appendChild(this.buttons);\n};\n\n/**\n * Function: setScrollable\n * \n * Sets if the window contents should be scrollable.\n */\nmxWindow.prototype.setScrollable = function(scrollable)\n{\n\t// Workaround for hang in Presto 2.5.22 (Opera 10.5)\n\tif (navigator.userAgent.indexOf('Presto/2.5') < 0)\n\t{\n\t\tif (scrollable)\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'auto';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.contentWrapper.style.overflow = 'hidden';\n\t\t}\n\t}\n};\n\n/**\n * Function: activate\n * \n * Puts the window on top of all other windows.\n */\nmxWindow.prototype.activate = function()\n{\n\tif (mxWindow.activeWindow != this)\n\t{\n\t\tvar style = mxUtils.getCurrentStyle(this.getElement());\n\t\tvar index = (style != null) ? style.zIndex : 3;\n\n\t\tif (mxWindow.activeWindow)\n\t\t{\n\t\t\tvar elt = mxWindow.activeWindow.getElement();\n\t\t\t\n\t\t\tif (elt != null && elt.style != null)\n\t\t\t{\n\t\t\t\telt.style.zIndex = index;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar previousWindow = mxWindow.activeWindow;\n\t\tthis.getElement().style.zIndex = parseInt(index) + 1;\n\t\tmxWindow.activeWindow = this;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ACTIVATE, 'previousWindow', previousWindow));\n\t}\n};\n\n/**\n * Function: getElement\n * \n * Returuns the outermost DOM node that makes up the window.\n */\nmxWindow.prototype.getElement = function()\n{\n\treturn this.div;\n};\n\n/**\n * Function: fit\n * \n * Makes sure the window is inside the client area of the window.\n */\nmxWindow.prototype.fit = function()\n{\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: isResizable\n * \n * Returns true if the window is resizable.\n */\nmxWindow.prototype.isResizable = function()\n{\n\tif (this.resize != null)\n\t{\n\t\treturn this.resize.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setResizable\n * \n * Sets if the window should be resizable. To avoid interference with some\n * built-in features of IE10 and later, the use of the following code is\n * recommended if there are resizable <mxWindow>s in the page:\n * \n * (code)\n * if (mxClient.IS_POINTER)\n * {\n *   document.body.style.msTouchAction = 'none';\n * }\n * (end)\n */\nmxWindow.prototype.setResizable = function(resizable)\n{\n\tif (resizable)\n\t{\n\t\tif (this.resize == null)\n\t\t{\n\t\t\tthis.resize = document.createElement('img');\n\t\t\tthis.resize.style.position = 'absolute';\n\t\t\tthis.resize.style.bottom = '2px';\n\t\t\tthis.resize.style.right = '2px';\n\n\t\t\tthis.resize.setAttribute('src', this.resizeImage);\n\t\t\tthis.resize.style.cursor = 'nw-resize';\n\t\t\t\n\t\t\tvar startX = null;\n\t\t\tvar startY = null;\n\t\t\tvar width = null;\n\t\t\tvar height = null;\n\t\t\t\n\t\t\tvar start = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// LATER: pointerdown starting on border of resize does start\n\t\t\t\t// the drag operation but does not fire consecutive events via\n\t\t\t\t// one of the listeners below (does pan instead).\n\t\t\t\t// Workaround: document.body.style.msTouchAction = 'none'\n\t\t\t\tthis.activate();\n\t\t\t\tstartX = mxEvent.getClientX(evt);\n\t\t\t\tstartY = mxEvent.getClientY(evt);\n\t\t\t\twidth = this.div.offsetWidth;\n\t\t\t\theight = this.div.offsetHeight;\n\t\t\t\t\n\t\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_START, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\n\t\t\t\t\tthis.setSize(width + dx, height + dy);\n\t\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (startX != null && startY != null)\n\t\t\t\t{\n\t\t\t\t\tstartX = null;\n\t\t\t\t\tstartY = null;\n\t\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_END, 'event', evt));\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(this.resize, start, dragHandler, dropHandler);\n\t\t\tthis.div.appendChild(this.resize);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tthis.resize.style.display = 'inline';\n\t\t}\n\t}\n\telse if (this.resize != null)\n\t{\n\t\tthis.resize.style.display = 'none';\n\t}\n};\n\t\n/**\n * Function: setSize\n * \n * Sets the size of the window.\n */\nmxWindow.prototype.setSize = function(width, height)\n{\n\twidth = Math.max(this.minimumSize.width, width);\n\theight = Math.max(this.minimumSize.height, height);\n\n\t// Workaround for table size problems in FF\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.div.style.width =  width + 'px';\n\t\tthis.div.style.height = height + 'px';\n\t}\n\t\n\tthis.table.style.width =  width + 'px';\n\tthis.table.style.height = height + 'px';\n\n\tif (!mxClient.IS_QUIRKS)\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n};\n\t\n/**\n * Function: setMinimizable\n * \n * Sets if the window is minimizable.\n */\nmxWindow.prototype.setMinimizable = function(minimizable)\n{\n\tthis.minimize.style.display = (minimizable) ? '' : 'none';\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns an <mxRectangle> that specifies the size for the minimized window.\n * A width or height of 0 means keep the existing width or height. This\n * implementation returns the height of the window title and keeps the width.\n */\nmxWindow.prototype.getMinimumSize = function()\n{\n\treturn new mxRectangle(0, 0, 0, this.title.offsetHeight);\n};\n\n/**\n * Function: installMinimizeHandler\n * \n * Installs the event listeners required for minimizing the window.\n */\nmxWindow.prototype.installMinimizeHandler = function()\n{\n\tthis.minimize = document.createElement('img');\n\t\n\tthis.minimize.setAttribute('src', this.minimizeImage);\n\tthis.minimize.setAttribute('title', 'Minimize');\n\tthis.minimize.style.cursor = 'pointer';\n\tthis.minimize.style.marginLeft = '2px';\n\tthis.minimize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.minimize);\n\t\n\tvar minimized = false;\n\tvar maxDisplay = null;\n\tvar height = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (!minimized)\n\t\t{\n\t\t\tminimized = true;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.normalizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Normalize');\n\t\t\tthis.contentWrapper.style.display = 'none';\n\t\t\tmaxDisplay = this.maximize.style.display;\n\t\t\t\n\t\t\tthis.maximize.style.display = 'none';\n\t\t\theight = this.table.style.height;\n\t\t\t\n\t\t\tvar minSize = this.getMinimumSize();\n\t\t\t\n\t\t\tif (minSize.height > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = minSize.height + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = minSize.height + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (minSize.width > 0)\n\t\t\t{\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = minSize.width + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.width = minSize.width + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MINIMIZE, 'event', evt));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tminimized = false;\n\t\t\t\n\t\t\tthis.minimize.setAttribute('src', this.minimizeImage);\n\t\t\tthis.minimize.setAttribute('title', 'Minimize');\n\t\t\tthis.contentWrapper.style.display = ''; // default\n\t\t\tthis.maximize.style.display = maxDisplay;\n\t\t\t\n\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.div.style.height = height;\n\t\t\t}\n\t\t\t\n\t\t\tthis.table.style.height = height;\n\n\t\t\tif (this.resize != null)\n\t\t\t{\n\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t}\n\t\t\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tmxEvent.addGestureListeners(this.minimize, funct);\n};\n\t\n/**\n * Function: setMaximizable\n * \n * Sets if the window is maximizable.\n */\nmxWindow.prototype.setMaximizable = function(maximizable)\n{\n\tthis.maximize.style.display = (maximizable) ? '' : 'none';\n};\n\n/**\n * Function: installMaximizeHandler\n * \n * Installs the event listeners required for maximizing the window.\n */\nmxWindow.prototype.installMaximizeHandler = function()\n{\n\tthis.maximize = document.createElement('img');\n\t\n\tthis.maximize.setAttribute('src', this.maximizeImage);\n\tthis.maximize.setAttribute('title', 'Maximize');\n\tthis.maximize.style.cursor = 'default';\n\tthis.maximize.style.marginLeft = '2px';\n\tthis.maximize.style.cursor = 'pointer';\n\tthis.maximize.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.maximize);\n\t\n\tvar maximized = false;\n\tvar x = null;\n\tvar y = null;\n\tvar height = null;\n\tvar width = null;\n\tvar minDisplay = null;\n\n\tvar funct = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.activate();\n\t\t\n\t\tif (this.maximize.style.display != 'none')\n\t\t{\n\t\t\tif (!maximized)\n\t\t\t{\n\t\t\t\tmaximized = true;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.normalizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Normalize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tminDisplay = this.minimize.style.display;\n\t\t\t\tthis.minimize.style.display = 'none';\n\t\t\t\t\n\t\t\t\t// Saves window state\n\t\t\t\tx = parseInt(this.div.style.left);\n\t\t\t\ty = parseInt(this.div.style.top);\n\t\t\t\theight = this.table.style.height;\n\t\t\t\twidth = this.table.style.width;\n\n\t\t\t\tthis.div.style.left = '0px';\n\t\t\t\tthis.div.style.top = '0px';\n\t\t\t\tvar docHeight = Math.max(document.body.clientHeight || 0, document.documentElement.clientHeight || 0);\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\t\tthis.div.style.height = (docHeight - 2) + 'px';\n\t\t\t\t}\n\n\t\t\t\tthis.table.style.width = (document.body.clientWidth - 2) + 'px';\n\t\t\t\tthis.table.style.height = (docHeight - 2) + 'px';\n\t\t\t\t\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = 'hidden';\n\t\t\t\t}\n\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MAXIMIZE, 'event', evt));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmaximized = false;\n\t\t\t\t\n\t\t\t\tthis.maximize.setAttribute('src', this.maximizeImage);\n\t\t\t\tthis.maximize.setAttribute('title', 'Maximize');\n\t\t\t\tthis.contentWrapper.style.display = '';\n\t\t\t\tthis.minimize.style.display = minDisplay;\n\n\t\t\t\t// Restores window state\n\t\t\t\tthis.div.style.left = x+'px';\n\t\t\t\tthis.div.style.top = y+'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tthis.div.style.height = height;\n\t\t\t\t\tthis.div.style.width = width;\n\n\t\t\t\t\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\t\n\t\t\t\t\tif (style.overflow == 'auto' || this.resize != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.table.style.height = height;\n\t\t\t\tthis.table.style.width = width;\n\n\t\t\t\tif (this.resize != null)\n\t\t\t\t{\n\t\t\t\t\tthis.resize.style.visibility = '';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.NORMALIZE, 'event', evt));\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n\t\n\tmxEvent.addGestureListeners(this.maximize, funct);\n\tmxEvent.addListener(this.title, 'dblclick', funct);\n};\n\t\n/**\n * Function: installMoveHandler\n * \n * Installs the event listeners required for moving the window.\n */\nmxWindow.prototype.installMoveHandler = function()\n{\n\tthis.title.style.cursor = 'move';\n\t\n\tmxEvent.addGestureListeners(this.title,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tvar startX = mxEvent.getClientX(evt);\n\t\t\tvar startY = mxEvent.getClientY(evt);\n\t\t\tvar x = this.getX();\n\t\t\tvar y = this.getY();\n\t\t\t\t\t\t\n\t\t\t// Adds a temporary pair of listeners to intercept\n\t\t\t// the gesture event in the document\n\t\t\tvar dragHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar dx = mxEvent.getClientX(evt) - startX;\n\t\t\t\tvar dy = mxEvent.getClientY(evt) - startY;\n\t\t\t\tthis.setLocation(x + dx, y + dy);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tvar dropHandler = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tmxEvent.removeGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_END, 'event', evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addGestureListeners(document, null, dragHandler, dropHandler);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_START, 'event', evt));\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tthis.title.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: setLocation\n * \n * Sets the upper, left corner of the window.\n */\n mxWindow.prototype.setLocation = function(x, y)\n {\n\tthis.div.style.left = x + 'px';\n\tthis.div.style.top = y + 'px';\n };\n\n/**\n * Function: getX\n *\n * Returns the current position on the x-axis.\n */\nmxWindow.prototype.getX = function()\n{\n\treturn parseInt(this.div.style.left);\n};\n\n/**\n * Function: getY\n *\n * Returns the current position on the y-axis.\n */\nmxWindow.prototype.getY = function()\n{\n\treturn parseInt(this.div.style.top);\n};\n\n/**\n * Function: installCloseHandler\n *\n * Adds the <closeImage> as a new image node in <closeImg> and installs the\n * <close> event.\n */\nmxWindow.prototype.installCloseHandler = function()\n{\n\tthis.closeImg = document.createElement('img');\n\t\n\tthis.closeImg.setAttribute('src', this.closeImage);\n\tthis.closeImg.setAttribute('title', 'Close');\n\tthis.closeImg.style.marginLeft = '2px';\n\tthis.closeImg.style.cursor = 'pointer';\n\tthis.closeImg.style.display = 'none';\n\t\n\tthis.buttons.appendChild(this.closeImg);\n\n\tmxEvent.addGestureListeners(this.closeImg,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CLOSE, 'event', evt));\n\t\t\t\n\t\t\tif (this.destroyOnClose)\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.setVisible(false);\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(evt);\n\t\t}));\n};\n\n/**\n * Function: setImage\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * image - URL of the image to be used.\n */\nmxWindow.prototype.setImage = function(image)\n{\n\tthis.image = document.createElement('img');\n\tthis.image.setAttribute('src', image);\n\tthis.image.setAttribute('align', 'left');\n\tthis.image.style.marginRight = '4px';\n\tthis.image.style.marginLeft = '0px';\n\tthis.image.style.marginTop = '-2px';\n\t\n\tthis.title.insertBefore(this.image, this.title.firstChild);\n};\n\n/**\n * Function: setClosable\n * \n * Sets the image associated with the window.\n * \n * Parameters:\n * \n * closable - Boolean specifying if the window should be closable.\n */\nmxWindow.prototype.setClosable = function(closable)\n{\n\tthis.closeImg.style.display = (closable) ? '' : 'none';\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the window is visible.\n */\nmxWindow.prototype.isVisible = function()\n{\n\tif (this.div != null)\n\t{\n\t\treturn this.div.style.display != 'none';\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: setVisible\n *\n * Shows or hides the window depending on the given flag.\n * \n * Parameters:\n * \n * visible - Boolean indicating if the window should be made visible.\n */\nmxWindow.prototype.setVisible = function(visible)\n{\n\tif (this.div != null && this.isVisible() != visible)\n\t{\n\t\tif (visible)\n\t\t{\n\t\t\tthis.show();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.hide();\n\t\t}\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the window.\n */\nmxWindow.prototype.show = function()\n{\n\tthis.div.style.display = '';\n\tthis.activate();\n\t\n\tvar style = mxUtils.getCurrentStyle(this.contentWrapper);\n\t\n\tif (!mxClient.IS_QUIRKS && (style.overflow == 'auto' || this.resize != null) &&\n\t\tthis.contentWrapper.style.display != 'none')\n\t{\n\t\tthis.contentWrapper.style.height = (this.div.offsetHeight -\n\t\t\t\tthis.title.offsetHeight - this.contentHeightCorrection) + 'px';\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n};\n\n/**\n * Function: hide\n *\n * Hides the window.\n */\nmxWindow.prototype.hide = function()\n{\n\tthis.div.style.display = 'none';\n\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n};\n\n/**\n * Function: destroy\n *\n * Destroys the window and removes all associated resources. Fires a\n * <destroy> event prior to destroying the window.\n */\nmxWindow.prototype.destroy = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.DESTROY));\n\t\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\tthis.div.parentNode.removeChild(this.div);\n\t\tthis.div = null;\n\t}\n\t\n\tthis.title = null;\n\tthis.content = null;\n\tthis.contentWrapper = null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxForm\n * \n * A simple class for creating HTML forms.\n * \n * Constructor: mxForm\n * \n * Creates a HTML table using the specified classname.\n */\nfunction mxForm(className)\n{\n\tthis.table = document.createElement('table');\n\tthis.table.className = className;\n\tthis.body = document.createElement('tbody');\n\t\n\tthis.table.appendChild(this.body);\n};\n\n/**\n * Variable: table\n * \n * Holds the DOM node that represents the table.\n */\nmxForm.prototype.table = null;\n\n/**\n * Variable: body\n * \n * Holds the DOM node that represents the tbody (table body). New rows\n * can be added to this object using DOM API.\n */\nmxForm.prototype.body = false;\n\n/**\n * Function: getTable\n * \n * Returns the table that contains this form.\n */\nmxForm.prototype.getTable = function()\n{\n\treturn this.table;\n};\n\n/**\n * Function: addButtons\n * \n * Helper method to add an OK and Cancel button using the respective\n * functions.\n */\nmxForm.prototype.addButtons = function(okFunct, cancelFunct)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\ttr.appendChild(td);\n\ttd = document.createElement('td');\n\n\t// Adds the ok button\n\tvar button = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('ok') || 'OK');\n\ttd.appendChild(button);\n\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tokFunct();\n\t});\n\t\n\t// Adds the cancel button\n\tbutton = document.createElement('button');\n\tmxUtils.write(button, mxResources.get('cancel') || 'Cancel');\n\ttd.appendChild(button);\n\t\n\tmxEvent.addListener(button, 'click', function()\n\t{\n\t\tcancelFunct();\n\t});\n\t\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n};\n\n/**\n * Function: addText\n * \n * Adds an input for the given name, type and value and returns it.\n */\nmxForm.prototype.addText = function(name, value, type)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', type || 'text');\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCheckbox\n * \n * Adds a checkbox for the given name and value and returns the textfield.\n */\nmxForm.prototype.addCheckbox = function(name, value)\n{\n\tvar input = document.createElement('input');\n\t\n\tinput.setAttribute('type', 'checkbox');\n\tthis.addField(name, input);\n\n\t// IE can only change the checked value if the input is inside the DOM\n\tif (value)\n\t{\n\t\tinput.checked = true;\n\t}\n\n\treturn input;\n};\n\n/**\n * Function: addTextarea\n * \n * Adds a textarea for the given name and value and returns the textarea.\n */\nmxForm.prototype.addTextarea = function(name, value, rows)\n{\n\tvar input = document.createElement('textarea');\n\t\n\tif (mxClient.IS_NS)\n\t{\n\t\trows--;\n\t}\n\t\n\tinput.setAttribute('rows', rows || 2);\n\tinput.value = value;\n\t\n\treturn this.addField(name, input);\n};\n\n/**\n * Function: addCombo\n * \n * Adds a combo for the given name and returns the combo.\n */\nmxForm.prototype.addCombo = function(name, isMultiSelect, size)\n{\n\tvar select = document.createElement('select');\n\t\n\tif (size != null)\n\t{\n\t\tselect.setAttribute('size', size);\n\t}\n\t\n\tif (isMultiSelect)\n\t{\n\t\tselect.setAttribute('multiple', 'true');\n\t}\n\t\n\treturn this.addField(name, select);\n};\n\n/**\n * Function: addOption\n * \n * Adds an option for the given label to the specified combo.\n */\nmxForm.prototype.addOption = function(combo, label, value, isSelected)\n{\n\tvar option = document.createElement('option');\n\t\n\tmxUtils.writeln(option, label);\n\toption.setAttribute('value', value);\n\t\n\tif (isSelected)\n\t{\n\t\toption.setAttribute('selected', isSelected);\n\t}\n\t\n\tcombo.appendChild(option);\n};\n\n/**\n * Function: addField\n * \n * Adds a new row with the name and the input field in two columns and\n * returns the given input.\n */\nmxForm.prototype.addField = function(name, input)\n{\n\tvar tr = document.createElement('tr');\n\tvar td = document.createElement('td');\n\tmxUtils.write(td, name);\n\ttr.appendChild(td);\n\t\n\ttd = document.createElement('td');\n\ttd.appendChild(input);\n\ttr.appendChild(td);\n\tthis.body.appendChild(tr);\n\t\n\treturn input;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImage\n *\n * Encapsulates the URL, width and height of an image.\n * \n * Constructor: mxImage\n * \n * Constructs a new image.\n */\nfunction mxImage(src, width, height)\n{\n\tthis.src = src;\n\tthis.width = width;\n\tthis.height = height;\n};\n\n/**\n * Variable: src\n *\n * String that specifies the URL of the image.\n */\nmxImage.prototype.src = null;\n\n/**\n * Variable: width\n *\n * Integer that specifies the width of the image.\n */\nmxImage.prototype.width = null;\n\n/**\n * Variable: height\n *\n * Integer that specifies the height of the image.\n */\nmxImage.prototype.height = null;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDivResizer\n * \n * Maintains the size of a div element in Internet Explorer. This is a\n * workaround for the right and bottom style being ignored in IE.\n * \n * If you need a div to cover the scrollwidth and -height of a document,\n * then you can use this class as follows:\n * \n * (code)\n * var resizer = new mxDivResizer(background);\n * resizer.getDocumentHeight = function()\n * {\n *   return document.body.scrollHeight;\n * }\n * resizer.getDocumentWidth = function()\n * {\n *   return document.body.scrollWidth;\n * }\n * resizer.resize();\n * (end)\n * \n * Constructor: mxDivResizer\n * \n * Constructs an object that maintains the size of a div\n * element when the window is being resized. This is only\n * required for Internet Explorer as it ignores the respective\n * stylesheet information for DIV elements.\n * \n * Parameters:\n * \n * div - Reference to the DOM node whose size should be maintained.\n * container - Optional Container that contains the div. Default is the\n * window.\n */\nfunction mxDivResizer(div, container)\n{\n\tif (div.nodeName.toLowerCase() == 'div')\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tcontainer = window;\n\t\t}\n\n\t\tthis.div = div;\n\t\tvar style = mxUtils.getCurrentStyle(div);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tthis.resizeWidth = style.width == 'auto';\n\t\t\tthis.resizeHeight = style.height == 'auto';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(container, 'resize',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (!this.handlingResize)\n\t\t\t\t{\n\t\t\t\t\tthis.handlingResize = true;\n\t\t\t\t\tthis.resize();\n\t\t\t\t\tthis.handlingResize = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tthis.resize();\n\t}\n};\n\n/**\n * Function: resizeWidth\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.resizeWidth = true;\n\n/**\n * Function: resizeHeight\n * \n * Boolean specifying if the height should be updated.\n */\nmxDivResizer.prototype.resizeHeight = true;\n\n/**\n * Function: handlingResize\n * \n * Boolean specifying if the width should be updated.\n */\nmxDivResizer.prototype.handlingResize = false;\n\n/**\n * Function: resize\n * \n * Updates the style of the DIV after the window has been resized.\n */\nmxDivResizer.prototype.resize = function()\n{\n\tvar w = this.getDocumentWidth();\n\tvar h = this.getDocumentHeight();\n\n\tvar l = parseInt(this.div.style.left);\n\tvar r = parseInt(this.div.style.right);\n\tvar t = parseInt(this.div.style.top);\n\tvar b = parseInt(this.div.style.bottom);\n\t\n\tif (this.resizeWidth &&\n\t\t!isNaN(l) &&\n\t\t!isNaN(r) &&\n\t\tl >= 0 &&\n\t\tr >= 0 &&\n\t\tw - r - l > 0)\n\t{\n\t\tthis.div.style.width = (w - r - l)+'px';\n\t}\n\t\n\tif (this.resizeHeight &&\n\t\t!isNaN(t) &&\n\t\t!isNaN(b) &&\n\t\tt >= 0 &&\n\t\tb >= 0 &&\n\t\th - t - b > 0)\n\t{\n\t\tthis.div.style.height = (h - t - b)+'px';\n\t}\n};\n\n/**\n * Function: getDocumentWidth\n * \n * Hook for subclassers to return the width of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentWidth = function()\n{\n\treturn document.body.clientWidth;\n};\n\n/**\n * Function: getDocumentHeight\n * \n * Hook for subclassers to return the height of the document (without\n * scrollbars).\n */\nmxDivResizer.prototype.getDocumentHeight = function()\n{\n\treturn document.body.clientHeight;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDragSource\n * \n * Wrapper to create a drag source from a DOM element so that the element can\n * be dragged over a graph and dropped into the graph as a new cell.\n * \n * Problem is that in the dropHandler the current preview location is not\n * available, so the preview and the dropHandler must match.\n * \n * Constructor: mxDragSource\n * \n * Constructs a new drag source for the given element.\n */\nfunction mxDragSource(element, dropHandler)\n{\n\tthis.element = element;\n\tthis.dropHandler = dropHandler;\n\t\n\t// Handles a drag gesture on the element\n\tmxEvent.addGestureListeners(element, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseDown(evt);\n\t}));\n\t\n\t// Prevents native drag and drop\n\tmxEvent.addListener(element, 'dragstart', function(evt)\n\t{\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tthis.eventConsumer = function(sender, evt)\n\t{\n\t\tvar evtName = evt.getProperty('eventName');\n\t\tvar me = evt.getProperty('event');\n\t\t\n\t\tif (evtName != mxEvent.MOUSE_DOWN)\n\t\t{\n\t\t\tme.consume();\n\t\t}\n\t};\n};\n\n/**\n * Variable: element\n *\n * Reference to the DOM node which was made draggable.\n */\nmxDragSource.prototype.element = null;\n\n/**\n * Variable: dropHandler\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dropHandler = null;\n\n/**\n * Variable: dragOffset\n *\n * <mxPoint> that specifies the offset of the <dragElement>. Default is null.\n */\nmxDragSource.prototype.dragOffset = null;\n\n/**\n * Variable: dragElement\n *\n * Holds the DOM node that is used to represent the drag preview. If this is\n * null then the source element will be cloned and used for the drag preview.\n */\nmxDragSource.prototype.dragElement = null;\n\n/**\n * Variable: previewElement\n *\n * Optional <mxRectangle> that specifies the unscaled size of the preview.\n */\nmxDragSource.prototype.previewElement = null;\n\n/**\n * Variable: enabled\n *\n * Specifies if this drag source is enabled. Default is true.\n */\nmxDragSource.prototype.enabled = true;\n\n/**\n * Variable: currentGraph\n *\n * Reference to the <mxGraph> that is the current drop target.\n */\nmxDragSource.prototype.currentGraph = null;\n\n/**\n * Variable: currentDropTarget\n *\n * Holds the current drop target under the mouse.\n */\nmxDragSource.prototype.currentDropTarget = null;\n\n/**\n * Variable: currentPoint\n *\n * Holds the current drop location.\n */\nmxDragSource.prototype.currentPoint = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentGuide = null;\n\n/**\n * Variable: currentGuide\n *\n * Holds an <mxGuide> for the <currentGraph> if <dragPreview> is not null.\n */\nmxDragSource.prototype.currentHighlight = null;\n\n/**\n * Variable: autoscroll\n *\n * Specifies if the graph should scroll automatically. Default is true.\n */\nmxDragSource.prototype.autoscroll = true;\n\n/**\n * Variable: guidesEnabled\n *\n * Specifies if <mxGuide> should be enabled. Default is true.\n */\nmxDragSource.prototype.guidesEnabled = true;\n\n/**\n * Variable: gridEnabled\n *\n * Specifies if the grid should be allowed. Default is true.\n */\nmxDragSource.prototype.gridEnabled = true;\n\n/**\n * Variable: highlightDropTargets\n *\n * Specifies if drop targets should be highlighted. Default is true.\n */\nmxDragSource.prototype.highlightDropTargets = true;\n\n/**\n * Variable: dragElementZIndex\n * \n * ZIndex for the drag element. Default is 100.\n */\nmxDragSource.prototype.dragElementZIndex = 100;\n\n/**\n * Variable: dragElementOpacity\n * \n * Opacity of the drag element in %. Default is 70.\n */\nmxDragSource.prototype.dragElementOpacity = 70;\n\n/**\n * Variable: checkEventSource\n * \n * Whether the event source should be checked in <graphContainerEvent>. Default\n * is true.\n */\nmxDragSource.prototype.checkEventSource = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxDragSource.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxDragSource.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isGuidesEnabled\n * \n * Returns <guidesEnabled>.\n */\nmxDragSource.prototype.isGuidesEnabled = function()\n{\n\treturn this.guidesEnabled;\n};\n\n/**\n * Function: setGuidesEnabled\n * \n * Sets <guidesEnabled>.\n */\nmxDragSource.prototype.setGuidesEnabled = function(value)\n{\n\tthis.guidesEnabled = value;\n};\n\n/**\n * Function: isGridEnabled\n * \n * Returns <gridEnabled>.\n */\nmxDragSource.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Sets <gridEnabled>.\n */\nmxDragSource.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: getGraphForEvent\n * \n * Returns the graph for the given mouse event. This implementation returns\n * null.\n */\nmxDragSource.prototype.getGraphForEvent = function(evt)\n{\n\treturn null;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.getDropTarget = function(graph, x, y, evt)\n{\n\treturn graph.getCellAt(x, y);\n};\n\n/**\n * Function: createDragElement\n * \n * Creates and returns a clone of the <dragElementPrototype> or the <element>\n * if the former is not defined.\n */\nmxDragSource.prototype.createDragElement = function(evt)\n{\n\treturn this.element.cloneNode(true);\n};\n\n/**\n * Function: createPreviewElement\n * \n * Creates and returns an element which can be used as a preview in the given\n * graph.\n */\nmxDragSource.prototype.createPreviewElement = function(graph)\n{\n\treturn null;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this drag source is active.\n */\nmxDragSource.prototype.isActive = function()\n{\n\treturn this.mouseMoveHandler != null;\n};\n\n/**\n * Function: reset\n * \n * Stops and removes everything and restores the state of the object.\n */\nmxDragSource.prototype.reset = function()\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\t\n\tthis.removeDragElement();\n\tthis.removeListeners();\n\tthis.stopDrag();\n};\n\n/**\n * Function: mouseDown\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n * \n * To ignore popup menu events for a drag source, this function can be\n * overridden as follows.\n * \n * (code)\n * var mouseDown = dragSource.mouseDown;\n * \n * dragSource.mouseDown = function(evt)\n * {\n *   if (!mxEvent.isPopupTrigger(evt))\n *   {\n *     mouseDown.apply(this, arguments);\n *   }\n * };\n * (end)\n */\nmxDragSource.prototype.mouseDown = function(evt)\n{\n\tif (this.enabled && !mxEvent.isConsumed(evt) && this.mouseMoveHandler == null)\n\t{\n\t\tthis.startDrag(evt);\n\t\tthis.mouseMoveHandler = mxUtils.bind(this, this.mouseMove);\n\t\tthis.mouseUpHandler = mxUtils.bind(this, this.mouseUp);\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t\n\t\tif (mxClient.IS_TOUCH && !mxEvent.isMouseEvent(evt))\n\t\t{\n\t\t\tthis.eventSource = mxEvent.getSource(evt);\n\t\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\t}\n\t}\n};\n\n/**\n * Function: startDrag\n * \n * Creates the <dragElement> using <createDragElement>.\n */\nmxDragSource.prototype.startDrag = function(evt)\n{\n\tthis.dragElement = this.createDragElement(evt);\n\tthis.dragElement.style.position = 'absolute';\n\tthis.dragElement.style.zIndex = this.dragElementZIndex;\n\tmxUtils.setOpacity(this.dragElement, this.dragElementOpacity);\n\n\tif (this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.dragElement.style.pointerEvents = 'none';\n\t}\n};\n\n/**\n * Function: stopDrag\n * \n * Invokes <removeDragElement>.\n */\nmxDragSource.prototype.stopDrag = function()\n{\n\t// LATER: This used to have a mouse event. If that is still needed we need to add another\n\t// final call to the DnD protocol to add a cleanup step in the case of escape press, which\n\t// is not associated with a mouse event and which currently calles this method.\n\tthis.removeDragElement();\n};\n\n/**\n * Function: removeDragElement\n * \n * Removes and destroys the <dragElement>.\n */\nmxDragSource.prototype.removeDragElement = function()\n{\n\tif (this.dragElement != null)\n\t{\n\t\tif (this.dragElement.parentNode != null)\n\t\t{\n\t\t\tthis.dragElement.parentNode.removeChild(this.dragElement);\n\t\t}\n\t\t\n\t\tthis.dragElement = null;\n\t}\n};\n\n/**\n * Function: getElementForEvent\n * \n * Returns the topmost element under the given event.\n */\nmxDragSource.prototype.getElementForEvent = function(evt)\n{\n\treturn ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?\n\t\t\tdocument.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :\n\t\t\t\tmxEvent.getSource(evt));\n};\n\n/**\n * Function: graphContainsEvent\n * \n * Returns true if the given graph contains the given event.\n */\nmxDragSource.prototype.graphContainsEvent = function(graph, evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin();\n\tvar elt = this.getElementForEvent(evt);\n\t\n\tif (this.checkEventSource)\n\t{\n\t\twhile (elt != null && elt != graph.container)\n\t\t{\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\n\t// Checks if event is inside the bounds of the graph container\n\treturn elt != null && x >= offset.x - origin.x && y >= offset.y - origin.y &&\n\t\tx <= offset.x - origin.x + graph.container.offsetWidth &&\n\t\ty <= offset.y - origin.y + graph.container.offsetHeight;\n};\n\n/**\n * Function: mouseMove\n * \n * Gets the graph for the given event using <getGraphForEvent>, updates the\n * <currentGraph>, calling <dragEnter> and <dragExit> on the new and old graph,\n * respectively, and invokes <dragOver> if <currentGraph> is not null.\n */\nmxDragSource.prototype.mouseMove = function(evt)\n{\n\tvar graph = this.getGraphForEvent(evt);\n\t\n\t// Checks if event is inside the bounds of the graph container\n\tif (graph != null && !this.graphContainsEvent(graph, evt))\n\t{\n\t\tgraph = null;\n\t}\n\n\tif (graph != this.currentGraph)\n\t{\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragExit(this.currentGraph, evt);\n\t\t}\n\t\t\n\t\tthis.currentGraph = graph;\n\t\t\n\t\tif (this.currentGraph != null)\n\t\t{\n\t\t\tthis.dragEnter(this.currentGraph, evt);\n\t\t}\n\t}\n\t\n\tif (this.currentGraph != null)\n\t{\n\t\tthis.dragOver(this.currentGraph, evt);\n\t}\n\n\tif (this.dragElement != null && (this.previewElement == null || this.previewElement.style.visibility != 'visible'))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\t\n\t\tif (this.dragElement.parentNode == null)\n\t\t{\n\t\t\tdocument.body.appendChild(this.dragElement);\n\t\t}\n\n\t\tthis.dragElement.style.visibility = 'visible';\n\t\t\n\t\tif (this.dragOffset != null)\n\t\t{\n\t\t\tx += this.dragOffset.x;\n\t\t\ty += this.dragOffset.y;\n\t\t}\n\t\t\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tthis.dragElement.style.left = (x + offset.x) + 'px';\n\t\tthis.dragElement.style.top = (y + offset.y) + 'px';\n\t}\n\telse if (this.dragElement != null)\n\t{\n\t\tthis.dragElement.style.visibility = 'hidden';\n\t}\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: mouseUp\n * \n * Processes the mouse up event and invokes <drop>, <dragExit> and <stopDrag>\n * as required.\n */\nmxDragSource.prototype.mouseUp = function(evt)\n{\n\tif (this.currentGraph != null)\n\t{\n\t\tif (this.currentPoint != null && (this.previewElement == null ||\n\t\t\tthis.previewElement.style.visibility != 'hidden'))\n\t\t{\n\t\t\tvar scale = this.currentGraph.view.scale;\n\t\t\tvar tr = this.currentGraph.view.translate;\n\t\t\tvar x = this.currentPoint.x / scale - tr.x;\n\t\t\tvar y = this.currentPoint.y / scale - tr.y;\n\t\t\t\n\t\t\tthis.drop(this.currentGraph, evt, this.currentDropTarget, x, y);\n\t\t}\n\t\t\n\t\tthis.dragExit(this.currentGraph);\n\t\tthis.currentGraph = null;\n\t}\n\n\tthis.stopDrag();\n\tthis.removeListeners();\n\t\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: removeListeners\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.removeListeners = function()\n{\n\tif (this.eventSource != null)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveHandler, this.mouseUpHandler);\n\t\tthis.eventSource = null;\n\t}\n\t\n\tmxEvent.removeGestureListeners(document, null, this.mouseMoveHandler, this.mouseUpHandler);\n\tthis.mouseMoveHandler = null;\n\tthis.mouseUpHandler = null;\n};\n\n/**\n * Function: dragEnter\n * \n * Actives the given graph as a drop target.\n */\nmxDragSource.prototype.dragEnter = function(graph, evt)\n{\n\tgraph.isMouseDown = true;\n\tgraph.isMouseTrigger = mxEvent.isMouseEvent(evt);\n\tthis.previewElement = this.createPreviewElement(graph);\n\t\n\tif (this.previewElement != null && this.checkEventSource && mxClient.IS_SVG)\n\t{\n\t\tthis.previewElement.style.pointerEvents = 'none';\n\t}\n\t\n\t// Guide is only needed if preview element is used\n\tif (this.isGuidesEnabled() && this.previewElement != null)\n\t{\n\t\tthis.currentGuide = new mxGuide(graph, graph.graphHandler.getGuideStates());\n\t}\n\t\n\tif (this.highlightDropTargets)\n\t{\n\t\tthis.currentHighlight = new mxCellHighlight(graph, mxConstants.DROP_TARGET_COLOR);\n\t}\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.eventConsumer);\n};\n\n/**\n * Function: dragExit\n * \n * Deactivates the given graph as a drop target.\n */\nmxDragSource.prototype.dragExit = function(graph, evt)\n{\n\tthis.currentDropTarget = null;\n\tthis.currentPoint = null;\n\tgraph.isMouseDown = false;\n\t\n\t// Consumes all events in the current graph before they are fired\n\tgraph.removeListener(this.eventConsumer);\n\t\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode != null)\n\t\t{\n\t\t\tthis.previewElement.parentNode.removeChild(this.previewElement);\n\t\t}\n\t\t\n\t\tthis.previewElement = null;\n\t}\n\t\n\tif (this.currentGuide != null)\n\t{\n\t\tthis.currentGuide.destroy();\n\t\tthis.currentGuide = null;\n\t}\n\t\n\tif (this.currentHighlight != null)\n\t{\n\t\tthis.currentHighlight.destroy();\n\t\tthis.currentHighlight = null;\n\t}\n};\n\n/**\n * Function: dragOver\n * \n * Implements autoscroll, updates the <currentPoint>, highlights any drop\n * targets and updates the preview.\n */\nmxDragSource.prototype.dragOver = function(graph, evt)\n{\n\tvar offset = mxUtils.getOffset(graph.container);\n\tvar origin = mxUtils.getScrollOrigin(graph.container);\n\tvar x = mxEvent.getClientX(evt) - offset.x + origin.x - graph.panDx;\n\tvar y = mxEvent.getClientY(evt) - offset.y + origin.y - graph.panDy;\n\n\tif (graph.autoScroll && (this.autoscroll == null || this.autoscroll))\n\t{\n\t\tgraph.scrollPointToVisible(x, y, graph.autoExtend);\n\t}\n\n\t// Highlights the drop target under the mouse\n\tif (this.currentHighlight != null && graph.isDropEnabled())\n\t{\n\t\tthis.currentDropTarget = this.getDropTarget(graph, x, y, evt);\n\t\tvar state = graph.getView().getState(this.currentDropTarget);\n\t\tthis.currentHighlight.highlight(state);\n\t}\n\n\t// Updates the location of the preview\n\tif (this.previewElement != null)\n\t{\n\t\tif (this.previewElement.parentNode == null)\n\t\t{\n\t\t\tgraph.container.appendChild(this.previewElement);\n\t\t\t\n\t\t\tthis.previewElement.style.zIndex = '3';\n\t\t\tthis.previewElement.style.position = 'absolute';\n\t\t}\n\t\t\n\t\tvar gridEnabled = this.isGridEnabled() && graph.isGridEnabledEvent(evt);\n\t\tvar hideGuide = true;\n\n\t\t// Grid and guides\n\t\tif (this.currentGuide != null && this.currentGuide.isEnabledForEvent(evt))\n\t\t{\n\t\t\t// LATER: HTML preview appears smaller than SVG preview\n\t\t\tvar w = parseInt(this.previewElement.style.width);\n\t\t\tvar h = parseInt(this.previewElement.style.height);\n\t\t\tvar bounds = new mxRectangle(0, 0, w, h);\n\t\t\tvar delta = new mxPoint(x, y);\n\t\t\tdelta = this.currentGuide.move(bounds, delta, gridEnabled, true);\n\t\t\thideGuide = false;\n\t\t\tx = delta.x;\n\t\t\ty = delta.y;\n\t\t}\n\t\telse if (gridEnabled)\n\t\t{\n\t\t\tvar scale = graph.view.scale;\n\t\t\tvar tr = graph.view.translate;\n\t\t\tvar off = graph.gridSize / 2;\n\t\t\tx = (graph.snap(x / scale - tr.x - off) + tr.x) * scale;\n\t\t\ty = (graph.snap(y / scale - tr.y - off) + tr.y) * scale;\n\t\t}\n\t\t\n\t\tif (this.currentGuide != null && hideGuide)\n\t\t{\n\t\t\tthis.currentGuide.hide();\n\t\t}\n\t\t\n\t\tif (this.previewOffset != null)\n\t\t{\n\t\t\tx += this.previewOffset.x;\n\t\t\ty += this.previewOffset.y;\n\t\t}\n\n\t\tthis.previewElement.style.left = Math.round(x) + 'px';\n\t\tthis.previewElement.style.top = Math.round(y) + 'px';\n\t\tthis.previewElement.style.visibility = 'visible';\n\t}\n\t\n\tthis.currentPoint = new mxPoint(x, y);\n};\n\n/**\n * Function: drop\n * \n * Returns the drop target for the given graph and coordinates. This\n * implementation uses <mxGraph.getCellAt>.\n */\nmxDragSource.prototype.drop = function(graph, evt, dropTarget, x, y)\n{\n\tthis.dropHandler.apply(this, arguments);\n\t\n\t// Had to move this to after the insert because it will\n\t// affect the scrollbars of the window in IE to try and\n\t// make the complete container visible.\n\t// LATER: Should be made optional.\n\tif (graph.container.style.visibility != 'hidden')\n\t{\n\t\tgraph.container.focus();\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxToolbar\n * \n * Creates a toolbar inside a given DOM node. The toolbar may contain icons,\n * buttons and combo boxes.\n * \n * Event: mxEvent.SELECT\n * \n * Fires when an item was selected in the toolbar. The <code>function</code>\n * property contains the function that was selected in <selectMode>.\n * \n * Constructor: mxToolbar\n * \n * Constructs a toolbar in the specified container.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nfunction mxToolbar(container)\n{\n\tthis.container = container;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxToolbar.prototype = new mxEventSource();\nmxToolbar.prototype.constructor = mxToolbar;\n\n/**\n * Variable: container\n * \n * Reference to the DOM nodes that contains the toolbar.\n */\nmxToolbar.prototype.container = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxToolbar.prototype.enabled = true;\n\n/**\n * Variable: noReset\n * \n * Specifies if <resetMode> requires a forced flag of true for resetting\n * the current mode in the toolbar. Default is false. This is set to true\n * if the toolbar item is double clicked to avoid a reset after a single\n * use of the item.\n */\nmxToolbar.prototype.noReset = false;\n\n/**\n * Variable: updateDefaultMode\n * \n * Boolean indicating if the default mode should be the last selected\n * switch mode or the first inserted switch mode. Default is true, that\n * is the last selected switch mode is the default mode. The default mode\n * is the mode to be selected after a reset of the toolbar. If this is\n * false, then the default mode is the first inserted mode item regardless\n * of what was last selected. Otherwise, the selected item after a reset is\n * the previously selected item.\n */\nmxToolbar.prototype.updateDefaultMode = true;\n\n/**\n * Function: addItem\n * \n * Adds the given function as an image with the specified title and icon\n * and returns the new image node.\n * \n * Parameters:\n * \n * title - Optional string that is used as the tooltip.\n * icon - Optional URL of the image to be used. If no URL is given, then a\n * button is created.\n * funct - Function to execute on a mouse click.\n * pressedIcon - Optional URL of the pressed image. Default is a gray\n * background.\n * style - Optional style classname. Default is mxToolbarItem.\n * factoryMethod - Optional factory method for popup menu, eg.\n * function(menu, evt, cell) { menu.addItem('Hello, World!'); }\n */\nmxToolbar.prototype.addItem = function(title, icon, funct, pressedIcon, style, factoryMethod)\n{\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\tvar initialClassName = style || ((factoryMethod != null) ?\n\t\t\t'mxToolbarMode' : 'mxToolbarItem');\n\timg.className = initialClassName;\n\timg.setAttribute('src', icon);\n\t\n\tif (title != null)\n\t{\n\t\tif (icon != null)\n\t\t{\n\t\t\timg.setAttribute('title', title);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.write(img, title);\n\t\t}\n\t}\n\t\n\tthis.container.appendChild(img);\n\n\t// Invokes the function on a click on the toolbar item\n\tif (funct != null)\n\t{\n\t\tmxEvent.addListener(img, 'click', funct);\n\t\t\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(img, 'touchend', funct);\n\t\t}\n\t}\n\n\tvar mouseHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', icon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = '';\n\t\t}\n\t});\n\n\t// Highlights the toolbar item with a gray background\n\t// while it is being clicked with the mouse\n\tmxEvent.addGestureListeners(img, mxUtils.bind(this, function(evt)\n\t{\n\t\tif (pressedIcon != null)\n\t\t{\n\t\t\timg.setAttribute('src', pressedIcon);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.style.backgroundColor = 'gray';\n\t\t}\n\t\t\n\t\t// Popup Menu\n\t\tif (factoryMethod != null)\n\t\t{\n\t\t\tif (this.menu == null)\n\t\t\t{\n\t\t\t\tthis.menu = new mxPopupMenu();\n\t\t\t\tthis.menu.init();\n\t\t\t}\n\t\t\t\n\t\t\tvar last = this.currentImg;\n\t\t\t\n\t\t\tif (this.menu.isMenuShowing())\n\t\t\t{\n\t\t\t\tthis.menu.hideMenu();\n\t\t\t}\n\t\t\t\n\t\t\tif (last != img)\n\t\t\t{\n\t\t\t\t// Redirects factory method to local factory method\n\t\t\t\tthis.currentImg = img;\n\t\t\t\tthis.menu.factoryMethod = factoryMethod;\n\t\t\t\t\n\t\t\t\tvar point = new mxPoint(\n\t\t\t\t\timg.offsetLeft,\n\t\t\t\t\timg.offsetTop + img.offsetHeight);\n\t\t\t\tthis.menu.popup(point.x, point.y, null, evt);\n\n\t\t\t\t// Sets and overrides to restore classname\n\t\t\t\tif (this.menu.isMenuShowing())\n\t\t\t\t{\n\t\t\t\t\timg.className = initialClassName + 'Selected';\n\t\t\t\t\t\n\t\t\t\t\tthis.menu.hideMenu = function()\n\t\t\t\t\t{\n\t\t\t\t\t\tmxPopupMenu.prototype.hideMenu.apply(this);\n\t\t\t\t\t\timg.className = initialClassName;\n\t\t\t\t\t\tthis.currentImg = null;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}), null, mouseHandler);\n\n\tmxEvent.addListener(img, 'mouseout', mouseHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given style. The element\n * is placed inside a DIV with the mxToolbarComboContainer style classname.\n * \n * Parameters:\n * \n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addCombo = function(style)\n{\n\tvar div = document.createElement('div');\n\tdiv.style.display = 'inline';\n\tdiv.className = 'mxToolbarComboContainer';\n\t\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tdiv.appendChild(select);\n\t\n\tthis.container.appendChild(div);\n\t\n\treturn select;\n};\n\n/**\n * Function: addCombo\n * \n * Adds and returns a new SELECT element using the given title as the\n * default element. The selection is reset to this element after each\n * change.\n * \n * Parameters:\n * \n * title - String that specifies the title of the default element.\n * style - Optional style classname. Default is mxToolbarCombo.\n */\nmxToolbar.prototype.addActionCombo = function(title, style)\n{\n\tvar select = document.createElement('select');\n\tselect.className = style || 'mxToolbarCombo';\n\tthis.addOption(select, title, null);\n\t\n\tmxEvent.addListener(select, 'change', function(evt)\n\t{\n\t\tvar value = select.options[select.selectedIndex];\n\t\tselect.selectedIndex = 0;\n\t\t\n\t\tif (value.funct != null)\n\t\t{\n\t\t\tvalue.funct(evt);\n\t\t}\n\t});\n\t\n\tthis.container.appendChild(select);\n\t\n\treturn select;\n};\n\n/**\n * Function: addOption\n * \n * Adds and returns a new OPTION element inside the given SELECT element.\n * If the given value is a function then it is stored in the option's funct\n * field.\n * \n * Parameters:\n * \n * combo - SELECT element that will contain the new entry.\n * title - String that specifies the title of the option.\n * value - Specifies the value associated with this option.\n */\nmxToolbar.prototype.addOption = function(combo, title, value)\n{\n\tvar option = document.createElement('option');\n\tmxUtils.writeln(option, title);\n\t\n\tif (typeof(value) == 'function')\n\t{\n\t\toption.funct = value;\n\t}\n\telse\n\t{\n\t\toption.setAttribute('value', value);\n\t}\n\t\n\tcombo.appendChild(option);\n\t\n\treturn option;\n};\n\n/**\n * Function: addSwitchMode\n * \n * Adds a new selectable item to the toolbar. Only one switch mode item may\n * be selected at a time. The currently selected item is the default item\n * after a reset of the toolbar.\n */\nmxToolbar.prototype.addSwitchMode = function(title, icon, funct, pressedIcon, style)\n{\n\tvar img = document.createElement('img');\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\t\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t{\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t}\n\t\t\n\t\tif (this.updateDefaultMode)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t}\n\t\t\n\t\tthis.selectedMode = img;\n\t\t\n\t\tvar tmp = img.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\timg.altIcon = img.getAttribute('src');\n\t\t\timg.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\timg.className = img.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT));\n\t\tfunct();\n\t}));\n\t\n\tthis.container.appendChild(img);\n\t\n\tif (this.defaultMode == null)\n\t{\n\t\tthis.defaultMode = img;\n\t\t\n\t\t// Function should fire only once so\n\t\t// do not pass it with the select event\n\t\tthis.selectMode(img);\n\t\tfunct();\n\t}\n\t\n\treturn img;\n};\n\n/**\n * Function: addMode\n * \n * Adds a new item to the toolbar. The selection is typically reset after\n * the item has been consumed, for example by adding a new vertex to the\n * graph. The reset is not carried out if the item is double clicked.\n * \n * The function argument uses the following signature: funct(evt, cell) where\n * evt is the native mouse event and cell is the cell under the mouse.\n */\nmxToolbar.prototype.addMode = function(title, icon, funct, pressedIcon, style, toggle)\n{\n\ttoggle = (toggle != null) ? toggle : true;\n\tvar img = document.createElement((icon != null) ? 'img' : 'button');\n\t\n\timg.initialClassName = style || 'mxToolbarMode';\n\timg.className = img.initialClassName;\n\timg.setAttribute('src', icon);\n\timg.altIcon = pressedIcon;\n\n\tif (title != null)\n\t{\n\t\timg.setAttribute('title', title);\n\t}\n\t\n\tif (this.enabled && toggle)\n\t{\n\t\tmxEvent.addListener(img, 'click', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = false;\n\t\t}));\n\t\t\n\t\tmxEvent.addListener(img, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.selectMode(img, funct);\n\t\t\tthis.noReset = true;\n\t\t}));\n\t\t\n\t\tif (this.defaultMode == null)\n\t\t{\n\t\t\tthis.defaultMode = img;\n\t\t\tthis.defaultFunction = funct;\n\t\t\tthis.selectMode(img, funct);\n\t\t}\n\t}\n\n\tthis.container.appendChild(img);\t\t\t\t\t\n\n\treturn img;\n};\n\n/**\n * Function: selectMode\n * \n * Resets the state of the previously selected mode and displays the given\n * DOM node as selected. This function fires a select event with the given\n * function as a parameter.\n */\nmxToolbar.prototype.selectMode = function(domNode, funct)\n{\n\tif (this.selectedMode != domNode)\n\t{\n\t\tif (this.selectedMode != null)\n\t\t{\n\t\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.selectedMode = domNode;\n\t\tvar tmp = this.selectedMode.altIcon;\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tthis.selectedMode.altIcon = this.selectedMode.getAttribute('src');\n\t\t\tthis.selectedMode.setAttribute('src', tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.selectedMode.className = this.selectedMode.initialClassName+'Selected';\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SELECT, \"function\", funct));\n\t}\n};\n\n/**\n * Function: resetMode\n * \n * Selects the default mode and resets the state of the previously selected\n * mode.\n */\nmxToolbar.prototype.resetMode = function(forced)\n{\n\tif ((forced || !this.noReset) && this.selectedMode != this.defaultMode)\n\t{\n\t\t// The last selected switch mode will be activated\n\t\t// so the function was already executed and is\n\t\t// no longer required here\n\t\tthis.selectMode(this.defaultMode, this.defaultFunction);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds the specifies image as a separator.\n * \n * Parameters:\n * \n * icon - URL of the separator icon.\n */\nmxToolbar.prototype.addSeparator = function(icon)\n{\n\treturn this.addItem(null, icon, null);\n};\n\n/**\n * Function: addBreak\n * \n * Adds a break to the container.\n */\nmxToolbar.prototype.addBreak = function()\n{\n\tmxUtils.br(this.container);\n};\n\n/**\n * Function: addLine\n * \n * Adds a horizontal line to the container.\n */\nmxToolbar.prototype.addLine = function()\n{\n\tvar hr = document.createElement('hr');\n\t\n\thr.style.marginRight = '6px';\n\thr.setAttribute('size', '1');\n\t\n\tthis.container.appendChild(hr);\n};\n\n/**\n * Function: destroy\n * \n * Removes the toolbar and all its associated resources.\n */\nmxToolbar.prototype.destroy = function ()\n{\n\tmxEvent.release(this.container);\n\tthis.container = null;\n\tthis.defaultMode = null;\n\tthis.defaultFunction = null;\n\tthis.selectedMode = null;\n\t\n\tif (this.menu != null)\n\t{\n\t\tthis.menu.destroy();\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoableEdit\n * \n * Implements a composite undoable edit. Here is an example for a custom change\n * which gets executed via the model:\n * \n * (code)\n * function CustomChange(model, name)\n * {\n *   this.model = model;\n *   this.name = name;\n *   this.previous = name;\n * };\n * \n * CustomChange.prototype.execute = function()\n * {\n *   var tmp = this.model.name;\n *   this.model.name = this.previous;\n *   this.previous = tmp;\n * };\n * \n * var name = prompt('Enter name');\n * graph.model.execute(new CustomChange(graph.model, name));\n * (end)\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n * \n * Event: mxEvent.START_EDIT\n * \n * Fires before a set of changes will be executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after a set of changeswas executed in <undo> or <redo>.\n * This event contains no properties.\n * \n * Constructor: mxUndoableEdit\n * \n * Constructs a new undoable edit for the given source.\n */\nfunction mxUndoableEdit(source, significant)\n{\n\tthis.source = source;\n\tthis.changes = [];\n\tthis.significant = (significant != null) ? significant : true;\n};\n\n/**\n * Variable: source\n * \n * Specifies the source of the edit.\n */\nmxUndoableEdit.prototype.source = null;\n\n/**\n * Variable: changes\n * \n * Array that contains the changes that make up this edit. The changes are\n * expected to either have an undo and redo function, or an execute\n * function. Default is an empty array.\n */\nmxUndoableEdit.prototype.changes = null;\n\n/**\n * Variable: significant\n * \n * Specifies if the undoable change is significant.\n * Default is true.\n */\nmxUndoableEdit.prototype.significant = null;\n\n/**\n * Variable: undone\n * \n * Specifies if this edit has been undone. Default is false.\n */\nmxUndoableEdit.prototype.undone = false;\n\n/**\n * Variable: redone\n * \n * Specifies if this edit has been redone. Default is false.\n */\nmxUndoableEdit.prototype.redone = false;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the this edit contains no changes.\n */\nmxUndoableEdit.prototype.isEmpty = function()\n{\n\treturn this.changes.length == 0;\n};\n\n/**\n * Function: isSignificant\n * \n * Returns <significant>.\n */\nmxUndoableEdit.prototype.isSignificant = function()\n{\n\treturn this.significant;\n};\n\n/**\n * Function: add\n * \n * Adds the specified change to this edit. The change is an object that is\n * expected to either have an undo and redo, or an execute function.\n */\nmxUndoableEdit.prototype.add = function(change)\n{\n\tthis.changes.push(change);\n};\n\n/**\n * Function: notify\n * \n * Hook to notify any listeners of the changes after an <undo> or <redo>\n * has been carried out. This implementation is empty.\n */\nmxUndoableEdit.prototype.notify = function() { };\n\n/**\n * Function: die\n * \n * Hook to free resources after the edit has been removed from the command\n * history. This implementation is empty.\n */\nmxUndoableEdit.prototype.die = function() { };\n\n/**\n * Function: undo\n * \n * Undoes all changes in this edit.\n */\nmxUndoableEdit.prototype.undo = function()\n{\n\tif (!this.undone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = count - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.undo != null)\n\t\t\t{\n\t\t\t\tchange.undo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = true;\n\t\tthis.redone = false;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n\n/**\n * Function: redo\n * \n * Redoes all changes in this edit.\n */\nmxUndoableEdit.prototype.redo = function()\n{\n\tif (!this.redone)\n\t{\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t\tvar count = this.changes.length;\n\t\t\n\t\tfor (var i = 0; i < count; i++)\n\t\t{\n\t\t\tvar change = this.changes[i];\n\t\t\t\n\t\t\tif (change.execute != null)\n\t\t\t{\n\t\t\t\tchange.execute();\n\t\t\t}\n\t\t\telse if (change.redo != null)\n\t\t\t{\n\t\t\t\tchange.redo();\n\t\t\t}\n\t\t\t\n\t\t\t// New global executed event\n\t\t\tthis.source.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\t\t}\n\t\t\n\t\tthis.undone = false;\n\t\tthis.redone = true;\n\t\tthis.source.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tthis.notify();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxUndoManager\n *\n * Implements a command history. When changing the graph model, an\n * <mxUndoableChange> object is created at the start of the transaction (when\n * model.beginUpdate is called). All atomic changes are then added to this\n * object until the last model.endUpdate call, at which point the\n * <mxUndoableEdit> is dispatched in an event, and added to the history inside\n * <mxUndoManager>. This is done by an event listener in\n * <mxEditor.installUndoHandler>.\n * \n * Each atomic change of the model is represented by an object (eg.\n * <mxRootChange>, <mxChildChange>, <mxTerminalChange> etc) which contains the\n * complete undo information. The <mxUndoManager> also listens to the\n * <mxGraphView> and stores it's changes to the current root as insignificant\n * undoable changes, so that drilling (step into, step up) is undone.\n * \n * This means when you execute an atomic change on the model, then change the\n * current root on the view and click undo, the change of the root will be\n * undone together with the change of the model so that the display represents\n * the state at which the model was changed. However, these changes are not\n * transmitted for sharing as they do not represent a state change.\n *\n * Example:\n * \n * When adding an undo manager to a graph, make sure to add it\n * to the model and the view as well to maintain a consistent\n * display across multiple undo/redo steps.\n *\n * (code)\n * var undoManager = new mxUndoManager();\n * var listener = function(sender, evt)\n * {\n *   undoManager.undoableEditHappened(evt.getProperty('edit'));\n * };\n * graph.getModel().addListener(mxEvent.UNDO, listener);\n * graph.getView().addListener(mxEvent.UNDO, listener);\n * (end)\n * \n * The code creates a function that informs the undoManager\n * of an undoable edit and binds it to the undo event of\n * <mxGraphModel> and <mxGraphView> using\n * <mxEventSource.addListener>.\n * \n * Event: mxEvent.CLEAR\n * \n * Fires after <clear> was invoked. This event has no properties.\n * \n * Event: mxEvent.UNDO\n * \n * Fires afer a significant edit was undone in <undo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was undone.\n * \n * Event: mxEvent.REDO\n * \n * Fires afer a significant edit was redone in <redo>. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was redone.\n * \n * Event: mxEvent.ADD\n * \n * Fires after an undoable edit was added to the history. The <code>edit</code>\n * property contains the <mxUndoableEdit> that was added.\n * \n * Constructor: mxUndoManager\n *\n * Constructs a new undo manager with the given history size. If no history\n * size is given, then a default size of 100 steps is used.\n */\nfunction mxUndoManager(size)\n{\n\tthis.size = (size != null) ? size : 100;\n\tthis.clear();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUndoManager.prototype = new mxEventSource();\nmxUndoManager.prototype.constructor = mxUndoManager;\n\n/**\n * Variable: size\n * \n * Maximum command history size. 0 means unlimited history. Default is\n * 100.\n */\nmxUndoManager.prototype.size = null;\n\n/**\n * Variable: history\n * \n * Array that contains the steps of the command history.\n */\nmxUndoManager.prototype.history = null;\n\n/**\n * Variable: indexOfNextAdd\n * \n * Index of the element to be added next.\n */\nmxUndoManager.prototype.indexOfNextAdd = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if the history is empty.\n */\nmxUndoManager.prototype.isEmpty = function()\n{\n\treturn this.history.length == 0;\n};\n\n/**\n * Function: clear\n * \n * Clears the command history.\n */\nmxUndoManager.prototype.clear = function()\n{\n\tthis.history = [];\n\tthis.indexOfNextAdd = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.CLEAR));\n};\n\n/**\n * Function: canUndo\n * \n * Returns true if an undo is possible.\n */\nmxUndoManager.prototype.canUndo = function()\n{\n\treturn this.indexOfNextAdd > 0;\n};\n\n/**\n * Function: undo\n * \n * Undoes the last change.\n */\nmxUndoManager.prototype.undo = function()\n{\n    while (this.indexOfNextAdd > 0)\n    {\n        var edit = this.history[--this.indexOfNextAdd];\n        edit.undo();\n\n\t\tif (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: canRedo\n * \n * Returns true if a redo is possible.\n */\nmxUndoManager.prototype.canRedo = function()\n{\n\treturn this.indexOfNextAdd < this.history.length;\n};\n\n/**\n * Function: redo\n * \n * Redoes the last change.\n */\nmxUndoManager.prototype.redo = function()\n{\n    var n = this.history.length;\n    \n    while (this.indexOfNextAdd < n)\n    {\n        var edit =  this.history[this.indexOfNextAdd++];\n        edit.redo();\n        \n        if (edit.isSignificant())\n        {\n        \tthis.fireEvent(new mxEventObject(mxEvent.REDO, 'edit', edit));\n            break;\n        }\n    }\n};\n\n/**\n * Function: undoableEditHappened\n * \n * Method to be called to add new undoable edits to the <history>.\n */\nmxUndoManager.prototype.undoableEditHappened = function(undoableEdit)\n{\n\tthis.trim();\n\t\n\tif (this.size > 0 &&\n\t\tthis.size == this.history.length)\n\t{\n\t\tthis.history.shift();\n\t}\n\t\n\tthis.history.push(undoableEdit);\n\tthis.indexOfNextAdd = this.history.length;\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'edit', undoableEdit));\n};\n\n/**\n * Function: trim\n * \n * Removes all pending steps after <indexOfNextAdd> from the history,\n * invoking die on each edit. This is called from <undoableEditHappened>.\n */\nmxUndoManager.prototype.trim = function()\n{\n\tif (this.history.length > this.indexOfNextAdd)\n\t{\n\t\tvar edits = this.history.splice(this.indexOfNextAdd,\n\t\t\tthis.history.length - this.indexOfNextAdd);\n\t\t\t\n\t\tfor (var i = 0; i < edits.length; i++)\n\t\t{\n\t\t\tedits[i].die();\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxUrlConverter\n * \n * Converts relative and absolute URLs to absolute URLs with protocol and domain.\n */\nvar mxUrlConverter = function()\n{\n\t// Empty constructor\n};\n\n/**\n * Variable: enabled\n * \n * Specifies if the converter is enabled. Default is true.\n */\nmxUrlConverter.prototype.enabled = true;\n\n/**\n * Variable: baseUrl\n * \n * Specifies the base URL to be used as a prefix for relative URLs.\n */\nmxUrlConverter.prototype.baseUrl = null;\n\n/**\n * Variable: baseDomain\n * \n * Specifies the base domain to be used as a prefix for absolute URLs.\n */\nmxUrlConverter.prototype.baseDomain = null;\n\n/**\n * Function: updateBaseUrl\n * \n * Private helper function to update the base URL.\n */\nmxUrlConverter.prototype.updateBaseUrl = function()\n{\n\tthis.baseDomain = location.protocol + '//' + location.host;\n\tthis.baseUrl = this.baseDomain + location.pathname;\n\tvar tmp = this.baseUrl.lastIndexOf('/');\n\t\n\t// Strips filename etc\n\tif (tmp > 0)\n\t{\n\t\tthis.baseUrl = this.baseUrl.substring(0, tmp + 1);\n\t}\n};\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxUrlConverter.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxUrlConverter.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns <baseUrl>.\n */\nmxUrlConverter.prototype.getBaseUrl = function()\n{\n\treturn this.baseUrl;\n};\n\n/**\n * Function: setBaseUrl\n * \n * Sets <baseUrl>.\n */\nmxUrlConverter.prototype.setBaseUrl = function(value)\n{\n\tthis.baseUrl = value;\n};\n\n/**\n * Function: getBaseDomain\n * \n * Returns <baseDomain>.\n */\nmxUrlConverter.prototype.getBaseDomain = function()\n{\n\treturn this.baseDomain;\n},\n\n/**\n * Function: setBaseDomain\n * \n * Sets <baseDomain>.\n */\nmxUrlConverter.prototype.setBaseDomain = function(value)\n{\n\tthis.baseDomain = value;\n},\n\n/**\n * Function: isRelativeUrl\n * \n * Returns true if the given URL is relative.\n */\nmxUrlConverter.prototype.isRelativeUrl = function(url)\n{\n\treturn url.substring(0, 2) != '//' && url.substring(0, 7) != 'http://' &&\n\t\turl.substring(0, 8) != 'https://' && url.substring(0, 10) != 'data:image' &&\n\t\turl.substring(0, 7) != 'file://';\n};\n\n/**\n * Function: convert\n * \n * Converts the given URL to an absolute URL with protol and domain.\n * Relative URLs are first converted to absolute URLs.\n */\nmxUrlConverter.prototype.convert = function(url)\n{\n\tif (this.isEnabled() && this.isRelativeUrl(url))\n\t{\n\t\tif (this.getBaseUrl() == null)\n\t\t{\n\t\t\tthis.updateBaseUrl();\n\t\t}\n\t\t\n\t\tif (url.charAt(0) == '/')\n\t\t{\n\t\t\turl = this.getBaseDomain() + url;\n\t\t}\n\t\telse\n\t\t{\n\t\t\turl = this.getBaseUrl() + url;\n\t\t}\n\t}\n\t\n\treturn url;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningManager\n *\n * Implements a handler for panning.\n */\nfunction mxPanningManager(graph)\n{\n\tthis.thread = null;\n\tthis.active = false;\n\tthis.tdx = 0;\n\tthis.tdy = 0;\n\tthis.t0x = 0;\n\tthis.t0y = 0;\n\tthis.dx = 0;\n\tthis.dy = 0;\n\tthis.scrollbars = false;\n\tthis.scrollLeft = 0;\n\tthis.scrollTop = 0;\n\t\n\tthis.mouseListener =\n\t{\n\t    mouseDown: function(sender, me) { },\n\t    mouseMove: function(sender, me) { },\n\t    mouseUp: mxUtils.bind(this, function(sender, me)\n\t    {\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t    })\n\t};\n\t\n\tgraph.addMouseListener(this.mouseListener);\n\t\n\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t{\n\t    \tif (this.active)\n\t    \t{\n\t    \t\tthis.stop();\n\t    \t}\n\t});\n\t\n\t// Stops scrolling on every mouseup anywhere in the document\n\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t\n\tvar createThread = mxUtils.bind(this, function()\n\t{\n\t    \tthis.scrollbars = mxUtils.hasScrollbars(graph.container);\n\t    \tthis.scrollLeft = graph.container.scrollLeft;\n\t    \tthis.scrollTop = graph.container.scrollTop;\n\t\n\t    \treturn window.setInterval(mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.tdx -= this.dx;\n\t\t\tthis.tdy -= this.dy;\n\n\t\t\tif (this.scrollbars)\n\t\t\t{\n\t\t\t\tvar left = -graph.container.scrollLeft - Math.ceil(this.dx);\n\t\t\t\tvar top = -graph.container.scrollTop - Math.ceil(this.dy);\n\t\t\t\tgraph.panGraph(left, top);\n\t\t\t\tgraph.panDx = this.scrollLeft - graph.container.scrollLeft;\n\t\t\t\tgraph.panDy = this.scrollTop - graph.container.scrollTop;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t\t// TODO: Implement graph.autoExtend\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panGraph(this.getDx(), this.getDy());\n\t\t\t}\n\t\t}), this.delay);\n\t});\n\t\n\tthis.isActive = function()\n\t{\n\t\treturn active;\n\t};\n\t\n\tthis.getDx = function()\n\t{\n\t\treturn Math.round(this.tdx);\n\t};\n\t\n\tthis.getDy = function()\n\t{\n\t\treturn Math.round(this.tdy);\n\t};\n\t\n\tthis.start = function()\n\t{\n\t\tthis.t0x = graph.view.translate.x;\n\t\tthis.t0y = graph.view.translate.y;\n\t\tthis.active = true;\n\t};\n\t\n\tthis.panTo = function(x, y, w, h)\n\t{\n\t\tif (!this.active)\n\t\t{\n\t\t\tthis.start();\n\t\t}\n\t\t\n    \tthis.scrollLeft = graph.container.scrollLeft;\n    \tthis.scrollTop = graph.container.scrollTop;\n\t\t\n\t\tw = (w != null) ? w : 0;\n\t\th = (h != null) ? h : 0;\n\t\t\n\t\tvar c = graph.container;\n\t\tthis.dx = x + w - c.scrollLeft - c.clientWidth;\n\t\t\n\t\tif (this.dx < 0 && Math.abs(this.dx) < this.border)\n\t\t{\n\t\t\tthis.dx = this.border + this.dx;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dx = Math.max(this.dx, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx = 0;\n\t\t}\n\t\t\n\t\tif (this.dx == 0)\n\t\t{\n\t\t\tthis.dx = x - c.scrollLeft;\n\t\t\t\n\t\t\tif (this.dx > 0 && this.dx < this.border)\n\t\t\t{\n\t\t\t\tthis.dx = this.dx - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dx = Math.min(0, this.dx);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dx = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.dy = y + h - c.scrollTop - c.clientHeight;\n\n\t\tif (this.dy < 0 && Math.abs(this.dy) < this.border)\n\t\t{\n\t\t\tthis.dy = this.border + this.dy;\n\t\t}\n\t\telse if (this.handleMouseOut)\n\t\t{\n\t\t\tthis.dy = Math.max(this.dy, 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dy = 0;\n\t\t}\n\t\t\n\t\tif (this.dy == 0)\n\t\t{\n\t\t\tthis.dy = y - c.scrollTop;\n\t\t\t\n\t\t\tif (this.dy > 0 && this.dy < this.border)\n\t\t\t{\n\t\t\t\tthis.dy = this.dy - this.border;\n\t\t\t}\n\t\t\telse if (this.handleMouseOut)\n\t\t\t{\n\t\t\t\tthis.dy = Math.min(0, this.dy);\n\t\t\t} \n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.dy = 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.dx != 0 || this.dy != 0)\n\t\t{\n\t\t\tthis.dx *= this.damper;\n\t\t\tthis.dy *= this.damper;\n\t\t\t\n\t\t\tif (this.thread == null)\n\t\t\t{\n\t\t\t\tthis.thread = createThread();\n\t\t\t}\n\t\t}\n\t\telse if (this.thread != null)\n\t\t{\n\t\t\twindow.clearInterval(this.thread);\n\t\t\tthis.thread = null;\n\t\t}\n\t};\n\t\n\tthis.stop = function()\n\t{\n\t\tif (this.active)\n\t\t{\n\t\t\tthis.active = false;\n\t\t\n\t\t\tif (this.thread != null)\n\t    \t{\n\t\t\t\twindow.clearInterval(this.thread);\n\t\t\t\tthis.thread = null;\n\t    \t}\n\t\t\t\n\t\t\tthis.tdx = 0;\n\t\t\tthis.tdy = 0;\n\t\t\t\n\t\t\tif (!this.scrollbars)\n\t\t\t{\n\t\t\t\tvar px = graph.panDx;\n\t\t\t\tvar py = graph.panDy;\n\t\t    \t\n\t\t    \tif (px != 0 || py != 0)\n\t\t    \t{\n\t\t    \t\tgraph.panGraph(0, 0);\n\t\t\t    \tgraph.view.setTranslate(this.t0x + px / graph.view.scale, this.t0y + py / graph.view.scale);\n\t\t    \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgraph.panDx = 0;\n\t\t\t\tgraph.panDy = 0;\n\t\t\t\tgraph.fireEvent(new mxEventObject(mxEvent.PAN));\n\t\t\t}\n\t\t}\n\t};\n\t\n\tthis.destroy = function()\n\t{\n\t\tgraph.removeMouseListener(this.mouseListener);\n\t\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n\t};\n};\n\n/**\n * Variable: damper\n * \n * Damper value for the panning. Default is 1/6.\n */\nmxPanningManager.prototype.damper = 1/6;\n\n/**\n * Variable: delay\n * \n * Delay in milliseconds for the panning. Default is 10.\n */\nmxPanningManager.prototype.delay = 10;\n\n/**\n * Variable: handleMouseOut\n * \n * Specifies if mouse events outside of the component should be handled. Default is true. \n */\nmxPanningManager.prototype.handleMouseOut = true;\n\n/**\n * Variable: border\n * \n * Border to handle automatic panning inside the component. Default is 0 (disabled).\n */\nmxPanningManager.prototype.border = 0;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenu\n * \n * Basic popup menu. To add a vertical scrollbar to a given submenu, the\n * following code can be used.\n * \n * (code)\n * var mxPopupMenuShowMenu = mxPopupMenu.prototype.showMenu;\n * mxPopupMenu.prototype.showMenu = function()\n * {\n *   mxPopupMenuShowMenu.apply(this, arguments);\n *   \n *   this.div.style.overflowY = 'auto';\n *   this.div.style.overflowX = 'hidden';\n *   this.div.style.maxHeight = '160px';\n * };\n * (end)\n * \n * Constructor: mxPopupMenu\n * \n * Constructs a popupmenu.\n * \n * Event: mxEvent.SHOW\n *\n * Fires after the menu has been shown in <popup>.\n */\nfunction mxPopupMenu(factoryMethod)\n{\n\tthis.factoryMethod = factoryMethod;\n\t\n\tif (factoryMethod != null)\n\t{\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPopupMenu.prototype = new mxEventSource();\nmxPopupMenu.prototype.constructor = mxPopupMenu;\n\n/**\n * Variable: submenuImage\n * \n * URL of the image to be used for the submenu icon.\n */\nmxPopupMenu.prototype.submenuImage = mxClient.imageBasePath + '/submenu.gif';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the popupmenu and its shadow. Default is 1006.\n */\nmxPopupMenu.prototype.zIndex = 10006;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used to create the popup menu. The function takes the\n * current panning handler, the <mxCell> under the mouse and the mouse\n * event that triggered the call as arguments.\n */\nmxPopupMenu.prototype.factoryMethod = null;\n\n/**\n * Variable: useLeftButtonForPopup\n * \n * Specifies if popupmenus should be activated by clicking the left mouse\n * button. Default is false.\n */\nmxPopupMenu.prototype.useLeftButtonForPopup = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxPopupMenu.prototype.enabled = true;\n\n/**\n * Variable: itemCount\n * \n * Contains the number of times <addItem> has been called for a new menu.\n */\nmxPopupMenu.prototype.itemCount = 0;\n\n/**\n * Variable: autoExpand\n * \n * Specifies if submenus should be expanded on mouseover. Default is false.\n */\nmxPopupMenu.prototype.autoExpand = false;\n\n/**\n * Variable: smartSeparators\n * \n * Specifies if separators should only be added if a menu item follows them.\n * Default is false.\n */\nmxPopupMenu.prototype.smartSeparators = false;\n\n/**\n * Variable: labels\n * \n * Specifies if any labels should be visible. Default is true.\n */\nmxPopupMenu.prototype.labels = true;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenu.prototype.init = function()\n{\n\t// Adds the inner table\n\tthis.table = document.createElement('table');\n\tthis.table.className = 'mxPopupMenu';\n\t\n\tthis.tbody = document.createElement('tbody');\n\tthis.table.appendChild(this.tbody);\n\n\t// Adds the outer div\n\tthis.div = document.createElement('div');\n\tthis.div.className = 'mxPopupMenu';\n\tthis.div.style.display = 'inline';\n\tthis.div.style.zIndex = this.zIndex;\n\tthis.div.appendChild(this.table);\n\n\t// Disables the context menu on the outer div\n\tmxEvent.disableContextMenu(this.div);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxPopupMenu.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxPopupMenu.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isPopupTrigger\n * \n * Returns true if the given event is a popupmenu trigger for the optional\n * given cell.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the mouse event.\n */\nmxPopupMenu.prototype.isPopupTrigger = function(me)\n{\n\treturn me.isPopupTrigger() || (this.useLeftButtonForPopup && mxEvent.isLeftMouseButton(me.getEvent()));\n};\n\n/**\n * Function: addItem\n * \n * Adds the given item to the given parent item. If no parent item is specified\n * then the item is added to the top-level menu. The return value may be used\n * as the parent argument, ie. as a submenu item. The return value is the table\n * row that represents the item.\n * \n * Paramters:\n * \n * title - String that represents the title of the menu item.\n * image - Optional URL for the image icon.\n * funct - Function associated that takes a mouseup or touchend event.\n * parent - Optional item returned by <addItem>.\n * iconCls - Optional string that represents the CSS class for the image icon.\n * IconsCls is ignored if image is given.\n * enabled - Optional boolean indicating if the item is enabled. Default is true.\n * active - Optional boolean indicating if the menu should implement any event handling.\n * Default is true.\n */\nmxPopupMenu.prototype.addItem = function(title, image, funct, parent, iconCls, enabled, active)\n{\n\tparent = parent || this;\n\tthis.itemCount++;\n\t\n\t// Smart separators only added if element contains items\n\tif (parent.willAddSeparator)\n\t{\n\t\tif (parent.containsItems)\n\t\t{\n\t\t\tthis.addSeparator(parent, true);\n\t\t}\n\n\t\tparent.willAddSeparator = false;\n\t}\n\n\tparent.containsItems = true;\n\tvar tr = document.createElement('tr');\n\ttr.className = 'mxPopupMenuItem';\n\tvar col1 = document.createElement('td');\n\tcol1.className = 'mxPopupMenuIcon';\n\n\t// Adds the given image into the first column\n\tif (image != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.src = image;\n\t\tcol1.appendChild(img);\n\t}\n\telse if (iconCls != null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.className = iconCls;\n\t\tcol1.appendChild(div);\n\t}\n\t\n\ttr.appendChild(col1);\n\t\n\tif (this.labels)\n\t{\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\t\n\t\tmxUtils.write(col2, title);\n\t\tcol2.align = 'left';\n\t\ttr.appendChild(col2);\n\t\n\t\tvar col3 = document.createElement('td');\n\t\tcol3.className = 'mxPopupMenuItem' +\n\t\t\t((enabled != null && !enabled) ? ' mxDisabled' : '');\n\t\tcol3.style.paddingRight = '6px';\n\t\tcol3.style.textAlign = 'right';\n\t\t\n\t\ttr.appendChild(col3);\n\t\t\n\t\tif (parent.div == null)\n\t\t{\n\t\t\tthis.createSubmenu(parent);\n\t\t}\n\t}\n\t\n\tparent.tbody.appendChild(tr);\n\n\tif (active != false && enabled != false)\n\t{\n\t\tvar currentSelection = null;\n\t\t\n\t\tmxEvent.addGestureListeners(tr,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tthis.eventReceiver = tr;\n\t\t\t\t\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t\t{\n\t\t\t\t\tcurrentSelection = document.selection.createRange();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (parent.activeRow != tr && parent.activeRow != parent)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != null && parent.activeRow.div.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideSubmenu(parent);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoExpand && tr.div != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.showSubmenu(parent, tr);\n\t\t\t\t\t\tparent.activeRow = tr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\t// Sets hover style because TR in IE doesn't have hover\n\t\t\t\ttr.className = 'mxPopupMenuItemHover';\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\t// EventReceiver avoids clicks on a submenu item\n\t\t\t\t// which has just been shown in the mousedown\n\t\t\t\tif (this.eventReceiver == tr)\n\t\t\t\t{\n\t\t\t\t\tif (parent.activeRow != tr)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.hideMenu();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for lost current selection in page because of focus in IE\n\t\t\t\t\tif (currentSelection != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Workaround for \"unspecified error\" in IE8 standards\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentSelection.select();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentSelection = null;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (funct != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfunct(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.eventReceiver = null;\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t})\n\t\t);\n\t\n\t\t// Resets hover style because TR in IE doesn't have hover\n\t\tmxEvent.addListener(tr, 'mouseout',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\ttr.className = 'mxPopupMenuItem';\n\t\t\t})\n\t\t);\n\t}\n\t\n\treturn tr;\n};\n\n/**\n * Adds a checkmark to the given menuitem.\n */\nmxPopupMenu.prototype.addCheckmark = function(item, img)\n{\n\tvar td = item.firstChild.nextSibling;\n\ttd.style.backgroundImage = 'url(\\'' + img + '\\')';\n\ttd.style.backgroundRepeat = 'no-repeat';\n\ttd.style.backgroundPosition = '2px 50%';\n};\n\n/**\n * Function: createSubmenu\n * \n * Creates the nodes required to add submenu items inside the given parent\n * item. This is called in <addItem> if a parent item is used for the first\n * time. This adds various DOM nodes and a <submenuImage> to the parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.createSubmenu = function(parent)\n{\n\tparent.table = document.createElement('table');\n\tparent.table.className = 'mxPopupMenu';\n\n\tparent.tbody = document.createElement('tbody');\n\tparent.table.appendChild(parent.tbody);\n\n\tparent.div = document.createElement('div');\n\tparent.div.className = 'mxPopupMenu';\n\n\tparent.div.style.position = 'absolute';\n\tparent.div.style.display = 'inline';\n\tparent.div.style.zIndex = this.zIndex;\n\t\n\tparent.div.appendChild(parent.table);\n\t\n\tvar img = document.createElement('img');\n\timg.setAttribute('src', this.submenuImage);\n\t\n\t// Last column of the submenu item in the parent menu\n\ttd = parent.firstChild.nextSibling.nextSibling;\n\ttd.appendChild(img);\n};\n\n/**\n * Function: showSubmenu\n * \n * Shows the submenu inside the given parent row.\n */\nmxPopupMenu.prototype.showSubmenu = function(parent, row)\n{\n\tif (row.div != null)\n\t{\n\t\trow.div.style.left = (parent.div.offsetLeft +\n\t\t\trow.offsetLeft+row.offsetWidth - 1) + 'px';\n\t\trow.div.style.top = (parent.div.offsetTop+row.offsetTop) + 'px';\n\t\tdocument.body.appendChild(row.div);\n\t\t\n\t\t// Moves the submenu to the left side if there is no space\n\t\tvar left = parseInt(row.div.offsetLeft);\n\t\tvar width = parseInt(row.div.offsetWidth);\n\t\tvar offset = mxUtils.getDocumentScrollOrigin(document);\n\t\t\n\t\tvar b = document.body;\n\t\tvar d = document.documentElement;\n\t\t\n\t\tvar right = offset.x + (b.clientWidth || d.clientWidth);\n\t\t\n\t\tif (left + width > right)\n\t\t{\n\t\t\trow.div.style.left = Math.max(0, (parent.div.offsetLeft - width + ((mxClient.IS_IE) ? 6 : -6))) + 'px';\n\t\t}\n\t\t\n\t\tmxUtils.fit(row.div);\n\t}\n};\n\n/**\n * Function: addSeparator\n * \n * Adds a horizontal separator in the given parent item or the top-level menu\n * if no parent is specified.\n * \n * Parameters:\n * \n * parent - Optional item returned by <addItem>.\n * force - Optional boolean to ignore <smartSeparators>. Default is false.\n */\nmxPopupMenu.prototype.addSeparator = function(parent, force)\n{\n\tparent = parent || this;\n\t\n\tif (this.smartSeparators && !force)\n\t{\n\t\tparent.willAddSeparator = true;\n\t}\n\telse if (parent.tbody != null)\n\t{\n\t\tparent.willAddSeparator = false;\n\t\tvar tr = document.createElement('tr');\n\t\t\n\t\tvar col1 = document.createElement('td');\n\t\tcol1.className = 'mxPopupMenuIcon';\n\t\tcol1.style.padding = '0 0 0 0px';\n\t\t\n\t\ttr.appendChild(col1);\n\t\t\n\t\tvar col2 = document.createElement('td');\n\t\tcol2.style.padding = '0 0 0 0px';\n\t\tcol2.setAttribute('colSpan', '2');\n\t\n\t\tvar hr = document.createElement('hr');\n\t\thr.setAttribute('size', '1');\n\t\tcol2.appendChild(hr);\n\t\t\n\t\ttr.appendChild(col2);\n\t\t\n\t\tparent.tbody.appendChild(tr);\n\t}\n};\n\n/**\n * Function: popup\n * \n * Shows the popup menu for the given event and cell.\n * \n * Example:\n * \n * (code)\n * graph.panningHandler.popup = function(x, y, cell, evt)\n * {\n *   mxUtils.alert('Hello, World!');\n * }\n * (end)\n */\nmxPopupMenu.prototype.popup = function(x, y, cell, evt)\n{\n\tif (this.div != null && this.tbody != null && this.factoryMethod != null)\n\t{\n\t\tthis.div.style.left = x + 'px';\n\t\tthis.div.style.top = y + 'px';\n\t\t\n\t\t// Removes all child nodes from the existing menu\n\t\twhile (this.tbody.firstChild != null)\n\t\t{\n\t\t\tmxEvent.release(this.tbody.firstChild);\n\t\t\tthis.tbody.removeChild(this.tbody.firstChild);\n\t\t}\n\t\t\n\t\tthis.itemCount = 0;\n\t\tthis.factoryMethod(this, cell, evt);\n\t\t\n\t\tif (this.itemCount > 0)\n\t\t{\n\t\t\tthis.showMenu();\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.SHOW));\n\t\t}\n\t}\n};\n\n/**\n * Function: isMenuShowing\n * \n * Returns true if the menu is showing.\n */\nmxPopupMenu.prototype.isMenuShowing = function()\n{\n\treturn this.div != null && this.div.parentNode == document.body;\n};\n\n/**\n * Function: showMenu\n * \n * Shows the menu.\n */\nmxPopupMenu.prototype.showMenu = function()\n{\n\t// Disables filter-based shadow in IE9 standards mode\n\tif (document.documentMode >= 9)\n\t{\n\t\tthis.div.style.filter = 'none';\n\t}\n\t\n\t// Fits the div inside the viewport\n\tdocument.body.appendChild(this.div);\n\tmxUtils.fit(this.div);\n};\n\n/**\n * Function: hideMenu\n * \n * Removes the menu and all submenus.\n */\nmxPopupMenu.prototype.hideMenu = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.hideSubmenu(this);\n\t\tthis.containsItems = false;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.HIDE));\n\t}\n};\n\n/**\n * Function: hideSubmenu\n * \n * Removes all submenus inside the given parent.\n * \n * Parameters:\n * \n * parent - An item returned by <addItem>.\n */\nmxPopupMenu.prototype.hideSubmenu = function(parent)\n{\n\tif (parent.activeRow != null)\n\t{\n\t\tthis.hideSubmenu(parent.activeRow);\n\t\t\n\t\tif (parent.activeRow.div.parentNode != null)\n\t\t{\n\t\t\tparent.activeRow.div.parentNode.removeChild(parent.activeRow.div);\n\t\t}\n\t\t\n\t\tparent.activeRow = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenu.prototype.destroy = function()\n{\n\tif (this.div != null)\n\t{\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.div = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAutoSaveManager\n * \n * Manager for automatically saving diagrams. The <save> hook must be\n * implemented.\n * \n * Example:\n * \n * (code)\n * var mgr = new mxAutoSaveManager(editor.graph);\n * mgr.save = function()\n * {\n *   mxLog.show();\n *   mxLog.debug('save');\n * };\n * (end)\n * \n * Constructor: mxAutoSaveManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxAutoSaveManager(graph)\n{\n\t// Notifies the manager of a change\n\tthis.changeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t\t}\n\t});\n\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAutoSaveManager.prototype = new mxEventSource();\nmxAutoSaveManager.prototype.constructor = mxAutoSaveManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxAutoSaveManager.prototype.graph = null;\n\n/**\n * Variable: autoSaveDelay\n * \n * Minimum amount of seconds between two consecutive autosaves. Eg. a\n * value of 1 (s) means the graph is not stored more than once per second.\n * Default is 10.\n */\nmxAutoSaveManager.prototype.autoSaveDelay = 10;\n\n/**\n * Variable: autoSaveThrottle\n * \n * Minimum amount of seconds between two consecutive autosaves triggered by\n * more than <autoSaveThreshhold> changes within a timespan of less than\n * <autoSaveDelay> seconds. Eg. a value of 1 (s) means the graph is not\n * stored more than once per second even if there are more than\n * <autoSaveThreshold> changes within that timespan. Default is 2.\n */\nmxAutoSaveManager.prototype.autoSaveThrottle = 2;\n\n/**\n * Variable: autoSaveThreshold\n * \n * Minimum amount of ignored changes before an autosave. Eg. a value of 2\n * means after 2 change of the graph model the autosave will trigger if the\n * condition below is true. Default is 5.\n */\nmxAutoSaveManager.prototype.autoSaveThreshold = 5;\n\n/**\n * Variable: ignoredChanges\n * \n * Counter for ignored changes in autosave.\n */\nmxAutoSaveManager.prototype.ignoredChanges = 0;\n\n/**\n * Variable: lastSnapshot\n * \n * Used for autosaving. See <autosave>.\n */\nmxAutoSaveManager.prototype.lastSnapshot = 0;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxAutoSaveManager.prototype.enabled = true;\n\n/**\n * Variable: changeHandler\n * \n * Holds the function that handles graph model changes.\n */\nmxAutoSaveManager.prototype.changeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxAutoSaveManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxAutoSaveManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxAutoSaveManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\t}\n};\n\n/**\n * Function: save\n * \n * Empty hook that is called if the graph should be saved.\n */\nmxAutoSaveManager.prototype.save = function()\n{\n\t// empty\n};\n\n/**\n * Function: graphModelChanged\n * \n * Invoked when the graph model has changed.\n */\nmxAutoSaveManager.prototype.graphModelChanged = function(changes)\n{\n\tvar now = new Date().getTime();\n\tvar dt = (now - this.lastSnapshot) / 1000;\n\t\n\tif (dt > this.autoSaveDelay ||\n\t\t(this.ignoredChanges >= this.autoSaveThreshold &&\n\t\t dt > this.autoSaveThrottle))\n\t{\n\t\tthis.save();\n\t\tthis.reset();\n\t}\n\telse\n\t{\n\t\t// Increments the number of ignored changes\n\t\tthis.ignoredChanges++;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets all counters.\n */\nmxAutoSaveManager.prototype.reset = function()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.ignoredChanges = 0;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxAutoSaveManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxAnimation\n * \n * Implements a basic animation in JavaScript.\n * \n * Constructor: mxAnimation\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxAnimation(delay)\n{\n\tthis.delay = (delay != null) ? delay : 20;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxAnimation.prototype = new mxEventSource();\nmxAnimation.prototype.constructor = mxAnimation;\n\n/**\n * Variable: delay\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxAnimation.prototype.delay = null;\n\n/**\n * Variable: thread\n * \n * Reference to the thread while the animation is running.\n */\nmxAnimation.prototype.thread = null;\n\n/**\n * Function: isRunning\n * \n * Returns true if the animation is running.\n */\nmxAnimation.prototype.isRunning = function()\n{\n\treturn this.thread != null;\n};\n\n/**\n * Function: startAnimation\n *\n * Starts the animation by repeatedly invoking updateAnimation.\n */\nmxAnimation.prototype.startAnimation = function()\n{\n\tif (this.thread == null)\n\t{\n\t\tthis.thread = window.setInterval(mxUtils.bind(this, this.updateAnimation), this.delay);\n\t}\n};\n\n/**\n * Function: updateAnimation\n *\n * Hook for subclassers to implement the animation. Invoke stopAnimation\n * when finished, startAnimation to resume. This is called whenever the\n * timer fires and fires an mxEvent.EXECUTE event with no properties.\n */\nmxAnimation.prototype.updateAnimation = function()\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE));\n};\n\n/**\n * Function: stopAnimation\n *\n * Stops the animation by deleting the timer and fires an <mxEvent.DONE>.\n */\nmxAnimation.prototype.stopAnimation = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearInterval(this.thread);\n\t\tthis.thread = null;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.DONE));\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxMorphing\n * \n * Implements animation for morphing cells. Here is an example of\n * using this class for animating the result of a layout algorithm:\n * \n * (code)\n * graph.getModel().beginUpdate();\n * try\n * {\n *   var circleLayout = new mxCircleLayout(graph);\n *   circleLayout.execute(graph.getDefaultParent());\n * }\n * finally\n * {\n *   var morph = new mxMorphing(graph);\n *   morph.addListener(mxEvent.DONE, function()\n *   {\n *     graph.getModel().endUpdate();\n *   });\n *   \n *   morph.startAnimation();\n * }\n * (end)\n * \n * Constructor: mxMorphing\n * \n * Constructs an animation.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * steps - Optional number of steps in the morphing animation. Default is 6.\n * ease - Optional easing constant for the animation. Default is 1.5.\n * delay - Optional delay between the animation steps. Passed to <mxAnimation>.\n */\nfunction mxMorphing(graph, steps, ease, delay)\n{\n\tmxAnimation.call(this, delay);\n\tthis.graph = graph;\n\tthis.steps = (steps != null) ? steps : 6;\n\tthis.ease = (ease != null) ? ease : 1.5;\n};\n\n/**\n * Extends mxEventSource.\n */\nmxMorphing.prototype = new mxAnimation();\nmxMorphing.prototype.constructor = mxMorphing;\n\n/**\n * Variable: graph\n * \n * Specifies the delay between the animation steps. Defaul is 30ms.\n */\nmxMorphing.prototype.graph = null;\n\n/**\n * Variable: steps\n * \n * Specifies the maximum number of steps for the morphing.\n */\nmxMorphing.prototype.steps = null;\n\n/**\n * Variable: step\n * \n * Contains the current step.\n */\nmxMorphing.prototype.step = 0;\n\n/**\n * Variable: ease\n * \n * Ease-off for movement towards the given vector. Larger values are\n * slower and smoother. Default is 4.\n */\nmxMorphing.prototype.ease = null;\n\n/**\n * Variable: cells\n * \n * Optional array of cells to be animated. If this is not specified\n * then all cells are checked and animated if they have been moved\n * in the current transaction.\n */\nmxMorphing.prototype.cells = null;\n\n/**\n * Function: updateAnimation\n *\n * Animation step.\n */\nmxMorphing.prototype.updateAnimation = function()\n{\n\tmxAnimation.prototype.updateAnimation.apply(this, arguments);\n\tvar move = new mxCellStatePreview(this.graph);\n\n\tif (this.cells != null)\n\t{\n\t\t// Animates the given cells individually without recursion\n\t\tfor (var i = 0; i < this.cells.length; i++)\n\t\t{\n\t\t\tthis.animateCell(this.cells[i], move, false);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Animates all changed cells by using recursion to find\n\t\t// the changed cells but not for the animation itself\n\t\tthis.animateCell(this.graph.getModel().getRoot(), move, true);\n\t}\n\t\n\tthis.show(move);\n\t\n\tif (move.isEmpty() || this.step++ >= this.steps)\n\t{\n\t\tthis.stopAnimation();\n\t}\n};\n\n/**\n * Function: show\n *\n * Shows the changes in the given <mxCellStatePreview>.\n */\nmxMorphing.prototype.show = function(move)\n{\n\tmove.show();\n};\n\n/**\n * Function: animateCell\n *\n * Animates the given cell state using <mxCellStatePreview.moveState>.\n */\nmxMorphing.prototype.animateCell = function(cell, move, recurse)\n{\n\tvar state = this.graph.getView().getState(cell);\n\tvar delta = null;\n\n\tif (state != null)\n\t{\n\t\t// Moves the animated state from where it will be after the model\n\t\t// change by subtracting the given delta vector from that location\n\t\tdelta = this.getDelta(state);\n\n\t\tif (this.graph.getModel().isVertex(cell) && (delta.x != 0 || delta.y != 0))\n\t\t{\n\t\t\tvar translate = this.graph.view.getTranslate();\n\t\t\tvar scale = this.graph.view.getScale();\n\t\t\t\n\t\t\tdelta.x += translate.x * scale;\n\t\t\tdelta.y += translate.y * scale;\n\t\t\t\n\t\t\tmove.moveState(state, -delta.x / this.ease, -delta.y / this.ease);\n\t\t}\n\t}\n\t\n\tif (recurse && !this.stopRecursion(state, delta))\n\t{\n\t\tvar childCount = this.graph.getModel().getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.animateCell(this.graph.getModel().getChildAt(cell, i), move, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: stopRecursion\n *\n * Returns true if the animation should not recursively find more\n * deltas for children if the given parent state has been animated.\n */\nmxMorphing.prototype.stopRecursion = function(state, delta)\n{\n\treturn delta != null && (delta.x != 0 || delta.y != 0);\n};\n\n/**\n * Function: getDelta\n *\n * Returns the vector between the current rendered state and the future\n * location of the state after the display will be updated.\n */\nmxMorphing.prototype.getDelta = function(state)\n{\n\tvar origin = this.getOriginForCell(state.cell);\n\tvar translate = this.graph.getView().getTranslate();\n\tvar scale = this.graph.getView().getScale();\n\tvar x = state.x / scale - translate.x;\n\tvar y = state.y / scale - translate.y;\n\n\treturn new mxPoint((origin.x - x) * scale, (origin.y - y) * scale);\n};\n\n/**\n * Function: getOriginForCell\n *\n * Returns the top, left corner of the given cell. TODO: Improve performance\n * by using caching inside this method as the result per cell never changes\n * during the lifecycle of this object.\n */\nmxMorphing.prototype.getOriginForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\tresult = this.getOriginForCell(parent);\n\t\t\n\t\t// TODO: Handle offsets\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (geo.relative)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null)\n\t\t\t\t{\n\t\t\t\t\tresult.x += geo.x * pgeo.width;\n\t\t\t\t\tresult.y += geo.y * pgeo.height;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (result == null)\n\t{\n\t\tvar t = this.graph.view.getTranslate();\n\t\tresult = new mxPoint(-t.x, -t.y);\n\t}\n\t\n\treturn result;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageBundle\n *\n * Maps from keys to base64 encoded images or file locations. All values must\n * be URLs or use the format data:image/format followed by a comma and the base64\n * encoded image data, eg. \"data:image/gif,XYZ\", where XYZ is the base64 encoded\n * image data.\n * \n * To add a new image bundle to an existing graph, the following code is used:\n * \n * (code)\n * var bundle = new mxImageBundle(alt);\n * bundle.putImage('myImage', 'data:image/gif,R0lGODlhEAAQAMIGAAAAAICAAICAgP' +\n *   '//AOzp2O3r2////////yH+FUNyZWF0ZWQgd2l0aCBUaGUgR0lNUAAh+QQBCgAHACwAAAAA' +\n *   'EAAQAAADTXi63AowynnAMDfjPUDlnAAJhmeBFxAEloliKltWmiYCQvfVr6lBPB1ggxN1hi' +\n *   'laSSASFQpIV5HJBDyHpqK2ejVRm2AAgZCdmCGO9CIBADs=', fallback);\n * bundle.putImage('mySvgImage', 'data:image/svg+xml,' + encodeURIComponent(\n *   '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">' +\n *   '<linearGradient id=\"gradient\"><stop offset=\"10%\" stop-color=\"#F00\"/>' +\n *   '<stop offset=\"90%\" stop-color=\"#fcc\"/></linearGradient>' +\n *   '<rect fill=\"url(#gradient)\" width=\"100%\" height=\"100%\"/></svg>'), fallback);\n * graph.addImageBundle(bundle);\n * (end);\n * \n * Alt is an optional boolean (default is false) that specifies if the value\n * or the fallback should be returned in <getImage>.\n * \n * The image can then be referenced in any cell style using image=myImage.\n * If you are using mxOutline, you should use the same image bundles in the\n * graph that renders the outline.\n * \n * The keys for images are resolved in <mxGraph.postProcessCellStyle> and\n * turned into a data URI if the returned value has a short data URI format\n * as specified above.\n * \n * A typical value for the fallback is a MTHML link as defined in RFC 2557.\n * Note that this format requires a file to be dynamically created on the\n * server-side, or the page that contains the graph to be modified to contain\n * the resources, this can be done by adding a comment that contains the\n * resource in the HEAD section of the page after the title tag.\n * \n * This type of fallback mechanism should be used in IE6 and IE7. IE8 does\n * support data URIs, but the maximum size is limited to 32 KB, which means\n * all data URIs should be limited to 32 KB.\n */\nfunction mxImageBundle(alt)\n{\n\tthis.images = [];\n\tthis.alt = (alt != null) ? alt : false;\n};\n\n/**\n * Variable: images\n * \n * Maps from keys to images.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Variable: alt\n * \n * Specifies if the fallback representation should be returned.\n */\nmxImageBundle.prototype.images = null;\n\n/**\n * Function: putImage\n * \n * Adds the specified entry to the map. The entry is an object with a value and\n * fallback property as specified in the arguments.\n */\nmxImageBundle.prototype.putImage = function(key, value, fallback)\n{\n\tthis.images[key] = {value: value, fallback: fallback};\n};\n\n/**\n * Function: getImage\n * \n * Returns the value for the given key. This returns the value\n * or fallback, depending on <alt>. The fallback is returned if\n * <alt> is true, the value is returned otherwise.\n */\nmxImageBundle.prototype.getImage = function(key)\n{\n\tvar result = null;\n\t\n\tif (key != null)\n\t{\n\t\tvar img = this.images[key];\n\t\t\n\t\tif (img != null)\n\t\t{\n\t\t\tresult = (this.alt) ? img.fallback : img.value;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageExport\n * \n * Creates a new image export instance to be used with an export canvas. Here\n * is an example that uses this class to create an image via a backend using\n * <mxXmlExportCanvas>.\n * \n * (code)\n * var xmlDoc = mxUtils.createXmlDocument();\n * var root = xmlDoc.createElement('output');\n * xmlDoc.appendChild(root);\n * \n * var xmlCanvas = new mxXmlCanvas2D(root);\n * var imgExport = new mxImageExport();\n * imgExport.drawState(graph.getView().getState(graph.model.root), xmlCanvas);\n * \n * var bounds = graph.getGraphBounds();\n * var w = Math.ceil(bounds.x + bounds.width);\n * var h = Math.ceil(bounds.y + bounds.height);\n * \n * var xml = mxUtils.getXml(root);\n * new mxXmlRequest('export', 'format=png&w=' + w +\n * \t\t'&h=' + h + '&bg=#F9F7ED&xml=' + encodeURIComponent(xml))\n * \t\t.simulate(document, '_blank');\n * (end)\n * \n * Constructor: mxImageExport\n * \n * Constructs a new image export.\n */\nfunction mxImageExport() { };\n\n/**\n * Variable: includeOverlays\n * \n * Specifies if overlays should be included in the export. Default is false.\n */\nmxImageExport.prototype.includeOverlays = false;\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.drawState = function(state, canvas)\n{\n\tif (state != null)\n\t{\n\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.drawCellState.apply(this, arguments);\n\t\t}));\n\t\t\t\t\n\t\t// Paints the overlays\n\t\tif (this.includeOverlays)\n\t\t{\n\t\t\tthis.visitStatesRecursive(state, canvas, mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.drawOverlays.apply(this, arguments);\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Function: drawState\n * \n * Draws the given state and all its descendants to the given canvas.\n */\nmxImageExport.prototype.visitStatesRecursive = function(state, canvas, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvisitor(state, canvas);\n\t\t\n\t\tvar graph = state.view.graph;\n\t\tvar childCount = graph.model.getChildCount(state.cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar childState = graph.view.getState(graph.model.getChildAt(state.cell, i));\n\t\t\tthis.visitStatesRecursive(childState, canvas, visitor);\n\t\t}\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state and canvas. This returns null.\n */\nmxImageExport.prototype.getLinkForCellState = function(state, canvas)\n{\n\treturn null;\n};\n\n/**\n * Function: drawCellState\n * \n * Draws the given state to the given canvas.\n */\nmxImageExport.prototype.drawCellState = function(state, canvas)\n{\n\t// Experimental feature\n\tvar link = this.getLinkForCellState(state, canvas);\n\t\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(link);\n\t}\n\t\n\t// Paints the shape and text\n\tthis.drawShape(state, canvas);\n\tthis.drawText(state, canvas);\n\n\tif (link != null)\n\t{\n\t\tcanvas.setLink(null);\n\t}\n};\n\n/**\n * Function: drawShape\n * \n * Draws the shape of the given state.\n */\nmxImageExport.prototype.drawShape = function(state, canvas)\n{\n\tif (state.shape instanceof mxShape && state.shape.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.shape.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawText\n * \n * Draws the text of the given state.\n */\nmxImageExport.prototype.drawText = function(state, canvas)\n{\n\tif (state.text != null && state.text.checkBounds())\n\t{\n\t\tcanvas.save();\n\t\tstate.text.paint(canvas);\n\t\tcanvas.restore();\n\t}\n};\n\n/**\n * Function: drawOverlays\n * \n * Draws the overlays for the given state. This is called if <includeOverlays>\n * is true.\n */\nmxImageExport.prototype.drawOverlays = function(state, canvas)\n{\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tif (shape instanceof mxShape)\n\t\t\t{\n\t\t\t\tshape.paint(canvas);\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxAbstractCanvas2D\n *\n * Base class for all canvases. A description of the public API is available in <mxXmlCanvas2D>.\n * All color values of <mxConstants.NONE> will be converted to null in the state.\n * \n * Constructor: mxAbstractCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxAbstractCanvas2D()\n{\n\t/**\n\t * Variable: converter\n\t * \n\t * Holds the <mxUrlConverter> to convert image URLs.\n\t */\n\tthis.converter = this.createUrlConverter();\n\t\n\tthis.reset();\n};\n\n/**\n * Variable: state\n * \n * Holds the current state.\n */\nmxAbstractCanvas2D.prototype.state = null;\n\n/**\n * Variable: states\n * \n * Stack of states.\n */\nmxAbstractCanvas2D.prototype.states = null;\n\n/**\n * Variable: path\n * \n * Holds the current path as an array.\n */\nmxAbstractCanvas2D.prototype.path = null;\n\n/**\n * Variable: rotateHtml\n * \n * Switch for rotation of HTML. Default is false.\n */\nmxAbstractCanvas2D.prototype.rotateHtml = true;\n\n/**\n * Variable: lastX\n * \n * Holds the last x coordinate.\n */\nmxAbstractCanvas2D.prototype.lastX = 0;\n\n/**\n * Variable: lastY\n * \n * Holds the last y coordinate.\n */\nmxAbstractCanvas2D.prototype.lastY = 0;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'M'.\n */\nmxAbstractCanvas2D.prototype.moveOp = 'M';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'L'.\n */\nmxAbstractCanvas2D.prototype.lineOp = 'L';\n\n/**\n * Variable: quadOp\n * \n * Contains the string used for quadratic paths. Default is 'Q'.\n */\nmxAbstractCanvas2D.prototype.quadOp = 'Q';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'C'.\n */\nmxAbstractCanvas2D.prototype.curveOp = 'C';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'Z'.\n */\nmxAbstractCanvas2D.prototype.closeOp = 'Z';\n\n/**\n * Variable: pointerEvents\n * \n * Boolean value that specifies if events should be handled. Default is false.\n */\nmxAbstractCanvas2D.prototype.pointerEvents = false;\n\n/**\n * Function: createUrlConverter\n * \n * Create a new <mxUrlConverter> and returns it.\n */\nmxAbstractCanvas2D.prototype.createUrlConverter = function()\n{\n\treturn new mxUrlConverter();\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this canvas.\n */\nmxAbstractCanvas2D.prototype.reset = function()\n{\n\tthis.state = this.createState();\n\tthis.states = [];\n};\n\n/**\n * Function: createState\n * \n * Creates the state of the this canvas.\n */\nmxAbstractCanvas2D.prototype.createState = function()\n{\n\treturn {\n\t\tdx: 0,\n\t\tdy: 0,\n\t\tscale: 1,\n\t\talpha: 1,\n\t\tfillAlpha: 1,\n\t\tstrokeAlpha: 1,\n\t\tfillColor: null,\n\t\tgradientFillAlpha: 1,\n\t\tgradientColor: null,\n\t\tgradientAlpha: 1,\n\t\tgradientDirection: null,\n\t\tstrokeColor: null,\n\t\tstrokeWidth: 1,\n\t\tdashed: false,\n\t\tdashPattern: '3 3',\n\t\tfixDash: false,\n\t\tlineCap: 'flat',\n\t\tlineJoin: 'miter',\n\t\tmiterLimit: 10,\n\t\tfontColor: '#000000',\n\t\tfontBackgroundColor: null,\n\t\tfontBorderColor: null,\n\t\tfontSize: mxConstants.DEFAULT_FONTSIZE,\n\t\tfontFamily: mxConstants.DEFAULT_FONTFAMILY,\n\t\tfontStyle: 0,\n\t\tshadow: false,\n\t\tshadowColor: mxConstants.SHADOWCOLOR,\n\t\tshadowAlpha: mxConstants.SHADOW_OPACITY,\n\t\tshadowDx: mxConstants.SHADOW_OFFSET_X,\n\t\tshadowDy: mxConstants.SHADOW_OFFSET_Y,\n\t\trotation: 0,\n\t\trotationCx: 0,\n\t\trotationCy: 0\n\t};\n};\n\n/**\n * Function: format\n * \n * Rounds all numbers to integers.\n */\nmxAbstractCanvas2D.prototype.format = function(value)\n{\n\treturn Math.round(parseFloat(value));\n};\n\n/**\n * Function: addOp\n * \n * Adds the given operation to the path.\n */\nmxAbstractCanvas2D.prototype.addOp = function()\n{\n\tif (this.path != null)\n\t{\n\t\tthis.path.push(arguments[0]);\n\t\t\n\t\tif (arguments.length > 2)\n\t\t{\n\t\t\tvar s = this.state;\n\n\t\t\tfor (var i = 2; i < arguments.length; i += 2)\n\t\t\t{\n\t\t\t\tthis.lastX = arguments[i - 1];\n\t\t\t\tthis.lastY = arguments[i];\n\t\t\t\t\n\t\t\t\tthis.path.push(this.format((this.lastX + s.dx) * s.scale));\n\t\t\t\tthis.path.push(this.format((this.lastY + s.dy) * s.scale));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the given point and returns the result as an <mxPoint>.\n */\nmxAbstractCanvas2D.prototype.rotatePoint = function(x, y, theta, cx, cy)\n{\n\tvar rad = theta * (Math.PI / 180);\n\t\n\treturn mxUtils.getRotatedPoint(new mxPoint(x, y), Math.cos(rad),\n\t\tMath.sin(rad), new mxPoint(cx, cy));\n};\n\n/**\n * Function: save\n * \n * Saves the current state.\n */\nmxAbstractCanvas2D.prototype.save = function()\n{\n\tthis.states.push(this.state);\n\tthis.state = mxUtils.clone(this.state);\n};\n\n/**\n * Function: restore\n * \n * Restores the current state.\n */\nmxAbstractCanvas2D.prototype.restore = function()\n{\n\tif (this.states.length > 0)\n\t{\n\t\tthis.state = this.states.pop();\n\t}\n};\n\n/**\n * Function: setLink\n * \n * Sets the current link. Hook for subclassers.\n */\nmxAbstractCanvas2D.prototype.setLink = function(link)\n{\n\t// nop\n};\n\n/**\n * Function: scale\n * \n * Scales the current state.\n */\nmxAbstractCanvas2D.prototype.scale = function(value)\n{\n\tthis.state.scale *= value;\n\tthis.state.strokeWidth *= value;\n};\n\n/**\n * Function: translate\n * \n * Translates the current state.\n */\nmxAbstractCanvas2D.prototype.translate = function(dx, dy)\n{\n\tthis.state.dx += dx;\n\tthis.state.dy += dy;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the current state.\n */\nmxAbstractCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\t// nop\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n */\nmxAbstractCanvas2D.prototype.setAlpha = function(value)\n{\n\tthis.state.alpha = value;\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current solid fill alpha.\n */\nmxAbstractCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tthis.state.fillAlpha = value;\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n */\nmxAbstractCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tthis.state.strokeAlpha = value;\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n */\nmxAbstractCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fillColor = value;\n\tthis.state.gradientColor = null;\n};\n\n/**\n * Function: setGradient\n * \n * Sets the current gradient.\n */\nmxAbstractCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tvar s = this.state;\n\ts.fillColor = color1;\n\ts.gradientFillAlpha = (alpha1 != null) ? alpha1 : 1;\n\ts.gradientColor = color2;\n\ts.gradientAlpha = (alpha2 != null) ? alpha2 : 1;\n\ts.gradientDirection = direction;\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n */\nmxAbstractCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.strokeColor = value;\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n */\nmxAbstractCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tthis.state.strokeWidth = value;\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n */\nmxAbstractCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tthis.state.dashed = value;\n\tthis.state.fixDash = fixDash;\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern.\n */\nmxAbstractCanvas2D.prototype.setDashPattern = function(value)\n{\n\tthis.state.dashPattern = value;\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the current line cap.\n */\nmxAbstractCanvas2D.prototype.setLineCap = function(value)\n{\n\tthis.state.lineCap = value;\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the current line join.\n */\nmxAbstractCanvas2D.prototype.setLineJoin = function(value)\n{\n\tthis.state.lineJoin = value;\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the current miter limit.\n */\nmxAbstractCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tthis.state.miterLimit = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBackgroundColor = value;\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color.\n */\nmxAbstractCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.fontBorderColor = value;\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size.\n */\nmxAbstractCanvas2D.prototype.setFontSize = function(value)\n{\n\tthis.state.fontSize = parseFloat(value);\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family.\n */\nmxAbstractCanvas2D.prototype.setFontFamily = function(value)\n{\n\tthis.state.fontFamily = value;\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n */\nmxAbstractCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (value == null)\n\t{\n\t\tvalue = 0;\n\t}\n\t\n\tthis.state.fontStyle = value;\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadow = function(enabled)\n{\n\tthis.state.shadow = enabled;\n};\n\n/**\n * Function: setShadowColor\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tthis.state.shadowColor = value;\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tthis.state.shadowAlpha = value;\n};\n\n/**\n * Function: setShadowOffset\n * \n * Enables or disables and configures the current shadow.\n */\nmxAbstractCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tthis.state.shadowDx = dx;\n\tthis.state.shadowDy = dy;\n};\n\n/**\n * Function: begin\n * \n * Starts a new path.\n */\nmxAbstractCanvas2D.prototype.begin = function()\n{\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n\tthis.path = [];\n};\n\n/**\n * Function: moveTo\n * \n *  Moves the current path the given coordinates.\n */\nmxAbstractCanvas2D.prototype.moveTo = function(x, y)\n{\n\tthis.addOp(this.moveOp, x, y);\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates. Uses moveTo with the op argument.\n */\nmxAbstractCanvas2D.prototype.lineTo = function(x, y)\n{\n\tthis.addOp(this.lineOp, x, y);\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n */\nmxAbstractCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tthis.addOp(this.quadOp, x1, y1, x2, y2);\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n */\nmxAbstractCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.curveOp, x1, y1, x2, y2, x3, y3);\n};\n\n/**\n * Function: arcTo\n * \n * Adds the given arc to the current path. This is a synthetic operation that\n * is broken down into curves.\n */\nmxAbstractCanvas2D.prototype.arcTo = function(rx, ry, angle, largeArcFlag, sweepFlag, x, y)\n{\n\tvar curves = mxUtils.arcToCurves(this.lastX, this.lastY, rx, ry, angle, largeArcFlag, sweepFlag, x, y);\n\t\n\tif (curves != null)\n\t{\n\t\tfor (var i = 0; i < curves.length; i += 6) \n\t\t{\n\t\t\tthis.curveTo(curves[i], curves[i + 1], curves[i + 2],\n\t\t\t\tcurves[i + 3], curves[i + 4], curves[i + 5]);\n\t\t}\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxAbstractCanvas2D.prototype.close = function(x1, y1, x2, y2, x3, y3)\n{\n\tthis.addOp(this.closeOp);\n};\n\n/**\n * Function: end\n * \n * Empty implementation for backwards compatibility. This will be removed.\n */\nmxAbstractCanvas2D.prototype.end = function() { };\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxXmlCanvas2D\n *\n * Base class for all canvases. The following methods make up the public\n * interface of the canvas 2D for all painting in mxGraph:\n * \n * - <save>, <restore>\n * - <scale>, <translate>, <rotate>\n * - <setAlpha>, <setFillAlpha>, <setStrokeAlpha>, <setFillColor>, <setGradient>,\n *   <setStrokeColor>, <setStrokeWidth>, <setDashed>, <setDashPattern>, <setLineCap>, \n *   <setLineJoin>, <setMiterLimit>\n * - <setFontColor>, <setFontBackgroundColor>, <setFontBorderColor>, <setFontSize>,\n *   <setFontFamily>, <setFontStyle>\n * - <setShadow>, <setShadowColor>, <setShadowAlpha>, <setShadowOffset>\n * - <rect>, <roundrect>, <ellipse>, <image>, <text>\n * - <begin>, <moveTo>, <lineTo>, <quadTo>, <curveTo>\n * - <stroke>, <fill>, <fillAndStroke>\n * \n * <mxAbstractCanvas2D.arcTo> is an additional method for drawing paths. This is\n * a synthetic method, meaning that it is turned into a sequence of curves by\n * default. Subclassers may add native support for arcs.\n * \n * Constructor: mxXmlCanvas2D\n *\n * Constructs a new abstract canvas.\n */\nfunction mxXmlCanvas2D(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t// Writes default settings;\n\tthis.writeDefaults();\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxXmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxXmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: compressed\n * \n * Specifies if the output should be compressed by removing redundant calls.\n * Default is true.\n */\nmxXmlCanvas2D.prototype.compressed = true;\n\n/**\n * Function: writeDefaults\n * \n * Writes the rendering defaults to <root>:\n */\nmxXmlCanvas2D.prototype.writeDefaults = function()\n{\n\tvar elem;\n\t\n\t// Writes font defaults\n\telem = this.createElement('fontfamily');\n\telem.setAttribute('family', mxConstants.DEFAULT_FONTFAMILY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('fontsize');\n\telem.setAttribute('size', mxConstants.DEFAULT_FONTSIZE);\n\tthis.root.appendChild(elem);\n\t\n\t// Writes shadow defaults\n\telem = this.createElement('shadowcolor');\n\telem.setAttribute('color', mxConstants.SHADOWCOLOR);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', mxConstants.SHADOW_OPACITY);\n\tthis.root.appendChild(elem);\n\t\n\telem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', mxConstants.SHADOW_OFFSET_X);\n\telem.setAttribute('dy', mxConstants.SHADOW_OFFSET_Y);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: format\n * \n * Returns a formatted number with 2 decimal places.\n */\nmxXmlCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: createElement\n * \n * Creates the given element using the owner document of <root>.\n */\nmxXmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn this.root.ownerDocument.createElement(name);\n};\n\n/**\n * Function: save\n * \n * Saves the drawing state.\n */\nmxXmlCanvas2D.prototype.save = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.save.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('save'));\n};\n\n/**\n * Function: restore\n * \n * Restores the drawing state.\n */\nmxXmlCanvas2D.prototype.restore = function()\n{\n\tif (this.compressed)\n\t{\n\t\tmxAbstractCanvas2D.prototype.restore.apply(this, arguments);\n\t}\n\t\n\tthis.root.appendChild(this.createElement('restore'));\n};\n\n/**\n * Function: scale\n * \n * Scales the output.\n * \n * Parameters:\n * \n * scale - Number that represents the scale where 1 is equal to 100%.\n */\nmxXmlCanvas2D.prototype.scale = function(value)\n{\n        var elem = this.createElement('scale');\n        elem.setAttribute('scale', value);\n        this.root.appendChild(elem);\n};\n\n/**\n * Function: translate\n * \n * Translates the output.\n * \n * Parameters:\n * \n * dx - Number that specifies the horizontal translation.\n * dy - Number that specifies the vertical translation.\n */\nmxXmlCanvas2D.prototype.translate = function(dx, dy)\n{\n\tvar elem = this.createElement('translate');\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: rotate\n * \n * Rotates and/or flips the output around a given center. (Note: Due to\n * limitations in VML, the rotation cannot be concatenated.)\n * \n * Parameters:\n * \n * theta - Number that represents the angle of the rotation (in degrees).\n * flipH - Boolean indicating if the output should be flipped horizontally.\n * flipV - Boolean indicating if the output should be flipped vertically.\n * cx - Number that represents the x-coordinate of the rotation center.\n * cy - Number that represents the y-coordinate of the rotation center.\n */\nmxXmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tvar elem = this.createElement('rotate');\n\t\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\telem.setAttribute('theta', this.format(theta));\n\t\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\t\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\t\telem.setAttribute('cx', this.format(cx));\n\t\telem.setAttribute('cy', this.format(cy));\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setAlpha\n * \n * Sets the current alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.alpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('alpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillAlpha\n * \n * Sets the current fill alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new fill alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setFillAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillalpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeAlpha\n * \n * Sets the current stroke alpha.\n * \n * Parameters:\n * \n * value - Number that represents the new stroke alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setStrokeAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokealpha');\n\telem.setAttribute('alpha', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFillColor\n * \n * Sets the current fill color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFillColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.fillColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setFillColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('fillcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setGradient\n * \n * Sets the gradient. Note that the coordinates may be ignored by some implementations.\n * \n * Parameters:\n * \n * color1 - Hexadecimal representation of the start color.\n * color2 - Hexadecimal representation of the end color.\n * x - X-coordinate of the gradient region.\n * y - y-coordinate of the gradient region.\n * w - Width of the gradient region.\n * h - Height of the gradient region.\n * direction - One of <mxConstants.DIRECTION_NORTH>, <mxConstants.DIRECTION_EAST>,\n * <mxConstants.DIRECTION_SOUTH> or <mxConstants.DIRECTION_WEST>.\n * alpha1 - Optional alpha of the start color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n * alpha2 - Optional alpha of the end color. Default is 1. Possible values\n * are between 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setGradient = function(color1, color2, x, y, w, h, direction, alpha1, alpha2)\n{\n\tif (color1 != null && color2 != null)\n\t{\n\t\tmxAbstractCanvas2D.prototype.setGradient.apply(this, arguments);\n\t\t\n\t\tvar elem = this.createElement('gradient');\n\t\telem.setAttribute('c1', color1);\n\t\telem.setAttribute('c2', color2);\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\t\n\t\t// Default direction is south\n\t\tif (direction != null)\n\t\t{\n\t\t\telem.setAttribute('direction', direction);\n\t\t}\n\t\t\n\t\tif (alpha1 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha1', alpha1);\n\t\t}\n\t\t\n\t\tif (alpha2 != null)\n\t\t{\n\t\t\telem.setAttribute('alpha2', alpha2);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setStrokeColor\n * \n * Sets the current stroke color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setStrokeColor = function(value)\n{\n\tif (value == mxConstants.NONE)\n\t{\n\t\tvalue = null;\n\t}\n\t\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokecolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setStrokeWidth\n * \n * Sets the current stroke width.\n * \n * Parameters:\n * \n * value - Numeric representation of the stroke width.\n */\nmxXmlCanvas2D.prototype.setStrokeWidth = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.strokeWidth == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setStrokeWidth.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('strokewidth');\n\telem.setAttribute('width', this.format(value));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashed\n * \n * Enables or disables dashed lines.\n * \n * Parameters:\n * \n * value - Boolean that specifies if dashed lines should be enabled.\n * value - Boolean that specifies if the stroke width should be ignored\n * for the dash pattern. Default is false.\n */\nmxXmlCanvas2D.prototype.setDashed = function(value, fixDash)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashed == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashed.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashed');\n\telem.setAttribute('dashed', (value) ? '1' : '0');\n\t\n\tif (fixDash != null)\n\t{\n\t\telem.setAttribute('fixDash', (fixDash) ? '1' : '0');\n\t}\n\t\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setDashPattern\n * \n * Sets the current dash pattern. Default is '3 3'.\n * \n * Parameters:\n * \n * value - String that represents the dash pattern, which is a sequence of\n * numbers defining the length of the dashes and the length of the spaces\n * between the dashes. The lengths are relative to the line width - a length\n * of 1 is equals to the line width.\n */\nmxXmlCanvas2D.prototype.setDashPattern = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.dashPattern == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setDashPattern.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('dashpattern');\n\telem.setAttribute('pattern', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineCap\n * \n * Sets the line cap. Default is 'flat' which corresponds to 'butt' in SVG.\n * \n * Parameters:\n * \n * value - String that represents the line cap. Possible values are flat, round\n * and square.\n */\nmxXmlCanvas2D.prototype.setLineCap = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineCap == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineCap.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linecap');\n\telem.setAttribute('cap', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setLineJoin\n * \n * Sets the line join. Default is 'miter'.\n * \n * Parameters:\n * \n * value - String that represents the line join. Possible values are miter,\n * round and bevel.\n */\nmxXmlCanvas2D.prototype.setLineJoin = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.lineJoin == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setLineJoin.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('linejoin');\n\telem.setAttribute('join', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setMiterLimit\n * \n * Sets the miter limit. Default is 10.\n * \n * Parameters:\n * \n * value - Number that represents the miter limit.\n */\nmxXmlCanvas2D.prototype.setMiterLimit = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.miterLimit == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setMiterLimit.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('miterlimit');\n\telem.setAttribute('limit', value);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setFontColor\n * \n * Sets the current font color. Default is '#000000'.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBackgroundColor\n * \n * Sets the current font background color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBackgroundColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBackgroundColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBackgroundColor.apply(this, arguments);\n\t\t}\n\n\t\tvar elem = this.createElement('fontbackgroundcolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontBorderColor\n * \n * Sets the current font border color.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setFontBorderColor = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontBorderColor == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontBorderColor.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontbordercolor');\n\t\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontSize\n * \n * Sets the current font size. Default is <mxConstants.DEFAULT_FONTSIZE>.\n * \n * Parameters:\n * \n * value - Numeric representation of the font size.\n */\nmxXmlCanvas2D.prototype.setFontSize = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontSize == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontSize.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontsize');\n\t\telem.setAttribute('size', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontFamily\n * \n * Sets the current font family. Default is <mxConstants.DEFAULT_FONTFAMILY>.\n * \n * Parameters:\n * \n * value - String representation of the font family. This handles the same\n * values as the CSS font-family property.\n */\nmxXmlCanvas2D.prototype.setFontFamily = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontFamily == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontFamily.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontfamily');\n\t\telem.setAttribute('family', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setFontStyle\n * \n * Sets the current font style.\n * \n * Parameters:\n * \n * value - Numeric representation of the font family. This is the sum of the\n * font styles from <mxConstants>.\n */\nmxXmlCanvas2D.prototype.setFontStyle = function(value)\n{\n\tif (this.textEnabled)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t\t\n\t\tif (this.compressed)\n\t\t{\n\t\t\tif (this.state.fontStyle == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tmxAbstractCanvas2D.prototype.setFontStyle.apply(this, arguments);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('fontstyle');\n\t\telem.setAttribute('style', value);\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: setShadow\n * \n * Enables or disables shadows.\n * \n * Parameters:\n * \n * value - Boolean that specifies if shadows should be enabled.\n */\nmxXmlCanvas2D.prototype.setShadow = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadow == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadow.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadow');\n\telem.setAttribute('enabled', (value) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowColor\n * \n * Sets the current shadow color. Default is <mxConstants.SHADOWCOLOR>.\n * \n * Parameters:\n * \n * value - Hexadecimal representation of the color or 'none'.\n */\nmxXmlCanvas2D.prototype.setShadowColor = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (value == mxConstants.NONE)\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\tif (this.state.shadowColor == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowColor.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowcolor');\n\telem.setAttribute('color', (value != null) ? value : mxConstants.NONE);\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: setShadowAlpha\n * \n * Sets the current shadows alpha. Default is <mxConstants.SHADOW_OPACITY>.\n * \n * Parameters:\n * \n * value - Number that represents the new alpha. Possible values are between\n * 1 (opaque) and 0 (transparent).\n */\nmxXmlCanvas2D.prototype.setShadowAlpha = function(value)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowAlpha == value)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowAlpha.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowalpha');\n\telem.setAttribute('alpha', value);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: setShadowOffset\n * \n * Sets the current shadow offset.\n * \n * Parameters:\n * \n * dx - Number that represents the horizontal offset of the shadow.\n * dy - Number that represents the vertical offset of the shadow.\n */\nmxXmlCanvas2D.prototype.setShadowOffset = function(dx, dy)\n{\n\tif (this.compressed)\n\t{\n\t\tif (this.state.shadowDx == dx && this.state.shadowDy == dy)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxAbstractCanvas2D.prototype.setShadowOffset.apply(this, arguments);\n\t}\n\t\n\tvar elem = this.createElement('shadowoffset');\n\telem.setAttribute('dx', dx);\n\telem.setAttribute('dy', dy);\n\tthis.root.appendChild(elem);\n\t\n};\n\n/**\n * Function: rect\n * \n * Puts a rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n */\nmxXmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar elem = this.createElement('rect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: roundrect\n * \n * Puts a rounded rectangle into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the rectangle.\n * y - Number that represents the y-coordinate of the rectangle.\n * w - Number that represents the width of the rectangle.\n * h - Number that represents the height of the rectangle.\n * dx - Number that represents the horizontal rounding.\n * dy - Number that represents the vertical rounding.\n */\nmxXmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tvar elem = this.createElement('roundrect');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('dx', this.format(dx));\n\telem.setAttribute('dy', this.format(dy));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: ellipse\n * \n * Puts an ellipse into the drawing buffer.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the ellipse.\n * y - Number that represents the y-coordinate of the ellipse.\n * w - Number that represents the width of the ellipse.\n * h - Number that represents the height of the ellipse.\n */\nmxXmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar elem = this.createElement('ellipse');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the image.\n * y - Number that represents the y-coordinate of the image.\n * w - Number that represents the width of the image.\n * h - Number that represents the height of the image.\n * src - String that specifies the URL of the image.\n * aspect - Boolean indicating if the aspect of the image should be preserved.\n * flipH - Boolean indicating if the image should be flipped horizontally.\n * flipV - Boolean indicating if the image should be flipped vertically.\n */\nmxXmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\tvar elem = this.createElement('image');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\telem.setAttribute('w', this.format(w));\n\telem.setAttribute('h', this.format(h));\n\telem.setAttribute('src', src);\n\telem.setAttribute('aspect', (aspect) ? '1' : '0');\n\telem.setAttribute('flipH', (flipH) ? '1' : '0');\n\telem.setAttribute('flipV', (flipV) ? '1' : '0');\n\tthis.root.appendChild(elem);\n};\n\n/**\n * Function: begin\n * \n * Starts a new path and puts it into the drawing buffer.\n */\nmxXmlCanvas2D.prototype.begin = function()\n{\n\tthis.root.appendChild(this.createElement('begin'));\n\tthis.lastX = 0;\n\tthis.lastY = 0;\n};\n\n/**\n * Function: moveTo\n * \n * Moves the current path the given point.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the point.\n * y - Number that represents the y-coordinate of the point.\n */\nmxXmlCanvas2D.prototype.moveTo = function(x, y)\n{\n\tvar elem = this.createElement('move');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: lineTo\n * \n * Draws a line to the given coordinates.\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the endpoint.\n * y - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.lineTo = function(x, y)\n{\n\tvar elem = this.createElement('line');\n\telem.setAttribute('x', this.format(x));\n\telem.setAttribute('y', this.format(y));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x;\n\tthis.lastY = y;\n};\n\n/**\n * Function: quadTo\n * \n * Adds a quadratic curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the control point.\n * y1 - Number that represents the y-coordinate of the control point.\n * x2 - Number that represents the x-coordinate of the endpoint.\n * y2 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar elem = this.createElement('quad');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x2;\n\tthis.lastY = y2;\n};\n\n/**\n * Function: curveTo\n * \n * Adds a bezier curve to the current path.\n * \n * Parameters:\n * \n * x1 - Number that represents the x-coordinate of the first control point.\n * y1 - Number that represents the y-coordinate of the first control point.\n * x2 - Number that represents the x-coordinate of the second control point.\n * y2 - Number that represents the y-coordinate of the second control point.\n * x3 - Number that represents the x-coordinate of the endpoint.\n * y3 - Number that represents the y-coordinate of the endpoint.\n */\nmxXmlCanvas2D.prototype.curveTo = function(x1, y1, x2, y2, x3, y3)\n{\n\tvar elem = this.createElement('curve');\n\telem.setAttribute('x1', this.format(x1));\n\telem.setAttribute('y1', this.format(y1));\n\telem.setAttribute('x2', this.format(x2));\n\telem.setAttribute('y2', this.format(y2));\n\telem.setAttribute('x3', this.format(x3));\n\telem.setAttribute('y3', this.format(y3));\n\tthis.root.appendChild(elem);\n\tthis.lastX = x3;\n\tthis.lastY = y3;\n};\n\n/**\n * Function: close\n * \n * Closes the current path.\n */\nmxXmlCanvas2D.prototype.close = function()\n{\n\tthis.root.appendChild(this.createElement('close'));\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup. Background and border color as well\n * as clipping is not available in plain text labels for VML. HTML labels\n * are not available as part of shapes with no foreignObject support in SVG\n * (eg. IE9, IE10).\n * \n * Parameters:\n * \n * x - Number that represents the x-coordinate of the text.\n * y - Number that represents the y-coordinate of the text.\n * w - Number that represents the available width for the text or 0 for automatic width.\n * h - Number that represents the available height for the text or 0 for automatic height.\n * str - String that specifies the text to be painted.\n * align - String that represents the horizontal alignment.\n * valign - String that represents the vertical alignment.\n * wrap - Boolean that specifies if word-wrapping is enabled. Requires w > 0.\n * format - Empty string for plain text or 'html' for HTML markup.\n * overflow - Specifies the overflow behaviour of the label. Requires w > 0 and/or h > 0.\n * clip - Boolean that specifies if the label should be clipped. Requires w > 0 and/or h > 0.\n * rotation - Number that specifies the angle of the rotation around the anchor point of the text.\n * dir - Optional string that specifies the text direction. Possible values are rtl and lrt.\n */\nmxXmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tif (mxUtils.isNode(str))\n\t\t{\n\t\t\tstr = mxUtils.getOuterHtml(str);\n\t\t}\n\t\t\n\t\tvar elem = this.createElement('text');\n\t\telem.setAttribute('x', this.format(x));\n\t\telem.setAttribute('y', this.format(y));\n\t\telem.setAttribute('w', this.format(w));\n\t\telem.setAttribute('h', this.format(h));\n\t\telem.setAttribute('str', str);\n\t\t\n\t\tif (align != null)\n\t\t{\n\t\t\telem.setAttribute('align', align);\n\t\t}\n\t\t\n\t\tif (valign != null)\n\t\t{\n\t\t\telem.setAttribute('valign', valign);\n\t\t}\n\t\t\n\t\telem.setAttribute('wrap', (wrap) ? '1' : '0');\n\t\t\n\t\tif (format == null)\n\t\t{\n\t\t\tformat = '';\n\t\t}\n\t\t\n\t\telem.setAttribute('format', format);\n\t\t\n\t\tif (overflow != null)\n\t\t{\n\t\t\telem.setAttribute('overflow', overflow);\n\t\t}\n\t\t\n\t\tif (clip != null)\n\t\t{\n\t\t\telem.setAttribute('clip', (clip) ? '1' : '0');\n\t\t}\n\t\t\n\t\tif (rotation != null)\n\t\t{\n\t\t\telem.setAttribute('rotation', rotation);\n\t\t}\n\t\t\n\t\tif (dir != null)\n\t\t{\n\t\t\telem.setAttribute('dir', dir);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(elem);\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.stroke = function()\n{\n\tthis.root.appendChild(this.createElement('stroke'));\n};\n\n/**\n * Function: fill\n * \n * Fills the current drawing buffer.\n */\nmxXmlCanvas2D.prototype.fill = function()\n{\n\tthis.root.appendChild(this.createElement('fill'));\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills the current drawing buffer and its outline.\n */\nmxXmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.root.appendChild(this.createElement('fillstroke'));\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSvgCanvas2D\n *\n * Extends <mxAbstractCanvas2D> to implement a canvas for SVG. This canvas writes all\n * calls as SVG output to the given SVG root node.\n * \n * (code)\n * var svgDoc = mxUtils.createXmlDocument();\n * var root = (svgDoc.createElementNS != null) ?\n * \t\tsvgDoc.createElementNS(mxConstants.NS_SVG, 'svg') : svgDoc.createElement('svg');\n * \n * if (svgDoc.createElementNS == null)\n * {\n *   root.setAttribute('xmlns', mxConstants.NS_SVG);\n *   root.setAttribute('xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * else\n * {\n *   root.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:xlink', mxConstants.NS_XLINK);\n * }\n * \n * var bounds = graph.getGraphBounds();\n * root.setAttribute('width', (bounds.x + bounds.width + 4) + 'px');\n * root.setAttribute('height', (bounds.y + bounds.height + 4) + 'px');\n * root.setAttribute('version', '1.1');\n * \n * svgDoc.appendChild(root);\n * \n * var svgCanvas = new mxSvgCanvas2D(root);\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>.\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * graph.view.canvas.ownerSVGElement.setAttribute('shape-rendering', 'crispEdges');\n * (end)\n * \n * Or set the respective attribute in the SVG element directly.\n * \n * Constructor: mxSvgCanvas2D\n *\n * Constructs a new SVG canvas.\n * \n * Parameters:\n * \n * root - SVG container for the output.\n * styleEnabled - Optional boolean that specifies if a style section should be\n * added. The style section sets the default font-size, font-family and\n * stroke-miterlimit globally. Default is false.\n */\nfunction mxSvgCanvas2D(root, styleEnabled)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n\n\t/**\n\t * Variable: gradients\n\t * \n\t * Local cache of gradients for quick lookups.\n\t */\n\tthis.gradients = [];\n\n\t/**\n\t * Variable: defs\n\t * \n\t * Reference to the defs section of the SVG document. Only for export.\n\t */\n\tthis.defs = null;\n\t\n\t/**\n\t * Variable: styleEnabled\n\t * \n\t * Stores the value of styleEnabled passed to the constructor.\n\t */\n\tthis.styleEnabled = (styleEnabled != null) ? styleEnabled : false;\n\t\n\tvar svg = null;\n\t\n\t// Adds optional defs section for export\n\tif (root.ownerDocument != document)\n\t{\n\t\tvar node = root;\n\n\t\t// Finds owner SVG element in XML DOM\n\t\twhile (node != null && node.nodeName != 'svg')\n\t\t{\n\t\t\tnode = node.parentNode;\n\t\t}\n\t\t\n\t\tsvg = node;\n\t}\n\n\tif (svg != null)\n\t{\n\t\t// Tries to get existing defs section\n\t\tvar tmp = svg.getElementsByTagName('defs');\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tthis.defs = svg.getElementsByTagName('defs')[0];\n\t\t}\n\t\t\n\t\t// Adds defs section if none exists\n\t\tif (this.defs == null)\n\t\t{\n\t\t\tthis.defs = this.createElement('defs');\n\t\t\t\n\t\t\tif (svg.firstChild != null)\n\t\t\t{\n\t\t\t\tsvg.insertBefore(this.defs, svg.firstChild);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(this.defs);\n\t\t\t}\n\t\t}\n\n\t\t// Adds stylesheet\n\t\tif (this.styleEnabled)\n\t\t{\n\t\t\tthis.defs.appendChild(this.createStyle());\n\t\t}\n\t}\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxSvgCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Capability check for DOM parser.\n */\n(function()\n{\n\tmxSvgCanvas2D.prototype.useDomParser = !mxClient.IS_IE && typeof DOMParser === 'function' && typeof XMLSerializer === 'function';\n\t\n\tif (mxSvgCanvas2D.prototype.useDomParser)\n\t{\n\t\t// Checks using a generic test text if the parsing actually works. This is a workaround\n\t\t// for older browsers where the capability check returns true but the parsing fails.\n\t\ttry\n\t\t{\n\t\t\tvar doc = new DOMParser().parseFromString('test text', 'text/html');\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = doc != null;\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxSvgCanvas2D.prototype.useDomParser = false;\n\t\t}\n\t}\n})();\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxSvgCanvas2D.prototype.node = null;\n\n/**\n * Variable: matchHtmlAlignment\n * \n * Specifies if plain text output should match the vertical HTML alignment.\n * Defaul is true.\n */\nmxSvgCanvas2D.prototype.matchHtmlAlignment = true;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabled. Default is true.\n */\nmxSvgCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: foEnabled\n * \n * Specifies if use of foreignObject for HTML markup is allowed. Default is true.\n */\nmxSvgCanvas2D.prototype.foEnabled = true;\n\n/**\n * Variable: foAltText\n * \n * Specifies the fallback text for unsupported foreignObjects in exported\n * documents. Default is '[Object]'. If this is set to null then no fallback\n * text is added to the exported document.\n */\nmxSvgCanvas2D.prototype.foAltText = '[Object]';\n\n/**\n * Variable: foOffset\n * \n * Offset to be used for foreignObjects.\n */\nmxSvgCanvas2D.prototype.foOffset = 0;\n\n/**\n * Variable: textOffset\n * \n * Offset to be used for text elements.\n */\nmxSvgCanvas2D.prototype.textOffset = 0;\n\n/**\n * Variable: imageOffset\n * \n * Offset to be used for image elements.\n */\nmxSvgCanvas2D.prototype.imageOffset = 0;\n\n/**\n * Variable: strokeTolerance\n * \n * Adds transparent paths for strokes.\n */\nmxSvgCanvas2D.prototype.strokeTolerance = 0;\n\n/**\n * Variable: minStrokeWidth\n * \n * Minimum stroke width for output.\n */\nmxSvgCanvas2D.prototype.minStrokeWidth = 1;\n\n/**\n * Variable: refCount\n * \n * Local counter for references in SVG export.\n */\nmxSvgCanvas2D.prototype.refCount = 0;\n\n/**\n * Variable: blockImagePointerEvents\n * \n * Specifies if a transparent rectangle should be added on top of images to absorb\n * all pointer events. Default is false. This is only needed in Firefox to disable\n * control-clicks on images.\n */\nmxSvgCanvas2D.prototype.blockImagePointerEvents = false;\n\n/**\n * Variable: lineHeightCorrection\n * \n * Correction factor for <mxConstants.LINE_HEIGHT> in HTML output. Default is 1.\n */\nmxSvgCanvas2D.prototype.lineHeightCorrection = 1;\n\n/**\n * Variable: pointerEventsValue\n * \n * Default value for active pointer events. Default is all.\n */\nmxSvgCanvas2D.prototype.pointerEventsValue = 'all';\n\n/**\n * Variable: fontMetricsPadding\n * \n * Padding to be added for text that is not wrapped to account for differences\n * in font metrics on different platforms in pixels. Default is 10.\n */\nmxSvgCanvas2D.prototype.fontMetricsPadding = 10;\n\n/**\n * Variable: cacheOffsetSize\n * \n * Specifies if offsetWidth and offsetHeight should be cached. Default is true.\n * This is used to speed up repaint of text in <updateText>.\n */\nmxSvgCanvas2D.prototype.cacheOffsetSize = true;\n\n/**\n * Function: format\n * \n * Rounds all numbers to 2 decimal points.\n */\nmxSvgCanvas2D.prototype.format = function(value)\n{\n\treturn parseFloat(parseFloat(value).toFixed(2));\n};\n\n/**\n * Function: getBaseUrl\n * \n * Returns the URL of the page without the hash part. This needs to use href to\n * include any search part with no params (ie question mark alone). This is a\n * workaround for the fact that window.location.search is empty if there is\n * no search string behind the question mark.\n */\nmxSvgCanvas2D.prototype.getBaseUrl = function()\n{\n\tvar href = window.location.href;\n\tvar hash = href.lastIndexOf('#');\n\t\n\tif (hash > 0)\n\t{\n\t\thref = href.substring(0, hash);\n\t}\n\t\n\treturn href;\n};\n\n/**\n * Function: reset\n * \n * Returns any offsets for rendering pixels.\n */\nmxSvgCanvas2D.prototype.reset = function()\n{\n\tmxAbstractCanvas2D.prototype.reset.apply(this, arguments);\n\tthis.gradients = [];\n};\n\n/**\n * Function: createStyle\n * \n * Creates the optional style section.\n */\nmxSvgCanvas2D.prototype.createStyle = function(x)\n{\n\tvar style = this.createElement('style');\n\tstyle.setAttribute('type', 'text/css');\n\tmxUtils.write(style, 'svg{font-family:' + mxConstants.DEFAULT_FONTFAMILY +\n\t\t\t';font-size:' + mxConstants.DEFAULT_FONTSIZE +\n\t\t\t';fill:none;stroke-miterlimit:10}');\n\t\n\treturn style;\n};\n\n/**\n * Function: createElement\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createElement = function(tagName, namespace)\n{\n\tif (this.root.ownerDocument.createElementNS != null)\n\t{\n\t\treturn this.root.ownerDocument.createElementNS(namespace || mxConstants.NS_SVG, tagName);\n\t}\n\telse\n\t{\n\t\tvar elt = this.root.ownerDocument.createElement(tagName);\n\t\t\n\t\tif (namespace != null)\n\t\t{\n\t\t\telt.setAttribute('xmlns', namespace);\n\t\t}\n\t\t\n\t\treturn elt;\n\t}\n};\n\n/**\n * Function: getAlternateContent\n * \n * Returns the alternate content for the given foreignObject.\n */\nmxSvgCanvas2D.prototype.createAlternateContent = function(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation)\n{\n\tif (this.foAltText != null)\n\t{\n\t\tvar s = this.state;\n\t\tvar alt = this.createElement('text');\n\t\talt.setAttribute('x', Math.round(w / 2));\n\t\talt.setAttribute('y', Math.round((h + s.fontSize) / 2));\n\t\talt.setAttribute('fill', s.fontColor || 'black');\n\t\talt.setAttribute('text-anchor', 'middle');\n\t\talt.setAttribute('font-size', s.fontSize + 'px');\n\t\talt.setAttribute('font-family', s.fontFamily);\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t{\n\t\t\talt.setAttribute('font-weight', 'bold');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t{\n\t\t\talt.setAttribute('font-style', 'italic');\n\t\t}\n\t\t\n\t\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t\t{\n\t\t\talt.setAttribute('text-decoration', 'underline');\n\t\t}\n\t\t\n\t\tmxUtils.write(alt, this.foAltText);\n\t\t\n\t\treturn alt;\n\t}\n\telse\n\t{\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: createGradientId\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createGradientId = function(start, end, alpha1, alpha2, direction)\n{\n\t// Removes illegal characters from gradient ID\n\tif (start.charAt(0) == '#')\n\t{\n\t\tstart = start.substring(1);\n\t}\n\t\n\tif (end.charAt(0) == '#')\n\t{\n\t\tend = end.substring(1);\n\t}\n\t\n\t// Workaround for gradient IDs not working in Safari 5 / Chrome 6\n\t// if they contain uppercase characters\n\tstart = start.toLowerCase() + '-' + alpha1;\n\tend = end.toLowerCase() + '-' + alpha2;\n\n\t// Wrong gradient directions possible?\n\tvar dir = null;\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tdir = 's';\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tdir = 'e';\n\t}\n\telse\n\t{\n\t\tvar tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tdir = 's';\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tdir = 'e';\n\t\t}\n\t}\n\t\n\treturn 'mx-gradient-' + start + '-' + end + '-' + dir;\n};\n\n/**\n * Function: getSvgGradient\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.getSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar id = this.createGradientId(start, end, alpha1, alpha2, direction);\n\tvar gradient = this.gradients[id];\n\t\n\tif (gradient == null)\n\t{\n\t\tvar svg = this.root.ownerSVGElement;\n\n\t\tvar counter = 0;\n\t\tvar tmpId = id + '-' + counter;\n\n\t\tif (svg != null)\n\t\t{\n\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t\n\t\t\twhile (gradient != null && gradient.ownerSVGElement != svg)\n\t\t\t{\n\t\t\t\ttmpId = id + '-' + counter++;\n\t\t\t\tgradient = svg.ownerDocument.getElementById(tmpId);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses shorter IDs for export\n\t\t\ttmpId = 'id' + (++this.refCount);\n\t\t}\n\t\t\n\t\tif (gradient == null)\n\t\t{\n\t\t\tgradient = this.createSvgGradient(start, end, alpha1, alpha2, direction);\n\t\t\tgradient.setAttribute('id', tmpId);\n\t\t\t\n\t\t\tif (this.defs != null)\n\t\t\t{\n\t\t\t\tthis.defs.appendChild(gradient);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsvg.appendChild(gradient);\n\t\t\t}\n\t\t}\n\n\t\tthis.gradients[id] = gradient;\n\t}\n\n\treturn gradient.getAttribute('id');\n};\n\n/**\n * Function: createSvgGradient\n * \n * Creates the given SVG gradient.\n */\nmxSvgCanvas2D.prototype.createSvgGradient = function(start, end, alpha1, alpha2, direction)\n{\n\tvar gradient = this.createElement('linearGradient');\n\tgradient.setAttribute('x1', '0%');\n\tgradient.setAttribute('y1', '0%');\n\tgradient.setAttribute('x2', '0%');\n\tgradient.setAttribute('y2', '0%');\n\t\n\tif (direction == null || direction == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tgradient.setAttribute('y2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_EAST)\n\t{\n\t\tgradient.setAttribute('x2', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_NORTH)\n\t{\n\t\tgradient.setAttribute('y1', '100%');\n\t}\n\telse if (direction == mxConstants.DIRECTION_WEST)\n\t{\n\t\tgradient.setAttribute('x1', '100%');\n\t}\n\t\n\tvar op = (alpha1 < 1) ? ';stop-opacity:' + alpha1 : '';\n\t\n\tvar stop = this.createElement('stop');\n\tstop.setAttribute('offset', '0%');\n\tstop.setAttribute('style', 'stop-color:' + start + op);\n\tgradient.appendChild(stop);\n\t\n\top = (alpha2 < 1) ? ';stop-opacity:' + alpha2 : '';\n\t\n\tstop = this.createElement('stop');\n\tstop.setAttribute('offset', '100%');\n\tstop.setAttribute('style', 'stop-color:' + end + op);\n\tgradient.appendChild(stop);\n\t\n\treturn gradient;\n};\n\n/**\n * Function: addNode\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'path')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.setAttribute('d', this.path.join(' '));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tthis.updateFill();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\t// Workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=814952\n\t\t\tif (node.nodeName == 'ellipse' && mxClient.IS_FF)\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'transparent');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode.setAttribute('fill', 'none');\n\t\t\t}\n\t\t\t\n\t\t\t// Sets the actual filled state for stroke tolerance\n\t\t\tfilled = false;\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tthis.updateStroke();\n\t\t}\n\t\telse if (!this.styleEnabled)\n\t\t{\n\t\t\tnode.setAttribute('stroke', 'none');\n\t\t}\n\t\t\n\t\tif (s.transform != null && s.transform.length > 0)\n\t\t{\n\t\t\tnode.setAttribute('transform', s.transform);\n\t\t}\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node));\n\t\t}\n\t\n\t\t// Adds stroke tolerance\n\t\tif (this.strokeTolerance > 0 && !filled)\n\t\t{\n\t\t\tthis.root.appendChild(this.createTolerance(node));\n\t\t}\n\n\t\t// Adds pointer events\n\t\tif (this.pointerEvents && (node.nodeName != 'path' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', this.pointerEventsValue);\n\t\t}\n\t\t// Enables clicks for nodes inside a link element\n\t\telse if (!this.pointerEvents && this.originalRoot == null)\n\t\t{\n\t\t\tnode.setAttribute('pointer-events', 'none');\n\t\t}\n\t\t\n\t\t// Removes invisible nodes from output if they don't handle events\n\t\tif ((node.nodeName != 'rect' && node.nodeName != 'path' && node.nodeName != 'ellipse') ||\n\t\t\t(node.getAttribute('fill') != 'none' && node.getAttribute('fill') != 'transparent') ||\n\t\t\tnode.getAttribute('stroke') != 'none' || node.getAttribute('pointer-events') != 'none')\n\t\t{\n\t\t\t// LATER: Update existing DOM for performance\t\t\n\t\t\tthis.root.appendChild(node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n};\n\n/**\n * Function: updateFill\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateFill = function()\n{\n\tvar s = this.state;\n\t\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('fill-opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tif (s.fillColor != null)\n\t{\n\t\tif (s.gradientColor != null)\n\t\t{\n\t\t\tvar id = this.getSvgGradient(s.fillColor, s.gradientColor, s.gradientFillAlpha, s.gradientAlpha, s.gradientDirection);\n\t\t\t\n\t\t\tif (!mxClient.IS_CHROME_APP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t\t{\n\t\t\t\t// Workaround for potential base tag and brackets must be escaped\n\t\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\t\tthis.node.setAttribute('fill', 'url(' + base + '#' + id + ')');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.node.setAttribute('fill', 'url(#' + id + ')');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.node.setAttribute('fill', s.fillColor.toLowerCase());\n\t\t}\n\t}\n};\n\n/**\n * Function: getCurrentStrokeWidth\n * \n * Returns the current stroke width (>= 1), ie. max(1, this.format(this.state.strokeWidth * this.state.scale)).\n */\nmxSvgCanvas2D.prototype.getCurrentStrokeWidth = function()\n{\n\treturn Math.max(this.minStrokeWidth, Math.max(0.01, this.format(this.state.strokeWidth * this.state.scale)));\n};\n\n/**\n * Function: updateStroke\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStroke = function()\n{\n\tvar s = this.state;\n\n\tthis.node.setAttribute('stroke', s.strokeColor.toLowerCase());\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tthis.node.setAttribute('stroke-opacity', s.alpha * s.strokeAlpha);\n\t}\n\t\n\tvar sw = this.getCurrentStrokeWidth();\n\t\n\tif (sw != 1)\n\t{\n\t\tthis.node.setAttribute('stroke-width', sw);\n\t}\n\t\n\tif (this.node.nodeName == 'path')\n\t{\n\t\tthis.updateStrokeAttributes();\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tthis.node.setAttribute('stroke-dasharray', this.createDashPattern(\n\t\t\t((s.fixDash) ? 1 : s.strokeWidth) * s.scale));\n\t}\n};\n\n/**\n * Function: updateStrokeAttributes\n * \n * Transfers the stroke attributes from <state> to <node>.\n */\nmxSvgCanvas2D.prototype.updateStrokeAttributes = function()\n{\n\tvar s = this.state;\n\t\n\t// Linejoin miter is default in SVG\n\tif (s.lineJoin != null && s.lineJoin != 'miter')\n\t{\n\t\tthis.node.setAttribute('stroke-linejoin', s.lineJoin);\n\t}\n\t\n\tif (s.lineCap != null)\n\t{\n\t\t// flat is called butt in SVG\n\t\tvar value = s.lineCap;\n\t\t\n\t\tif (value == 'flat')\n\t\t{\n\t\t\tvalue = 'butt';\n\t\t}\n\t\t\n\t\t// Linecap butt is default in SVG\n\t\tif (value != 'butt')\n\t\t{\n\t\t\tthis.node.setAttribute('stroke-linecap', value);\n\t\t}\n\t}\n\t\n\t// Miterlimit 10 is default in our document\n\tif (s.miterLimit != null && (!this.styleEnabled || s.miterLimit != 10))\n\t{\n\t\tthis.node.setAttribute('stroke-miterlimit', s.miterLimit);\n\t}\n};\n\n/**\n * Function: createDashPattern\n * \n * Creates the SVG dash pattern for the given state.\n */\nmxSvgCanvas2D.prototype.createDashPattern = function(scale)\n{\n\tvar pat = [];\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar dash = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (dash.length > 0)\n\t\t{\n\t\t\tfor (var i = 0; i < dash.length; i++)\n\t\t\t{\n\t\t\t\tpat[i] = Number(dash[i]) * scale;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn pat.join(' ');\n};\n\n/**\n * Function: createTolerance\n * \n * Creates a hit detection tolerance shape for the given node.\n */\nmxSvgCanvas2D.prototype.createTolerance = function(node)\n{\n\tvar tol = node.cloneNode(true);\n\tvar sw = parseFloat(tol.getAttribute('stroke-width') || 1) + this.strokeTolerance;\n\ttol.setAttribute('pointer-events', 'stroke');\n\ttol.setAttribute('visibility', 'hidden');\n\ttol.removeAttribute('stroke-dasharray');\n\ttol.setAttribute('stroke-width', sw);\n\ttol.setAttribute('fill', 'none');\n\t\n\t// Workaround for Opera ignoring the visiblity attribute above while\n\t// other browsers need a stroke color to perform the hit-detection but\n\t// do not ignore the visibility attribute. Side-effect is that Opera's\n\t// hit detection for horizontal/vertical edges seems to ignore the tol.\n\ttol.setAttribute('stroke', (mxClient.IS_OT) ? 'none' : 'white');\n\t\n\treturn tol;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxSvgCanvas2D.prototype.createShadow = function(node)\n{\n\tvar shadow = node.cloneNode(true);\n\tvar s = this.state;\n\n\t// Firefox uses transparent for no fill in ellipses\n\tif (shadow.getAttribute('fill') != 'none' && (!mxClient.IS_FF || shadow.getAttribute('fill') != 'transparent'))\n\t{\n\t\tshadow.setAttribute('fill', s.shadowColor);\n\t}\n\t\n\tif (shadow.getAttribute('stroke') != 'none')\n\t{\n\t\tshadow.setAttribute('stroke', s.shadowColor);\n\t}\n\n\tshadow.setAttribute('transform', 'translate(' + this.format(s.shadowDx * s.scale) +\n\t\t',' + this.format(s.shadowDy * s.scale) + ')' + (s.transform || ''));\n\tshadow.setAttribute('opacity', s.shadowAlpha);\n\t\n\treturn shadow;\n};\n\n/**\n * Function: setLink\n * \n * Experimental implementation for hyperlinks.\n */\nmxSvgCanvas2D.prototype.setLink = function(link)\n{\n\tif (link == null)\n\t{\n\t\tthis.root = this.originalRoot;\n\t}\n\telse\n\t{\n\t\tthis.originalRoot = this.root;\n\t\t\n\t\tvar node = this.createElement('a');\n\t\t\n\t\t// Workaround for implicit namespace handling in HTML5 export, IE adds NS1 namespace so use code below\n\t\t// in all IE versions except quirks mode. KNOWN: Adds xlink namespace to each image tag in output.\n\t\tif (node.setAttributeNS == null || (this.root.ownerDocument != document && document.documentMode == null))\n\t\t{\n\t\t\tnode.setAttribute('xlink:href', link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', link);\n\t\t}\n\t\t\n\t\tthis.root.appendChild(node);\n\t\tthis.root = node;\n\t}\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxSvgCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (theta != 0 || flipH || flipV)\n\t{\n\t\tvar s = this.state;\n\t\tcx += s.dx;\n\t\tcy += s.dy;\n\t\n\t\tcx *= s.scale;\n\t\tcy *= s.scale;\n\n\t\ts.transform = s.transform || '';\n\t\t\n\t\t// This implementation uses custom scale/translate and built-in rotation\n\t\t// Rotation state is part of the AffineTransform in state.transform\n\t\tif (flipH && flipV)\n\t\t{\n\t\t\ttheta += 180;\n\t\t}\n\t\telse if (flipH != flipV)\n\t\t{\n\t\t\tvar tx = (flipH) ? cx : 0;\n\t\t\tvar sx = (flipH) ? -1 : 1;\n\t\n\t\t\tvar ty = (flipV) ? cy : 0;\n\t\t\tvar sy = (flipV) ? -1 : 1;\n\n\t\t\ts.transform += 'translate(' + this.format(tx) + ',' + this.format(ty) + ')' +\n\t\t\t\t'scale(' + this.format(sx) + ',' + this.format(sy) + ')' +\n\t\t\t\t'translate(' + this.format(-tx) + ',' + this.format(-ty) + ')';\n\t\t}\n\t\t\n\t\tif (flipH ? !flipV : flipV)\n\t\t{\n\t\t\ttheta *= -1;\n\t\t}\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\ts.transform += 'rotate(' + this.format(theta) + ',' + this.format(cx) + ',' + this.format(cy) + ')';\n\t\t}\n\t\t\n\t\ts.rotation = s.rotation + theta;\n\t\ts.rotationCx = cx;\n\t\ts.rotationCy = cy;\n\t}\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxSvgCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createElement('path');\n};\n\n/**\n * Function: rect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('rect');\n\tn.setAttribute('x', this.format((x + s.dx) * s.scale));\n\tn.setAttribute('y', this.format((y + s.dy) * s.scale));\n\tn.setAttribute('width', this.format(w * s.scale));\n\tn.setAttribute('height', this.format(h * s.scale));\n\t\n\tthis.node = n;\n};\n\n/**\n * Function: roundrect\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.rect(x, y, w, h);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.node.setAttribute('rx', this.format(dx * this.state.scale));\n\t}\n\t\n\tif (dy > 0)\n\t{\n\t\tthis.node.setAttribute('ry', this.format(dy * this.state.scale));\n\t}\n};\n\n/**\n * Function: ellipse\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createElement('ellipse');\n\t// No rounding for consistent output with 1.x\n\tn.setAttribute('cx', Math.round((x + w / 2 + s.dx) * s.scale));\n\tn.setAttribute('cy', Math.round((y + h / 2 + s.dy) * s.scale));\n\tn.setAttribute('rx', w / 2 * s.scale);\n\tn.setAttribute('ry', h / 2 * s.scale);\n\tthis.node = n;\n};\n\n/**\n * Function: image\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tsrc = this.converter.convert(src);\n\t\n\t// LATER: Add option for embedding images as base64.\n\taspect = (aspect != null) ? aspect : true;\n\tflipH = (flipH != null) ? flipH : false;\n\tflipV = (flipV != null) ? flipV : false;\n\t\n\tvar s = this.state;\n\tx += s.dx;\n\ty += s.dy;\n\t\n\tvar node = this.createElement('image');\n\tnode.setAttribute('x', this.format(x * s.scale) + this.imageOffset);\n\tnode.setAttribute('y', this.format(y * s.scale) + this.imageOffset);\n\tnode.setAttribute('width', this.format(w * s.scale));\n\tnode.setAttribute('height', this.format(h * s.scale));\n\t\n\t// Workaround for missing namespace support\n\tif (node.setAttributeNS == null)\n\t{\n\t\tnode.setAttribute('xlink:href', src);\n\t}\n\telse\n\t{\n\t\tnode.setAttributeNS(mxConstants.NS_XLINK, 'xlink:href', src);\n\t}\n\t\n\tif (!aspect)\n\t{\n\t\tnode.setAttribute('preserveAspectRatio', 'none');\n\t}\n\n\tif (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha * s.fillAlpha);\n\t}\n\t\n\tvar tr = this.state.transform || '';\n\t\n\tif (flipH || flipV)\n\t{\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\tif (flipH)\n\t\t{\n\t\t\tsx = -1;\n\t\t\tdx = -w - 2 * x;\n\t\t}\n\t\t\n\t\tif (flipV)\n\t\t{\n\t\t\tsy = -1;\n\t\t\tdy = -h - 2 * y;\n\t\t}\n\t\t\n\t\t// Adds image tansformation to existing transform\n\t\ttr += 'scale(' + sx + ',' + sy + ')translate(' + (dx * s.scale) + ',' + (dy * s.scale) + ')';\n\t}\n\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (!this.pointerEvents)\n\t{\n\t\tnode.setAttribute('pointer-events', 'none');\n\t}\n\t\n\tthis.root.appendChild(node);\n\t\n\t// Disables control-clicks on images in Firefox to open in new tab\n\t// by putting a rect in the foreground that absorbs all events and\n\t// disabling all pointer-events on the original image tag.\n\tif (this.blockImagePointerEvents)\n\t{\n\t\tnode.setAttribute('style', 'pointer-events:none');\n\t\t\n\t\tnode = this.createElement('rect');\n\t\tnode.setAttribute('visibility', 'hidden');\n\t\tnode.setAttribute('pointer-events', 'fill');\n\t\tnode.setAttribute('x', this.format(x * s.scale));\n\t\tnode.setAttribute('y', this.format(y * s.scale));\n\t\tnode.setAttribute('width', this.format(w * s.scale));\n\t\tnode.setAttribute('height', this.format(h * s.scale));\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: convertHtml\n * \n * Converts the given HTML string to XHTML.\n */\nmxSvgCanvas2D.prototype.convertHtml = function(val)\n{\n\tif (this.useDomParser)\n\t{\n\t\tvar doc = new DOMParser().parseFromString(val, 'text/html');\n\n\t\tif (doc != null)\n\t\t{\n\t\t\tval = new XMLSerializer().serializeToString(doc.body);\n\t\t\t\n\t\t\t// Extracts body content from DOM\n\t\t\tif (val.substring(0, 5) == '<body')\n\t\t\t{\n\t\t\t\tval = val.substring(val.indexOf('>', 5) + 1);\n\t\t\t}\n\t\t\t\n\t\t\tif (val.substring(val.length - 7, val.length) == '</body>')\n\t\t\t{\n\t\t\t\tval = val.substring(0, val.length - 7);\n\t\t\t}\n\t\t}\n\t}\n\telse if (document.implementation != null && document.implementation.createDocument != null)\n\t{\n\t\tvar xd = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', null);\n\t\tvar xb = xd.createElement('body');\n\t\txd.documentElement.appendChild(xb);\n\t\t\n\t\tvar div = document.createElement('div');\n\t\tdiv.innerHTML = val;\n\t\tvar child = div.firstChild;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar next = child.nextSibling;\n\t\t\txb.appendChild(xd.adoptNode(child));\n\t\t\tchild = next;\n\t\t}\n\t\t\n\t\treturn xb.innerHTML;\n\t}\n\telse\n\t{\n\t\tvar ta = document.createElement('textarea');\n\t\t\n\t\t// Handles special HTML entities < and > and double escaping\n\t\t// and converts unclosed br, hr and img tags to XHTML\n\t\t// LATER: Convert all unclosed tags\n\t\tta.innerHTML = val.replace(/&amp;/g, '&amp;amp;').\n\t\t\treplace(/&#60;/g, '&amp;lt;').replace(/&#62;/g, '&amp;gt;').\n\t\t\treplace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;').\n\t\t\treplace(/</g, '&lt;').replace(/>/g, '&gt;');\n\t\tval = ta.value.replace(/&/g, '&amp;').replace(/&amp;lt;/g, '&lt;').\n\t\t\treplace(/&amp;gt;/g, '&gt;').replace(/&amp;amp;/g, '&amp;').\n\t\t\treplace(/<br>/g, '<br />').replace(/<hr>/g, '<hr />').\n\t\t\treplace(/(<img[^>]+)>/gm, \"$1 />\");\n\t}\n\t\n\treturn val;\n};\n\n/**\n * Function: createDiv\n * \n * Private helper function to create SVG elements\n */\nmxSvgCanvas2D.prototype.createDiv = function(str, align, valign, style, overflow)\n{\n\tvar s = this.state;\n\n\t// Inline block for rendering HTML background over SVG in Safari\n\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t(mxConstants.LINE_HEIGHT * this.lineHeightCorrection);\n\t\n\tstyle = 'display:inline-block;font-size:' + s.fontSize + 'px;font-family:' + s.fontFamily +\n\t\t';color:' + s.fontColor + ';line-height:' + lh + ';' + style;\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle += 'font-weight:bold;';\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle += 'font-style:italic;';\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle += 'text-decoration:underline;';\n\t}\n\t\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle += 'text-align:center;';\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle += 'text-align:right;';\n\t}\n\n\tvar css = '';\n\t\n\tif (s.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + s.fontBackgroundColor + ';';\n\t}\n\t\n\tif (s.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + s.fontBorderColor + ';';\n\t}\n\t\n\tvar val = str;\n\t\n\tif (!mxUtils.isNode(val))\n\t{\n\t\tval = this.convertHtml(val);\n\t\t\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\t// Inner div always needed to measure wrapped text\n\t\t\tval = '<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display:inline-block;text-align:inherit;text-decoration:inherit;' + css + '\">' + val + '</div>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle += css;\n\t\t}\n\t}\n\n\t// Uses DOM API where available. This cannot be used in IE to avoid\n\t// an opening and two (!) closing TBODY tags being added to tables.\n\tif (!mxClient.IS_IE && document.createElementNS)\n\t{\n\t\tvar div = document.createElementNS('http://www.w3.org/1999/xhtml', 'div');\n\t\tdiv.setAttribute('style', style);\n\t\t\n\t\tif (mxUtils.isNode(val))\n\t\t{\n\t\t\t// Creates a copy for export\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tdiv.appendChild(val.cloneNode(true));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.appendChild(val);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.innerHTML = val;\n\t\t}\n\t\t\n\t\treturn div;\n\t}\n\telse\n\t{\n\t\t// Serializes for export\n\t\tif (mxUtils.isNode(val) && this.root.ownerDocument != document)\n\t\t{\n\t\t\tval = val.outerHTML;\n\t\t}\n\n\t\t// NOTE: FF 3.6 crashes if content CSS contains \"height:100%\"\n\t\treturn mxUtils.parseXml('<div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"' + style + \n\t\t\t'\">' + val + '</div>').documentElement;\n\t}\n};\n\n/**\n * Invalidates the cached offset size for the given node.\n */\nmxSvgCanvas2D.prototype.invalidateCachedOffsetSize = function(node)\n{\n\tdelete node.firstChild.mxCachedOffsetWidth;\n\tdelete node.firstChild.mxCachedFinalOffsetWidth;\n\tdelete node.firstChild.mxCachedFinalOffsetHeight;\n};\n\n/**\n * Updates existing DOM nodes for text rendering. LATER: Merge common parts with text function below.\n */\nmxSvgCanvas2D.prototype.updateText = function(x, y, w, h, align, valign, wrap, overflow, clip, rotation, node)\n{\n\tif (node != null && node.firstChild != null && node.firstChild.firstChild != null &&\n\t\tnode.firstChild.firstChild.firstChild != null)\n\t{\n\t\t// Uses outer group for opacity and transforms to\n\t\t// fix rendering order in Chrome\n\t\tvar group = node.firstChild;\n\t\tvar fo = group.firstChild;\n\t\tvar div = fo.firstChild;\n\n\t\trotation = (rotation != null) ? rotation : 0;\n\t\t\n\t\tvar s = this.state;\n\t\tx += s.dx;\n\t\ty += s.dy;\n\t\t\n\t\tif (clip)\n\t\t{\n\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\tdiv.style.maxWidth = Math.round(w) + 'px';\n\t\t}\n\t\telse if (overflow == 'fill')\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t\tdiv.style.height = Math.round(h + 1) + 'px';\n\t\t}\n\t\telse if (overflow == 'width')\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t\t\n\t\t\tif (h > 0)\n\t\t\t{\n\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t}\n\t\t}\n\n\t\tif (wrap && w > 0)\n\t\t{\n\t\t\tdiv.style.width = Math.round(w + 1) + 'px';\n\t\t}\n\t\t\n\t\t// Code that depends on the size which is computed after\n\t\t// the element was added to the DOM.\n\t\tvar ow = 0;\n\t\tvar oh = 0;\n\t\t\n\t\t// Padding avoids clipping on border and wrapping for differing font metrics on platforms\n\t\tvar padX = 0;\n\t\tvar padY = 2;\n\n\t\tvar sizeDiv = div;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t}\n\t\t\n\t\tvar tmp = (group.mxCachedOffsetWidth != null) ? group.mxCachedOffsetWidth : sizeDiv.offsetWidth;\n\t\tow = tmp + padX;\n\n\t\t// Recomputes the height of the element for wrapped width\n\t\tif (wrap && overflow != 'fill')\n\t\t{\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, w);\n\t\t\t}\n\t\t\t\n\t\t\tdiv.style.width = Math.round(ow + 1) + 'px';\n\t\t}\n\n\t\tow = (group.mxCachedFinalOffsetWidth != null) ? group.mxCachedFinalOffsetWidth : sizeDiv.offsetWidth;\n\t\toh = (group.mxCachedFinalOffsetHeight != null) ? group.mxCachedFinalOffsetHeight : sizeDiv.offsetHeight;\n\t\t\n\t\tif (this.cacheOffsetSize)\n\t\t{\n\t\t\tgroup.mxCachedOffsetWidth = tmp;\n\t\t\tgroup.mxCachedFinalOffsetWidth = ow;\n\t\t\tgroup.mxCachedFinalOffsetHeight = oh;\n\t\t}\n\t\t\n\t\tow += padX;\n\t\toh -= 2;\n\t\t\n\t\tif (clip)\n\t\t{\n\t\t\toh = Math.min(oh, h);\n\t\t\tow = Math.min(ow, w);\n\t\t}\n\n\t\tif (overflow == 'width')\n\t\t{\n\t\t\th = oh;\n\t\t}\n\t\telse if (overflow != 'fill')\n\t\t{\n\t\t\tw = ow;\n\t\t\th = oh;\n\t\t}\n\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tdx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tdx -= w;\n\t\t}\n\t\t\n\t\tx += dx;\n\t\t\n\t\t// FIXME: LINE_HEIGHT not ideal for all text sizes, fix for export\n\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tdy -= h / 2;\n\t\t}\n\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy -= h;\n\t\t}\n\t\t\n\t\t// Workaround for rendering offsets\n\t\t// TODO: Check if export needs these fixes, too\n\t\tif (overflow != 'fill' && mxClient.IS_FF && mxClient.IS_WIN)\n\t\t{\n\t\t\tdy -= 2;\n\t\t}\n\t\t\n\t\ty += dy;\n\n\t\tvar tr = (s.scale != 1) ? 'scale(' + s.scale + ')' : '';\n\n\t\tif (s.rotation != 0 && this.rotateHtml)\n\t\t{\n\t\t\ttr += 'rotate(' + (s.rotation) + ',' + (w / 2) + ',' + (h / 2) + ')';\n\t\t\tvar pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale,\n\t\t\t\ts.rotation, s.rotationCx, s.rotationCy);\n\t\t\tx = pt.x - w * s.scale / 2;\n\t\t\ty = pt.y - h * s.scale / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx *= s.scale;\n\t\t\ty *= s.scale;\n\t\t}\n\n\t\tif (rotation != 0)\n\t\t{\n\t\t\ttr += 'rotate(' + (rotation) + ',' + (-dx) + ',' + (-dy) + ')';\n\t\t}\n\n\t\tgroup.setAttribute('transform', 'translate(' + Math.round(x) + ',' + Math.round(y) + ')' + tr);\n\t\tfo.setAttribute('width', Math.round(Math.max(1, w)));\n\t\tfo.setAttribute('height', Math.round(Math.max(1, h)));\n\t}\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Note that HTML markup is only supported if\n * foreignObject is supported and <foEnabled> is true. (This means IE9 and later\n * does currently not support HTML text as part of shapes.)\n */\nmxSvgCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\trotation = (rotation != null) ? rotation : 0;\n\t\t\n\t\tvar s = this.state;\n\t\tx += s.dx;\n\t\ty += s.dy;\n\t\t\n\t\tif (this.foEnabled && format == 'html')\n\t\t{\n\t\t\tvar style = 'vertical-align:top;';\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tstyle += 'overflow:hidden;max-height:' + Math.round(h) + 'px;max-width:' + Math.round(w) + 'px;';\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;height:' + Math.round(h + 1) + 'px;overflow:hidden;';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;';\n\t\t\t\t\n\t\t\t\tif (h > 0)\n\t\t\t\t{\n\t\t\t\t\tstyle += 'max-height:' + Math.round(h) + 'px;overflow:hidden;';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tstyle += 'width:' + Math.round(w + 1) + 'px;white-space:normal;word-wrap:' +\n\t\t\t\t\tmxConstants.WORD_WRAP + ';';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstyle += 'white-space:nowrap;';\n\t\t\t}\n\t\t\t\n\t\t\t// Uses outer group for opacity and transforms to\n\t\t\t// fix rendering order in Chrome\n\t\t\tvar group = this.createElement('g');\n\t\t\t\n\t\t\tif (s.alpha < 1)\n\t\t\t{\n\t\t\t\tgroup.setAttribute('opacity', s.alpha);\n\t\t\t}\n\n\t\t\tvar fo = this.createElement('foreignObject');\n\t\t\tfo.setAttribute('style', 'overflow:visible;');\n\t\t\tfo.setAttribute('pointer-events', 'all');\n\t\t\t\n\t\t\tvar div = this.createDiv(str, align, valign, style, overflow);\n\t\t\t\n\t\t\t// Ignores invalid XHTML labels\n\t\t\tif (div == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse if (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tgroup.appendChild(fo);\n\t\t\tthis.root.appendChild(group);\n\t\t\t\n\t\t\t// Code that depends on the size which is computed after\n\t\t\t// the element was added to the DOM.\n\t\t\tvar ow = 0;\n\t\t\tvar oh = 0;\n\t\t\t\n\t\t\t// Padding avoids clipping on border and wrapping for differing font metrics on platforms\n\t\t\tvar padX = 2;\n\t\t\tvar padY = 2;\n\n\t\t\t// NOTE: IE is always export as it does not support foreign objects\n\t\t\tif (mxClient.IS_IE && (document.documentMode == 9 || !mxClient.IS_SVG))\n\t\t\t{\n\t\t\t\t// Handles non-standard namespace for getting size in IE\n\t\t\t\tvar clone = document.createElement('div');\n\t\t\t\t\n\t\t\t\tclone.style.cssText = div.getAttribute('style');\n\t\t\t\tclone.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\t\tclone.style.position = 'absolute';\n\t\t\t\tclone.style.visibility = 'hidden';\n\n\t\t\t\t// Inner DIV is needed for text measuring\n\t\t\t\tvar div2 = document.createElement('div');\n\t\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\t\tdiv2.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv2.innerHTML = (mxUtils.isNode(str)) ? str.outerHTML : str;\n\t\t\t\tclone.appendChild(div2);\n\n\t\t\t\tdocument.body.appendChild(clone);\n\n\t\t\t\t// Workaround for different box models\n\t\t\t\tif (document.documentMode != 8 && document.documentMode != 9 && s.fontBorderColor != null)\n\t\t\t\t{\n\t\t\t\t\tpadX += 2;\n\t\t\t\t\tpadY += 2;\n\t\t\t\t}\n\n\t\t\t\tif (wrap && w > 0)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div2.offsetWidth;\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for adding padding twice in IE8/IE9 standards mode if label is wrapped\n\t\t\t\t\tpadDx = 0;\n\t\t\t\t\t\n\t\t\t\t\t// For export, if no wrapping occurs, we add a large padding to make\n\t\t\t\t\t// sure there is no wrapping even if the text metrics are different.\n\t\t\t\t\t// This adds support for text metrics on different operating systems.\n\t\t\t\t\t// Disables wrapping if text is not wrapped for given width\n\t\t\t\t\tif (!clip && wrap && w > 0 && this.root.ownerDocument != document && overflow != 'fill')\n\t\t\t\t\t{\n\t\t\t\t\t\tvar ws = clone.style.whiteSpace;\n\t\t\t\t\t\tdiv2.style.whiteSpace = 'nowrap';\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp < div2.offsetWidth)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tclone.style.whiteSpace = ws;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (clip)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tclone.style.width = tmp + 'px';\n\t\n\t\t\t\t\t// Padding avoids clipping on border\n\t\t\t\t\tow = div2.offsetWidth + padX + padDx;\n\t\t\t\t\toh = div2.offsetHeight + padY;\n\t\t\t\t\t\n\t\t\t\t\t// Overrides the width of the DIV via XML DOM by using the\n\t\t\t\t\t// clone DOM style, getting the CSS text for that and\n\t\t\t\t\t// then setting that on the DIV via setAttribute\n\t\t\t\t\tclone.style.display = 'inline-block';\n\t\t\t\t\tclone.style.position = '';\n\t\t\t\t\tclone.style.visibility = '';\n\t\t\t\t\tclone.style.width = ow + 'px';\n\t\t\t\t\t\n\t\t\t\t\tdiv.setAttribute('style', clone.style.cssText);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Padding avoids clipping on border\n\t\t\t\t\tow = div2.offsetWidth + padX;\n\t\t\t\t\toh = div2.offsetHeight + padY;\n\t\t\t\t}\n\n\t\t\t\tclone.parentNode.removeChild(clone);\n\t\t\t\tfo.appendChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Uses document for text measuring during export\n\t\t\t\tif (this.root.ownerDocument != document)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfo.appendChild(div);\n\t\t\t\t}\n\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\t\n\t\t\t\t\tif (wrap && div.style.wordWrap == 'break-word')\n\t\t\t\t\t{\n\t\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\t\n\t\t\t\t// Workaround for text measuring in hidden containers\n\t\t\t\tif (tmp == 0 && div.parentNode == fo)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\t\n\t\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.cacheOffsetSize)\n\t\t\t\t{\n\t\t\t\t\tgroup.mxCachedOffsetWidth = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Disables wrapping if text is not wrapped for given width\n\t\t\t\tif (!clip && wrap && w > 0 && this.root.ownerDocument != document &&\n\t\t\t\t\toverflow != 'fill' && overflow != 'width')\n\t\t\t\t{\n\t\t\t\t\tvar ws = div.style.whiteSpace;\n\t\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t\t\t\n\t\t\t\t\tif (tmp < sizeDiv.offsetWidth)\n\t\t\t\t\t{\n\t\t\t\t\t\tdiv.style.whiteSpace = ws;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tow = tmp + padX - 1;\n\n\t\t\t\t// Recomputes the height of the element for wrapped width\n\t\t\t\tif (wrap && overflow != 'fill' && overflow != 'width')\n\t\t\t\t{\n\t\t\t\t\tif (clip)\n\t\t\t\t\t{\n\t\t\t\t\t\tow = Math.min(ow, w);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdiv.style.width = ow + 'px';\n\t\t\t\t}\n\n\t\t\t\tow = sizeDiv.offsetWidth;\n\t\t\t\toh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (this.cacheOffsetSize)\n\t\t\t\t{\n\t\t\t\t\tgroup.mxCachedFinalOffsetWidth = ow;\n\t\t\t\t\tgroup.mxCachedFinalOffsetHeight = oh;\n\t\t\t\t}\n\n\t\t\t\toh -= padY;\n\t\t\t\t\n\t\t\t\tif (div.parentNode != fo)\n\t\t\t\t{\n\t\t\t\t\tfo.appendChild(div);\n\t\t\t\t\tdiv.style.visibility = '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\toh = Math.min(oh, h);\n\t\t\t\tow = Math.min(ow, w);\n\t\t\t}\n\n\t\t\tif (overflow == 'width')\n\t\t\t{\n\t\t\t\th = oh;\n\t\t\t}\n\t\t\telse if (overflow != 'fill')\n\t\t\t{\n\t\t\t\tw = ow;\n\t\t\t\th = oh;\n\t\t\t}\n\n\t\t\tif (s.alpha < 1)\n\t\t\t{\n\t\t\t\tgroup.setAttribute('opacity', s.alpha);\n\t\t\t}\n\t\t\t\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tx += dx;\n\t\t\t\n\t\t\t// FIXME: LINE_HEIGHT not ideal for all text sizes, fix for export\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tdy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tdy -= h;\n\t\t\t}\n\t\t\t\n\t\t\t// Workaround for rendering offsets\n\t\t\t// TODO: Check if export needs these fixes, too\n\t\t\t//if (this.root.ownerDocument == document)\n\t\t\tif (overflow != 'fill' && mxClient.IS_FF && mxClient.IS_WIN)\n\t\t\t{\n\t\t\t\tdy -= 2;\n\t\t\t}\n\t\t\t\n\t\t\ty += dy;\n\n\t\t\tvar tr = (s.scale != 1) ? 'scale(' + s.scale + ')' : '';\n\n\t\t\tif (s.rotation != 0 && this.rotateHtml)\n\t\t\t{\n\t\t\t\ttr += 'rotate(' + (s.rotation) + ',' + (w / 2) + ',' + (h / 2) + ')';\n\t\t\t\tvar pt = this.rotatePoint((x + w / 2) * s.scale, (y + h / 2) * s.scale,\n\t\t\t\t\ts.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\tx = pt.x - w * s.scale / 2;\n\t\t\t\ty = pt.y - h * s.scale / 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\ttr += 'rotate(' + (rotation) + ',' + (-dx) + ',' + (-dy) + ')';\n\t\t\t}\n\n\t\t\tgroup.setAttribute('transform', 'translate(' + (Math.round(x) + this.foOffset) + ',' +\n\t\t\t\t(Math.round(y) + this.foOffset) + ')' + tr);\n\t\t\tfo.setAttribute('width', Math.round(Math.max(1, w)));\n\t\t\tfo.setAttribute('height', Math.round(Math.max(1, h)));\n\t\t\t\n\t\t\t// Adds alternate content if foreignObject not supported in viewer\n\t\t\tif (this.root.ownerDocument != document)\n\t\t\t{\n\t\t\t\tvar alt = this.createAlternateContent(fo, x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation);\n\t\t\t\t\n\t\t\t\tif (alt != null)\n\t\t\t\t{\n\t\t\t\t\tfo.setAttribute('requiredFeatures', 'http://www.w3.org/TR/SVG11/feature#Extensibility');\n\t\t\t\t\tvar sw = this.createElement('switch');\n\t\t\t\t\tsw.appendChild(fo);\n\t\t\t\t\tsw.appendChild(alt);\n\t\t\t\t\tgroup.appendChild(sw);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: createClip\n * \n * Creates a clip for the given coordinates.\n */\nmxSvgCanvas2D.prototype.createClip = function(x, y, w, h)\n{\n\tx = Math.round(x);\n\ty = Math.round(y);\n\tw = Math.round(w);\n\th = Math.round(h);\n\t\n\tvar id = 'mx-clip-' + x + '-' + y + '-' + w + '-' + h;\n\n\tvar counter = 0;\n\tvar tmp = id + '-' + counter;\n\t\n\t// Resolves ID conflicts\n\twhile (document.getElementById(tmp) != null)\n\t{\n\t\ttmp = id + '-' + (++counter);\n\t}\n\t\n\tclip = this.createElement('clipPath');\n\tclip.setAttribute('id', tmp);\n\t\n\tvar rect = this.createElement('rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\t\t\n\tclip.appendChild(rect);\n\t\n\treturn clip;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for\n * plain text and html for HTML markup.\n */\nmxSvgCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, overflow, clip, rotation, dir)\n{\n\trotation = (rotation != null) ? rotation : 0;\n\tvar s = this.state;\n\tvar size = s.fontSize;\n\tvar node = this.createElement('g');\n\tvar tr = s.transform || '';\n\tthis.updateFont(node);\n\t\n\t// Non-rotated text\n\tif (rotation != 0)\n\t{\n\t\ttr += 'rotate(' + rotation  + ',' + this.format(x * s.scale) + ',' + this.format(y * s.scale) + ')';\n\t}\n\t\n\tif (dir != null)\n\t{\n\t\tnode.setAttribute('direction', dir);\n\t}\n\n\tif (clip && w > 0 && h > 0)\n\t{\n\t\tvar cx = x;\n\t\tvar cy = y;\n\t\t\n\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tcx -= w / 2;\n\t\t}\n\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t{\n\t\t\tcx -= w;\n\t\t}\n\t\t\n\t\tif (overflow != 'fill')\n\t\t{\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\tcy -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tcy -= h;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// LATER: Remove spacing from clip rectangle\n\t\tvar c = this.createClip(cx * s.scale - 2, cy * s.scale - 2, w * s.scale + 4, h * s.scale + 4);\n\t\t\n\t\tif (this.defs != null)\n\t\t{\n\t\t\tthis.defs.appendChild(c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Makes sure clip is removed with referencing node\n\t\t\tthis.root.appendChild(c);\n\t\t}\n\t\t\n\t\tif (!mxClient.IS_CHROME_APP && !mxClient.IS_IE && !mxClient.IS_IE11 &&\n\t\t\t!mxClient.IS_EDGE && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Workaround for potential base tag\n\t\t\tvar base = this.getBaseUrl().replace(/([\\(\\)])/g, '\\\\$1');\n\t\t\tnode.setAttribute('clip-path', 'url(' + base + '#' + c.getAttribute('id') + ')');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.setAttribute('clip-path', 'url(#' + c.getAttribute('id') + ')');\n\t\t}\n\t}\n\n\t// Default is left\n\tvar anchor = (align == mxConstants.ALIGN_RIGHT) ? 'end' :\n\t\t\t\t\t(align == mxConstants.ALIGN_CENTER) ? 'middle' :\n\t\t\t\t\t'start';\n\n\t// Text-anchor start is default in SVG\n\tif (anchor != 'start')\n\t{\n\t\tnode.setAttribute('text-anchor', anchor);\n\t}\n\t\n\tif (!this.styleEnabled || size != mxConstants.DEFAULT_FONTSIZE)\n\t{\n\t\tnode.setAttribute('font-size', (size * s.scale) + 'px');\n\t}\n\t\n\tif (tr.length > 0)\n\t{\n\t\tnode.setAttribute('transform', tr);\n\t}\n\t\n\tif (s.alpha < 1)\n\t{\n\t\tnode.setAttribute('opacity', s.alpha);\n\t}\n\t\n\tvar lines = str.split('\\n');\n\tvar lh = Math.round(size * mxConstants.LINE_HEIGHT);\n\tvar textHeight = size + (lines.length - 1) * lh;\n\n\tvar cy = y + size - 1;\n\n\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = ((this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight) / 2;\n\t\t\tcy -= dy + 1;\n\t\t}\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tif (overflow == 'fill')\n\t\t{\n\t\t\tcy -= h;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar dy = (this.matchHtmlAlignment && clip && h > 0) ? Math.min(textHeight, h) : textHeight;\n\t\t\tcy -= dy + 2;\n\t\t}\n\t}\n\n\tfor (var i = 0; i < lines.length; i++)\n\t{\n\t\t// Workaround for bounding box of empty lines and spaces\n\t\tif (lines[i].length > 0 && mxUtils.trim(lines[i]).length > 0)\n\t\t{\n\t\t\tvar text = this.createElement('text');\n\t\t\t// LATER: Match horizontal HTML alignment\n\t\t\ttext.setAttribute('x', this.format(x * s.scale) + this.textOffset);\n\t\t\ttext.setAttribute('y', this.format(cy * s.scale) + this.textOffset);\n\t\t\t\n\t\t\tmxUtils.write(text, lines[i]);\n\t\t\tnode.appendChild(text);\n\t\t}\n\n\t\tcy += lh;\n\t}\n\n\tthis.root.appendChild(node);\n\tthis.addTextBackground(node, str, x, y, w, (overflow == 'fill') ? h : textHeight, align, valign, overflow);\n};\n\n/**\n * Function: updateFont\n * \n * Updates the text properties for the given node. (NOTE: For this to work in\n * IE, the given node must be a text or tspan element.)\n */\nmxSvgCanvas2D.prototype.updateFont = function(node)\n{\n\tvar s = this.state;\n\n\tnode.setAttribute('fill', s.fontColor);\n\t\n\tif (!this.styleEnabled || s.fontFamily != mxConstants.DEFAULT_FONTFAMILY)\n\t{\n\t\tnode.setAttribute('font-family', s.fontFamily);\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tnode.setAttribute('font-weight', 'bold');\n\t}\n\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tnode.setAttribute('font-style', 'italic');\n\t}\n\t\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tnode.setAttribute('text-decoration', 'underline');\n\t}\n};\n\n/**\n * Function: addTextBackground\n * \n * Background color and border\n */\nmxSvgCanvas2D.prototype.addTextBackground = function(node, str, x, y, w, h, align, valign, overflow)\n{\n\tvar s = this.state;\n\n\tif (s.fontBackgroundColor != null || s.fontBorderColor != null)\n\t{\n\t\tvar bbox = null;\n\t\t\n\t\tif (overflow == 'fill' || overflow == 'width')\n\t\t{\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, y * s.scale, (w - 2) * s.scale, (h + 2) * s.scale);\n\t\t}\n\t\telse if (node.getBBox != null && this.root.ownerDocument == document)\n\t\t{\n\t\t\t// Uses getBBox only if inside document for correct size\n\t\t\ttry\n\t\t\t{\n\t\t\t\tbbox = node.getBBox();\n\t\t\t\tvar ie = mxClient.IS_IE && mxClient.IS_SVG;\n\t\t\t\tbbox = new mxRectangle(bbox.x, bbox.y + ((ie) ? 0 : 1), bbox.width, bbox.height + ((ie) ? 1 : 0));\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Computes size if not in document or no getBBox available\n\t\t\tvar div = document.createElement('div');\n\n\t\t\t// Wrapping and clipping can be ignored here\n\t\t\tdiv.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (s.fontSize * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\t\tdiv.style.fontSize = s.fontSize + 'px';\n\t\t\tdiv.style.fontFamily = s.fontFamily;\n\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\tdiv.style.position = 'absolute';\n\t\t\tdiv.style.visibility = 'hidden';\n\t\t\tdiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv.style.zoom = '1';\n\t\t\t\n\t\t\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t\t\t{\n\t\t\t\tdiv.style.fontWeight = 'bold';\n\t\t\t}\n\n\t\t\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t\t\t{\n\t\t\t\tdiv.style.fontStyle = 'italic';\n\t\t\t}\n\t\t\t\n\t\t\tstr = mxUtils.htmlEntities(str, false);\n\t\t\tdiv.innerHTML = str.replace(/\\n/g, '<br/>');\n\t\t\t\n\t\t\tdocument.body.appendChild(div);\n\t\t\tvar w = div.offsetWidth;\n\t\t\tvar h = div.offsetHeight;\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tx -= w / 2;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tx -= w;\n\t\t\t}\n\t\t\t\n\t\t\tif (valign == mxConstants.ALIGN_MIDDLE)\n\t\t\t{\n\t\t\t\ty -= h / 2;\n\t\t\t}\n\t\t\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\ty -= h;\n\t\t\t}\n\t\t\t\n\t\t\tbbox = new mxRectangle((x + 1) * s.scale, (y + 2) * s.scale, w * s.scale, (h + 1) * s.scale);\n\t\t}\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tvar n = this.createElement('rect');\n\t\t\tn.setAttribute('fill', s.fontBackgroundColor || 'none');\n\t\t\tn.setAttribute('stroke', s.fontBorderColor || 'none');\n\t\t\tn.setAttribute('x', Math.floor(bbox.x - 1));\n\t\t\tn.setAttribute('y', Math.floor(bbox.y - 1));\n\t\t\tn.setAttribute('width', Math.ceil(bbox.width + 2));\n\t\t\tn.setAttribute('height', Math.ceil(bbox.height));\n\n\t\t\tvar sw = (s.fontBorderColor != null) ? Math.max(1, this.format(s.scale)) : 0;\n\t\t\tn.setAttribute('stroke-width', sw);\n\t\t\t\n\t\t\t// Workaround for crisp rendering - only required if not exporting\n\t\t\tif (this.root.ownerDocument == document && mxUtils.mod(sw, 2) == 1)\n\t\t\t{\n\t\t\t\tn.setAttribute('transform', 'translate(0.5, 0.5)');\n\t\t\t}\n\t\t\t\n\t\t\tnode.insertBefore(n, node.firstChild);\n\t\t}\n\t}\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxSvgCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxSvgCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxVmlCanvas2D\n * \n * Implements a canvas to be used for rendering VML. Here is an example of implementing a\n * fallback for SVG images which are not supported in VML-based browsers.\n * \n * (code)\n * var mxVmlCanvas2DImage = mxVmlCanvas2D.prototype.image;\n * mxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n * {\n *   if (src.substring(src.length - 4, src.length) == '.svg')\n *   {\n *     src = 'http://www.jgraph.com/images/mxgraph.gif';\n *   }\n *   \n *   mxVmlCanvas2DImage.apply(this, arguments);\n * };\n * (end)\n * \n * To disable anti-aliasing in the output, use the following code.\n * \n * (code)\n * document.createStyleSheet().cssText = mxClient.VML_PREFIX + '\\\\:*{antialias:false;)}';\n * (end)\n * \n * A description of the public API is available in <mxXmlCanvas2D>. Note that\n * there is a known issue in VML where gradients are painted using the outer\n * bounding box of rotated shapes, not the actual bounds of the shape. See\n * also <text> for plain text label restrictions in shapes for VML.\n */\nvar mxVmlCanvas2D = function(root)\n{\n\tmxAbstractCanvas2D.call(this);\n\n\t/**\n\t * Variable: root\n\t * \n\t * Reference to the container for the SVG content.\n\t */\n\tthis.root = root;\n};\n\n/**\n * Extends mxAbstractCanvas2D\n */\nmxUtils.extend(mxVmlCanvas2D, mxAbstractCanvas2D);\n\n/**\n * Variable: path\n * \n * Holds the current DOM node.\n */\nmxVmlCanvas2D.prototype.node = null;\n\n/**\n * Variable: textEnabled\n * \n * Specifies if text output should be enabledetB. Default is true.\n */\nmxVmlCanvas2D.prototype.textEnabled = true;\n\n/**\n * Variable: moveOp\n * \n * Contains the string used for moving in paths. Default is 'm'.\n */\nmxVmlCanvas2D.prototype.moveOp = 'm';\n\n/**\n * Variable: lineOp\n * \n * Contains the string used for moving in paths. Default is 'l'.\n */\nmxVmlCanvas2D.prototype.lineOp = 'l';\n\n/**\n * Variable: curveOp\n * \n * Contains the string used for bezier curves. Default is 'c'.\n */\nmxVmlCanvas2D.prototype.curveOp = 'c';\n\n/**\n * Variable: closeOp\n * \n * Holds the operator for closing curves. Default is 'x e'.\n */\nmxVmlCanvas2D.prototype.closeOp = 'x';\n\n/**\n * Variable: rotatedHtmlBackground\n * \n * Background color for rotated HTML. Default is ''. This can be set to eg.\n * white to improve rendering of rotated text in VML for IE9.\n */\nmxVmlCanvas2D.prototype.rotatedHtmlBackground = '';\n\n/**\n * Variable: vmlScale\n * \n * Specifies the scale used to draw VML shapes.\n */\nmxVmlCanvas2D.prototype.vmlScale = 1;\n\n/**\n * Function: createElement\n * \n * Creates the given element using the document.\n */\nmxVmlCanvas2D.prototype.createElement = function(name)\n{\n\treturn document.createElement(name);\n};\n\n/**\n * Function: createVmlElement\n * \n * Creates a new element using <createElement> and prefixes the given name with\n * <mxClient.VML_PREFIX>.\n */\nmxVmlCanvas2D.prototype.createVmlElement = function(name)\n{\n\treturn this.createElement(mxClient.VML_PREFIX + ':' + name);\n};\n\n/**\n * Function: addNode\n * \n * Adds the current node to the <root>.\n */\nmxVmlCanvas2D.prototype.addNode = function(filled, stroked)\n{\n\tvar node = this.node;\n\tvar s = this.state;\n\t\n\tif (node != null)\n\t{\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\t// Checks if the path is not empty\n\t\t\tif (this.path != null && this.path.length > 0)\n\t\t\t{\n\t\t\t\tnode.path = this.path.join(' ') + ' e';\n\t\t\t\tnode.style.width = this.root.style.width;\n\t\t\t\tnode.style.height = this.root.style.height;\n\t\t\t\tnode.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tnode.strokeweight = this.format(Math.max(1, s.strokeWidth * s.scale / this.vmlScale)) + 'px';\n\t\t\n\t\tif (s.shadow)\n\t\t{\n\t\t\tthis.root.appendChild(this.createShadow(node,\n\t\t\t\tfilled && s.fillColor != null,\n\t\t\t\tstroked && s.strokeColor != null));\n\t\t}\n\t\t\n\t\tif (stroked && s.strokeColor != null)\n\t\t{\n\t\t\tnode.stroked = 'true';\n\t\t\tnode.strokecolor = s.strokeColor;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.stroked = 'false';\n\t\t}\n\n\t\tnode.appendChild(this.createStroke());\n\n\t\tif (filled && s.fillColor != null)\n\t\t{\n\t\t\tnode.appendChild(this.createFill());\n\t\t}\n\t\telse if (this.pointerEvents && (node.nodeName != 'shape' ||\n\t\t\tthis.path[this.path.length - 1] == this.closeOp))\n\t\t{\n\t\t\tnode.appendChild(this.createTransparentFill());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.filled = 'false';\n\t\t}\n\n\t\t// LATER: Update existing DOM for performance\n\t\tthis.root.appendChild(node);\n\t}\n};\n\n/**\n * Function: createTransparentFill\n * \n * Creates a transparent fill.\n */\nmxVmlCanvas2D.prototype.createTransparentFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.src = mxClient.imageBasePath + '/transparent.gif';\n\tfill.type = 'tile';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createFill\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createFill = function()\n{\n\tvar s = this.state;\n\t\n\t// Gradients in foregrounds not supported because special gradients\n\t// with bounds must be created for each element in graphics-canvases\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fillColor;\n\n\tif (s.gradientColor != null)\n\t{\n\t\tfill.type = 'gradient';\n\t\tfill.method = 'none';\n\t\tfill.color2 = s.gradientColor;\n\t\tvar angle = 180 - s.rotation;\n\t\t\n\t\tif (s.gradientDirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tangle -= 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_EAST)\n\t\t{\n\t\t\tangle += 90 + ((this.root.style.flip == 'x') ? 180 : 0);\n\t\t}\n\t\telse if (s.gradientDirection == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tangle -= 180 + ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t angle += ((this.root.style.flip == 'y') ? -180 : 0);\n\t\t}\n\t\t\n\t\tif (this.root.style.flip == 'x' || this.root.style.flip == 'y')\n\t\t{\n\t\t\tangle *= -1;\n\t\t}\n\n\t\t// LATER: Fix outer bounding box for rotated shapes used in VML.\n\t\tfill.angle = mxUtils.mod(angle, 360);\n\t\tfill.opacity = (s.alpha * s.gradientFillAlpha * 100) + '%';\n\t\tfill.setAttribute(mxClient.OFFICE_PREFIX + ':opacity2', (s.alpha * s.gradientAlpha * 100) + '%');\n\t}\n\telse if (s.alpha < 1 || s.fillAlpha < 1)\n\t{\n\t\tfill.opacity = (s.alpha * s.fillAlpha * 100) + '%';\t\t\t\n\t}\n\t\n\treturn fill;\n};\n/**\n * Function: createStroke\n * \n * Creates a fill for the current state.\n */\nmxVmlCanvas2D.prototype.createStroke = function()\n{\n\tvar s = this.state;\n\tvar stroke = this.createVmlElement('stroke');\n\tstroke.endcap = s.lineCap || 'flat';\n\tstroke.joinstyle = s.lineJoin || 'miter';\n\tstroke.miterlimit = s.miterLimit || '10';\n\t\n\tif (s.alpha < 1 || s.strokeAlpha < 1)\n\t{\n\t\tstroke.opacity = (s.alpha * s.strokeAlpha * 100) + '%';\n\t}\n\t\n\tif (s.dashed)\n\t{\n\t\tstroke.dashstyle = this.getVmlDashStyle();\n\t}\n\t\n\treturn stroke;\n};\n\n/**\n * Function: getVmlDashPattern\n * \n * Returns a VML dash pattern for the current dashPattern.\n * See http://msdn.microsoft.com/en-us/library/bb264085(v=vs.85).aspx\n */\nmxVmlCanvas2D.prototype.getVmlDashStyle = function()\n{\n\tvar result = 'dash';\n\t\n\tif (typeof(this.state.dashPattern) === 'string')\n\t{\n\t\tvar tok = this.state.dashPattern.split(' ');\n\t\t\n\t\tif (tok.length > 0 && tok[0] == 1)\n\t\t{\n\t\t\tresult = '0 2';\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createShadow\n * \n * Creates a shadow for the given node.\n */\nmxVmlCanvas2D.prototype.createShadow = function(node, filled, stroked)\n{\n\tvar s = this.state;\n\tvar rad = -s.rotation * (Math.PI / 180);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\n\tvar dx = s.shadowDx * s.scale;\n\tvar dy = s.shadowDy * s.scale;\n\n\tif (this.root.style.flip == 'x')\n\t{\n\t\tdx *= -1;\n\t}\n\telse if (this.root.style.flip == 'y')\n\t{\n\t\tdy *= -1;\n\t}\n\t\n\tvar shadow = node.cloneNode(true);\n\tshadow.style.marginLeft = Math.round(dx * cos - dy * sin) + 'px';\n\tshadow.style.marginTop = Math.round(dx * sin + dy * cos) + 'px';\n\n\t// Workaround for wrong cloning in IE8 standards mode\n\tif (document.documentMode == 8)\n\t{\n\t\tshadow.strokeweight = node.strokeweight;\n\t\t\n\t\tif (node.nodeName == 'shape')\n\t\t{\n\t\t\tshadow.path = this.path.join(' ') + ' e';\n\t\t\tshadow.style.width = this.root.style.width;\n\t\t\tshadow.style.height = this.root.style.height;\n\t\t\tshadow.coordsize = parseInt(node.style.width) + ' ' + parseInt(node.style.height);\n\t\t}\n\t}\n\t\n\tif (stroked)\n\t{\n\t\tshadow.strokecolor = s.shadowColor;\n\t\tshadow.appendChild(this.createShadowStroke());\n\t}\n\telse\n\t{\n\t\tshadow.stroked = 'false';\n\t}\n\t\n\tif (filled)\n\t{\n\t\tshadow.appendChild(this.createShadowFill());\n\t}\n\telse\n\t{\n\t\tshadow.filled = 'false';\n\t}\n\t\n\treturn shadow;\n};\n\n/**\n * Function: createShadowFill\n * \n * Creates the fill for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowFill = function()\n{\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = this.state.shadowColor;\n\tfill.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn fill;\n};\n\n/**\n * Function: createShadowStroke\n * \n * Creates the stroke for the shadow.\n */\nmxVmlCanvas2D.prototype.createShadowStroke = function()\n{\n\tvar stroke = this.createStroke();\n\tstroke.opacity = (this.state.alpha * this.state.shadowAlpha * 100) + '%';\n\t\n\treturn stroke;\n};\n\n/**\n * Function: rotate\n * \n * Sets the rotation of the canvas. Note that rotation cannot be concatenated.\n */\nmxVmlCanvas2D.prototype.rotate = function(theta, flipH, flipV, cx, cy)\n{\n\tif (flipH && flipV)\n\t{\n\t\ttheta += 180;\n\t}\n\telse if (flipH)\n\t{\n\t\tthis.root.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tthis.root.style.flip = 'y';\n\t}\n\n\tif (flipH ? !flipV : flipV)\n\t{\n\t\ttheta *= -1;\n\t}\n\n\tthis.root.style.rotation = theta;\n\tthis.state.rotation = this.state.rotation + theta;\n\tthis.state.rotationCx = cx;\n\tthis.state.rotationCy = cy;\n};\n\n/**\n * Function: begin\n * \n * Extends superclass to create path.\n */\nmxVmlCanvas2D.prototype.begin = function()\n{\n\tmxAbstractCanvas2D.prototype.begin.apply(this, arguments);\n\tthis.node = this.createVmlElement('shape');\n\tthis.node.style.position = 'absolute';\n};\n\n/**\n * Function: quadTo\n * \n * Replaces quadratic curve with bezier curve in VML.\n */\nmxVmlCanvas2D.prototype.quadTo = function(x1, y1, x2, y2)\n{\n\tvar s = this.state;\n\n\tvar cpx0 = (this.lastX + s.dx) * s.scale;\n\tvar cpy0 = (this.lastY + s.dy) * s.scale;\n\tvar qpx1 = (x1 + s.dx) * s.scale;\n\tvar qpy1 = (y1 + s.dy) * s.scale;\n\tvar cpx3 = (x2 + s.dx) * s.scale;\n\tvar cpy3 = (y2 + s.dy) * s.scale;\n\t\n\tvar cpx1 = cpx0 + 2/3 * (qpx1 - cpx0);\n\tvar cpy1 = cpy0 + 2/3 * (qpy1 - cpy0);\n\t\n\tvar cpx2 = cpx3 + 2/3 * (qpx1 - cpx3);\n\tvar cpy2 = cpy3 + 2/3 * (qpy1 - cpy3);\n\t\n\tthis.path.push('c ' + this.format(cpx1) + ' ' + this.format(cpy1) +\n\t\t\t' ' + this.format(cpx2) + ' ' + this.format(cpy2) +\n\t\t\t' ' + this.format(cpx3) + ' ' + this.format(cpy3));\n\tthis.lastX = (cpx3 / s.scale) - s.dx;\n\tthis.lastY = (cpy3 / s.scale) - s.dy;\n\t\n};\n\n/**\n * Function: createRect\n * \n * Sets the glass gradient.\n */\nmxVmlCanvas2D.prototype.createRect = function(nodeName, x, y, w, h)\n{\n\tvar s = this.state;\n\tvar n = this.createVmlElement(nodeName);\n\tn.style.position = 'absolute';\n\tn.style.left = this.format((x + s.dx) * s.scale) + 'px';\n\tn.style.top = this.format((y + s.dy) * s.scale) + 'px';\n\tn.style.width = this.format(w * s.scale) + 'px';\n\tn.style.height = this.format(h * s.scale) + 'px';\n\t\n\treturn n;\n};\n\n/**\n * Function: rect\n * \n * Sets the current path to a rectangle.\n */\nmxVmlCanvas2D.prototype.rect = function(x, y, w, h)\n{\n\tthis.node = this.createRect('rect', x, y, w, h);\n};\n\n/**\n * Function: roundrect\n * \n * Sets the current path to a rounded rectangle.\n */\nmxVmlCanvas2D.prototype.roundrect = function(x, y, w, h, dx, dy)\n{\n\tthis.node = this.createRect('roundrect', x, y, w, h);\n\t// SetAttribute needed here for IE8\n\tthis.node.setAttribute('arcsize', Math.max(dx * 100 / w, dy * 100 / h) + '%');\n};\n\n/**\n * Function: ellipse\n * \n * Sets the current path to an ellipse.\n */\nmxVmlCanvas2D.prototype.ellipse = function(x, y, w, h)\n{\n\tthis.node = this.createRect('oval', x, y, w, h);\n};\n\n/**\n * Function: image\n * \n * Paints an image.\n */\nmxVmlCanvas2D.prototype.image = function(x, y, w, h, src, aspect, flipH, flipV)\n{\n\tvar node = null;\n\t\n\tif (!aspect)\n\t{\n\t\tnode = this.createRect('image', x, y, w, h);\n\t\tnode.src = src;\n\t}\n\telse\n\t{\n\t\t// Uses fill with aspect to avoid asynchronous update of size\n\t\tnode = this.createRect('rect', x, y, w, h);\n\t\tnode.stroked = 'false';\n\t\t\n\t\t// Handles image aspect via fill\n\t\tvar fill = this.createVmlElement('fill');\n\t\tfill.aspect = (aspect) ? 'atmost' : 'ignore';\n\t\tfill.rotate = 'true';\n\t\tfill.type = 'frame';\n\t\tfill.src = src;\n\n\t\tnode.appendChild(fill);\n\t}\n\t\n\tif (flipH && flipV)\n\t{\n\t\tnode.style.rotation = '180';\n\t}\n\telse if (flipH)\n\t{\n\t\tnode.style.flip = 'x';\n\t}\n\telse if (flipV)\n\t{\n\t\tnode.style.flip = 'y';\n\t}\n\t\n\tif (this.state.alpha < 1 || this.state.fillAlpha < 1)\n\t{\n\t\t// KNOWN: Borders around transparent images in IE<9. Using fill.opacity\n\t\t// fixes this problem by adding a white background in all IE versions.\n\t\tnode.style.filter += 'alpha(opacity=' + (this.state.alpha * this.state.fillAlpha * 100) + ')';\n\t}\n\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: createText\n * \n * Creates the innermost element that contains the HTML text.\n */\nmxVmlCanvas2D.prototype.createDiv = function(str, align, valign, overflow)\n{\n\tvar div = this.createElement('div');\n\tvar state = this.state;\n\n\tvar css = '';\n\t\n\tif (state.fontBackgroundColor != null)\n\t{\n\t\tcss += 'background-color:' + state.fontBackgroundColor + ';';\n\t}\n\t\n\tif (state.fontBorderColor != null)\n\t{\n\t\tcss += 'border:1px solid ' + state.fontBorderColor + ';';\n\t}\n\t\n\tif (mxUtils.isNode(str))\n\t{\n\t\tdiv.appendChild(str);\n\t}\n\telse\n\t{\n\t\tif (overflow != 'fill' && overflow != 'width')\n\t\t{\n\t\t\tvar div2 = this.createElement('div');\n\t\t\tdiv2.style.cssText = css;\n\t\t\tdiv2.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\t\tdiv2.style.zoom = '1';\n\t\t\tdiv2.style.textDecoration = 'inherit';\n\t\t\tdiv2.innerHTML = str;\n\t\t\tdiv.appendChild(div2);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdiv.style.cssText = css;\n\t\t\tdiv.innerHTML = str;\n\t\t}\n\t}\n\t\n\tvar style = div.style;\n\n\tstyle.fontSize = (state.fontSize / this.vmlScale) + 'px';\n\tstyle.fontFamily = state.fontFamily;\n\tstyle.color = state.fontColor;\n\tstyle.verticalAlign = 'top';\n\tstyle.textAlign = align || 'left';\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (state.fontSize * mxConstants.LINE_HEIGHT / this.vmlScale) + 'px' : mxConstants.LINE_HEIGHT;\n\n\tif ((state.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\n\tif ((state.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\t\n\tif ((state.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\t\n\treturn div;\n};\n\n/**\n * Function: text\n * \n * Paints the given text. Possible values for format are empty string for plain\n * text and html for HTML markup. Clipping, text background and border are not\n * supported for plain text in VML.\n */\nmxVmlCanvas2D.prototype.text = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\tif (this.textEnabled && str != null)\n\t{\n\t\tvar s = this.state;\n\t\t\n\t\tif (format == 'html')\n\t\t{\n\t\t\tif (s.rotation != null)\n\t\t\t{\n\t\t\t\tvar pt = this.rotatePoint(x, y, s.rotation, s.rotationCx, s.rotationCy);\n\t\t\t\t\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tx += s.dx;\n\t\t\t\ty += s.dy;\n\t\t\t\t\n\t\t\t\t// Workaround for rendering offsets\n\t\t\t\tif (overflow != 'fill' && valign == mxConstants.ALIGN_TOP)\n\t\t\t\t{\n\t\t\t\t\ty -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx *= s.scale;\n\t\t\t\ty *= s.scale;\n\t\t\t}\n\n\t\t\t// Adds event transparency in IE8 standards without the transparent background\n\t\t\t// filter which cannot be used due to bugs in the zoomed bounding box (too slow)\n\t\t\t// FIXME: No event transparency if inside v:rect (ie part of shape)\n\t\t\t// KNOWN: Offset wrong for rotated text with word that are longer than the wrapping\n\t\t\t// width in IE8 because real width of text cannot be determined here.\n\t\t\t// This should be fixed in mxText.updateBoundingBox by calling before this and\n\t\t\t// passing the real width to this method if not clipped and wrapped.\n\t\t\tvar abs = (document.documentMode == 8 && !mxClient.IS_EM) ? this.createVmlElement('group') : this.createElement('div');\n\t\t\tabs.style.position = 'absolute';\n\t\t\tabs.style.display = 'inline';\n\t\t\tabs.style.left = this.format(x) + 'px';\n\t\t\tabs.style.top = this.format(y) + 'px';\n\t\t\tabs.style.zoom = s.scale;\n\n\t\t\tvar box = this.createElement('div');\n\t\t\tbox.style.position = 'relative';\n\t\t\tbox.style.display = 'inline';\n\t\t\t\n\t\t\tvar margin = mxUtils.getAlignmentAsPoint(align, valign);\n\t\t\tvar dx = margin.x;\n\t\t\tvar dy = margin.y;\n\n\t\t\tvar div = this.createDiv(str, align, valign, overflow);\n\t\t\tvar inner = this.createElement('div');\n\t\t\t\n\t\t\tif (dir != null)\n\t\t\t{\n\t\t\t\tdiv.setAttribute('dir', dir);\n\t\t\t}\n\n\t\t\tif (wrap && w > 0)\n\t\t\t{\n\t\t\t\tif (!clip)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tdiv.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\t// LATER: Check if other cases need to be handled\n\t\t\t\tif (div.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tvar tmp = div;\n\t\t\t\t\t\n\t\t\t\t\tif (tmp.firstChild != null && tmp.firstChild.nodeName == 'DIV')\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp.firstChild.style.width = '100%';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.whiteSpace = 'nowrap';\n\t\t\t}\n\t\t\t\n\t\t\tvar rot = s.rotation + (rotation || 0);\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tinner.style.display = 'inline';\n\t\t\t\tinner.style.zoom = '1';\n\t\t\t\tinner.appendChild(div);\n\n\t\t\t\t// Box not needed for rendering in IE8 standards\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM && this.root.nodeName != 'DIV')\n\t\t\t\t{\n\t\t\t\t\tbox.appendChild(inner);\n\t\t\t\t\tabs.appendChild(box);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tabs.appendChild(inner);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tbox.appendChild(div);\n\t\t\t\tabs.appendChild(box);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.style.display = 'inline';\n\t\t\t\tabs.appendChild(div);\n\t\t\t}\n\t\t\t\n\t\t\t// Inserts the node into the DOM\n\t\t\tif (this.root.nodeName != 'DIV')\n\t\t\t{\n\t\t\t\t// Rectangle to fix position in group\n\t\t\t\tvar rect = this.createVmlElement('rect');\n\t\t\t\trect.stroked = 'false';\n\t\t\t\trect.filled = 'false';\n\n\t\t\t\trect.appendChild(abs);\n\t\t\t\tthis.root.appendChild(rect);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.root.appendChild(abs);\n\t\t\t}\n\t\t\t\n\t\t\tif (clip)\n\t\t\t{\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = Math.round(w) + 'px';\n\t\t\t\t\n\t\t\t\tif (!mxClient.IS_QUIRKS)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.maxHeight = Math.round(h) + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (overflow == 'fill')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.height = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\telse if (overflow == 'width')\n\t\t\t{\n\t\t\t\t// KNOWN: Affects horizontal alignment in quirks\n\t\t\t\t// but fill should only be used with align=left\n\t\t\t\tdiv.style.overflow = 'hidden';\n\t\t\t\tdiv.style.width = (Math.max(0, w) + 1) + 'px';\n\t\t\t\tdiv.style.maxHeight = (Math.max(0, h) + 1) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\tif (this.rotateHtml && rot != 0)\n\t\t\t{\n\t\t\t\tvar rad = rot * (Math.PI / 180);\n\t\t\t\t\n\t\t\t\t// Precalculate cos and sin for the rotation\n\t\t\t\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\t\t\t\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\t\t\t\trad %= 2 * Math.PI;\n\t\t\t\tif (rad < 0) rad += 2 * Math.PI;\n\t\t\t\trad %= Math.PI;\n\t\t\t\tif (rad > Math.PI / 2) rad = Math.PI - rad;\n\t\t\t\t\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.display = 'inline-block';\n\t\t\t\t\tinner.style.display = 'inline-block';\n\t\t\t\t\tbox.style.display = 'inline-block';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdiv.style.position = 'absolute';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tvar sizeDiv = div;\n\t\t\t\t\n\t\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar tmp = sizeDiv.offsetWidth + 3;\n\t\t\t\tvar oh = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tif (clip)\n\t\t\t\t{\n\t\t\t\t\tw = Math.min(w, tmp);\n\t\t\t\t\toh = Math.min(oh, h);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tw = tmp;\n\t\t\t\t}\n\n\t\t\t\t// Handles words that are longer than the given wrapping width\n\t\t\t\tif (wrap)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.width = w + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && (clip || overflow == 'width') && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\n\t\t\t\tvar top_fix = (h - h * cos + w * -sin) / 2 - real_sin * w * (dx + 0.5) + real_cos * h * (dy + 0.5);\n\t\t\t\tvar left_fix = (w - w * cos + h * -sin) / 2 + real_cos * w * (dx + 0.5) + real_sin * h * (dy + 0.5);\n\n\t\t\t\tif (abs.nodeName == 'group' && this.root.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\t// Workaround for bug where group gets moved away if left and top are non-zero in IE8 standards\n\t\t\t\t\tvar pos = this.createElement('div');\n\t\t\t\t\tpos.style.display = 'inline-block';\n\t\t\t\t\tpos.style.position = 'absolute';\n\t\t\t\t\tpos.style.left = this.format(x + (left_fix - w / 2) * s.scale) + 'px';\n\t\t\t\t\tpos.style.top = this.format(y + (top_fix - h / 2) * s.scale) + 'px';\n\t\t\t\t\t\n\t\t\t\t\tabs.parentNode.appendChild(pos);\n\t\t\t\t\tpos.appendChild(abs);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar sc = (document.documentMode == 8 && !mxClient.IS_EM) ? 1 : s.scale;\n\t\t\t\t\t\n\t\t\t\t\tabs.style.left = this.format(x + (left_fix - w / 2) * sc) + 'px';\n\t\t\t\t\tabs.style.top = this.format(y + (top_fix - h / 2) * sc) + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// KNOWN: Rotated text rendering quality is bad for IE9 quirks\n\t\t\t\tinner.style.filter = \"progid:DXImageTransform.Microsoft.Matrix(M11=\"+real_cos+\", M12=\"+\n\t\t\t\t\treal_sin+\", M21=\"+(-real_sin)+\", M22=\"+real_cos+\", sizingMethod='auto expand')\";\n\t\t\t\tinner.style.backgroundColor = this.rotatedHtmlBackground;\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tinner.style.filter += 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\n\t\t\t\t// Restore parent node for DIV\n\t\t\t\tinner.appendChild(div);\n\t\t\t\tdiv.style.position = '';\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t}\n\t\t\telse if (document.documentMode != 8 || mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tdiv.style.verticalAlign = 'top';\n\t\t\t\t\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tabs.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Adds div to document to measure size\n\t\t\t\tvar divParent = div.parentNode;\n\t\t\t\tdiv.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(div);\n\t\t\t\t\n\t\t\t\tw = div.offsetWidth;\n\t\t\t\tvar oh = div.offsetHeight;\n\t\t\t\t\n\t\t\t\t// Simulates max-height in quirks\n\t\t\t\tif (mxClient.IS_QUIRKS && clip && oh > h)\n\t\t\t\t{\n\t\t\t\t\toh = h;\n\t\t\t\t\t\n\t\t\t\t\t// Quirks does not support maxHeight\n\t\t\t\t\tdiv.style.height = oh + 'px';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\th = oh;\n\t\t\t\t\n\t\t\t\tdiv.style.visibility = '';\n\t\t\t\tdivParent.appendChild(div);\n\t\t\t\t\n\t\t\t\tabs.style.left = this.format(x + w * dx * this.state.scale) + 'px';\n\t\t\t\tabs.style.top = this.format(y + h * dy * this.state.scale) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.state.alpha < 1)\n\t\t\t\t{\n\t\t\t\t\tdiv.style.filter = 'alpha(opacity=' + (this.state.alpha * 100) + ')';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Faster rendering in IE8 without offsetWidth/Height\n\t\t\t\tbox.style.left = (dx * 100) + '%';\n\t\t\t\tbox.style.top = (dy * 100) + '%';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.plainText(x, y, w, h, mxUtils.htmlEntities(str, false), align, valign, wrap, format, overflow, clip, rotation, dir);\n\t\t}\n\t}\n};\n\n/**\n * Function: plainText\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.plainText = function(x, y, w, h, str, align, valign, wrap, format, overflow, clip, rotation, dir)\n{\n\t// TextDirection is ignored since this code is not used (format is always HTML in the text function)\n\tvar s = this.state;\n\tx = (x + s.dx) * s.scale;\n\ty = (y + s.dy) * s.scale;\n\t\n\tvar node = this.createVmlElement('shape');\n\tnode.style.width = '1px';\n\tnode.style.height = '1px';\n\tnode.stroked = 'false';\n\n\tvar fill = this.createVmlElement('fill');\n\tfill.color = s.fontColor;\n\tfill.opacity = (s.alpha * 100) + '%';\n\tnode.appendChild(fill);\n\t\n\tvar path = this.createVmlElement('path');\n\tpath.textpathok = 'true';\n\tpath.v = 'm ' + this.format(0) + ' ' + this.format(0) + ' l ' + this.format(1) + ' ' + this.format(0);\n\t\n\tnode.appendChild(path);\n\t\n\t// KNOWN: Font family and text decoration ignored\n\tvar tp = this.createVmlElement('textpath');\n\ttp.style.cssText = 'v-text-align:' + align;\n\ttp.style.align = align;\n\ttp.style.fontFamily = s.fontFamily;\n\ttp.string = str;\n\ttp.on = 'true';\n\t\n\t// Scale via fontsize instead of node.style.zoom for correct offsets in IE8\n\tvar size = s.fontSize * s.scale / this.vmlScale;\n\ttp.style.fontSize = size + 'px';\n\t\n\t// Bold\n\tif ((s.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\ttp.style.fontWeight = 'bold';\n\t}\n\t\n\t// Italic\n\tif ((s.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\ttp.style.fontStyle = 'italic';\n\t}\n\n\t// Underline\n\tif ((s.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\ttp.style.textDecoration = 'underline';\n\t}\n\n\tvar lines = str.split('\\n');\n\tvar textHeight = size + (lines.length - 1) * size * mxConstants.LINE_HEIGHT;\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = - textHeight / 2;\n\t}\n\telse if (valign != mxConstants.ALIGN_MIDDLE) // top\n\t{\n\t\tdy = textHeight / 2;\n\t}\n\n\tif (rotation != null)\n\t{\n\t\tnode.style.rotation = rotation;\n\t\tvar rad = rotation * (Math.PI / 180);\n\t\tdx = Math.sin(rad) * dy;\n\t\tdy = Math.cos(rad) * dy;\n\t}\n\n\t// FIXME: Clipping is relative to bounding box\n\t/*if (clip)\n\t{\n\t\tnode.style.clip = 'rect(0px ' + this.format(w) + 'px ' + this.format(h) + 'px 0px)';\n\t}*/\n\t\n\tnode.appendChild(tp);\n\tnode.style.left = this.format(x - dx) + 'px';\n\tnode.style.top = this.format(y + dy) + 'px';\n\t\n\tthis.root.appendChild(node);\n};\n\n/**\n * Function: stroke\n * \n * Paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.stroke = function()\n{\n\tthis.addNode(false, true);\n};\n\n/**\n * Function: fill\n * \n * Fills the current path.\n */\nmxVmlCanvas2D.prototype.fill = function()\n{\n\tthis.addNode(true, false);\n};\n\n/**\n * Function: fillAndStroke\n * \n * Fills and paints the outline of the current path.\n */\nmxVmlCanvas2D.prototype.fillAndStroke = function()\n{\n\tthis.addNode(true, true);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGuide\n *\n * Implements the alignment of selection cells to other cells in the graph.\n * \n * Constructor: mxGuide\n * \n * Constructs a new guide object.\n */\nfunction mxGuide(graph, states)\n{\n\tthis.graph = graph;\n\tthis.setStates(states);\n};\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph> instance.\n */\nmxGuide.prototype.graph = null;\n\n/**\n * Variable: states\n * \n * Contains the <mxCellStates> that are used for alignment.\n */\nmxGuide.prototype.states = null;\n\n/**\n * Variable: horizontal\n *\n * Specifies if horizontal guides are enabled. Default is true.\n */\nmxGuide.prototype.horizontal = true;\n\n/**\n * Variable: vertical\n *\n * Specifies if vertical guides are enabled. Default is true.\n */\nmxGuide.prototype.vertical = true;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the horizontal guide.\n */\nmxGuide.prototype.guideX = null;\n\n/**\n * Variable: vertical\n *\n * Holds the <mxShape> for the vertical guide.\n */\nmxGuide.prototype.guideY = null;\n\n/**\n * Function: setStates\n * \n * Sets the <mxCellStates> that should be used for alignment.\n */\nmxGuide.prototype.setStates = function(states)\n{\n\tthis.states = states;\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the guide should be enabled for the given native event. This\n * implementation always returns true.\n */\nmxGuide.prototype.isEnabledForEvent = function(evt)\n{\n\treturn true;\n};\n\n/**\n * Function: getGuideTolerance\n * \n * Returns the tolerance for the guides. Default value is gridSize / 2.\n */\nmxGuide.prototype.getGuideTolerance = function()\n{\n\treturn this.graph.gridSize / 2;\n};\n\n/**\n * Function: createGuideShape\n * \n * Returns the mxShape to be used for painting the respective guide. This\n * implementation returns a new, dashed and crisp <mxPolyline> using\n * <mxConstants.GUIDE_COLOR> and <mxConstants.GUIDE_STROKEWIDTH> as the format.\n * \n * Parameters:\n * \n * horizontal - Boolean that specifies which guide should be created.\n */\nmxGuide.prototype.createGuideShape = function(horizontal)\n{\n\tvar guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);\n\tguide.isDashed = true;\n\t\n\treturn guide;\n};\n\n/**\n * Function: move\n * \n * Moves the <bounds> by the given <mxPoint> and returnt the snapped point.\n */\nmxGuide.prototype.move = function(bounds, delta, gridEnabled, clone)\n{\n\tif (this.states != null && (this.horizontal || this.vertical) && bounds != null && delta != null)\n\t{\n\t\tvar trx = this.graph.getView().translate;\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tvar overrideX = false;\n\t\tvar stateX = null;\n\t\tvar valueX = null;\n\t\tvar overrideY = false;\n\t\tvar stateY = null;\n\t\tvar valueY = null;\n\t\t\n\t\tvar tt = this.getGuideTolerance();\n\t\tvar ttX = tt;\n\t\tvar ttY = tt;\n\t\t\n\t\tvar b = bounds.clone();\n\t\tb.x += delta.x;\n\t\tb.y += delta.y;\n\t\t\n\t\tvar left = b.x;\n\t\tvar right = b.x + b.width;\n\t\tvar center = b.getCenterX();\n\t\tvar top = b.y;\n\t\tvar bottom = b.y + b.height;\n\t\tvar middle = b.getCenterY();\n\t\n\t\t// Snaps the left, center and right to the given x-coordinate\n\t\tfunction snapX(x, state)\n\t\t{\n\t\t\tx += this.graph.panDx;\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (Math.abs(x - center) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.getCenterX();\n\t\t\t\tttX = Math.abs(x - center);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(x - left) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.x;\n\t\t\t\tttX = Math.abs(x - left);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(x - right) < ttX)\n\t\t\t{\n\t\t\t\tdx = x - bounds.x - bounds.width;\n\t\t\t\tttX = Math.abs(x - right);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateX = state;\n\t\t\t\tvalueX = Math.round(x - this.graph.panDx);\n\t\t\t\t\n\t\t\t\tif (this.guideX == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideX = this.createGuideShape(true);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideX.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideX.pointerEvents = false;\n\t\t\t\t\tthis.guideX.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideX = overrideX || override;\n\t\t};\n\t\t\n\t\t// Snaps the top, middle or bottom to the given y-coordinate\n\t\tfunction snapY(y)\n\t\t{\n\t\t\ty += this.graph.panDy;\n\t\t\tvar override = false;\n\t\t\t\n\t\t\tif (Math.abs(y - middle) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.getCenterY();\n\t\t\t\tttY = Math.abs(y -  middle);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(y - top) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.y;\n\t\t\t\tttY = Math.abs(y - top);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\telse if (Math.abs(y - bottom) < ttY)\n\t\t\t{\n\t\t\t\tdy = y - bounds.y - bounds.height;\n\t\t\t\tttY = Math.abs(y - bottom);\n\t\t\t\toverride = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (override)\n\t\t\t{\n\t\t\t\tstateY = state;\n\t\t\t\tvalueY = Math.round(y - this.graph.panDy);\n\t\t\t\t\n\t\t\t\tif (this.guideY == null)\n\t\t\t\t{\n\t\t\t\t\tthis.guideY = this.createGuideShape(false);\n\t\t\t\t\t\n\t\t\t\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t\t\t\t// event-transparency on the background area of the rectangle since\n\t\t\t\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\t\t\t\tthis.guideY.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.guideY.pointerEvents = false;\n\t\t\t\t\tthis.guideY.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\toverrideY = overrideY || override;\n\t\t};\n\t\t\n\t\tfor (var i = 0; i < this.states.length; i++)\n\t\t{\n\t\t\tvar state =  this.states[i];\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Align x\n\t\t\t\tif (this.horizontal)\n\t\t\t\t{\n\t\t\t\t\tsnapX.call(this, state.getCenterX(), state);\n\t\t\t\t\tsnapX.call(this, state.x, state);\n\t\t\t\t\tsnapX.call(this, state.x + state.width, state);\n\t\t\t\t}\n\t\n\t\t\t\t// Align y\n\t\t\t\tif (this.vertical)\n\t\t\t\t{\n\t\t\t\t\tsnapY.call(this, state.getCenterY(), state);\n\t\t\t\t\tsnapY.call(this, state.y, state);\n\t\t\t\t\tsnapY.call(this, state.y + state.height, state);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Moves cells that are off-grid back to the grid on move\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tif (!overrideX)\n\t\t\t{\n\t\t\t\tvar tx = bounds.x - (this.graph.snap(bounds.x /\n\t\t\t\t\tscale - trx.x) + trx.x) * scale;\n\t\t\t\tdx = this.graph.snap(dx / scale) * scale - tx;\n\t\t\t}\n\t\t\t\n\t\t\tif (!overrideY)\n\t\t\t{\n\t\t\t\tvar ty = bounds.y - (this.graph.snap(bounds.y /\n\t\t\t\t\tscale - trx.y) + trx.y) * scale;\n\t\t\t\tdy = this.graph.snap(dy / scale) * scale - ty;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the guides\n\t\tvar c = this.graph.container;\n\t\t\n\t\tif (!overrideX && this.guideX != null)\n\t\t{\n\t\t\tthis.guideX.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideX != null)\n\t\t{\n\t\t\tif (stateX != null && bounds != null)\n\t\t\t{\n\t\t\t\tminY = Math.min(bounds.y + dy - this.graph.panDy, stateX.y);\n\t\t\t\tmaxY = Math.max(bounds.y + bounds.height + dy - this.graph.panDy, stateX.y + stateX.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (minY != null && maxY != null)\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, minY), new mxPoint(valueX, maxY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideX.points = [new mxPoint(valueX, -this.graph.panDy), new mxPoint(valueX, c.scrollHeight - 3 - this.graph.panDy)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideX.stroke = this.getGuideColor(stateX, true);\n\t\t\tthis.guideX.node.style.visibility = 'visible';\n\t\t\tthis.guideX.redraw();\n\t\t}\n\t\t\n\t\tif (!overrideY && this.guideY != null)\n\t\t{\n\t\t\tthis.guideY.node.style.visibility = 'hidden';\n\t\t}\n\t\telse if (this.guideY != null)\n\t\t{\n\t\t\tif (stateY != null && bounds != null)\n\t\t\t{\n\t\t\t\tminX = Math.min(bounds.x + dx - this.graph.panDx, stateY.x);\n\t\t\t\tmaxX = Math.max(bounds.x + bounds.width + dx - this.graph.panDx, stateY.x + stateY.width);\n\t\t\t}\n\t\t\t\n\t\t\tif (minX != null && maxX != null)\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(minX, valueY), new mxPoint(maxX, valueY)];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.guideY.points = [new mxPoint(-this.graph.panDx, valueY), new mxPoint(c.scrollWidth - 3 - this.graph.panDx, valueY)];\n\t\t\t}\n\t\t\t\n\t\t\tthis.guideY.stroke = this.getGuideColor(stateY, false);\n\t\t\tthis.guideY.node.style.visibility = 'visible';\n\t\t\tthis.guideY.redraw();\n\t\t}\n\t\t\n\t\tdelta = new mxPoint(dx, dy);\n\t}\n\t\n\treturn delta;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.getGuideColor = function(state, horizontal)\n{\n\treturn mxConstants.GUIDE_COLOR;\n};\n\n/**\n * Function: hide\n * \n * Hides all current guides.\n */\nmxGuide.prototype.hide = function()\n{\n\tthis.setVisible(false);\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides the current guides.\n */\nmxGuide.prototype.setVisible = function(visible)\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.node.style.visibility = (visible) ? 'visible' : 'hidden';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys all resources that this object uses.\n */\nmxGuide.prototype.destroy = function()\n{\n\tif (this.guideX != null)\n\t{\n\t\tthis.guideX.destroy();\n\t\tthis.guideX = null;\n\t}\n\t\n\tif (this.guideY != null)\n\t{\n\t\tthis.guideY.destroy();\n\t\tthis.guideY = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStencil\n *\n * Implements a generic shape which is based on a XML node as a description.\n * \n * shape:\n * \n * The outer element is *shape*, that has attributes:\n * \n * - \"name\", string, required. The stencil name that uniquely identifies the shape.\n * - \"w\" and \"h\" are optional decimal view bounds. This defines your co-ordinate\n * system for the graphics operations in the shape. The default is 100,100.\n * - \"aspect\", optional string. Either \"variable\", the default, or \"fixed\". Fixed\n * means always render the shape with the aspect ratio defined by the ratio w/h.\n * Variable causes the ratio to match that of the geometry of the current vertex.\n * - \"strokewidth\", optional string. Either an integer or the string \"inherit\".\n * \"inherit\" indicates that the strokeWidth of the cell is only changed on scaling,\n * not on resizing. Default is \"1\".\n * If numeric values are used, the strokeWidth of the cell is changed on both\n * scaling and resizing and the value defines the multiple that is applied to\n * the width.\n * \n * connections:\n * \n * If you want to define specific fixed connection points on the shape use the\n * *connections* element. Each *constraint* element within connections defines\n * a fixed connection point on the shape. Constraints have attributes:\n * \n * - \"perimeter\", required. 1 or 0. 0 sets the connection point where specified\n * by x,y. 1 Causes the position of the connection point to be extrapolated from\n * the center of the shape, through x,y to the point of intersection with the\n * perimeter of the shape.\n * - \"x\" and \"y\" are the position of the fixed point relative to the bounds of\n * the shape. They can be automatically adjusted if perimeter=1. So, (0,0) is top\n * left, (0.5,0.5) the center, (1,0.5) the center of the right hand edge of the\n * bounds, etc. Values may be less than 0 or greater than 1 to be positioned\n * outside of the shape.\n * - \"name\", optional string. A unique identifier for the port on the shape.\n * \n * background and foreground:\n * \n * The path of the graphics drawing is split into two elements, *foreground* and\n * *background*. The split is to define which part any shadow applied to the shape\n * is derived from (the background). This, generally, means the background is the\n * line tracing of the outside of the shape, but not always.\n * \n * Any stroke, fill or fillstroke of a background must be the first element of the\n * foreground element, they must not be used within *background*. If the background\n * is empty, this is not required.\n * \n * Because the background cannot have any fill or stroke, it can contain only one\n * *path*, *rect*, *roundrect* or *ellipse* element (or none). It can also not\n * include *image*, *text* or *include-shape*.\n * \n * Note that the state, styling and drawing in mxGraph stencils is very close in\n * design to that of HTML 5 canvas. Tutorials on this subject, if you're not\n * familiar with the topic, will give a good high-level introduction to the\n * concepts used.\n * \n * State:\n * \n * Rendering within the foreground and background elements has the concept of\n * state. There are two types of operations other than state save/load, styling\n * and drawing. The styling operations change the current state, so you can save\n * the current state with <save/> and pull the last saved state from the state\n * stack using <restore/>.\n * \n * Styling:\n * \n * The elements that change colors within the current state all take a hash\n * prefixed hex color code (\"#FFEA80\").\n * \n * - *strokecolor*, this sets the color that drawing paths will be rendered in\n * when a stroke or fillstroke command is issued.\n * - *fillcolor*, this sets the color that the inside of closed paths will be\n * rendered in when a fill or fillstroke command is issued.\n * - *fontcolor*, this sets the color that fonts are rendered in when text is drawn.\n * \n * *alpha* defines the degree of transparency used between 1.0 for fully opaque\n * and 0.0 for fully transparent.\n * \n * *strokewidth* defines the integer thickness of drawing elements rendered by\n * stroking. Use fixed=\"1\" to apply the value as-is, without scaling.\n * \n * *dashed* is \"1\" for dashing enabled and \"0\" for disabled.\n * \n * When *dashed* is enabled the current dash pattern, defined by *dashpattern*,\n * is used on strokes. dashpattern is a sequence of space separated \"on, off\"\n * lengths that define what distance to paint the stroke for, then what distance\n * to paint nothing for, repeat... The default is \"3 3\". You could define a more\n * complex pattern with \"5 3 2 6\", for example. Generally, it makes sense to have\n * an even number of elements in the dashpattern, but that's not required.\n * \n * *linejoin*, *linecap* and *miterlimit* are best explained by the Mozilla page\n * on Canvas styling (about halfway down). The values are all the same except we\n * use \"flat\" for linecap, instead of Canvas' \"butt\".\n * \n * For font styling there are.\n * \n * - *fontsize*, an integer,\n * - *fontstyle*, an ORed bit pattern of bold (1), italic (2) and underline (4),\n * i.e bold underline is \"5\".\n * - *fontfamily*, is a string defining the typeface to be used.\n * \n * Drawing:\n * \n * Most drawing is contained within a *path* element. Again, the graphic\n * primitives are very similar to that of HTML 5 canvas.\n * \n * - *move* to attributes required decimals (x,y).\n * - *line* to attributes required decimals (x,y).\n * - *quad* to required decimals (x2,y2) via control point required decimals\n * (x1,y1).\n * - *curve* to required decimals (x3,y3), via control points required decimals\n * (x1,y1) and (x2,y2).\n * - *arc*, this doesn't follow the HTML Canvas signatures, instead it's a copy\n * of the SVG arc command. The SVG specification documentation gives the best\n * description of its behaviors. The attributes are named identically, they are\n * decimals and all required.\n * - *close* ends the current subpath and causes an automatic straight line to\n * be drawn from the current point to the initial point of the current subpath.\n * \n * Complex drawing:\n * \n * In addition to the graphics primitive operations there are non-primitive\n * operations. These provide an easy method to draw some basic shapes.\n * \n * - *rect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals\n * - *roundrect*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals. Also\n * \"arcsize\" an optional decimal attribute defining how large, the corner curves\n * are.\n * - *ellipse*, attributes \"x\", \"y\", \"w\", \"h\", all required decimals.\n * \n * Note that these 3 shapes and all paths must be followed by either a fill,\n * stroke, or fillstroke.\n * \n * Text:\n * \n * *text* elements have the following attributes.\n * \n * - \"str\", the text string to display, required.\n * - \"x\" and \"y\", the decimal location (x,y) of the text element, required.\n * - \"align\", the horizontal alignment of the text element, either \"left\",\n * \"center\" or \"right\". Optional, default is \"left\".\n * - \"valign\", the vertical alignment of the text element, either \"top\", \"middle\"\n * or \"bottom\". Optional, default is \"top\".\n * - \"localized\", 0 or 1, if 1 then the \"str\" actually contains a key to use to\n * fetch the value out of mxResources. Optional, default is\n * <mxStencil.defaultLocalized>.\n * - \"vertical\", 0 or 1, if 1 the label is rendered vertically (rotated by 90\n * degrees). Optional, default is 0.\n * - \"rotation\", angle in degrees (0 to 360). The angle to rotate the text by.\n * Optional, default is 0.\n * - \"align-shape\", 0 or 1, if 0 ignore the rotation of the shape when setting\n * the text rotation. Optional, default is 1.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the text element (ignored if the str attribute is not null).\n * \n * Images:\n * \n * *image* elements can either be external URLs, or data URIs, where supported\n * (not in IE 7-). Attributes are:\n * \n * - \"src\", required string. Either a data URI or URL.\n * - \"x\", \"y\", required decimals. The (x,y) position of the image.\n * - \"w\", \"h\", required decimals. The width and height of the image.\n * - \"flipH\" and \"flipV\", optional 0 or 1. Whether to flip the image along the\n * horizontal/vertical axis. Default is 0 for both.\n * \n * If <allowEval> is true, then the text content of the this element can define\n * a function which is invoked with the shape as the only argument and returns\n * the value for the image source (ignored if the src attribute is not null).\n * \n * Sub-shapes:\n * \n * *include-shape* allow stencils to be rendered within the current stencil by\n * referencing the sub-stencil by name. Attributes are:\n * \n * - \"name\", required string. The unique shape name of the stencil.\n * - \"x\", \"y\", \"w\", \"h\", required decimals. The (x,y) position of the sub-shape\n * and its width and height.\n * \n * Constructor: mxStencil\n * \n * Constructs a new generic shape by setting <desc> to the given XML node and\n * invoking <parseDescription> and <parseConstraints>.\n * \n * Parameters:\n * \n * desc - XML node that contains the stencil description.\n */\nfunction mxStencil(desc)\n{\n\tthis.desc = desc;\n\tthis.parseDescription();\n\tthis.parseConstraints();\n};\n\n/**\n * Variable: defaultLocalized\n * \n * Static global variable that specifies the default value for the localized\n * attribute of the text element. Default is false.\n */\nmxStencil.defaultLocalized = false;\n\n/**\n * Function: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content and images. Default is false. Set this to true\n * if stencils can not contain user input.\n */\nmxStencil.allowEval = false;\n\n/**\n * Variable: desc\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.desc = null;\n\n/**\n * Variable: constraints\n * \n * Holds an array of <mxConnectionConstraints> as defined in the shape.\n */\nmxStencil.prototype.constraints = null;\n\n/**\n * Variable: aspect\n *\n * Holds the aspect of the shape. Default is 'auto'.\n */\nmxStencil.prototype.aspect = null;\n\n/**\n * Variable: w0\n *\n * Holds the width of the shape. Default is 100.\n */\nmxStencil.prototype.w0 = null;\n\n/**\n * Variable: h0\n *\n * Holds the height of the shape. Default is 100.\n */\nmxStencil.prototype.h0 = null;\n\n/**\n * Variable: bgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.bgNode = null;\n\n/**\n * Variable: fgNodes\n *\n * Holds the XML node with the stencil description.\n */\nmxStencil.prototype.fgNode = null;\n\n/**\n * Variable: strokewidth\n *\n * Holds the strokewidth direction from the description.\n */\nmxStencil.prototype.strokewidth = null;\n\n/**\n * Function: parseDescription\n *\n * Reads <w0>, <h0>, <aspect>, <bgNodes> and <fgNodes> from <desc>.\n */\nmxStencil.prototype.parseDescription = function()\n{\n\t// LATER: Preprocess nodes for faster painting\n\tthis.fgNode = this.desc.getElementsByTagName('foreground')[0];\n\tthis.bgNode = this.desc.getElementsByTagName('background')[0];\n\tthis.w0 = Number(this.desc.getAttribute('w') || 100);\n\tthis.h0 = Number(this.desc.getAttribute('h') || 100);\n\t\n\t// Possible values for aspect are: variable and fixed where\n\t// variable means fill the available space and fixed means\n\t// use w0 and h0 to compute the aspect.\n\tvar aspect = this.desc.getAttribute('aspect');\n\tthis.aspect = (aspect != null) ? aspect : 'variable';\n\t\n\t// Possible values for strokewidth are all numbers and \"inherit\"\n\t// where the inherit means take the value from the style (ie. the\n\t// user-defined stroke-width). Note that the strokewidth is scaled\n\t// by the minimum scaling that is used to draw the shape (sx, sy).\n\tvar sw = this.desc.getAttribute('strokewidth');\n\tthis.strokewidth = (sw != null) ? sw : '1';\n};\n\n/**\n * Function: parseConstraints\n *\n * Reads the constraints from <desc> into <constraints> using\n * <parseConstraint>.\n */\nmxStencil.prototype.parseConstraints = function()\n{\n\tvar conns = this.desc.getElementsByTagName('connections')[0];\n\t\n\tif (conns != null)\n\t{\n\t\tvar tmp = mxUtils.getChildNodes(conns);\n\t\t\n\t\tif (tmp != null && tmp.length > 0)\n\t\t{\n\t\t\tthis.constraints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t{\n\t\t\t\tthis.constraints.push(this.parseConstraint(tmp[i]));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: parseConstraint\n *\n * Parses the given XML node and returns its <mxConnectionConstraint>.\n */\nmxStencil.prototype.parseConstraint = function(node)\n{\n\tvar x = Number(node.getAttribute('x'));\n\tvar y = Number(node.getAttribute('y'));\n\tvar perimeter = node.getAttribute('perimeter') == '1';\n\tvar name = node.getAttribute('name');\n\t\n\treturn new mxConnectionConstraint(new mxPoint(x, y), perimeter, name);\n};\n\n/**\n * Function: evaluateTextAttribute\n * \n * Gets the given attribute as a text. The return value from <evaluateAttribute>\n * is used as a key to <mxResources.get> if the localized attribute in the text\n * node is 1 or if <defaultLocalized> is true.\n */\nmxStencil.prototype.evaluateTextAttribute = function(node, attribute, shape)\n{\n\tvar result = this.evaluateAttribute(node, attribute, shape);\n\tvar loc = node.getAttribute('localized');\n\t\n\tif ((mxStencil.defaultLocalized && loc == null) || loc == '1')\n\t{\n\t\tresult = mxResources.get(result);\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: evaluateAttribute\n *\n * Gets the attribute for the given name from the given node. If the attribute\n * does not exist then the text content of the node is evaluated and if it is\n * a function it is invoked with <shape> as the only argument and the return\n * value is used as the attribute value to be returned.\n */\nmxStencil.prototype.evaluateAttribute = function(node, attribute, shape)\n{\n\tvar result = node.getAttribute(attribute);\n\t\n\tif (result == null)\n\t{\n\t\tvar text = mxUtils.getTextContent(node);\n\t\t\n\t\tif (text != null && mxStencil.allowEval)\n\t\t{\n\t\t\tvar funct = mxUtils.eval(text);\n\t\t\t\n\t\t\tif (typeof(funct) == 'function')\n\t\t\t{\n\t\t\t\tresult = funct(shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: drawShape\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawShape = function(canvas, shape, x, y, w, h)\n{\n\t// TODO: Internal structure (array of special structs?), relative and absolute\n\t// coordinates (eg. note shape, process vs star, actor etc.), text rendering\n\t// and non-proportional scaling, how to implement pluggable edge shapes\n\t// (start, segment, end blocks), pluggable markers, how to implement\n\t// swimlanes (title area) with this API, add icon, horizontal/vertical\n\t// label, indicator for all shapes, rotation\n\tvar direction = mxUtils.getValue(shape.style, mxConstants.STYLE_DIRECTION, null);\n\tvar aspect = this.computeAspect(shape.style, x, y, w, h, direction);\n\tvar minScale = Math.min(aspect.width, aspect.height);\n\tvar sw = (this.strokewidth == 'inherit') ?\n\t\t\tNumber(mxUtils.getNumber(shape.style, mxConstants.STYLE_STROKEWIDTH, 1)) :\n\t\t\tNumber(this.strokewidth) * minScale;\n\tcanvas.setStrokeWidth(sw);\n\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.bgNode, aspect, false, true);\n\tthis.drawChildren(canvas, shape, x, y, w, h, this.fgNode, aspect, true,\n\t\t!shape.outline || shape.style == null || mxUtils.getValue(\n\t\tshape.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0);\n};\n\n/**\n * Function: drawChildren\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawChildren = function(canvas, shape, x, y, w, h, node, aspect, disableShadow, paint)\n{\n\tif (node != null && w > 0 && h > 0)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t{\n\t\t\t\tthis.drawNode(canvas, shape, tmp, aspect, disableShadow, paint);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\t}\n};\n\n/**\n * Function: computeAspect\n *\n * Returns a rectangle that contains the offset in x and y and the horizontal\n * and vertical scale in width and height used to draw this shape inside the\n * given <mxRectangle>.\n * \n * Parameters:\n * \n * shape - <mxShape> to be drawn.\n * bounds - <mxRectangle> that should contain the stencil.\n * direction - Optional direction of the shape to be darwn.\n */\nmxStencil.prototype.computeAspect = function(shape, x, y, w, h, direction)\n{\n\tvar x0 = x;\n\tvar y0 = y;\n\tvar sx = w / this.w0;\n\tvar sy = h / this.h0;\n\t\n\tvar inverse = (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH);\n\n\tif (inverse)\n\t{\n\t\tsy = w / this.h0;\n\t\tsx = h / this.w0;\n\t\t\n\t\tvar delta = (w - h) / 2;\n\n\t\tx0 += delta;\n\t\ty0 -= delta;\n\t}\n\n\tif (this.aspect == 'fixed')\n\t{\n\t\tsy = Math.min(sx, sy);\n\t\tsx = sy;\n\t\t\n\t\t// Centers the shape inside the available space\n\t\tif (inverse)\n\t\t{\n\t\t\tx0 += (h - this.w0 * sx) / 2;\n\t\t\ty0 += (w - this.h0 * sy) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tx0 += (w - this.w0 * sx) / 2;\n\t\t\ty0 += (h - this.h0 * sy) / 2;\n\t\t}\n\t}\n\n\treturn new mxRectangle(x0, y0, sx, sy);\n};\n\n/**\n * Function: drawNode\n *\n * Draws this stencil inside the given bounds.\n */\nmxStencil.prototype.drawNode = function(canvas, shape, node, aspect, disableShadow, paint)\n{\n\tvar name = node.nodeName;\n\tvar x0 = aspect.x;\n\tvar y0 = aspect.y;\n\tvar sx = aspect.width;\n\tvar sy = aspect.height;\n\tvar minScale = Math.min(sx, sy);\n\t\n\tif (name == 'save')\n\t{\n\t\tcanvas.save();\n\t}\n\telse if (name == 'restore')\n\t{\n\t\tcanvas.restore();\n\t}\n\telse if (paint)\n\t{\n\t\tif (name == 'path')\n\t\t{\n\t\t\tcanvas.begin();\n\t\n\t\t\t// Renders the elements inside the given path\n\t\t\tvar childNode = node.firstChild;\n\t\t\t\n\t\t\twhile (childNode != null)\n\t\t\t{\n\t\t\t\tif (childNode.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tthis.drawNode(canvas, shape, childNode, aspect, disableShadow, paint);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tchildNode = childNode.nextSibling;\n\t\t\t}\n\t\t}\n\t\telse if (name == 'close')\n\t\t{\n\t\t\tcanvas.close();\n\t\t}\n\t\telse if (name == 'move')\n\t\t{\n\t\t\tcanvas.moveTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'line')\n\t\t{\n\t\t\tcanvas.lineTo(x0 + Number(node.getAttribute('x')) * sx, y0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'quad')\n\t\t{\n\t\t\tcanvas.quadTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy);\n\t\t}\n\t\telse if (name == 'curve')\n\t\t{\n\t\t\tcanvas.curveTo(x0 + Number(node.getAttribute('x1')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y1')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x2')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y2')) * sy,\n\t\t\t\t\tx0 + Number(node.getAttribute('x3')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y3')) * sy);\n\t\t}\n\t\telse if (name == 'arc')\n\t\t{\n\t\t\tcanvas.arcTo(Number(node.getAttribute('rx')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('ry')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('x-axis-rotation')),\n\t\t\t\t\tNumber(node.getAttribute('large-arc-flag')),\n\t\t\t\t\tNumber(node.getAttribute('sweep-flag')),\n\t\t\t\t\tx0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy);\n\t\t}\n\t\telse if (name == 'rect')\n\t\t{\n\t\t\tcanvas.rect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'roundrect')\n\t\t{\n\t\t\tvar arcsize = Number(node.getAttribute('arcsize'));\n\t\n\t\t\tif (arcsize == 0)\n\t\t\t{\n\t\t\t\tarcsize = mxConstants.RECTANGLE_ROUNDING_FACTOR * 100;\n\t\t\t}\n\t\t\t\n\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\tvar factor = Number(arcsize) / 100;\n\t\t\tvar r = Math.min(w * factor, h * factor);\n\t\t\t\n\t\t\tcanvas.roundrect(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tw, h, r, r);\n\t\t}\n\t\telse if (name == 'ellipse')\n\t\t{\n\t\t\tcanvas.ellipse(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\tNumber(node.getAttribute('h')) * sy);\n\t\t}\n\t\telse if (name == 'image')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar src = this.evaluateAttribute(node, 'src', shape);\n\t\t\t\t\n\t\t\t\tcanvas.image(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\tNumber(node.getAttribute('w')) * sx,\n\t\t\t\t\tNumber(node.getAttribute('h')) * sy,\n\t\t\t\t\tsrc, false, node.getAttribute('flipH') == '1',\n\t\t\t\t\tnode.getAttribute('flipV') == '1');\n\t\t\t}\n\t\t}\n\t\telse if (name == 'text')\n\t\t{\n\t\t\tif (!shape.outline)\n\t\t\t{\n\t\t\t\tvar str = this.evaluateTextAttribute(node, 'str', shape);\n\t\t\t\tvar rotation = node.getAttribute('vertical') == '1' ? -90 : 0;\n\t\t\t\t\n\t\t\t\tif (node.getAttribute('align-shape') == '0')\n\t\t\t\t{\n\t\t\t\t\tvar dr = shape.rotation;\n\t\t\n\t\t\t\t\t// Depends on flipping\n\t\t\t\t\tvar flipH = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(shape.style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (flipH && flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t\telse if (flipH || flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\trotation += dr;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trotation -= dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\trotation -= node.getAttribute('rotation');\n\t\t\n\t\t\t\tcanvas.text(x0 + Number(node.getAttribute('x')) * sx,\n\t\t\t\t\t\ty0 + Number(node.getAttribute('y')) * sy,\n\t\t\t\t\t\t0, 0, str, node.getAttribute('align') || 'left',\n\t\t\t\t\t\tnode.getAttribute('valign') || 'top', false, '',\n\t\t\t\t\t\tnull, false, rotation);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'include-shape')\n\t\t{\n\t\t\tvar stencil = mxStencilRegistry.getStencil(node.getAttribute('name'));\n\t\t\t\n\t\t\tif (stencil != null)\n\t\t\t{\n\t\t\t\tvar x = x0 + Number(node.getAttribute('x')) * sx;\n\t\t\t\tvar y = y0 + Number(node.getAttribute('y')) * sy;\n\t\t\t\tvar w = Number(node.getAttribute('w')) * sx;\n\t\t\t\tvar h = Number(node.getAttribute('h')) * sy;\n\t\t\t\t\n\t\t\t\tstencil.drawShape(canvas, shape, x, y, w, h);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'fillstroke')\n\t\t{\n\t\t\tcanvas.fillAndStroke();\n\t\t}\n\t\telse if (name == 'fill')\n\t\t{\n\t\t\tcanvas.fill();\n\t\t}\n\t\telse if (name == 'stroke')\n\t\t{\n\t\t\tcanvas.stroke();\n\t\t}\n\t\telse if (name == 'strokewidth')\n\t\t{\n\t\t\tvar s = (node.getAttribute('fixed') == '1') ? 1 : minScale;\n\t\t\tcanvas.setStrokeWidth(Number(node.getAttribute('width')) * s);\n\t\t}\n\t\telse if (name == 'dashed')\n\t\t{\n\t\t\tcanvas.setDashed(node.getAttribute('dashed') == '1');\n\t\t}\n\t\telse if (name == 'dashpattern')\n\t\t{\n\t\t\tvar value = node.getAttribute('pattern');\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tvar tmp = value.split(' ');\n\t\t\t\tvar pat = [];\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < tmp.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (tmp[i].length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tpat.push(Number(tmp[i]) * minScale);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = pat.join(' ');\n\t\t\t\tcanvas.setDashPattern(value);\n\t\t\t}\n\t\t}\n\t\telse if (name == 'strokecolor')\n\t\t{\n\t\t\tcanvas.setStrokeColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'linecap')\n\t\t{\n\t\t\tcanvas.setLineCap(node.getAttribute('cap'));\n\t\t}\n\t\telse if (name == 'linejoin')\n\t\t{\n\t\t\tcanvas.setLineJoin(node.getAttribute('join'));\n\t\t}\n\t\telse if (name == 'miterlimit')\n\t\t{\n\t\t\tcanvas.setMiterLimit(Number(node.getAttribute('limit')));\n\t\t}\n\t\telse if (name == 'fillcolor')\n\t\t{\n\t\t\tcanvas.setFillColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'alpha')\n\t\t{\n\t\t\tcanvas.setAlpha(node.getAttribute('alpha'));\n\t\t}\n\t\telse if (name == 'fontcolor')\n\t\t{\n\t\t\tcanvas.setFontColor(node.getAttribute('color'));\n\t\t}\n\t\telse if (name == 'fontstyle')\n\t\t{\n\t\t\tcanvas.setFontStyle(node.getAttribute('style'));\n\t\t}\n\t\telse if (name == 'fontfamily')\n\t\t{\n\t\t\tcanvas.setFontFamily(node.getAttribute('family'));\n\t\t}\n\t\telse if (name == 'fontsize')\n\t\t{\n\t\t\tcanvas.setFontSize(Number(node.getAttribute('size')) * minScale);\n\t\t}\n\t\t\n\t\tif (disableShadow && (name == 'fillstroke' || name == 'fill' || name == 'stroke'))\n\t\t{\n\t\t\tdisableShadow = false;\n\t\t\tcanvas.setShadow(false);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxShape\n *\n * Base class for all shapes. A shape in mxGraph is a\n * separate implementation for SVG, VML and HTML. Which\n * implementation to use is controlled by the <dialect>\n * property which is assigned from within the <mxCellRenderer>\n * when the shape is created. The dialect must be assigned\n * for a shape, and it does normally depend on the browser and\n * the confiuration of the graph (see <mxGraph> rendering hint).\n *\n * For each supported shape in SVG and VML, a corresponding\n * shape exists in mxGraph, namely for text, image, rectangle,\n * rhombus, ellipse and polyline. The other shapes are a\n * combination of these shapes (eg. label and swimlane)\n * or they consist of one or more (filled) path objects\n * (eg. actor and cylinder). The HTML implementation is\n * optional but may be required for a HTML-only view of\n * the graph.\n *\n * Custom Shapes:\n *\n * To extend from this class, the basic code looks as follows.\n * In the special case where the custom shape consists only of\n * one filled region or one filled region and an additional stroke\n * the <mxActor> and <mxCylinder> should be subclassed,\n * respectively.\n *\n * (code)\n * function CustomShape() { }\n * \n * CustomShape.prototype = new mxShape();\n * CustomShape.prototype.constructor = CustomShape; \n * (end)\n *\n * To register a custom shape in an existing graph instance,\n * one must register the shape under a new name in the graph's\n * cell renderer as follows:\n *\n * (code)\n * mxCellRenderer.registerShape('customShape', CustomShape);\n * (end)\n *\n * The second argument is the name of the constructor.\n *\n * In order to use the shape you can refer to the given name above\n * in a stylesheet. For example, to change the shape for the default\n * vertex style, the following code is used:\n *\n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'customShape';\n * (end)\n * \n * Constructor: mxShape\n *\n * Constructs a new shape.\n */\nfunction mxShape(stencil)\n{\n\tthis.stencil = stencil;\n\tthis.initStyles();\n};\n\n/**\n * Variable: dialect\n *\n * Holds the dialect in which the shape is to be painted.\n * This can be one of the DIALECT constants in <mxConstants>.\n */\nmxShape.prototype.dialect = null;\n\n/**\n * Variable: scale\n *\n * Holds the scale in which the shape is being painted.\n */\nmxShape.prototype.scale = 1;\n\n/**\n * Variable: antiAlias\n * \n * Rendering hint for configuring the canvas.\n */\nmxShape.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxShape.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: bounds\n *\n * Holds the <mxRectangle> that specifies the bounds of this shape.\n */\nmxShape.prototype.bounds = null;\n\n/**\n * Variable: points\n *\n * Holds the array of <mxPoints> that specify the points of this shape.\n */\nmxShape.prototype.points = null;\n\n/**\n * Variable: node\n *\n * Holds the outermost DOM node that represents this shape.\n */\nmxShape.prototype.node = null;\n \n/**\n * Variable: state\n * \n * Optional reference to the corresponding <mxCellState>.\n */\nmxShape.prototype.state = null;\n\n/**\n * Variable: style\n *\n * Optional reference to the style of the corresponding <mxCellState>.\n */\nmxShape.prototype.style = null;\n\n/**\n * Variable: boundingBox\n *\n * Contains the bounding box of the shape, that is, the smallest rectangle\n * that includes all pixels of the shape.\n */\nmxShape.prototype.boundingBox = null;\n\n/**\n * Variable: stencil\n *\n * Holds the <mxStencil> that defines the shape.\n */\nmxShape.prototype.stencil = null;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Event-tolerance for SVG strokes (in px). Default is 8. This is only passed\n * to the canvas in <createSvgCanvas> if <pointerEvents> is true.\n */\nmxShape.prototype.svgStrokeTolerance = 8;\n\n/**\n * Variable: pointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.pointerEvents = true;\n\n/**\n * Variable: svgPointerEvents\n * \n * Specifies if pointer events should be handled. Default is true.\n */\nmxShape.prototype.svgPointerEvents = 'all';\n\n/**\n * Variable: shapePointerEvents\n * \n * Specifies if pointer events outside of shape should be handled. Default\n * is false.\n */\nmxShape.prototype.shapePointerEvents = false;\n\n/**\n * Variable: stencilPointerEvents\n * \n * Specifies if pointer events outside of stencils should be handled. Default\n * is false. Set this to true for backwards compatibility with the 1.x branch.\n */\nmxShape.prototype.stencilPointerEvents = false;\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 1.\n */\nmxShape.prototype.vmlScale = 1;\n\n/**\n * Variable: outline\n * \n * Specifies if the shape should be drawn as an outline. This disables all\n * fill colors and can be used to disable other drawing states that should\n * not be painted for outlines. Default is false. This should be set before\n * calling <apply>.\n */\nmxShape.prototype.outline = false;\n\n/**\n * Variable: visible\n * \n * Specifies if the shape is visible. Default is true.\n */\nmxShape.prototype.visible = true;\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxShape.prototype.useSvgBoundingBox = false;\n\n/**\n * Function: init\n *\n * Initializes the shape by creaing the DOM node using <create>\n * and adding it into the given container.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.init = function(container)\n{\n\tif (this.node == null)\n\t{\n\t\tthis.node = this.create(container);\n\t\t\n\t\tif (container != null)\n\t\t{\n\t\t\tcontainer.appendChild(this.node);\n\t\t}\n\t}\n};\n\n/**\n * Function: initStyles\n *\n * Sets the styles to their default values.\n */\nmxShape.prototype.initStyles = function(container)\n{\n\tthis.strokewidth = 1;\n\tthis.rotation = 0;\n\tthis.opacity = 100;\n\tthis.fillOpacity = 100;\n\tthis.strokeOpacity = 100;\n\tthis.flipH = false;\n\tthis.flipV = false;\n};\n\n/**\n * Function: isParseVml\n * \n * Specifies if any VML should be added via insertAdjacentHtml to the DOM. This\n * is only needed in IE8 and only if the shape contains VML markup. This method\n * returns true.\n */\nmxShape.prototype.isParseVml = function()\n{\n\treturn true;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxShape.prototype.isHtmlAllowed = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Returns 0, or 0.5 if <strokewidth> % 2 == 1.\n */\nmxShape.prototype.getSvgScreenOffset = function()\n{\n\tvar sw = this.stencil && this.stencil.strokewidth != 'inherit' ? Number(this.stencil.strokewidth) : this.strokewidth;\n\t\n\treturn (mxUtils.mod(Math.max(1, Math.round(sw * this.scale)), 2) == 1) ? 0.5 : 0;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM node(s) for the shape in\n * the given container. This implementation invokes\n * <createSvg>, <createHtml> or <createVml> depending\n * on the <dialect> and style settings.\n *\n * Parameters:\n *\n * container - DOM node that will contain the shape.\n */\nmxShape.prototype.create = function(container)\n{\n\tvar node = null;\n\t\n\tif (container != null && container.ownerSVGElement != null)\n\t{\n\t\tnode = this.createSvg(container);\n\t}\n\telse if (document.documentMode == 8 || !mxClient.IS_VML ||\n\t\t(this.dialect != mxConstants.DIALECT_VML && this.isHtmlAllowed()))\n\t{\n\t\tnode = this.createHtml(container);\n\t}\n\telse\n\t{\n\t\tnode = this.createVml(container);\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: createSvg\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.createSvg = function()\n{\n\treturn document.createElementNS(mxConstants.NS_SVG, 'g');\n};\n\n/**\n * Function: createVml\n *\n * Creates and returns the VML node to represent this shape.\n */\nmxShape.prototype.createVml = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\t\n\treturn node;\n};\n\n/**\n * Function: reconfigure\n *\n * Reconfigures this shape. This will update the colors etc in\n * addition to the bounds or points.\n */\nmxShape.prototype.reconfigure = function()\n{\n\tthis.redraw();\n};\n\n/**\n * Function: redraw\n *\n * Creates and returns the SVG node(s) to represent this shape.\n */\nmxShape.prototype.redraw = function()\n{\n\tthis.updateBoundsFromPoints();\n\t\n\tif (this.visible && this.checkBounds())\n\t{\n\t\tthis.node.style.visibility = 'visible';\n\t\tthis.clear();\n\t\t\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.redrawHtmlShape();\n\t\t}\n\t\telse\n\t\t{\t\n\t\t\tthis.redrawShape();\n\t\t}\n\n\t\tthis.updateBoundingBox();\n\t}\n\telse\n\t{\n\t\tthis.node.style.visibility = 'hidden';\n\t\tthis.boundingBox = null;\n\t}\n};\n\n/**\n * Function: clear\n * \n * Removes all child nodes and resets all CSS.\n */\nmxShape.prototype.clear = function()\n{\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\twhile (this.node.lastChild != null)\n\t\t{\n\t\t\tthis.node.removeChild(this.node.lastChild);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.node.style.cssText = 'position:absolute;' + ((this.cursor != null) ?\n\t\t\t('cursor:' + this.cursor + ';') : '');\n\t\tthis.node.innerHTML = '';\n\t}\n};\n\n/**\n * Function: updateBoundsFromPoints\n * \n * Updates the bounds based on the points.\n */\nmxShape.prototype.updateBoundsFromPoints = function()\n{\n\tvar pts = this.points;\n\t\n\tif (pts != null && pts.length > 0 && pts[0] != null)\n\t{\n\t\tthis.bounds = new mxRectangle(Number(pts[0].x), Number(pts[0].y), 1, 1);\n\t\t\n\t\tfor (var i = 1; i < this.points.length; i++)\n\t\t{\n\t\t\tif (pts[i] != null)\n\t\t\t{\n\t\t\t\tthis.bounds.add(new mxRectangle(Number(pts[i].x), Number(pts[i].y), 1, 1));\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the <mxRectangle> for the label bounds of this shape, based on the\n * given scaled and translated bounds of the shape. This method should not\n * change the rectangle in-place. This implementation returns the given rect.\n */\nmxShape.prototype.getLabelBounds = function(rect)\n{\n\tvar d = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\tvar bounds = rect;\n\t\n\t// Normalizes argument for getLabelMargins hook\n\tif (d != mxConstants.DIRECTION_SOUTH && d != mxConstants.DIRECTION_NORTH &&\n\t\tthis.state != null && this.state.text != null &&\n\t\tthis.state.text.isPaintBoundsInverted())\n\t{\n\t\tbounds = bounds.clone();\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\t\n\tvar m = this.getLabelMargins(bounds);\n\t\n\tif (m != null)\n\t{\n\t\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, false) == '1';\n\t\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, false) == '1';\n\t\t\n\t\t// Handles special case for vertical labels\n\t\tif (this.state != null && this.state.text != null &&\n\t\t\tthis.state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = m.x;\n\t\t\tm.x = m.height;\n\t\t\tm.height = m.width;\n\t\t\tm.width = m.y;\n\t\t\tm.y = tmp;\n\n\t\t\ttmp = flipH;\n\t\t\tflipH = flipV;\n\t\t\tflipV = tmp;\n\t\t}\n\t\t\n\t\treturn mxUtils.getDirectedBounds(rect, m, this.style, flipH, flipV);\n\t}\n\t\n\treturn rect;\n};\n\n/**\n * Function: getLabelMargins\n * \n * Returns the scaled top, left, bottom and right margin to be used for\n * computing the label bounds as an <mxRectangle>, where the bottom and right\n * margin are defined in the width and height of the rectangle, respectively.\n */\nmxShape.prototype.getLabelMargins= function(rect)\n{\n\treturn null;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxShape.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height) &&\n\t\t\tthis.bounds.width > 0 && this.bounds.height > 0);\n};\n\n/**\n * Function: createVmlGroup\n *\n * Returns the temporary element used for rendering in IE8 standards mode.\n */\nmxShape.prototype.createVmlGroup = function()\n{\n\tvar node = document.createElement(mxClient.VML_PREFIX + ':group');\n\tnode.style.position = 'absolute';\n\tnode.style.width = this.node.style.width;\n\tnode.style.height = this.node.style.height;\n\t\n\treturn node;\n};\n\n/**\n * Function: redrawShape\n *\n * Updates the SVG or VML shape.\n */\nmxShape.prototype.redrawShape = function()\n{\n\tvar canvas = this.createCanvas();\n\t\n\tif (canvas != null)\n\t{\n\t\t// Specifies if events should be handled\n\t\tcanvas.pointerEvents = this.pointerEvents;\n\t\n\t\tthis.paint(canvas);\n\t\n\t\tif (this.node != canvas.root)\n\t\t{\n\t\t\t// Forces parsing in IE8 standards mode - slow! avoid\n\t\t\tthis.node.insertAdjacentHTML('beforeend', canvas.root.outerHTML);\n\t\t}\n\t\n\t\tif (this.node.nodeName == 'DIV' && document.documentMode == 8)\n\t\t{\n\t\t\t// Makes DIV transparent to events for IE8 in IE8 standards\n\t\t\t// mode (Note: Does not work for IE9 in IE8 standards mode\n\t\t\t// and not for IE11 in enterprise mode)\n\t\t\tthis.node.style.filter = '';\n\t\t\t\n\t\t\t// Adds event transparency in IE8 standards\n\t\t\tmxUtils.addTransparentBackgroundFilter(this.node);\n\t\t}\n\t\t\n\t\tthis.destroyCanvas(canvas);\n\t}\n};\n\n/**\n * Function: createCanvas\n * \n * Creates a new canvas for drawing this shape. May return null.\n */\nmxShape.prototype.createCanvas = function()\n{\n\tvar canvas = null;\n\t\n\t// LATER: Check if reusing existing DOM nodes improves performance\n\tif (this.node.ownerSVGElement != null)\n\t{\n\t\tcanvas = this.createSvgCanvas();\n\t}\n\telse if (mxClient.IS_VML)\n\t{\n\t\tthis.updateVmlContainer();\n\t\tcanvas = this.createVmlCanvas();\n\t}\n\t\n\tif (canvas != null && this.outline)\n\t{\n\t\tcanvas.setStrokeWidth(this.strokewidth);\n\t\tcanvas.setStrokeColor(this.stroke);\n\t\t\n\t\tif (this.isDashed != null)\n\t\t{\n\t\t\tcanvas.setDashed(this.isDashed);\n\t\t}\n\t\t\n\t\tcanvas.setStrokeWidth = function() {};\n\t\tcanvas.setStrokeColor = function() {};\n\t\tcanvas.setFillColor = function() {};\n\t\tcanvas.setGradient = function() {};\n\t\tcanvas.setDashed = function() {};\n\t\tcanvas.text = function() {};\n\t}\n\n\treturn canvas;\n};\n\n/**\n * Function: createSvgCanvas\n * \n * Creates and returns an <mxSvgCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createSvgCanvas = function()\n{\n\tvar canvas = new mxSvgCanvas2D(this.node, false);\n\tcanvas.strokeTolerance = (this.pointerEvents) ? this.svgStrokeTolerance : 0;\n\tcanvas.pointerEventsValue = this.svgPointerEvents;\n\tcanvas.blockImagePointerEvents = mxClient.IS_FF;\n\tvar off = this.getSvgScreenOffset();\n\n\tif (off != 0)\n\t{\n\t\tthis.node.setAttribute('transform', 'translate(' + off + ',' + off + ')');\n\t}\n\telse\n\t{\n\t\tthis.node.removeAttribute('transform');\n\t}\n\n\tcanvas.minStrokeWidth = this.minSvgStrokeWidth;\n\t\n\tif (!this.antiAlias)\n\t{\n\t\t// Rounds all numbers in the SVG output to integers\n\t\tcanvas.format = function(value)\n\t\t{\n\t\t\treturn Math.round(parseFloat(value));\n\t\t};\n\t}\n\t\n\treturn canvas;\n};\n\n/**\n * Function: createVmlCanvas\n * \n * Creates and returns an <mxVmlCanvas2D> for rendering this shape.\n */\nmxShape.prototype.createVmlCanvas = function()\n{\n\t// Workaround for VML rendering bug in IE8 standards mode\n\tvar node = (document.documentMode == 8 && this.isParseVml()) ? this.createVmlGroup() : this.node;\n\tvar canvas = new mxVmlCanvas2D(node, false);\n\t\n\tif (node.tagUrn != '')\n\t{\n\t\tvar w = Math.max(1, Math.round(this.bounds.width));\n\t\tvar h = Math.max(1, Math.round(this.bounds.height));\n\t\tnode.coordsize = (w * this.vmlScale) + ',' + (h * this.vmlScale);\n\t\tcanvas.scale(this.vmlScale);\n\t\tcanvas.vmlScale = this.vmlScale;\n\t}\n\n\t// Painting relative to top, left shape corner\n\tvar s = this.scale;\n\tcanvas.translate(-Math.round(this.bounds.x / s), -Math.round(this.bounds.y / s));\n\t\n\treturn canvas;\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Updates the bounds of the VML container.\n */\nmxShape.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tvar w = Math.max(1, Math.round(this.bounds.width));\n\tvar h = Math.max(1, Math.round(this.bounds.height));\n\tthis.node.style.width = w + 'px';\n\tthis.node.style.height = h + 'px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.redrawHtmlShape = function()\n{\n\t// LATER: Refactor methods\n\tthis.updateHtmlBounds(this.node);\n\tthis.updateHtmlFilters(this.node);\n\tthis.updateHtmlColors(this.node);\n};\n\n/**\n * Function: updateHtmlFilters\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlFilters = function(node)\n{\n\tvar f = '';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tf += 'alpha(opacity=' + (this.opacity) + ')';\n\t}\n\t\n\tif (this.isShadow)\n\t{\n\t\t// FIXME: Cannot implement shadow transparency with filter\n\t\tf += 'progid:DXImageTransform.Microsoft.dropShadow (' +\n\t\t\t'OffX=\\'' + Math.round(mxConstants.SHADOW_OFFSET_X * this.scale) + '\\', ' +\n\t\t\t'OffY=\\'' + Math.round(mxConstants.SHADOW_OFFSET_Y * this.scale) + '\\', ' +\n\t\t\t'Color=\\'' + mxConstants.VML_SHADOWCOLOR + '\\')';\n\t}\n\t\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar start = this.fill;\n\t\tvar end = this.gradient;\n\t\tvar type = '0';\n\t\t\n\t\tvar lookup = {east:0,south:1,west:2,north:3};\n\t\tvar dir = (this.direction != null) ? lookup[this.direction] : 0;\n\t\t\n\t\tif (this.gradientDirection != null)\n\t\t{\n\t\t\tdir = mxUtils.mod(dir + lookup[this.gradientDirection] - 1, 4);\n\t\t}\n\n\t\tif (dir == 1)\n\t\t{\n\t\t\ttype = '1';\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 2)\n\t\t{\n\t\t\tvar tmp = start;\n\t\t\tstart = end;\n\t\t\tend = tmp;\n\t\t}\n\t\telse if (dir == 3)\n\t\t{\n\t\t\ttype = '1';\n\t\t}\n\t\t\n\t\tf += 'progid:DXImageTransform.Microsoft.gradient(' +\n\t\t\t'startColorStr=\\'' + start + '\\', endColorStr=\\'' + end +\n\t\t\t'\\', gradientType=\\'' + type + '\\')';\n\t}\n\n\tnode.style.filter = f;\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlColors = function(node)\n{\n\tvar color = this.stroke;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.borderColor = color;\n\n\t\tif (this.isDashed)\n\t\t{\n\t\t\tnode.style.borderStyle = 'dashed';\n\t\t}\n\t\telse if (this.strokewidth > 0)\n\t\t{\n\t\t\tnode.style.borderStyle = 'solid';\n\t\t}\n\n\t\tnode.style.borderWidth = Math.max(1, Math.ceil(this.strokewidth * this.scale)) + 'px';\n\t}\n\telse\n\t{\n\t\tnode.style.borderWidth = '0px';\n\t}\n\n\tcolor = (this.outline) ? null : this.fill;\n\t\n\tif (color != null && color != mxConstants.NONE)\n\t{\n\t\tnode.style.backgroundColor = color;\n\t\tnode.style.backgroundImage = 'none';\n\t}\n\telse if (this.pointerEvents)\n\t{\n\t\t node.style.backgroundColor = 'transparent';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tmxUtils.addTransparentBackgroundFilter(node);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(node);\n\t}\n};\n\n/**\n * Function: mixedModeHtml\n *\n * Allow optimization by replacing VML with HTML.\n */\nmxShape.prototype.updateHtmlBounds = function(node)\n{\n\tvar sw = (document.documentMode >= 9) ? 0 : Math.ceil(this.strokewidth * this.scale);\n\tnode.style.borderWidth = Math.max(1, sw) + 'px';\n\tnode.style.overflow = 'hidden';\n\t\n\tnode.style.left = Math.round(this.bounds.x - sw / 2) + 'px';\n\tnode.style.top = Math.round(this.bounds.y - sw / 2) + 'px';\n\n\tif (document.compatMode == 'CSS1Compat')\n\t{\n\t\tsw = -sw;\n\t}\n\t\n\tnode.style.width = Math.round(Math.max(0, this.bounds.width + sw)) + 'px';\n\tnode.style.height = Math.round(Math.max(0, this.bounds.height + sw)) + 'px';\n};\n\n/**\n * Function: destroyCanvas\n * \n * Destroys the given canvas which was used for drawing. This implementation\n * increments the reference counts on all shared gradients used in the canvas.\n */\nmxShape.prototype.destroyCanvas = function(canvas)\n{\n\t// Manages reference counts\n\tif (canvas instanceof mxSvgCanvas2D)\n\t{\n\t\t// Increments ref counts\n\t\tfor (var key in canvas.gradients)\n\t\t{\n\t\t\tvar gradient = canvas.gradients[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) + 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.releaseSvgGradients(this.oldGradients);\n\t\tthis.oldGradients = canvas.gradients;\n\t}\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxShape.prototype.paint = function(c)\n{\n\tvar strokeDrawn = false;\n\t\n\tif (c != null && this.outline)\n\t{\n\t\tvar stroke = c.stroke;\n\t\t\n\t\tc.stroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tstroke.apply(this, arguments);\n\t\t};\n\n\t\tvar fillAndStroke = c.fillAndStroke;\n\t\t\n\t\tc.fillAndStroke = function()\n\t\t{\n\t\t\tstrokeDrawn = true;\n\t\t\tfillAndStroke.apply(this, arguments);\n\t\t};\n\t}\n\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\tif (this.isPaintBoundsInverted())\n\t{\n\t\tvar t = (w - h) / 2;\n\t\tx += t;\n\t\ty -= t;\n\t\tvar tmp = w;\n\t\tw = h;\n\t\th = tmp;\n\t}\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\t// Adds background rectangle to capture events\n\tvar bg = null;\n\t\n\tif ((this.stencil == null && this.points == null && this.shapePointerEvents) ||\n\t\t(this.stencil != null && this.stencilPointerEvents))\n\t{\n\t\tvar bb = this.createBoundingBox();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tbg = this.createTransparentSvgRectangle(bb.x, bb.y, bb.width, bb.height);\n\t\t\tthis.node.appendChild(bg);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar rect = c.createRect('rect', bb.x / s, bb.y / s, bb.width / s, bb.height / s);\n\t\t\trect.appendChild(c.createTransparentFill());\n\t\t\trect.stroked = 'false';\n\t\t\tc.root.appendChild(rect);\n\t\t}\n\t}\n\n\tif (this.stencil != null)\n\t{\n\t\tthis.stencil.drawShape(c, this, x, y, w, h);\n\t}\n\telse\n\t{\n\t\t// Stencils have separate strokewidth\n\t\tc.setStrokeWidth(this.strokewidth);\n\t\t\n\t\tif (this.points != null)\n\t\t{\n\t\t\t// Paints edge shape\n\t\t\tvar pts = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t\t{\n\t\t\t\tif (this.points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tpts.push(new mxPoint(this.points[i].x / s, this.points[i].y / s));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.paintEdgeShape(c, pts);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Paints vertex shape\n\t\t\tthis.paintVertexShape(c, x, y, w, h);\n\t\t}\n\t}\n\t\n\tif (bg != null && c.state != null && c.state.transform != null)\n\t{\n\t\tbg.setAttribute('transform', c.state.transform);\n\t}\n\t\n\t// Draws highlight rectangle if no stroke was used\n\tif (c != null && this.outline && !strokeDrawn)\n\t{\n\t\tc.rect(x, y, w, h);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxShape.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tvar dash = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tdash = this.style['dashPattern'];\t\t\n\t}\n\n\tc.setAlpha(this.opacity / 100);\n\tc.setFillAlpha(this.fillOpacity / 100);\n\tc.setStrokeAlpha(this.strokeOpacity / 100);\n\n\t// Sets alpha, colors and gradients\n\tif (this.isShadow != null)\n\t{\n\t\tc.setShadow(this.isShadow);\n\t}\n\t\n\t// Dash pattern\n\tif (this.isDashed != null)\n\t{\n\t\tc.setDashed(this.isDashed, (this.style != null) ?\n\t\t\tmxUtils.getValue(this.style, mxConstants.STYLE_FIX_DASH, false) == 1 : false);\n\t}\n\n\tif (dash != null)\n\t{\n\t\tc.setDashPattern(dash);\n\t}\n\n\tif (this.fill != null && this.fill != mxConstants.NONE && this.gradient && this.gradient != mxConstants.NONE)\n\t{\n\t\tvar b = this.getGradientBounds(c, x, y, w, h);\n\t\tc.setGradient(this.fill, this.gradient, b.x, b.y, b.width, b.height, this.gradientDirection);\n\t}\n\telse\n\t{\n\t\tc.setFillColor(this.fill);\n\t}\n\n\tc.setStrokeColor(this.stroke);\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxShape.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\treturn new mxRectangle(x, y, w, h);\n};\n\n/**\n * Function: updateTransform\n * \n * Sets the scale and rotation on the given canvas.\n */\nmxShape.prototype.updateTransform = function(c, x, y, w, h)\n{\n\t// NOTE: Currently, scale is implemented in state and canvas. This will\n\t// move to canvas in a later version, so that the states are unscaled\n\t// and untranslated and do not need an update after zooming or panning.\n\tc.scale(this.scale);\n\tc.rotate(this.getShapeRotation(), this.flipH, this.flipV, x + w / 2, y + h / 2);\n};\n\n/**\n * Function: paintVertexShape\n * \n * Paints the vertex shape.\n */\nmxShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tthis.paintBackground(c, x, y, w, h);\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintForeground(c, x, y, w, h);\n\t}\n};\n\n/**\n * Function: paintBackground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintBackground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintForeground\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintForeground = function(c, x, y, w, h) { };\n\n/**\n * Function: paintEdgeShape\n * \n * Hook for subclassers. This implementation is empty.\n */\nmxShape.prototype.paintEdgeShape = function(c, pts) { };\n\n/**\n * Function: getArcSize\n * \n * Returns the arc size for the given dimension.\n */\nmxShape.prototype.getArcSize = function(w, h)\n{\n\tvar r = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t{\n\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t}\n\telse\n\t{\n\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\tr = Math.min(w * f, h * f);\n\t}\n\t\n\treturn r;\n};\n\n/**\n * Function: paintGlassEffect\n * \n * Paints the glass gradient effect.\n */\nmxShape.prototype.paintGlassEffect = function(c, x, y, w, h, arc)\n{\n\tvar sw = Math.ceil(this.strokewidth / 2);\n\tvar size = 0.4;\n\t\n\tc.setGradient('#ffffff', '#ffffff', x, y, w, h * 0.6, 'south', 0.9, 0.1);\n\tc.begin();\n\tarc += 2 * sw;\n\t\t\n\tif (this.isRounded)\n\t{\n\t\tc.moveTo(x - sw + arc, y - sw);\n\t\tc.quadTo(x - sw, y - sw, x - sw, y - sw + arc);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw + arc);\n\t\tc.quadTo(x + w + sw, y - sw, x + w + sw - arc, y - sw);\n\t}\n\telse\n\t{\n\t\tc.moveTo(x - sw, y - sw);\n\t\tc.lineTo(x - sw, y + h * size);\n\t\tc.quadTo(x + w * 0.5, y + h * 0.7, x + w + sw, y + h * size);\n\t\tc.lineTo(x + w + sw, y - sw);\n\t}\n\t\n\tc.close();\n\tc.fill();\n};\n\n/**\n * Function: addPoints\n * \n * Paints the given points with rounded corners.\n */\nmxShape.prototype.addPoints = function(c, pts, rounded, arcSize, close, exclude, initialMove)\n{\n\tif (pts != null && pts.length > 0)\n\t{\n\t\tinitialMove = (initialMove != null) ? initialMove : true;\n\t\tvar pe = pts[pts.length - 1];\n\t\t\n\t\t// Adds virtual waypoint in the center between start and end point\n\t\tif (close && rounded)\n\t\t{\n\t\t\tpts = pts.slice();\n\t\t\tvar p0 = pts[0];\n\t\t\tvar wp = new mxPoint(pe.x + (p0.x - pe.x) / 2, pe.y + (p0.y - pe.y) / 2);\n\t\t\tpts.splice(0, 0, wp);\n\t\t}\n\t\n\t\tvar pt = pts[0];\n\t\tvar i = 1;\n\t\n\t\t// Draws the line segments\n\t\tif (initialMove)\n\t\t{\n\t\t\tc.moveTo(pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pt.x, pt.y);\n\t\t}\n\t\t\n\t\twhile (i < ((close) ? pts.length : pts.length - 1))\n\t\t{\n\t\t\tvar tmp = pts[mxUtils.mod(i, pts.length)];\n\t\t\tvar dx = pt.x - tmp.x;\n\t\t\tvar dy = pt.y - tmp.y;\n\t\n\t\t\tif (rounded && (dx != 0 || dy != 0) && (exclude == null || mxUtils.indexOf(exclude, i - 1) < 0))\n\t\t\t{\n\t\t\t\t// Draws a line from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the last point\n\t\t\t\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tvar nx1 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny1 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x1 = tmp.x + nx1;\n\t\t\t\tvar y1 = tmp.y + ny1;\n\t\t\t\tc.lineTo(x1, y1);\n\t\n\t\t\t\t// Draws a curve from the last point to the current\n\t\t\t\t// point with a spacing of size off the current point\n\t\t\t\t// into direction of the next point\n\t\t\t\tvar next = pts[mxUtils.mod(i + 1, pts.length)];\n\t\t\t\t\n\t\t\t\t// Uses next non-overlapping point\n\t\t\t\twhile (i < pts.length - 2 && Math.round(next.x - tmp.x) == 0 && Math.round(next.y - tmp.y) == 0)\n\t\t\t\t{\n\t\t\t\t\tnext = pts[mxUtils.mod(i + 2, pts.length)];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdx = next.x - tmp.x;\n\t\t\t\tdy = next.y - tmp.y;\n\t\n\t\t\t\tdist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\t\tvar nx2 = dx * Math.min(arcSize, dist / 2) / dist;\n\t\t\t\tvar ny2 = dy * Math.min(arcSize, dist / 2) / dist;\n\t\n\t\t\t\tvar x2 = tmp.x + nx2;\n\t\t\t\tvar y2 = tmp.y + ny2;\n\t\n\t\t\t\tc.quadTo(tmp.x, tmp.y, x2, y2);\n\t\t\t\ttmp = new mxPoint(x2, y2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.lineTo(tmp.x, tmp.y);\n\t\t\t}\n\t\n\t\t\tpt = tmp;\n\t\t\ti++;\n\t\t}\n\t\n\t\tif (close)\n\t\t{\n\t\t\tc.close();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.lineTo(pe.x, pe.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxShape.prototype.resetStyles = function()\n{\n\tthis.initStyles();\n\n\tthis.spacing = 0;\n\t\n\tdelete this.fill;\n\tdelete this.gradient;\n\tdelete this.gradientDirection;\n\tdelete this.stroke;\n\tdelete this.startSize;\n\tdelete this.endSize;\n\tdelete this.startArrow;\n\tdelete this.endArrow;\n\tdelete this.direction;\n\tdelete this.isShadow;\n\tdelete this.isDashed;\n\tdelete this.isRounded;\n\tdelete this.glass;\n};\n\n/**\n * Function: apply\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_FILLCOLOR> => fill\n * - <mxConstants.STYLE_GRADIENTCOLOR> => gradient\n * - <mxConstants.STYLE_GRADIENT_DIRECTION> => gradientDirection\n * - <mxConstants.STYLE_OPACITY> => opacity\n * - <mxConstants.STYLE_FILL_OPACITY> => fillOpacity\n * - <mxConstants.STYLE_STROKE_OPACITY> => strokeOpacity\n * - <mxConstants.STYLE_STROKECOLOR> => stroke\n * - <mxConstants.STYLE_STROKEWIDTH> => strokewidth\n * - <mxConstants.STYLE_SHADOW> => isShadow\n * - <mxConstants.STYLE_DASHED> => isDashed\n * - <mxConstants.STYLE_SPACING> => spacing\n * - <mxConstants.STYLE_STARTSIZE> => startSize\n * - <mxConstants.STYLE_ENDSIZE> => endSize\n * - <mxConstants.STYLE_ROUNDED> => isRounded\n * - <mxConstants.STYLE_STARTARROW> => startArrow\n * - <mxConstants.STYLE_ENDARROW> => endArrow\n * - <mxConstants.STYLE_ROTATION> => rotation\n * - <mxConstants.STYLE_DIRECTION> => direction\n * - <mxConstants.STYLE_GLASS> => glass\n *\n * This keeps a reference to the <style>. If you need to keep a reference to\n * the cell, you can override this method and store a local reference to\n * state.cell or the <mxCellState> itself. If <outline> should be true, make\n * sure to set it before calling this method.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxShape.prototype.apply = function(state)\n{\n\tthis.state = state;\n\tthis.style = state.style;\n\n\tif (this.style != null)\n\t{\n\t\tthis.fill = mxUtils.getValue(this.style, mxConstants.STYLE_FILLCOLOR, this.fill);\n\t\tthis.gradient = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENTCOLOR, this.gradient);\n\t\tthis.gradientDirection = mxUtils.getValue(this.style, mxConstants.STYLE_GRADIENT_DIRECTION, this.gradientDirection);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_OPACITY, this.opacity);\n\t\tthis.fillOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_FILL_OPACITY, this.fillOpacity);\n\t\tthis.strokeOpacity = mxUtils.getValue(this.style, mxConstants.STYLE_STROKE_OPACITY, this.strokeOpacity);\n\t\tthis.stroke = mxUtils.getValue(this.style, mxConstants.STYLE_STROKECOLOR, this.stroke);\n\t\tthis.strokewidth = mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth);\n\t\tthis.spacing = mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing);\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, this.startSize);\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, this.endSize);\n\t\tthis.startArrow = mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, this.startArrow);\n\t\tthis.endArrow = mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, this.endArrow);\n\t\tthis.rotation = mxUtils.getValue(this.style, mxConstants.STYLE_ROTATION, this.rotation);\n\t\tthis.direction = mxUtils.getValue(this.style, mxConstants.STYLE_DIRECTION, this.direction);\n\t\tthis.flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\tthis.flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\t\n\t\t// Legacy support for stencilFlipH/V\n\t\tif (this.stencil != null)\n\t\t{\n\t\t\tthis.flipH = mxUtils.getValue(this.style, 'stencilFlipH', 0) == 1 || this.flipH;\n\t\t\tthis.flipV = mxUtils.getValue(this.style, 'stencilFlipV', 0) == 1 || this.flipV;\n\t\t}\n\t\t\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH || this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tvar tmp = this.flipH;\n\t\t\tthis.flipH = this.flipV;\n\t\t\tthis.flipV = tmp;\n\t\t}\n\n\t\tthis.isShadow = mxUtils.getValue(this.style, mxConstants.STYLE_SHADOW, this.isShadow) == 1;\n\t\tthis.isDashed = mxUtils.getValue(this.style, mxConstants.STYLE_DASHED, this.isDashed) == 1;\n\t\tthis.isRounded = mxUtils.getValue(this.style, mxConstants.STYLE_ROUNDED, this.isRounded) == 1;\n\t\tthis.glass = mxUtils.getValue(this.style, mxConstants.STYLE_GLASS, this.glass) == 1;\n\t\t\n\t\tif (this.fill == mxConstants.NONE)\n\t\t{\n\t\t\tthis.fill = null;\n\t\t}\n\n\t\tif (this.gradient == mxConstants.NONE)\n\t\t{\n\t\t\tthis.gradient = null;\n\t\t}\n\n\t\tif (this.stroke == mxConstants.NONE)\n\t\t{\n\t\t\tthis.stroke = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the cursor on the given shape.\n *\n * Parameters:\n *\n * cursor - The cursor to be used.\n */\nmxShape.prototype.setCursor = function(cursor)\n{\n\tif (cursor == null)\n\t{\n\t\tcursor = '';\n\t}\n\t\n\tthis.cursor = cursor;\n\n\tif (this.node != null)\n\t{\n\t\tthis.node.style.cursor = cursor;\n\t}\n};\n\n/**\n * Function: getCursor\n * \n * Returns the current cursor.\n */\nmxShape.prototype.getCursor = function()\n{\n\treturn this.cursor;\n};\n\n/**\n * Function: isRoundable\n * \n * Hook for subclassers.\n */\nmxShape.prototype.isRoundable = function()\n{\n\treturn false;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxShape.prototype.updateBoundingBox = function()\n{\n\t// Tries to get bounding box from SVG subsystem\n\t// LATER: Use getBoundingClientRect for fallback in VML\n\tif (this.useSvgBoundingBox && this.node != null && this.node.ownerSVGElement != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\tvar b = this.node.getBBox();\n\t\n\t\t\tif (b.width > 0 && b.height > 0)\n\t\t\t{\n\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\n\t\t\t\t// Adds strokeWidth\n\t\t\t\tthis.boundingBox.grow(this.strokewidth * this.scale / 2);\n\t\t\t\t\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tcatch(e)\n\t\t{\n\t\t\t// fallback to code below\n\t\t}\n\t}\n\n\tif (this.bounds != null)\n\t{\n\t\tvar bbox = this.createBoundingBox();\n\t\t\n\t\tif (bbox != null)\n\t\t{\n\t\t\tthis.augmentBoundingBox(bbox);\n\t\t\tvar rot = this.getShapeRotation();\n\t\t\t\n\t\t\tif (rot != 0)\n\t\t\t{\n\t\t\t\tbbox = mxUtils.getBoundingBox(bbox, rot);\n\t\t\t}\n\t\t}\n\n\t\tthis.boundingBox = bbox;\n\t}\n};\n\n/**\n * Function: createBoundingBox\n *\n * Returns a new rectangle that represents the bounding box of the bare shape\n * with no shadows or strokewidths.\n */\nmxShape.prototype.createBoundingBox = function()\n{\n\tvar bb = this.bounds.clone();\n\n\tif ((this.stencil != null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\tthis.direction == mxConstants.DIRECTION_SOUTH)) || this.isPaintBoundsInverted())\n\t{\n\t\tbb.rotate90();\n\t}\n\t\n\treturn bb;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxShape.prototype.augmentBoundingBox = function(bbox)\n{\n\tif (this.isShadow)\n\t{\n\t\tbbox.width += Math.ceil(mxConstants.SHADOW_OFFSET_X * this.scale);\n\t\tbbox.height += Math.ceil(mxConstants.SHADOW_OFFSET_Y * this.scale);\n\t}\n\t\n\t// Adds strokeWidth\n\tbbox.grow(this.strokewidth * this.scale / 2);\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns true if the bounds should be inverted.\n */\nmxShape.prototype.isPaintBoundsInverted = function()\n{\n\t// Stencil implements inversion via aspect\n\treturn this.stencil == null && (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation from the style.\n */\nmxShape.prototype.getRotation = function()\n{\n\treturn (this.rotation != null) ? this.rotation : 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label.\n */\nmxShape.prototype.getTextRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) != 1)\n\t{\n\t\trot += mxText.prototype.verticalTextRotation;\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns the actual rotation of the shape.\n */\nmxShape.prototype.getShapeRotation = function()\n{\n\tvar rot = this.getRotation();\n\t\n\tif (this.direction != null)\n\t{\n\t\tif (this.direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\trot += 270;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\trot += 180;\n\t\t}\n\t\telse if (this.direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\trot += 90;\n\t\t}\n\t}\n\t\n\treturn rot;\n};\n\n/**\n * Function: createTransparentSvgRectangle\n * \n * Adds a transparent rectangle that catches all events.\n */\nmxShape.prototype.createTransparentSvgRectangle = function(x, y, w, h)\n{\n\tvar rect = document.createElementNS(mxConstants.NS_SVG, 'rect');\n\trect.setAttribute('x', x);\n\trect.setAttribute('y', y);\n\trect.setAttribute('width', w);\n\trect.setAttribute('height', h);\n\trect.setAttribute('fill', 'none');\n\trect.setAttribute('stroke', 'none');\n\trect.setAttribute('pointer-events', 'all');\n\t\n\treturn rect;\n};\n\n/**\n * Function: setTransparentBackgroundImage\n * \n * Sets a transparent background CSS style to catch all events.\n * \n * Paints the line shape.\n */\nmxShape.prototype.setTransparentBackgroundImage = function(node)\n{\n\tnode.style.backgroundImage = 'url(\\'' + mxClient.imageBasePath + '/transparent.gif\\')';\n};\n\n/**\n * Function: releaseSvgGradients\n * \n * Paints the line shape.\n */\nmxShape.prototype.releaseSvgGradients = function(grads)\n{\n\tif (grads != null)\n\t{\n\t\tfor (var key in grads)\n\t\t{\n\t\t\tvar gradient = grads[key];\n\t\t\t\n\t\t\tif (gradient != null)\n\t\t\t{\n\t\t\t\tgradient.mxRefCount = (gradient.mxRefCount || 0) - 1;\n\t\t\t\t\n\t\t\t\tif (gradient.mxRefCount == 0 && gradient.parentNode != null)\n\t\t\t\t{\n\t\t\t\t\tgradient.parentNode.removeChild(gradient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the shape by removing it from the DOM and releasing the DOM\n * node associated with the shape using <mxEvent.release>.\n */\nmxShape.prototype.destroy = function()\n{\n\tif (this.node != null)\n\t{\n\t\tmxEvent.release(this.node);\n\t\t\n\t\tif (this.node.parentNode != null)\n\t\t{\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t\t\n\t\tthis.node = null;\n\t}\n\t\n\t// Decrements refCount and removes unused\n\tthis.releaseSvgGradients(this.oldGradients);\n\tthis.oldGradients = null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n * \n * Code to add stencils.\n * \n * (code)\n * var req = mxUtils.load('test/stencils.xml');\n * var root = req.getDocumentElement();\n * var shape = root.firstChild;\n * \n * while (shape != null)\n * {\n * \t if (shape.nodeType == mxConstants.NODETYPE_ELEMENT)\n *   {\n *     mxStencilRegistry.addStencil(shape.getAttribute('name'), new mxStencil(shape));\n *   }\n *   \n *   shape = shape.nextSibling;\n * }\n * (end)\n */\nvar mxStencilRegistry =\n{\n\t/**\n\t * Class: mxStencilRegistry\n\t * \n\t * A singleton class that provides a registry for stencils and the methods\n\t * for painting those stencils onto a canvas or into a DOM.\n\t */\n\tstencils: {},\n\t\n\t/**\n\t * Function: addStencil\n\t * \n\t * Adds the given <mxStencil>.\n\t */\n\taddStencil: function(name, stencil)\n\t{\n\t\tmxStencilRegistry.stencils[name] = stencil;\n\t},\n\t\n\t/**\n\t * Function: getStencil\n\t * \n\t * Returns the <mxStencil> for the given name.\n\t */\n\tgetStencil: function(name)\n\t{\n\t\treturn mxStencilRegistry.stencils[name];\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxMarker =\n{\n\t/**\n\t * Class: mxMarker\n\t * \n\t * A static class that implements all markers for VML and SVG using a\n\t * registry. NOTE: The signatures in this class will change.\n\t * \n\t * Variable: markers\n\t * \n\t * Maps from markers names to functions to paint the markers.\n\t */\n\tmarkers: [],\n\t\n\t/**\n\t * Function: addMarker\n\t * \n\t * Adds a factory method that updates a given endpoint and returns a\n\t * function to paint the marker onto the given canvas.\n\t */\n\taddMarker: function(type, funct)\n\t{\n\t\tmxMarker.markers[type] = funct;\n\t},\n\t\n\t/**\n\t * Function: createMarker\n\t * \n\t * Returns a function to paint the given marker.\n\t */\n\tcreateMarker: function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar funct = mxMarker.markers[type];\n\t\t\n\t\treturn (funct != null) ? funct(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled) : null;\n\t}\n\n};\n\n/**\n * Adds the classic and block marker factory method.\n */\n(function()\n{\n\tfunction createArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tvar f = (type != mxConstants.ARROW_CLASSIC && type != mxConstants.ARROW_CLASSIC_THIN) ? 1 : 3 / 4;\n\t\t\tpe.x += -unitX * f - endOffsetX;\n\t\t\tpe.y += -unitY * f - endOffsetY;\n\t\t\t\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\n\t\t\t\tif (type == mxConstants.ARROW_CLASSIC || type == mxConstants.ARROW_CLASSIC_THIN)\n\t\t\t\t{\n\t\t\t\t\tcanvas.lineTo(pt.x - unitX * 3 / 4, pt.y - unitY * 3 / 4);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.close();\n\t\n\t\t\t\tif (filled)\n\t\t\t\t{\n\t\t\t\t\tcanvas.fillAndStroke();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.stroke();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('classic', createArrow(2));\n\tmxMarker.addMarker('classicThin', createArrow(3));\n\tmxMarker.addMarker('block', createArrow(2));\n\tmxMarker.addMarker('blockThin', createArrow(3));\n\t\n\tfunction createOpenArrow(widthFactor)\n\t{\n\t\twidthFactor = (widthFactor != null) ? widthFactor : 2;\n\t\t\n\t\treturn function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t\t{\n\t\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t\t// 26.565 degrees, 1/sin(26.565) = 2.236 / 2 = 1.118 ( / 2 allows for\n\t\t\t// only half the strokewidth is processed ).\n\t\t\tvar endOffsetX = unitX * sw * 1.118;\n\t\t\tvar endOffsetY = unitY * sw * 1.118;\n\t\t\t\n\t\t\tunitX = unitX * (size + sw);\n\t\t\tunitY = unitY * (size + sw);\n\t\t\t\n\t\t\tvar pt = pe.clone();\n\t\t\tpt.x -= endOffsetX;\n\t\t\tpt.y -= endOffsetY;\n\t\t\t\n\t\t\tpe.x += -endOffsetX * 2;\n\t\t\tpe.y += -endOffsetY * 2;\n\n\t\t\treturn function()\n\t\t\t{\n\t\t\t\tcanvas.begin();\n\t\t\t\tcanvas.moveTo(pt.x - unitX - unitY / widthFactor, pt.y - unitY + unitX / widthFactor);\n\t\t\t\tcanvas.lineTo(pt.x, pt.y);\n\t\t\t\tcanvas.lineTo(pt.x + unitY / widthFactor - unitX, pt.y - unitY - unitX / widthFactor);\n\t\t\t\tcanvas.stroke();\n\t\t\t};\n\t\t}\n\t};\n\t\n\tmxMarker.addMarker('open', createOpenArrow(2));\n\tmxMarker.addMarker('openThin', createOpenArrow(3));\n\t\n\tmxMarker.addMarker('oval', function(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\tvar a = size / 2;\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpe.x -= unitX * a;\n\t\tpe.y -= unitY * a;\n\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.ellipse(pt.x - a, pt.y - a, size, size);\n\t\t\t\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t});\n\n\tfunction diamond(canvas, shape, type, pe, unitX, unitY, size, source, sw, filled)\n\t{\n\t\t// The angle of the forward facing arrow sides against the x axis is\n\t\t// 45 degrees, 1/sin(45) = 1.4142 / 2 = 0.7071 ( / 2 allows for\n\t\t// only half the strokewidth is processed ). Or 0.9862 for thin diamond.\n\t\t// Note these values and the tk variable below are dependent, update\n\t\t// both together (saves trig hard coding it).\n\t\tvar swFactor = (type == mxConstants.ARROW_DIAMOND) ?  0.7071 : 0.9862;\n\t\tvar endOffsetX = unitX * sw * swFactor;\n\t\tvar endOffsetY = unitY * sw * swFactor;\n\t\t\n\t\tunitX = unitX * (size + sw);\n\t\tunitY = unitY * (size + sw);\n\t\t\n\t\tvar pt = pe.clone();\n\t\tpt.x -= endOffsetX;\n\t\tpt.y -= endOffsetY;\n\t\t\n\t\tpe.x += -unitX - endOffsetX;\n\t\tpe.y += -unitY - endOffsetY;\n\t\t\n\t\t// thickness factor for diamond\n\t\tvar tk = ((type == mxConstants.ARROW_DIAMOND) ?  2 : 3.4);\n\t\t\n\t\treturn function()\n\t\t{\n\t\t\tcanvas.begin();\n\t\t\tcanvas.moveTo(pt.x, pt.y);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 - unitY / tk, pt.y + unitX / tk - unitY / 2);\n\t\t\tcanvas.lineTo(pt.x - unitX, pt.y - unitY);\n\t\t\tcanvas.lineTo(pt.x - unitX / 2 + unitY / tk, pt.y - unitY / 2 - unitX / tk);\n\t\t\tcanvas.close();\n\t\t\t\n\t\t\tif (filled)\n\t\t\t{\n\t\t\t\tcanvas.fillAndStroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.stroke();\n\t\t\t}\n\t\t};\n\t};\n\n\tmxMarker.addMarker('diamond', diamond);\n\tmxMarker.addMarker('diamondThin', diamond);\n})();\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxActor\n *\n * Extends <mxShape> to implement an actor shape. If a custom shape with one\n * filled area is needed, then this shape's <redrawPath> should be overridden.\n * \n * Example:\n * \n * (code)\n * function SampleShape() { }\n * \n * SampleShape.prototype = new mxActor();\n * SampleShape.prototype.constructor = vsAseShape;\n * \n * mxCellRenderer.registerShape('sample', SampleShape);\n * SampleShape.prototype.redrawPath = function(path, x, y, w, h)\n * {\n *   path.moveTo(0, 0);\n *   path.lineTo(w, h);\n *   // ...\n *   path.close();\n * }\n * (end)\n * \n * This shape is registered under <mxConstants.SHAPE_ACTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxActor\n *\n * Constructs a new actor shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxActor(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxActor, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxActor.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxActor.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar width = w/3;\n\tc.moveTo(0, h);\n\tc.curveTo(0, 3 * h / 5, 0, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w / 2 - width, 2 * h / 5, w / 2 - width, 0, w / 2, 0);\n\tc.curveTo(w / 2 + width, 0, w / 2 + width, 2 * h / 5, w / 2, 2 * h / 5);\n\tc.curveTo(w, 2 * h / 5, w, 3 * h / 5, w, h);\n\tc.close();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCloud\n *\n * Extends <mxActor> to implement a cloud shape.\n * \n * This shape is registered under <mxConstants.SHAPE_CLOUD> in\n * <mxCellRenderer>.\n * \n * Constructor: mxCloud\n *\n * Constructs a new cloud shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCloud(bounds, fill, stroke, strokewidth)\n{\n\tmxActor.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxCloud, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCloud.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tc.moveTo(0.25 * w, 0.25 * h);\n\tc.curveTo(0.05 * w, 0.25 * h, 0, 0.5 * h, 0.16 * w, 0.55 * h);\n\tc.curveTo(0, 0.66 * h, 0.18 * w, 0.9 * h, 0.31 * w, 0.8 * h);\n\tc.curveTo(0.4 * w, h, 0.7 * w, h, 0.8 * w, 0.8 * h);\n\tc.curveTo(w, 0.8 * h, w, 0.6 * h, 0.875 * w, 0.5 * h);\n\tc.curveTo(w, 0.3 * h, 0.8 * w, 0.1 * h, 0.625 * w, 0.2 * h);\n\tc.curveTo(0.5 * w, 0.05 * h, 0.3 * w, 0.05 * h, 0.25 * w, 0.25 * h);\n\tc.close();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRectangleShape\n *\n * Extends <mxShape> to implement a rectangle shape.\n * This shape is registered under <mxConstants.SHAPE_RECTANGLE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRectangleShape\n *\n * Constructs a new rectangle shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRectangleShape(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRectangleShape, mxShape);\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient.\n */\nmxRectangleShape.prototype.isHtmlAllowed = function()\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\treturn !this.isRounded && !this.glass && this.rotation == 0 && (events ||\n\t\t(this.fill != null && this.fill != mxConstants.NONE));\n};\n\n/**\n * Function: paintBackground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tvar events = true;\n\t\n\tif (this.style != null)\n\t{\n\t\tevents = mxUtils.getValue(this.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1';\t\t\n\t}\n\t\n\tif (events || (this.fill != null && this.fill != mxConstants.NONE) ||\n\t\t(this.stroke != null && this.stroke != mxConstants.NONE))\n\t{\n\t\tif (!events && (this.fill == null || this.fill == mxConstants.NONE))\n\t\t{\n\t\t\tc.pointerEvents = false;\n\t\t}\n\t\t\n\t\tif (this.isRounded)\n\t\t{\n\t\t\tvar r = 0;\n\t\t\t\n\t\t\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ABSOLUTE_ARCSIZE, 0) == '1')\n\t\t\t{\n\t\t\t\tr = Math.min(w / 2, Math.min(h / 2, mxUtils.getValue(this.style,\n\t\t\t\t\tmxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE,\n\t\t\t\t\tmxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\t\t\t\tr = Math.min(w * f, h * f);\n\t\t\t}\n\t\t\t\n\t\t\tc.roundrect(x, y, w, h, r, r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.rect(x, y, w, h);\n\t\t}\n\t\t\t\n\t\tc.fillAndStroke();\n\t}\n};\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRectangleShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxRectangleShape.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (this.glass && !this.outline && this.fill != null && this.fill != mxConstants.NONE)\n\t{\n\t\tthis.paintGlassEffect(c, x, y, w, h, this.getArcSize(w + this.strokewidth, h + this.strokewidth));\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEllipse\n *\n * Extends <mxShape> to implement an ellipse shape.\n * This shape is registered under <mxConstants.SHAPE_ELLIPSE>\n * in <mxCellRenderer>.\n * \n * Constructor: mxEllipse\n *\n * Constructs a new ellipse shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxEllipse, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Paints the ellipse shape.\n */\nmxEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDoubleEllipse\n *\n * Extends <mxShape> to implement a double ellipse shape. This shape is\n * registered under <mxConstants.SHAPE_DOUBLE_ELLIPSE> in <mxCellRenderer>.\n * Use the following override to only fill the inner ellipse in this shape:\n * \n * (code)\n * mxDoubleEllipse.prototype.paintVertexShape = function(c, x, y, w, h)\n * {\n *   c.ellipse(x, y, w, h);\n *   c.stroke();\n *   \n *   var inset = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n *   x += inset;\n *   y += inset;\n *   w -= 2 * inset;\n *   h -= 2 * inset;\n *   \n *   if (w > 0 && h > 0)\n *   {\n *     c.ellipse(x, y, w, h);\n *   }\n *   \n *   c.fillAndStroke();\n * };\n * (end)\n * \n * Constructor: mxDoubleEllipse\n *\n * Constructs a new ellipse shape.\n *\n * Parameters:\n *\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxDoubleEllipse(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxDoubleEllipse, mxShape);\n\n/**\n * Variable: vmlScale\n * \n * Scale for improving the precision of VML rendering. Default is 10.\n */\nmxDoubleEllipse.prototype.vmlScale = 10;\n\n/**\n * Function: paintBackground\n * \n * Paints the background.\n */\nmxDoubleEllipse.prototype.paintBackground = function(c, x, y, w, h)\n{\n\tc.ellipse(x, y, w, h);\n\tc.fillAndStroke();\n};\n\n/**\n * Function: paintForeground\n * \n * Paints the foreground.\n */\nmxDoubleEllipse.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tif (!this.outline)\n\t{\n\t\tvar margin = mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth, Math.min(w / 5, h / 5)));\n\t\tx += margin;\n\t\ty += margin;\n\t\tw -= 2 * margin;\n\t\th -= 2 * margin;\n\t\t\n\t\t// FIXME: Rounding issues in IE8 standards mode (not in 1.x)\n\t\tif (w > 0 && h > 0)\n\t\t{\n\t\t\tc.ellipse(x, y, w, h);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds for the label.\n */\nmxDoubleEllipse.prototype.getLabelBounds = function(rect)\n{\n\tvar margin = (mxUtils.getValue(this.style, mxConstants.STYLE_MARGIN, Math.min(3 + this.strokewidth,\n\t\t\tMath.min(rect.width / 5 / this.scale, rect.height / 5 / this.scale)))) * this.scale;\n\n\treturn new mxRectangle(rect.x + margin, rect.y + margin, rect.width - 2 * margin, rect.height - 2 * margin);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRhombus\n *\n * Extends <mxShape> to implement a rhombus (aka diamond) shape.\n * This shape is registered under <mxConstants.SHAPE_RHOMBUS>\n * in <mxCellRenderer>.\n * \n * Constructor: mxRhombus\n *\n * Constructs a new rhombus shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxRhombus(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxRhombus, mxShape);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxRhombus.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic painting implementation.\n */\nmxRhombus.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar hw = w / 2;\n\tvar hh = h / 2;\n\t\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, [new mxPoint(x + hw, y), new mxPoint(x + w, y + hh), new mxPoint(x + hw, y + h),\n\t     new mxPoint(x, y + hh)], this.isRounded, arcSize, true);\n\tc.fillAndStroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPolyline\n *\n * Extends <mxShape> to implement a polyline (a line with multiple points).\n * This shape is registered under <mxConstants.SHAPE_POLYLINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxPolyline\n *\n * Constructs a new polyline shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxPolyline(points, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxPolyline, mxShape);\n\n/**\n * Function: getRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0.\n */\nmxPolyline.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Returns false.\n */\nmxPolyline.prototype.isPaintBoundsInverted = function()\n{\n\treturn false;\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintEdgeShape = function(c, pts)\n{\n\tif (this.style == null || this.style[mxConstants.STYLE_CURVED] != 1)\n\t{\n\t\tthis.paintLine(c, pts, this.isRounded);\n\t}\n\telse\n\t{\n\t\tthis.paintCurvedLine(c, pts);\n\t}\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintLine = function(c, pts, rounded)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tc.begin();\n\tthis.addPoints(c, pts, rounded, arcSize, false);\n\tc.stroke();\n};\n\n/**\n * Function: paintLine\n * \n * Paints the line shape.\n */\nmxPolyline.prototype.paintCurvedLine = function(c, pts)\n{\n\tc.begin();\n\t\n\tvar pt = pts[0];\n\tvar n = pts.length;\n\t\n\tc.moveTo(pt.x, pt.y);\n\t\n\tfor (var i = 1; i < n - 2; i++)\n\t{\n\t\tvar p0 = pts[i];\n\t\tvar p1 = pts[i + 1];\n\t\tvar ix = (p0.x + p1.x) / 2;\n\t\tvar iy = (p0.y + p1.y) / 2;\n\t\t\n\t\tc.quadTo(p0.x, p0.y, ix, iy);\n\t}\n\t\n\tvar p0 = pts[n - 2];\n\tvar p1 = pts[n - 1];\n\t\n\tc.quadTo(p0.x, p0.y, p1.x, p1.y);\n\tc.stroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrow\n *\n * Extends <mxShape> to implement an arrow shape. (The shape\n * is used to represent edges, not vertices.)\n * This shape is registered under <mxConstants.SHAPE_ARROW>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrow\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrow(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.spacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.endSize = (endSize != null) ? endSize : mxConstants.ARROW_SIZE;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrow, mxShape);\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrow.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = Math.max(this.arrowWidth, this.endSize);\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrow.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar spacing =  mxConstants.ARROW_SPACING;\n\tvar width = mxConstants.ARROW_WIDTH;\n\tvar arrow = mxConstants.ARROW_SIZE;\n\n\t// Base vector (between end points)\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\tvar dx = pe.x - p0.x;\n\tvar dy = pe.y - p0.y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\tvar length = dist - 2 * spacing - arrow;\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar ny = dy / dist;\n\tvar basex = length * nx;\n\tvar basey = length * ny;\n\tvar floorx = width * ny/3;\n\tvar floory = -width * nx/3;\n\t\n\t// Computes points\n\tvar p0x = p0.x - floorx / 2 + spacing * nx;\n\tvar p0y = p0.y - floory / 2 + spacing * ny;\n\tvar p1x = p0x + floorx;\n\tvar p1y = p0y + floory;\n\tvar p2x = p1x + basex;\n\tvar p2y = p1y + basey;\n\tvar p3x = p2x + floorx;\n\tvar p3y = p2y + floory;\n\t// p4 not necessary\n\tvar p5x = p3x - 3 * floorx;\n\tvar p5y = p3y - 3 * floory;\n\t\n\tc.begin();\n\tc.moveTo(p0x, p0y);\n\tc.lineTo(p1x, p1y);\n\tc.lineTo(p2x, p2y);\n\tc.lineTo(p3x, p3y);\n\tc.lineTo(pe.x - spacing * nx, pe.y - spacing * ny);\n\tc.lineTo(p5x, p5y);\n\tc.lineTo(p5x + floorx, p5y + floory);\n\tc.close();\n\n\tc.fillAndStroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxArrowConnector\n *\n * Extends <mxShape> to implement an new rounded arrow shape with support for\n * waypoints and double arrows. (The shape is used to represent edges, not\n * vertices.) This shape is registered under <mxConstants.SHAPE_ARROW_CONNECTOR>\n * in <mxCellRenderer>.\n * \n * Constructor: mxArrowConnector\n *\n * Constructs a new arrow shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n * arrowWidth - Optional integer that defines the arrow width. Default is\n * <mxConstants.ARROW_WIDTH>. This is stored in <arrowWidth>.\n * spacing - Optional integer that defines the spacing between the arrow shape\n * and its endpoints. Default is <mxConstants.ARROW_SPACING>. This is stored in\n * <spacing>.\n * endSize - Optional integer that defines the size of the arrowhead. Default\n * is <mxConstants.ARROW_SIZE>. This is stored in <endSize>.\n */\nfunction mxArrowConnector(points, fill, stroke, strokewidth, arrowWidth, spacing, endSize)\n{\n\tmxShape.call(this);\n\tthis.points = points;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.arrowWidth = (arrowWidth != null) ? arrowWidth : mxConstants.ARROW_WIDTH;\n\tthis.arrowSpacing = (spacing != null) ? spacing : mxConstants.ARROW_SPACING;\n\tthis.startSize = mxConstants.ARROW_SIZE / 5;\n\tthis.endSize = mxConstants.ARROW_SIZE / 5;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxArrowConnector, mxShape);\n\n/**\n * Variable: useSvgBoundingBox\n * \n * Allows to use the SVG bounding box in SVG. Default is false for performance\n * reasons.\n */\nmxArrowConnector.prototype.useSvgBoundingBox = true;\n\n/**\n * Variable: resetStyles\n * \n * Overrides mxShape to reset spacing.\n */\nmxArrowConnector.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.arrowSpacing = mxConstants.ARROW_SPACING;\n};\n\n/**\n * Overrides apply to get smooth transition from default start- and endsize.\n */\nmxArrowConnector.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\n\tif (this.style != null)\n\t{\n\t\tthis.startSize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t\tthis.endSize = mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.ARROW_SIZE / 5) * 3;\n\t}\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the edge width and markers.\n */\nmxArrowConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\tvar w = this.getEdgeWidth();\n\t\n\tif (this.isMarkerStart())\n\t{\n\t\tw = Math.max(w, this.getStartArrowWidth());\n\t}\n\t\n\tif (this.isMarkerEnd())\n\t{\n\t\tw = Math.max(w, this.getEndArrowWidth());\n\t}\n\t\n\tbbox.grow((w / 2 + this.strokewidth) * this.scale);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// Geometry of arrow\n\tvar strokeWidth = this.strokewidth;\n\t\n\tif (this.outline)\n\t{\n\t\tstrokeWidth = Math.max(1, mxUtils.getNumber(this.style, mxConstants.STYLE_STROKEWIDTH, this.strokewidth));\n\t}\n\t\n\tvar startWidth = this.getStartArrowWidth() + strokeWidth;\n\tvar endWidth = this.getEndArrowWidth() + strokeWidth;\n\tvar edgeWidth = this.outline ? this.getEdgeWidth() + strokeWidth : this.getEdgeWidth();\n\tvar openEnded = this.isOpenEnded();\n\tvar markerStart = this.isMarkerStart();\n\tvar markerEnd = this.isMarkerEnd();\n\tvar spacing = (openEnded) ? 0 : this.arrowSpacing + strokeWidth / 2;\n\tvar startSize = this.startSize + strokeWidth;\n\tvar endSize = this.endSize + strokeWidth;\n\tvar isRounded = this.isArrowRounded();\n\t\n\t// Base vector (between first points)\n\tvar pe = pts[pts.length - 1];\n\n\t// Finds first non-overlapping point\n\tvar i0 = 1;\n\t\n\twhile (i0 < pts.length - 1 && pts[i0].x == pts[0].x && pts[i0].y == pts[0].y)\n\t{\n\t\ti0++;\n\t}\n\t\n\tvar dx = pts[i0].x - pts[0].x;\n\tvar dy = pts[i0].y - pts[0].y;\n\tvar dist = Math.sqrt(dx * dx + dy * dy);\n\t\n\tif (dist == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\t// Computes the norm and the inverse norm\n\tvar nx = dx / dist;\n\tvar nx2, nx1 = nx;\n\tvar ny = dy / dist;\n\tvar ny2, ny1 = ny;\n\tvar orthx = edgeWidth * ny;\n\tvar orthy = -edgeWidth * nx;\n\t\n\t// Stores the inbound function calls in reverse order in fns\n\tvar fns = [];\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('round');\n\t}\n\telse if (pts.length > 2)\n\t{\n\t\t// Only mitre if there are waypoints\n\t\tc.setMiterLimit(1.42);\n\t}\n\n\tc.begin();\n\n\tvar startNx = nx;\n\tvar startNy = ny;\n\n\tif (markerStart && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pts[0].x, pts[0].y, nx, ny, startSize, startWidth, edgeWidth, spacing, true);\n\t}\n\telse\n\t{\n\t\tvar outStartX = pts[0].x + orthx / 2 + spacing * nx;\n\t\tvar outStartY = pts[0].y + orthy / 2 + spacing * ny;\n\t\tvar inEndX = pts[0].x - orthx / 2 + spacing * nx;\n\t\tvar inEndY = pts[0].y - orthy / 2 + spacing * ny;\n\t\t\n\t\tif (openEnded)\n\t\t{\n\t\t\tc.moveTo(outStartX, outStartY);\n\t\t\t\n\t\t\tfns.push(function()\n\t\t\t{\n\t\t\t\tc.lineTo(inEndX, inEndY);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inEndX, inEndY);\n\t\t\tc.lineTo(outStartX, outStartY);\n\t\t}\n\t}\n\t\n\tvar dx1 = 0;\n\tvar dy1 = 0;\n\tvar dist1 = 0;\n\n\tfor (var i = 0; i < pts.length - 2; i++)\n\t{\n\t\t// Work out in which direction the line is bending\n\t\tvar pos = mxUtils.relativeCcw(pts[i].x, pts[i].y, pts[i+1].x, pts[i+1].y, pts[i+2].x, pts[i+2].y);\n\n\t\tdx1 = pts[i+2].x - pts[i+1].x;\n\t\tdy1 = pts[i+2].y - pts[i+1].y;\n\n\t\tdist1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n\t\t\n\t\tif (dist1 != 0)\n\t\t{\n\t\t\tnx1 = dx1 / dist1;\n\t\t\tny1 = dy1 / dist1;\n\t\t\t\n\t\t\tvar tmp1 = nx * nx1 + ny * ny1;\n\t\t\ttmp = Math.max(Math.sqrt((tmp1 + 1) / 2), 0.04);\n\t\t\t\n\t\t\t// Work out the normal orthogonal to the line through the control point and the edge sides intersection\n\t\t\tnx2 = (nx + nx1);\n\t\t\tny2 = (ny + ny1);\n\t\n\t\t\tvar dist2 = Math.sqrt(nx2 * nx2 + ny2 * ny2);\n\t\t\t\n\t\t\tif (dist2 != 0)\n\t\t\t{\n\t\t\t\tnx2 = nx2 / dist2;\n\t\t\t\tny2 = ny2 / dist2;\n\t\t\t\t\n\t\t\t\t// Higher strokewidths require a larger minimum bend, 0.35 covers all but the most extreme cases\n\t\t\t\tvar strokeWidthFactor = Math.max(tmp, Math.min(this.strokewidth / 200 + 0.04, 0.35));\n\t\t\t\tvar angleFactor = (pos != 0 && isRounded) ? Math.max(0.1, strokeWidthFactor) : Math.max(tmp, 0.06);\n\n\t\t\t\tvar outX = pts[i+1].x + ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar outY = pts[i+1].y - nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inX = pts[i+1].x - ny2 * edgeWidth / 2 / angleFactor;\n\t\t\t\tvar inY = pts[i+1].y + nx2 * edgeWidth / 2 / angleFactor;\n\t\t\t\t\n\t\t\t\tif (pos == 0 || !isRounded)\n\t\t\t\t{\n\t\t\t\t\t// If the two segments are aligned, or if we're not drawing curved sections between segments\n\t\t\t\t\t// just draw straight to the intersection point\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse if (pos == -1)\n\t\t\t\t{\n\t\t\t\t\tvar c1x = inX + ny * edgeWidth;\n\t\t\t\t\tvar c1y = inY - nx * edgeWidth;\n\t\t\t\t\tvar c2x = inX + ny1 * edgeWidth;\n\t\t\t\t\tvar c2y = inY - nx1 * edgeWidth;\n\t\t\t\t\tc.lineTo(c1x, c1y);\n\t\t\t\t\tc.quadTo(outX, outY, c2x, c2y);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(x, y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tc.lineTo(outX, outY);\n\t\t\t\t\t\n\t\t\t\t\t(function(x, y)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c1x = outX - ny * edgeWidth;\n\t\t\t\t\t\tvar c1y = outY + nx * edgeWidth;\n\t\t\t\t\t\tvar c2x = outX - ny1 * edgeWidth;\n\t\t\t\t\t\tvar c2y = outY + nx1 * edgeWidth;\n\t\t\t\t\t\t\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.quadTo(x, y, c1x, c1y);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfns.push(function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc.lineTo(c2x, c2y);\n\t\t\t\t\t\t});\n\t\t\t\t\t})(inX, inY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnx = nx1;\n\t\t\t\tny = ny1;\n\t\t\t}\n\t\t}\n\t}\n\t\n\torthx = edgeWidth * ny1;\n\torthy = - edgeWidth * nx1;\n\n\tif (markerEnd && !openEnded)\n\t{\n\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, false);\n\t}\n\telse\n\t{\n\t\tc.lineTo(pe.x - spacing * nx1 + orthx / 2, pe.y - spacing * ny1 + orthy / 2);\n\t\t\n\t\tvar inStartX = pe.x - spacing * nx1 - orthx / 2;\n\t\tvar inStartY = pe.y - spacing * ny1 - orthy / 2;\n\n\t\tif (!openEnded)\n\t\t{\n\t\t\tc.lineTo(inStartX, inStartY);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t\n\t\t\tfns.splice(0, 0, function()\n\t\t\t{\n\t\t\t\tc.moveTo(inStartX, inStartY);\n\t\t\t});\n\t\t}\n\t}\n\t\n\tfor (var i = fns.length - 1; i >= 0; i--)\n\t{\n\t\tfns[i]();\n\t}\n\n\tif (openEnded)\n\t{\n\t\tc.end();\n\t\tc.stroke();\n\t}\n\telse\n\t{\n\t\tc.close();\n\t\tc.fillAndStroke();\n\t}\n\t\n\t// Workaround for shadow on top of base arrow\n\tc.setShadow(false);\n\t\n\t// Need to redraw the markers without the low miter limit\n\tc.setMiterLimit(4);\n\t\n\tif (isRounded)\n\t{\n\t\tc.setLineJoin('flat');\n\t}\n\n\tif (pts.length > 2)\n\t{\n\t\t// Only to repaint markers if no waypoints\n\t\t// Need to redraw the markers without the low miter limit\n\t\tc.setMiterLimit(4);\n\t\tif (markerStart && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pts[0].x, pts[0].y, startNx, startNy, startSize, startWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t\t\n\t\tif (markerEnd && !openEnded)\n\t\t{\n\t\t\tc.begin();\n\t\t\tthis.paintMarker(c, pe.x, pe.y, -nx, -ny, endSize, endWidth, edgeWidth, spacing, true);\n\t\t\tc.stroke();\n\t\t\tc.end();\n\t\t}\n\t}\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxArrowConnector.prototype.paintMarker = function(c, ptX, ptY, nx, ny, size, arrowWidth, edgeWidth, spacing, initialMove)\n{\n\tvar widthArrowRatio = edgeWidth / arrowWidth;\n\tvar orthx = edgeWidth * ny / 2;\n\tvar orthy = -edgeWidth * nx / 2;\n\n\tvar spaceX = (spacing + size) * nx;\n\tvar spaceY = (spacing + size) * ny;\n\n\tif (initialMove)\n\t{\n\t\tc.moveTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\telse\n\t{\n\t\tc.lineTo(ptX - orthx + spaceX, ptY - orthy + spaceY);\n\t}\n\n\tc.lineTo(ptX - orthx / widthArrowRatio + spaceX, ptY - orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + spacing * nx, ptY + spacing * ny);\n\tc.lineTo(ptX + orthx / widthArrowRatio + spaceX, ptY + orthy / widthArrowRatio + spaceY);\n\tc.lineTo(ptX + orthx + spaceX, ptY + orthy + spaceY);\n}\n\n/**\n * Function: isArrowRounded\n * \n * Returns wether the arrow is rounded\n */\nmxArrowConnector.prototype.isArrowRounded = function()\n{\n\treturn this.isRounded;\n};\n\n/**\n * Function: getStartArrowWidth\n * \n * Returns the width of the start arrow\n */\nmxArrowConnector.prototype.getStartArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEndArrowWidth\n * \n * Returns the width of the end arrow\n */\nmxArrowConnector.prototype.getEndArrowWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH;\n};\n\n/**\n * Function: getEdgeWidth\n * \n * Returns the width of the body of the edge\n */\nmxArrowConnector.prototype.getEdgeWidth = function()\n{\n\treturn mxConstants.ARROW_WIDTH / 3;\n};\n\n/**\n * Function: isOpenEnded\n * \n * Returns whether the ends of the shape are drawn\n */\nmxArrowConnector.prototype.isOpenEnded = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isMarkerStart\n * \n * Returns whether the start marker is drawn\n */\nmxArrowConnector.prototype.isMarkerStart = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n\n/**\n * Function: isMarkerEnd\n * \n * Returns whether the end marker is drawn\n */\nmxArrowConnector.prototype.isMarkerEnd = function()\n{\n\treturn (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxText\n *\n * Extends <mxShape> to implement a text shape. To change vertical text from\n * bottom to top to top to bottom, the following code can be used:\n * \n * (code)\n * mxText.prototype.verticalTextRotation = 90;\n * (end)\n * \n * Constructor: mxText\n *\n * Constructs a new text shape.\n * \n * Parameters:\n * \n * value - String that represents the text to be displayed. This is stored in\n * <value>.\n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * align - Specifies the horizontal alignment. Default is ''. This is stored in\n * <align>.\n * valign - Specifies the vertical alignment. Default is ''. This is stored in\n * <valign>.\n * color - String that specifies the text color. Default is 'black'. This is\n * stored in <color>.\n * family - String that specifies the font family. Default is\n * <mxConstants.DEFAULT_FONTFAMILY>. This is stored in <family>.\n * size - Integer that specifies the font size. Default is\n * <mxConstants.DEFAULT_FONTSIZE>. This is stored in <size>.\n * fontStyle - Specifies the font style. Default is 0. This is stored in\n * <fontStyle>.\n * spacing - Integer that specifies the global spacing. Default is 2. This is\n * stored in <spacing>.\n * spacingTop - Integer that specifies the top spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingTop>.\n * spacingRight - Integer that specifies the right spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingRight>.\n * spacingBottom - Integer that specifies the bottom spacing. Default is 0.The\n * sum of the spacing and this is stored in <spacingBottom>.\n * spacingLeft - Integer that specifies the left spacing. Default is 0. The\n * sum of the spacing and this is stored in <spacingLeft>.\n * horizontal - Boolean that specifies if the label is horizontal. Default is\n * true. This is stored in <horizontal>.\n * background - String that specifies the background color. Default is null.\n * This is stored in <background>.\n * border - String that specifies the label border color. Default is null.\n * This is stored in <border>.\n * wrap - Specifies if word-wrapping should be enabled. Default is false.\n * This is stored in <wrap>.\n * clipped - Specifies if the label should be clipped. Default is false.\n * This is stored in <clipped>.\n * overflow - Value of the overflow style. Default is 'visible'.\n */\nfunction mxText(value, bounds, align, valign, color,\n\tfamily,\tsize, fontStyle, spacing, spacingTop, spacingRight,\n\tspacingBottom, spacingLeft, horizontal, background, border,\n\twrap, clipped, overflow, labelPadding, textDirection)\n{\n\tmxShape.call(this);\n\tthis.value = value;\n\tthis.bounds = bounds;\n\tthis.color = (color != null) ? color : 'black';\n\tthis.align = (align != null) ? align : mxConstants.ALIGN_CENTER;\n\tthis.valign = (valign != null) ? valign : mxConstants.ALIGN_MIDDLE;\n\tthis.family = (family != null) ? family : mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = (size != null) ? size : mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = (fontStyle != null) ? fontStyle : mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = parseInt(spacing || 2);\n\tthis.spacingTop = this.spacing + parseInt(spacingTop || 0);\n\tthis.spacingRight = this.spacing + parseInt(spacingRight || 0);\n\tthis.spacingBottom = this.spacing + parseInt(spacingBottom || 0);\n\tthis.spacingLeft = this.spacing + parseInt(spacingLeft || 0);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.background = background;\n\tthis.border = border;\n\tthis.wrap = (wrap != null) ? wrap : false;\n\tthis.clipped = (clipped != null) ? clipped : false;\n\tthis.overflow = (overflow != null) ? overflow : 'visible';\n\tthis.labelPadding = (labelPadding != null) ? labelPadding : 0;\n\tthis.textDirection = textDirection;\n\tthis.rotation = 0;\n\tthis.updateMargin();\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxText, mxShape);\n\n/**\n * Variable: baseSpacingTop\n * \n * Specifies the spacing to be added to the top spacing. Default is 0. Use the\n * value 5 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingTop = 0;\n\n/**\n * Variable: baseSpacingBottom\n * \n * Specifies the spacing to be added to the bottom spacing. Default is 0. Use the\n * value 1 here to get the same label positions as in mxGraph 1.x.\n */\nmxText.prototype.baseSpacingBottom = 0;\n\n/**\n * Variable: baseSpacingLeft\n * \n * Specifies the spacing to be added to the left spacing. Default is 0.\n */\nmxText.prototype.baseSpacingLeft = 0;\n\n/**\n * Variable: baseSpacingRight\n * \n * Specifies the spacing to be added to the right spacing. Default is 0.\n */\nmxText.prototype.baseSpacingRight = 0;\n\n/**\n * Variable: replaceLinefeeds\n * \n * Specifies if linefeeds in HTML labels should be replaced with BR tags.\n * Default is true.\n */\nmxText.prototype.replaceLinefeeds = true;\n\n/**\n * Variable: verticalTextRotation\n * \n * Rotation for vertical text. Default is -90 (bottom to top).\n */\nmxText.prototype.verticalTextRotation = -90;\n\n/**\n * Variable: ignoreClippedStringSize\n * \n * Specifies if the string size should be measured in <updateBoundingBox> if\n * the label is clipped and the label position is center and middle. If this is\n * true, then the bounding box will be set to <bounds>. Default is true.\n * <ignoreStringSize> has precedence over this switch.\n */\nmxText.prototype.ignoreClippedStringSize = true;\n\n/**\n * Variable: ignoreStringSize\n * \n * Specifies if the actual string size should be measured. If disabled the\n * boundingBox will not ignore the actual size of the string, otherwise\n * <bounds> will be used instead. Default is false.\n */\nmxText.prototype.ignoreStringSize = false;\n\n/**\n * Variable: textWidthPadding\n * \n * Specifies the padding to be added to the text width for the bounding box.\n * This is needed to make sure no clipping is applied to borders. Default is 4\n * for IE 8 standards mode and 3 for all others.\n */\nmxText.prototype.textWidthPadding = (document.documentMode == 8 && !mxClient.IS_EM) ? 4 : 3;\n\n/**\n * Variable: lastValue\n * \n * Contains the last rendered text value. Used for caching.\n */\nmxText.prototype.lastValue = null;\n\n/**\n * Variable: cacheEnabled\n * \n * Specifies if caching for HTML labels should be enabled. Default is true.\n */\nmxText.prototype.cacheEnabled = true;\n\n/**\n * Function: isParseVml\n * \n * Text shapes do not contain VML markup and do not need to be parsed. This\n * method returns false to speed up rendering in IE8.\n */\nmxText.prototype.isParseVml = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation returns\n * true if the browser is not in IE8 standards mode.\n */\nmxText.prototype.isHtmlAllowed = function()\n{\n\treturn document.documentMode != 8 || mxClient.IS_EM;\n};\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxText.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: checkBounds\n * \n * Returns true if the bounds are not null and all of its variables are numeric.\n */\nmxText.prototype.checkBounds = function()\n{\n\treturn (!isNaN(this.scale) && isFinite(this.scale) && this.scale > 0 &&\n\t\t\tthis.bounds != null && !isNaN(this.bounds.x) && !isNaN(this.bounds.y) &&\n\t\t\t!isNaN(this.bounds.width) && !isNaN(this.bounds.height));\n};\n\n/**\n * Function: paint\n * \n * Generic rendering code.\n */\nmxText.prototype.paint = function(c, update)\n{\n\t// Scale is passed-through to canvas\n\tvar s = this.scale;\n\tvar x = this.bounds.x / s;\n\tvar y = this.bounds.y / s;\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\t\n\tthis.updateTransform(c, x, y, w, h);\n\tthis.configureCanvas(c, x, y, w, h);\n\n\tvar unscaledWidth = (this.state != null) ? this.state.unscaledWidth : null;\n\n\tif (update)\n\t{\n\t\tif (this.node.firstChild != null && (unscaledWidth == null ||\n\t\t\tthis.lastUnscaledWidth != unscaledWidth))\n\t\t{\n\t\t\tc.invalidateCachedOffsetSize(this.node);\n\t\t}\n\n\t\tc.updateText(x, y, w, h, this.align, this.valign, this.wrap, this.overflow,\n\t\t\t\tthis.clipped, this.getTextRotation(), this.node);\n\t}\n\telse\n\t{\n\t\t// Checks if text contains HTML markup\n\t\tvar realHtml = mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML;\n\t\t\n\t\t// Always renders labels as HTML in VML\n\t\tvar fmt = (realHtml || c instanceof mxVmlCanvas2D) ? 'html' : '';\n\t\tvar val = this.value;\n\t\t\n\t\tif (!realHtml && fmt == 'html')\n\t\t{\n\t\t\tval =  mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\tif (fmt == 'html' && !mxUtils.isNode(this.value))\n\t\t{\n\t\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\t\t\t\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = (!mxUtils.isNode(this.value) && this.replaceLinefeeds && fmt == 'html') ?\n\t\t\tval.replace(/\\n/g, '<br/>') : val;\n\t\t\t\n\t\tvar dir = this.textDirection;\n\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && !realHtml)\n\t\t{\n\t\t\tdir = this.getAutoDirection();\n\t\t}\n\t\t\n\t\tif (dir != mxConstants.TEXT_DIRECTION_LTR && dir != mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tdir = null;\n\t\t}\n\t\n\t\tc.text(x, y, w, h, val, this.align, this.valign, this.wrap, fmt, this.overflow,\n\t\t\tthis.clipped, this.getTextRotation(), dir);\n\t}\n\t\n\t// Needs to invalidate the cached offset widths if the geometry changes\n\tthis.lastUnscaledWidth = unscaledWidth;\n};\n\n/**\n * Function: redraw\n * \n * Renders the text using the given DOM nodes.\n */\nmxText.prototype.redraw = function()\n{\n\tif (this.visible && this.checkBounds() && this.cacheEnabled && this.lastValue == this.value &&\n\t\t(mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML))\n\t{\n\t\tif (this.node.nodeName == 'DIV' && (this.isHtmlAllowed() || !mxClient.IS_VML))\n\t\t{\n\t\t\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\n\t\t\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t\t\t{\n\t\t\t\tthis.updateHtmlFilter();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.updateHtmlTransform();\n\t\t\t}\n\t\t\t\n\t\t\tthis.updateBoundingBox();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar canvas = this.createCanvas();\n\n\t\t\tif (canvas != null && canvas.updateText != null &&\n\t\t\t\tcanvas.invalidateCachedOffsetSize != null)\n\t\t\t{\n\t\t\t\tthis.paint(canvas, true);\n\t\t\t\tthis.destroyCanvas(canvas);\n\t\t\t\tthis.updateBoundingBox();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Fallback if canvas does not support updateText (VML)\n\t\t\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxShape.prototype.redraw.apply(this, arguments);\n\t\t\n\t\tif (mxUtils.isNode(this.value) || this.dialect == mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tthis.lastValue = this.value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.lastValue = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: resetStyles\n * \n * Resets all styles.\n */\nmxText.prototype.resetStyles = function()\n{\n\tmxShape.prototype.resetStyles.apply(this, arguments);\n\t\n\tthis.color = 'black';\n\tthis.align = mxConstants.ALIGN_CENTER;\n\tthis.valign = mxConstants.ALIGN_MIDDLE;\n\tthis.family = mxConstants.DEFAULT_FONTFAMILY;\n\tthis.size = mxConstants.DEFAULT_FONTSIZE;\n\tthis.fontStyle = mxConstants.DEFAULT_FONTSTYLE;\n\tthis.spacing = 2;\n\tthis.spacingTop = 2;\n\tthis.spacingRight = 2;\n\tthis.spacingBottom = 2;\n\tthis.spacingLeft = 2;\n\tthis.horizontal = true;\n\tdelete this.background;\n\tdelete this.border;\n\tthis.textDirection = mxConstants.DEFAULT_TEXT_DIRECTION;\n\tdelete this.margin;\n};\n\n/**\n * Function: apply\n * \n * Extends mxShape to update the text styles.\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxText.prototype.apply = function(state)\n{\n\tvar old = this.spacing;\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.fontStyle = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSTYLE, this.fontStyle);\n\t\tthis.family = mxUtils.getValue(this.style, mxConstants.STYLE_FONTFAMILY, this.family);\n\t\tthis.size = mxUtils.getValue(this.style, mxConstants.STYLE_FONTSIZE, this.size);\n\t\tthis.color = mxUtils.getValue(this.style, mxConstants.STYLE_FONTCOLOR, this.color);\n\t\tthis.align = mxUtils.getValue(this.style, mxConstants.STYLE_ALIGN, this.align);\n\t\tthis.valign = mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_ALIGN, this.valign);\n\t\tthis.spacing = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING, this.spacing));\n\t\tthis.spacingTop = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_TOP, this.spacingTop - old)) + this.spacing;\n\t\tthis.spacingRight = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_RIGHT, this.spacingRight - old)) + this.spacing;\n\t\tthis.spacingBottom = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_BOTTOM, this.spacingBottom - old)) + this.spacing;\n\t\tthis.spacingLeft = parseInt(mxUtils.getValue(this.style, mxConstants.STYLE_SPACING_LEFT, this.spacingLeft - old)) + this.spacing;\n\t\tthis.horizontal = mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, this.horizontal);\n\t\tthis.background = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BACKGROUNDCOLOR, this.background);\n\t\tthis.border = mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_BORDERCOLOR, this.border);\n\t\tthis.textDirection = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\tthis.opacity = mxUtils.getValue(this.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tthis.updateMargin();\n\t}\n\t\n\tthis.flipV = null;\n\tthis.flipH = null;\n};\n\n/**\n * Function: getAutoDirection\n * \n * Used to determine the automatic text direction. Returns\n * <mxConstants.TEXT_DIRECTION_LTR> or <mxConstants.TEXT_DIRECTION_RTL>\n * depending on the contents of <value>. This is not invoked for HTML, wrapped\n * content or if <value> is a DOM node.\n */\nmxText.prototype.getAutoDirection = function()\n{\n\t// Looks for strong (directional) characters\n\tvar tmp = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(this.value);\n\t\n\t// Returns the direction defined by the character\n\treturn (tmp != null && tmp.length > 0 && tmp[0] > 'z') ?\n\t\tmxConstants.TEXT_DIRECTION_RTL : mxConstants.TEXT_DIRECTION_LTR;\n};\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using the given node and position.\n */\nmxText.prototype.updateBoundingBox = function()\n{\n\tvar node = this.node;\n\tthis.boundingBox = this.bounds.clone();\n\tvar rot = this.getTextRotation();\n\t\n\tvar h = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER) : null;\n\tvar v = (this.style != null) ? mxUtils.getValue(this.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE) : null;\n\n\tif (!this.ignoreStringSize && node != null && this.overflow != 'fill' && (!this.clipped ||\n\t\t!this.ignoreClippedStringSize || h != mxConstants.ALIGN_CENTER || v != mxConstants.ALIGN_MIDDLE))\n\t{\n\t\tvar ow = null;\n\t\tvar oh = null;\n\t\t\n\t\tif (node.ownerSVGElement != null)\n\t\t{\n\t\t\tif (node.firstChild != null && node.firstChild.firstChild != null &&\n\t\t\t\tnode.firstChild.firstChild.nodeName == 'foreignObject')\n\t\t\t{\n\t\t\t\tnode = node.firstChild.firstChild;\n\t\t\t\tow = parseInt(node.getAttribute('width')) * this.scale;\n\t\t\t\toh = parseInt(node.getAttribute('height')) * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar b = node.getBBox();\n\t\t\t\t\t\n\t\t\t\t\t// Workaround for bounding box of empty string\n\t\t\t\t\tif (typeof(this.value) == 'string' && mxUtils.trim(this.value) == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse if (b.width == 0 && b.height == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.boundingBox = new mxRectangle(b.x, b.y, b.width, b.height);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// Ignores NS_ERROR_FAILURE in FF if container display is none.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\n\t\t\t// Use cached offset size\n\t\t\tif (this.offsetWidth != null && this.offsetHeight != null)\n\t\t\t{\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Cannot get node size while container hidden so a\n\t\t\t\t// shared temporary DIV is used for text measuring\n\t\t\t\tif (td != null)\n\t\t\t\t{\n\t\t\t\t\tthis.updateFont(td);\n\t\t\t\t\tthis.updateSize(td, false);\n\t\t\t\t\tthis.updateInnerHtml(td);\n\n\t\t\t\t\tnode = td;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar sizeDiv = node;\n\n\t\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t\t{\n\t\t\t\t\tvar w = Math.round(this.bounds.width / this.scale);\n\t\n\t\t\t\t\tif (this.wrap && w > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\t\t\tnode.style.whiteSpace = 'normal';\n\n\t\t\t\t\t\tif (node.style.wordWrap != 'break-word')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Innermost DIV is used for measuring text\n\t\t\t\t\t\t\tvar divs = sizeDiv.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (divs.length > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsizeDiv = divs[divs.length - 1];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tow = sizeDiv.offsetWidth + 2;\n\t\t\t\t\t\t\tdivs = this.node.getElementsByTagName('div');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.clipped)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tow = Math.min(w, ow);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Second last DIV width must be updated in DOM tree\n\t\t\t\t\t\t\tif (divs.length > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdivs[divs.length - 2].style.width = ow + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.style.whiteSpace = 'nowrap';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t}\n\n\t\t\t\tthis.offsetWidth = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\t\tthis.offsetHeight = sizeDiv.offsetHeight;\n\t\t\t\t\n\t\t\t\tow = this.offsetWidth * this.scale;\n\t\t\t\toh = this.offsetHeight * this.scale;\n\t\t\t}\n\t\t}\n\n\t\tif (ow != null && oh != null)\n\t\t{\t\n\t\t\tthis.boundingBox = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y, ow, oh);\n\t\t}\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tif (rot != 0)\n\t\t{\n\t\t\t// Accounts for pre-rotated x and y\n\t\t\tvar bbox = mxUtils.getBoundingBox(new mxRectangle(\n\t\t\t\tthis.margin.x * this.boundingBox.width,\n\t\t\t\tthis.margin.y * this.boundingBox.height,\n\t\t\t\tthis.boundingBox.width, this.boundingBox.height),\n\t\t\t\trot, new mxPoint(0, 0));\n\t\t\t\n\t\t\tthis.unrotatedBoundingBox = mxRectangle.fromRectangle(this.boundingBox);\n\t\t\tthis.unrotatedBoundingBox.x += this.margin.x * this.unrotatedBoundingBox.width;\n\t\t\tthis.unrotatedBoundingBox.y += this.margin.y * this.unrotatedBoundingBox.height;\n\t\t\t\n\t\t\tthis.boundingBox.x += bbox.x;\n\t\t\tthis.boundingBox.y += bbox.y;\n\t\t\tthis.boundingBox.width = bbox.width;\n\t\t\tthis.boundingBox.height = bbox.height;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.boundingBox.x += this.margin.x * this.boundingBox.width;\n\t\t\tthis.boundingBox.y += this.margin.y * this.boundingBox.height;\n\t\t\tthis.unrotatedBoundingBox = null;\n\t\t}\n\t}\n};\n\n/**\n * Function: getShapeRotation\n * \n * Returns 0 to avoid using rotation in the canvas via updateTransform.\n */\nmxText.prototype.getShapeRotation = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: getTextRotation\n * \n * Returns the rotation for the text label of the corresponding shape.\n */\nmxText.prototype.getTextRotation = function()\n{\n\treturn (this.state != null && this.state.shape != null) ? this.state.shape.getTextRotation() : 0;\n};\n\n/**\n * Function: isPaintBoundsInverted\n * \n * Inverts the bounds if <mxShape.isBoundsInverted> returns true or if the\n * horizontal style is false.\n */\nmxText.prototype.isPaintBoundsInverted = function()\n{\n\treturn !this.horizontal && this.state != null && this.state.view.graph.model.isVertex(this.state.cell);\n};\n\n/**\n * Function: configureCanvas\n * \n * Sets the state of the canvas for drawing the shape.\n */\nmxText.prototype.configureCanvas = function(c, x, y, w, h)\n{\n\tmxShape.prototype.configureCanvas.apply(this, arguments);\n\t\n\tc.setFontColor(this.color);\n\tc.setFontBackgroundColor(this.background);\n\tc.setFontBorderColor(this.border);\n\tc.setFontFamily(this.family);\n\tc.setFontSize(this.size);\n\tc.setFontStyle(this.fontStyle);\n};\n\n/**\n * Function: updateVmlContainer\n * \n * Sets the width and height of the container to 1px.\n */\nmxText.prototype.updateVmlContainer = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = '1px';\n\tthis.node.style.height = '1px';\n\tthis.node.style.overflow = 'visible';\n};\n\n/**\n * Function: redrawHtmlShape\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.redrawHtmlShape = function()\n{\n\tvar style = this.node.style;\n\n\t// Resets CSS styles\n\tstyle.whiteSpace = 'normal';\n\tstyle.overflow = '';\n\tstyle.width = '';\n\tstyle.height = '';\n\t\n\tthis.updateValue();\n\tthis.updateFont(this.node);\n\tthis.updateSize(this.node, (this.state == null || this.state.view.textDiv == null));\n\t\n\tthis.offsetWidth = null;\n\tthis.offsetHeight = null;\n\n\tif (mxClient.IS_IE && (document.documentMode == null || document.documentMode <= 8))\n\t{\n\t\tthis.updateHtmlFilter();\n\t}\n\telse\n\t{\n\t\tthis.updateHtmlTransform();\n\t}\n};\n\n/**\n * Function: updateHtmlTransform\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateHtmlTransform = function()\n{\n\tvar theta = this.getTextRotation();\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\t\n\tif (theta != 0)\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', (-dx * 100) + '%' + ' ' + (-dy * 100) + '%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)' +\n\t\t\t'scale(' + this.scale + ') rotate(' + theta + 'deg)');\n\t}\n\telse\n\t{\n\t\tmxUtils.setPrefixedStyle(style, 'transformOrigin', '0% 0%');\n\t\tmxUtils.setPrefixedStyle(style, 'transform', 'scale(' + this.scale + ')' +\n\t\t\t'translate(' + (dx * 100) + '%' + ',' + (dy * 100) + '%)');\n\t}\n\n\tstyle.left = Math.round(this.bounds.x - Math.ceil(dx * ((this.overflow != 'fill' &&\n\t\tthis.overflow != 'width') ? 3 : 1))) + 'px';\n\tstyle.top = Math.round(this.bounds.y - dy * ((this.overflow != 'fill') ? 3 : 1)) + 'px';\n\t\n\tif (this.opacity < 100)\n\t{\n\t\tstyle.opacity = this.opacity / 100;\n\t}\n\telse\n\t{\n\t\tstyle.opacity = '';\n\t}\n};\n\n/**\n * Function: setInnerHtml\n * \n * Sets the inner HTML of the given element to the <value>.\n */\nmxText.prototype.updateInnerHtml = function(elt)\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\telt.innerHTML = this.value.outerHTML;\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\t// LATER: Can be cached in updateValue\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div>&nbsp;</div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tval = '<div style=\"display:inline-block;_display:inline;\">' + val + '</div>';\n\t\t\n\t\telt.innerHTML = val;\n\t}\n};\n\n/**\n * Function: updateHtmlFilter\n *\n * Rotated text rendering quality is bad for IE9 quirks/IE8 standards\n */\nmxText.prototype.updateHtmlFilter = function()\n{\n\tvar style = this.node.style;\n\tvar dx = this.margin.x;\n\tvar dy = this.margin.y;\n\tvar s = this.scale;\n\t\n\t// Resets filter before getting offsetWidth\n\tmxUtils.setOpacity(this.node, this.opacity);\n\t\n\t// Adds 1 to match table height in 1.x\n\tvar ow = 0;\n\tvar oh = 0;\n\tvar td = (this.state != null) ? this.state.view.textDiv : null;\n\tvar sizeDiv = this.node;\n\t\n\t// Fallback for hidden text rendering in IE quirks mode\n\tif (td != null)\n\t{\n\t\ttd.style.overflow = '';\n\t\ttd.style.height = '';\n\t\ttd.style.width = '';\n\t\t\n\t\tthis.updateFont(td);\n\t\tthis.updateSize(td, false);\n\t\tthis.updateInnerHtml(td);\n\t\t\n\t\tvar w = Math.round(this.bounds.width / this.scale);\n\n\t\tif (this.wrap && w > 0)\n\t\t{\n\t\t\ttd.style.whiteSpace = 'normal';\n\t\t\ttd.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\tow = w;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\tow = Math.min(ow, this.bounds.width);\n\t\t\t}\n\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttd.style.whiteSpace = 'nowrap';\n\t\t}\n\t\t\n\t\tsizeDiv = td;\n\t\t\n\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t{\n\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\n\t\t\tif (this.wrap && td.style.wordWrap == 'break-word')\n\t\t\t{\n\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t}\n\t\t}\n\n\t\t// Required to update the height of the text box after wrapping width is known \n\t\tif (!this.clipped && this.wrap && w > 0)\n\t\t{\n\t\t\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\t\ttd.style.width = ow + 'px';\n\t\t}\n\t\t\n\t\toh = sizeDiv.offsetHeight + 2;\n\t\t\n\t\tif (mxClient.IS_QUIRKS && this.border != null && this.border != mxConstants.NONE)\n\t\t{\n\t\t\toh += 3;\n\t\t}\n\t}\n\telse if (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t{\n\t\tsizeDiv = sizeDiv.firstChild;\n\t\toh = sizeDiv.offsetHeight;\n\t}\n\n\tow = sizeDiv.offsetWidth + this.textWidthPadding;\n\t\n\tif (this.clipped)\n\t{\n\t\toh = Math.min(oh, this.bounds.height);\n\t}\n\n\tvar w = this.bounds.width / s;\n\tvar h = this.bounds.height / s;\n\n\t// Handles special case for live preview with no wrapper DIV and no textDiv\n\tif (this.overflow == 'fill')\n\t{\n\t\toh = h;\n\t\tow = w;\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\toh = sizeDiv.scrollHeight;\n\t\tow = w;\n\t}\n\t\n\t// Stores for later use\n\tthis.offsetWidth = ow;\n\tthis.offsetHeight = oh;\n\t\n\t// Simulates max-height CSS in quirks mode\n\tif (mxClient.IS_QUIRKS && (this.clipped || (this.overflow == 'width' && h > 0)))\n\t{\n\t\th = Math.min(h, oh);\n\t\tstyle.height = Math.round(h) + 'px';\n\t}\n\telse\n\t{\n\t\th = oh;\n\t}\n\n\tif (this.overflow != 'fill' && this.overflow != 'width')\n\t{\n\t\tif (this.clipped)\n\t\t{\n\t\t\tow = Math.min(w, ow);\n\t\t}\n\t\t\n\t\tw = ow;\n\n\t\t// Simulates max-width CSS in quirks mode\n\t\tif ((mxClient.IS_QUIRKS && this.clipped) || this.wrap)\n\t\t{\n\t\t\tstyle.width = Math.round(w) + 'px';\n\t\t}\n\t}\n\n\th *= s;\n\tw *= s;\n\t\n\t// Rotation case is handled via VML canvas\n\tvar rad = this.getTextRotation() * (Math.PI / 180);\n\t\n\t// Precalculate cos and sin for the rotation\n\tvar real_cos = parseFloat(parseFloat(Math.cos(rad)).toFixed(8));\n\tvar real_sin = parseFloat(parseFloat(Math.sin(-rad)).toFixed(8));\n\n\trad %= 2 * Math.PI;\n\t\n\tif (rad < 0)\n\t{\n\t\trad += 2 * Math.PI;\n\t}\n\t\n\trad %= Math.PI;\n\t\n\tif (rad > Math.PI / 2)\n\t{\n\t\trad = Math.PI - rad;\n\t}\n\t\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(-rad);\n\n\tvar tx = w * -(dx + 0.5);\n\tvar ty = h * -(dy + 0.5);\n\n\tvar top_fix = (h - h * cos + w * sin) / 2 + real_sin * tx - real_cos * ty;\n\tvar left_fix = (w - w * cos + h * sin) / 2 - real_cos * tx - real_sin * ty;\n\t\n\tif (rad != 0)\n\t{\n\t\tvar f = 'progid:DXImageTransform.Microsoft.Matrix(M11=' + real_cos + ', M12='+\n\t\t\treal_sin + ', M21=' + (-real_sin) + ', M22=' + real_cos + ', sizingMethod=\\'auto expand\\')';\n\t\t\n\t\tif (style.filter != null && style.filter.length > 0)\n\t\t{\n\t\t\tstyle.filter += ' ' + f;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.filter = f;\n\t\t}\n\t}\n\t\n\t// Workaround for rendering offsets\n\tvar dy = 0;\n\t\n\tif (this.overflow != 'fill' && mxClient.IS_QUIRKS)\n\t{\n\t\tif (this.valign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tdy -= 1;\n\t\t}\n\t\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t\t{\n\t\t\tdy += 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdy += 1;\n\t\t}\n\t}\n\n\tstyle.zoom = s;\n\tstyle.left = Math.round(this.bounds.x + left_fix - w / 2) + 'px';\n\tstyle.top = Math.round(this.bounds.y + top_fix - h / 2 + dy) + 'px';\n};\n\n/**\n * Function: updateValue\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateValue = function()\n{\n\tif (mxUtils.isNode(this.value))\n\t{\n\t\tthis.node.innerHTML = '';\n\t\tthis.node.appendChild(this.value);\n\t}\n\telse\n\t{\n\t\tvar val = this.value;\n\t\t\n\t\tif (this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t{\n\t\t\tval = mxUtils.htmlEntities(val, false);\n\t\t}\n\t\t\n\t\t// Handles trailing newlines to make sure they are visible in rendering output\n\t\tval = mxUtils.replaceTrailingNewlines(val, '<div><br></div>');\n\t\tval = (this.replaceLinefeeds) ? val.replace(/\\n/g, '<br/>') : val;\n\t\tvar bg = (this.background != null && this.background != mxConstants.NONE) ? this.background : null;\n\t\tvar bd = (this.border != null && this.border != mxConstants.NONE) ? this.border : null;\n\n\t\tif (this.overflow == 'fill' || this.overflow == 'width')\n\t\t{\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tthis.node.style.backgroundColor = bg;\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tthis.node.style.border = '1px solid ' + bd;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar css = '';\n\t\t\t\n\t\t\tif (bg != null)\n\t\t\t{\n\t\t\t\tcss += 'background-color:' + bg + ';';\n\t\t\t}\n\t\t\t\n\t\t\tif (bd != null)\n\t\t\t{\n\t\t\t\tcss += 'border:1px solid ' + bd + ';';\n\t\t\t}\n\t\t\t\n\t\t\t// Wrapper DIV for background, zoom needed for inline in quirks\n\t\t\t// and to measure wrapped font sizes in all browsers\n\t\t\t// FIXME: Background size in quirks mode for wrapped text\n\t\t\tvar lh = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' :\n\t\t\t\tmxConstants.LINE_HEIGHT;\n\t\t\tval = '<div style=\"zoom:1;' + css + 'display:inline-block;_display:inline;text-decoration:inherit;' +\n\t\t\t\t'padding-bottom:1px;padding-right:1px;line-height:' + lh + '\">' + val + '</div>';\n\t\t}\n\n\t\tthis.node.innerHTML = val;\n\t\t\n\t\t// Sets text direction\n\t\tvar divs = this.node.getElementsByTagName('div');\n\t\t\n\t\tif (divs.length > 0)\n\t\t{\n\t\t\tvar dir = this.textDirection;\n\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO && this.dialect != mxConstants.DIALECT_STRICTHTML)\n\t\t\t{\n\t\t\t\tdir = this.getAutoDirection();\n\t\t\t}\n\t\t\t\n\t\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].setAttribute('dir', dir);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdivs[divs.length - 1].removeAttribute('dir');\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateFont\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateFont = function(node)\n{\n\tvar style = node.style;\n\t\n\tstyle.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? (this.size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\tstyle.fontSize = this.size + 'px';\n\tstyle.fontFamily = this.family;\n\tstyle.verticalAlign = 'top';\n\tstyle.color = this.color;\n\t\n\tif ((this.fontStyle & mxConstants.FONT_BOLD) == mxConstants.FONT_BOLD)\n\t{\n\t\tstyle.fontWeight = 'bold';\n\t}\n\telse\n\t{\n\t\tstyle.fontWeight = '';\n\t}\n\n\tif ((this.fontStyle & mxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC)\n\t{\n\t\tstyle.fontStyle = 'italic';\n\t}\n\telse\n\t{\n\t\tstyle.fontStyle = '';\n\t}\n\t\n\tif ((this.fontStyle & mxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE)\n\t{\n\t\tstyle.textDecoration = 'underline';\n\t}\n\telse\n\t{\n\t\tstyle.textDecoration = '';\n\t}\n\t\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tstyle.textAlign = 'center';\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstyle.textAlign = 'right';\n\t}\n\telse\n\t{\n\t\tstyle.textAlign = 'left';\n\t}\n};\n\n/**\n * Function: updateSize\n *\n * Updates the HTML node(s) to reflect the latest bounds and scale.\n */\nmxText.prototype.updateSize = function(node, enableWrap)\n{\n\tvar w = Math.max(0, Math.round(this.bounds.width / this.scale));\n\tvar h = Math.max(0, Math.round(this.bounds.height / this.scale));\n\tvar style = node.style;\n\t\n\t// NOTE: Do not use maxWidth here because wrapping will\n\t// go wrong if the cell is outside of the viewable area\n\tif (this.clipped)\n\t{\n\t\tstyle.overflow = 'hidden';\n\t\t\n\t\tif (!mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tstyle.maxHeight = h + 'px';\n\t\t\tstyle.maxWidth = w + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle.width = w + 'px';\n\t\t}\n\t}\n\telse if (this.overflow == 'fill')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.height = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\telse if (this.overflow == 'width')\n\t{\n\t\tstyle.width = (w + 1) + 'px';\n\t\tstyle.maxHeight = (h + 1) + 'px';\n\t\tstyle.overflow = 'hidden';\n\t}\n\t\n\tif (this.wrap && w > 0)\n\t{\n\t\tstyle.wordWrap = mxConstants.WORD_WRAP;\n\t\tstyle.whiteSpace = 'normal';\n\t\tstyle.width = w + 'px';\n\n\t\tif (enableWrap && this.overflow != 'fill' && this.overflow != 'width')\n\t\t{\n\t\t\tvar sizeDiv = node;\n\t\t\t\n\t\t\tif (sizeDiv.firstChild != null && sizeDiv.firstChild.nodeName == 'DIV')\n\t\t\t{\n\t\t\t\tsizeDiv = sizeDiv.firstChild;\n\t\t\t\t\n\t\t\t\tif (node.style.wordWrap == 'break-word')\n\t\t\t\t{\n\t\t\t\t\tsizeDiv.style.width = '100%';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar tmp = sizeDiv.offsetWidth;\n\t\t\t\n\t\t\t// Workaround for text measuring in hidden containers\n\t\t\tif (tmp == 0)\n\t\t\t{\n\t\t\t\tvar prev = node.parentNode;\n\t\t\t\tnode.style.visibility = 'hidden';\n\t\t\t\tdocument.body.appendChild(node);\n\t\t\t\ttmp = sizeDiv.offsetWidth;\n\t\t\t\tnode.style.visibility = '';\n\t\t\t\tprev.appendChild(node);\n\t\t\t}\n\n\t\t\ttmp += 3;\n\t\t\t\n\t\t\tif (this.clipped)\n\t\t\t{\n\t\t\t\ttmp = Math.min(tmp, w);\n\t\t\t}\n\t\t\t\n\t\t\tstyle.width = tmp + 'px';\n\t\t}\n\t}\n\telse\n\t{\n\t\tstyle.whiteSpace = 'nowrap';\n\t}\n};\n\n/**\n * Function: getMargin\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.updateMargin = function()\n{\n\tthis.margin = mxUtils.getAlignmentAsPoint(this.align, this.valign);\n};\n\n/**\n * Function: getSpacing\n *\n * Returns the spacing as an <mxPoint>.\n */\nmxText.prototype.getSpacing = function()\n{\n\tvar dx = 0;\n\tvar dy = 0;\n\n\tif (this.align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tdx = (this.spacingLeft - this.spacingRight) / 2;\n\t}\n\telse if (this.align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tdx = -this.spacingRight - this.baseSpacingRight;\n\t}\n\telse\n\t{\n\t\tdx = this.spacingLeft + this.baseSpacingLeft;\n\t}\n\n\tif (this.valign == mxConstants.ALIGN_MIDDLE)\n\t{\n\t\tdy = (this.spacingTop - this.spacingBottom) / 2;\n\t}\n\telse if (this.valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tdy = -this.spacingBottom - this.baseSpacingBottom;;\n\t}\n\telse\n\t{\n\t\tdy = this.spacingTop + this.baseSpacingTop;\n\t}\n\t\n\treturn new mxPoint(dx, dy);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTriangle\n * \n * Implementation of the triangle shape.\n * \n * Constructor: mxTriangle\n *\n * Constructs a new triangle shape.\n */\nfunction mxTriangle()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxTriangle, mxActor);\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxTriangle.prototype.isRoundable = function()\n{\n\treturn true;\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxTriangle.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0, 0), new mxPoint(w, 0.5 * h), new mxPoint(0, h)], this.isRounded, arcSize, true);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHexagon\n * \n * Implementation of the hexagon shape.\n * \n * Constructor: mxHexagon\n *\n * Constructs a new hexagon shape.\n */\nfunction mxHexagon()\n{\n\tmxActor.call(this);\n};\n\n/**\n * Extends mxActor.\n */\nmxUtils.extend(mxHexagon, mxActor);\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxHexagon.prototype.redrawPath = function(c, x, y, w, h)\n{\n\tvar arcSize = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.LINE_ARCSIZE) / 2;\n\tthis.addPoints(c, [new mxPoint(0.25 * w, 0), new mxPoint(0.75 * w, 0), new mxPoint(w, 0.5 * h), new mxPoint(0.75 * w, h),\n\t                   new mxPoint(0.25 * w, h), new mxPoint(0, 0.5 * h)], this.isRounded, arcSize, true);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLine\n *\n * Extends <mxShape> to implement a horizontal line shape.\n * This shape is registered under <mxConstants.SHAPE_LINE> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLine\n *\n * Constructs a new line shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * stroke - String that defines the stroke color. Default is 'black'. This is\n * stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLine(bounds, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLine, mxShape);\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxLine.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar mid = y + h / 2;\n\n\tc.begin();\n\tc.moveTo(x, mid);\n\tc.lineTo(x + w, mid);\n\tc.stroke();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxImageShape\n *\n * Extends <mxShape> to implement an image shape. This shape is registered\n * under <mxConstants.SHAPE_IMAGE> in <mxCellRenderer>.\n * \n * Constructor: mxImageShape\n * \n * Constructs a new image shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * image - String that specifies the URL of the image. This is stored in\n * <image>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 0. This is stored in <strokewidth>.\n */\nfunction mxImageShape(bounds, image, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.image = image;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n\tthis.shadow = false;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxImageShape, mxRectangleShape);\n\n/**\n * Variable: preserveImageAspect\n *\n * Switch to preserve image aspect. Default is true.\n */\nmxImageShape.prototype.preserveImageAspect = true;\n\n/**\n * Function: getSvgScreenOffset\n * \n * Disables offset in IE9 for crisper image output.\n */\nmxImageShape.prototype.getSvgScreenOffset = function()\n{\n\treturn 0;\n};\n\n/**\n * Function: apply\n * \n * Overrides <mxShape.apply> to replace the fill and stroke colors with the\n * respective values from <mxConstants.STYLE_IMAGE_BACKGROUND> and\n * <mxConstants.STYLE_IMAGE_BORDER>.\n * \n * Applies the style of the given <mxCellState> to the shape. This\n * implementation assigns the following styles to local fields:\n * \n * - <mxConstants.STYLE_IMAGE_BACKGROUND> => fill\n * - <mxConstants.STYLE_IMAGE_BORDER> => stroke\n *\n * Parameters:\n *\n * state - <mxCellState> of the corresponding cell.\n */\nmxImageShape.prototype.apply = function(state)\n{\n\tmxShape.prototype.apply.apply(this, arguments);\n\t\n\tthis.fill = null;\n\tthis.stroke = null;\n\tthis.gradient = null;\n\t\n\tif (this.style != null)\n\t{\n\t\tthis.preserveImageAspect = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_ASPECT, 1) == 1;\n\t\t\n\t\t// Legacy support for imageFlipH/V\n\t\tthis.flipH = this.flipH || mxUtils.getValue(this.style, 'imageFlipH', 0) == 1;\n\t\tthis.flipV = this.flipV || mxUtils.getValue(this.style, 'imageFlipV', 0) == 1;\n\t}\n};\n\n/**\n * Function: isHtmlAllowed\n * \n * Returns true if HTML is allowed for this shape. This implementation always\n * returns false.\n */\nmxImageShape.prototype.isHtmlAllowed = function()\n{\n\treturn !this.preserveImageAspect;\n};\n\n/**\n * Function: createHtml\n *\n * Creates and returns the HTML DOM node(s) to represent\n * this shape. This implementation falls back to <createVml>\n * so that the HTML creation is optional.\n */\nmxImageShape.prototype.createHtml = function()\n{\n\tvar node = document.createElement('div');\n\tnode.style.position = 'absolute';\n\n\treturn node;\n};\n\n/**\n * Function: isRoundable\n * \n * Disables inherited roundable support.\n */\nmxImageShape.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn false;\n};\n\n/**\n * Function: paintVertexShape\n * \n * Generic background painting implementation.\n */\nmxImageShape.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, null);\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (fill != null)\n\t\t{\n\t\t\t// Stroke rendering required for shadow\n\t\t\tc.setFillColor(fill);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.fillAndStroke();\n\t\t}\n\n\t\t// FlipH/V are implicit via mxShape.updateTransform\n\t\tc.image(x, y, w, h, this.image, this.preserveImageAspect, false, false);\n\t\t\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, null);\n\t\t\n\t\tif (stroke != null)\n\t\t{\n\t\t\tc.setShadow(false);\n\t\t\tc.setStrokeColor(stroke);\n\t\t\tc.rect(x, y, w, h);\n\t\t\tc.stroke();\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxRectangleShape.prototype.paintBackground.apply(this, arguments);\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Overrides <mxShape.redraw> to preserve the aspect ratio of images.\n */\nmxImageShape.prototype.redrawHtmlShape = function()\n{\n\tthis.node.style.left = Math.round(this.bounds.x) + 'px';\n\tthis.node.style.top = Math.round(this.bounds.y) + 'px';\n\tthis.node.style.width = Math.max(0, Math.round(this.bounds.width)) + 'px';\n\tthis.node.style.height = Math.max(0, Math.round(this.bounds.height)) + 'px';\n\tthis.node.innerHTML = '';\n\n\tif (this.image != null)\n\t{\n\t\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BACKGROUND, '');\n\t\tvar stroke = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_BORDER, '');\n\t\tthis.node.style.backgroundColor = fill;\n\t\tthis.node.style.borderColor = stroke;\n\t\t\n\t\t// VML image supports PNG in IE6\n\t\tvar useVml = mxClient.IS_IE6 || ((document.documentMode == null || document.documentMode <= 8) && this.rotation != 0);\n\t\tvar img = document.createElement((useVml) ? mxClient.VML_PREFIX + ':image' : 'img');\n\t\timg.setAttribute('border', '0');\n\t\timg.style.position = 'absolute';\n\t\timg.src = this.image;\n\n\t\tvar filter = (this.opacity < 100) ? 'alpha(opacity=' + this.opacity + ')' : '';\n\t\tthis.node.style.filter = filter;\n\t\t\n\t\tif (this.flipH && this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2)';\n\t\t}\n\t\telse if (this.flipH)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(mirror=1)';\n\t\t}\n\t\telse if (this.flipV)\n\t\t{\n\t\t\tfilter += 'progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)';\n\t\t}\n\n\t\tif (img.style.filter != filter)\n\t\t{\n\t\t\timg.style.filter = filter;\n\t\t}\n\n\t\tif (img.nodeName == 'image')\n\t\t{\n\t\t\timg.style.rotation = this.rotation;\n\t\t}\n\t\telse if (this.rotation != 0)\n\t\t{\n\t\t\t// LATER: Add flipV/H support\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', 'rotate(' + this.rotation + 'deg)');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(img.style, 'transform', '');\n\t\t}\n\n\t\t// Known problem: IE clips top line of image for certain angles\n\t\timg.style.width = this.node.style.width;\n\t\timg.style.height = this.node.style.height;\n\t\t\n\t\tthis.node.style.backgroundImage = '';\n\t\tthis.node.appendChild(img);\n\t}\n\telse\n\t{\n\t\tthis.setTransparentBackgroundImage(this.node);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLabel\n *\n * Extends <mxShape> to implement an image shape with a label.\n * This shape is registered under <mxConstants.SHAPE_LABEL> in\n * <mxCellRenderer>.\n * \n * Constructor: mxLabel\n *\n * Constructs a new label shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxLabel(bounds, fill, stroke, strokewidth)\n{\n\tmxRectangleShape.call(this, bounds, fill, stroke, strokewidth);\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxLabel, mxRectangleShape);\n\n/**\n * Variable: imageSize\n *\n * Default width and height for the image. Default is\n * <mxConstants.DEFAULT_IMAGESIZE>.\n */\nmxLabel.prototype.imageSize = mxConstants.DEFAULT_IMAGESIZE;\n\n/**\n * Variable: spacing\n *\n * Default value for image spacing. Default is 2.\n */\nmxLabel.prototype.spacing = 2;\n\n/**\n * Variable: indicatorSize\n *\n * Default width and height for the indicicator. Default is 10.\n */\nmxLabel.prototype.indicatorSize = 10;\n\n/**\n * Variable: indicatorSpacing\n *\n * Default spacing between image and indicator. Default is 2.\n */\nmxLabel.prototype.indicatorSpacing = 2;\n\n/**\n * Function: init\n *\n * Initializes the shape and the <indicator>.\n */\nmxLabel.prototype.init = function(container)\n{\n\tmxShape.prototype.init.apply(this, arguments);\n\n\tif (this.indicatorShape != null)\n\t{\n\t\tthis.indicator = new this.indicatorShape();\n\t\tthis.indicator.dialect = this.dialect;\n\t\tthis.indicator.init(this.node);\n\t}\n};\n\n/**\n * Function: redraw\n *\n * Reconfigures this shape. This will update the colors of the indicator\n * and reconfigure it if required.\n */\nmxLabel.prototype.redraw = function()\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.fill = this.indicatorColor;\n\t\tthis.indicator.stroke = this.indicatorStrokeColor;\n\t\tthis.indicator.gradient = this.indicatorGradientColor;\n\t\tthis.indicator.direction = this.indicatorDirection;\n\t}\n\t\n\tmxShape.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: isHtmlAllowed\n *\n * Returns true for non-rounded, non-rotated shapes with no glass gradient and\n * no indicator shape.\n */\nmxLabel.prototype.isHtmlAllowed = function()\n{\n\treturn mxRectangleShape.prototype.isHtmlAllowed.apply(this, arguments) &&\n\t\tthis.indicatorColor == null && this.indicatorShape == null;\n};\n\n/**\n * Function: paintForeground\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintForeground = function(c, x, y, w, h)\n{\n\tthis.paintImage(c, x, y, w, h);\n\tthis.paintIndicator(c, x, y, w, h);\n\t\n\tmxRectangleShape.prototype.paintForeground.apply(this, arguments);\n};\n\n/**\n * Function: paintImage\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintImage = function(c, x, y, w, h)\n{\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.image, false, false, false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getImageBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_WIDTH, mxConstants.DEFAULT_IMAGESIZE);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_IMAGE_HEIGHT, mxConstants.DEFAULT_IMAGESIZE);\n\tvar spacing = mxUtils.getNumber(this.style, mxConstants.STYLE_SPACING, this.spacing) + 5;\n\n\tif (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse if (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\n\tif (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n\n/**\n * Function: paintIndicator\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.paintIndicator = function(c, x, y, w, h)\n{\n\tif (this.indicator != null)\n\t{\n\t\tthis.indicator.bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tthis.indicator.paint(c);\n\t}\n\telse if (this.indicatorImage != null)\n\t{\n\t\tvar bounds = this.getIndicatorBounds(x, y, w, h);\n\t\tc.image(bounds.x, bounds.y, bounds.width, bounds.height, this.indicatorImage, false, false, false);\n\t}\n};\n\n/**\n * Function: getIndicatorBounds\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.getIndicatorBounds = function(x, y, w, h)\n{\n\tvar align = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_ALIGN, mxConstants.ALIGN_LEFT);\n\tvar valign = mxUtils.getValue(this.style, mxConstants.STYLE_IMAGE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE);\n\tvar width = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_WIDTH, this.indicatorSize);\n\tvar height = mxUtils.getNumber(this.style, mxConstants.STYLE_INDICATOR_HEIGHT, this.indicatorSize);\n\tvar spacing = this.spacing + 5;\t\t\n\t\n\tif (align == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tx += w - width - spacing;\n\t}\n\telse if (align == mxConstants.ALIGN_CENTER)\n\t{\n\t\tx += (w - width) / 2;\n\t}\n\telse // default is left\n\t{\n\t\tx += spacing;\n\t}\n\t\n\tif (valign == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\ty += h - height - spacing;\n\t}\n\telse if (valign == mxConstants.ALIGN_TOP)\n\t{\n\t\ty += spacing;\n\t}\n\telse // default is middle\n\t{\n\t\ty += (h - height) / 2;\n\t}\n\t\n\treturn new mxRectangle(x, y, width, height);\n};\n/**\n * Function: redrawHtmlShape\n * \n * Generic background painting implementation.\n */\nmxLabel.prototype.redrawHtmlShape = function()\n{\n\tmxRectangleShape.prototype.redrawHtmlShape.apply(this, arguments);\n\t\n\t// Removes all children\n\twhile(this.node.hasChildNodes())\n\t{\n\t\tthis.node.removeChild(this.node.lastChild);\n\t}\n\t\n\tif (this.image != null)\n\t{\n\t\tvar node = document.createElement('img');\n\t\tnode.style.position = 'relative';\n\t\tnode.setAttribute('border', '0');\n\t\t\n\t\tvar bounds = this.getImageBounds(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height);\n\t\tbounds.x -= this.bounds.x;\n\t\tbounds.y -= this.bounds.y;\n\n\t\tnode.style.left = Math.round(bounds.x) + 'px';\n\t\tnode.style.top = Math.round(bounds.y) + 'px';\n\t\tnode.style.width = Math.round(bounds.width) + 'px';\n\t\tnode.style.height = Math.round(bounds.height) + 'px';\n\t\t\n\t\tnode.src = this.image;\n\t\t\n\t\tthis.node.appendChild(node);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCylinder\n *\n * Extends <mxShape> to implement an cylinder shape. If a\n * custom shape with one filled area and an overlay path is\n * needed, then this shape's <redrawPath> should be overridden.\n * This shape is registered under <mxConstants.SHAPE_CYLINDER>\n * in <mxCellRenderer>.\n * \n * Constructor: mxCylinder\n *\n * Constructs a new cylinder shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxCylinder(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxCylinder, mxShape);\n\n/**\n * Variable: maxHeight\n *\n * Defines the maximum height of the top and bottom part\n * of the cylinder shape.\n */\nmxCylinder.prototype.maxHeight = 40;\n\n/**\n * Variable: svgStrokeTolerance\n *\n * Sets stroke tolerance to 0 for SVG.\n */\nmxCylinder.prototype.svgStrokeTolerance = 0;\n\n/**\n * Function: paintVertexShape\n * \n * Redirects to redrawPath for subclasses to work.\n */\nmxCylinder.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tc.translate(x, y);\n\tc.begin();\n\tthis.redrawPath(c, x, y, w, h, false);\n\tc.fillAndStroke();\n\t\n\tif (!this.outline || this.style == null || mxUtils.getValue(\n\t\tthis.style, mxConstants.STYLE_BACKGROUND_OUTLINE, 0) == 0)\n\t{\n\t\tc.setShadow(false);\n\t\tc.begin();\n\t\tthis.redrawPath(c, x, y, w, h, true);\n\t\tc.stroke();\n\t}\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.getCylinderSize = function(x, y, w, h)\n{\n\treturn Math.min(this.maxHeight, Math.round(h / 5));\n};\n\n/**\n * Function: redrawPath\n *\n * Draws the path for this shape.\n */\nmxCylinder.prototype.redrawPath = function(c, x, y, w, h, isForeground)\n{\n\tvar dy = this.getCylinderSize(x, y, w, h);\n\t\n\tif ((isForeground && this.fill != null) || (!isForeground && this.fill == null))\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, 2 * dy, w, 2 * dy, w, dy);\n\t\t\n\t\t// Needs separate shapes for correct hit-detection\n\t\tif (!isForeground)\n\t\t{\n\t\t\tc.stroke();\n\t\t\tc.begin();\n\t\t}\n\t}\n\t\n\tif (!isForeground)\n\t{\n\t\tc.moveTo(0, dy);\n\t\tc.curveTo(0, -dy / 3, w, -dy / 3, w, dy);\n\t\tc.lineTo(w, h - dy);\n\t\tc.curveTo(w, h + dy / 3, 0, h + dy / 3, 0, h - dy);\n\t\tc.close();\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnector\n * \n * Extends <mxShape> to implement a connector shape. The connector\n * shape allows for arrow heads on either side.\n * \n * This shape is registered under <mxConstants.SHAPE_CONNECTOR> in\n * <mxCellRenderer>.\n * \n * Constructor: mxConnector\n * \n * Constructs a new connector shape.\n * \n * Parameters:\n * \n * points - Array of <mxPoints> that define the points. This is stored in\n * <mxShape.points>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * Default is 'black'.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxConnector(points, stroke, strokewidth)\n{\n\tmxPolyline.call(this, points, stroke, strokewidth);\n};\n\n/**\n * Extends mxPolyline.\n */\nmxUtils.extend(mxConnector, mxPolyline);\n\n/**\n * Function: updateBoundingBox\n *\n * Updates the <boundingBox> for this shape using <createBoundingBox> and\n * <augmentBoundingBox> and stores the result in <boundingBox>.\n */\nmxConnector.prototype.updateBoundingBox = function()\n{\n\tthis.useSvgBoundingBox = this.style != null && this.style[mxConstants.STYLE_CURVED] == 1;\n\tmxShape.prototype.updateBoundingBox.apply(this, arguments);\n};\n\n/**\n * Function: paintEdgeShape\n * \n * Paints the line shape.\n */\nmxConnector.prototype.paintEdgeShape = function(c, pts)\n{\n\t// The indirection via functions for markers is needed in\n\t// order to apply the offsets before painting the line and\n\t// paint the markers after painting the line.\n\tvar sourceMarker = this.createMarker(c, pts, true);\n\tvar targetMarker = this.createMarker(c, pts, false);\n\n\tmxPolyline.prototype.paintEdgeShape.apply(this, arguments);\n\t\n\t// Disables shadows, dashed styles and fixes fill color for markers\n\tc.setFillColor(this.stroke);\n\tc.setShadow(false);\n\tc.setDashed(false);\n\t\n\tif (sourceMarker != null)\n\t{\n\t\tsourceMarker();\n\t}\n\t\n\tif (targetMarker != null)\n\t{\n\t\ttargetMarker();\n\t}\n};\n\n/**\n * Function: createMarker\n * \n * Prepares the marker by adding offsets in pts and returning a function to\n * paint the marker.\n */\nmxConnector.prototype.createMarker = function(c, pts, source)\n{\n\tvar result = null;\n\tvar n = pts.length;\n\tvar type = mxUtils.getValue(this.style, (source) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW);\n\tvar p0 = (source) ? pts[1] : pts[n - 2];\n\tvar pe = (source) ? pts[0] : pts[n - 1];\n\t\n\tif (type != null && p0 != null && pe != null)\n\t{\n\t\tvar count = 1;\n\t\t\n\t\t// Uses next non-overlapping point\n\t\twhile (count < n - 1 && Math.round(p0.x - pe.x) == 0 && Math.round(p0.y - pe.y) == 0)\n\t\t{\n\t\t\tp0 = (source) ? pts[1 + count] : pts[n - 2 - count];\n\t\t\tcount++;\n\t\t}\n\t\n\t\t// Computes the norm and the inverse norm\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\n\t\tvar dist = Math.max(1, Math.sqrt(dx * dx + dy * dy));\n\t\t\n\t\tvar unitX = dx / dist;\n\t\tvar unitY = dy / dist;\n\t\n\t\tvar size = mxUtils.getNumber(this.style, (source) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\n\t\t// Allow for stroke width in the end point used and the \n\t\t// orthogonal vectors describing the direction of the marker\n\t\tvar filled = this.style[(source) ? mxConstants.STYLE_STARTFILL : mxConstants.STYLE_ENDFILL] != 0;\n\t\t\n\t\tresult = mxMarker.createMarker(c, this, type, pe, unitX, unitY, size, source, this.strokewidth, filled);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: augmentBoundingBox\n *\n * Augments the bounding box with the strokewidth and shadow offsets.\n */\nmxConnector.prototype.augmentBoundingBox = function(bbox)\n{\n\tmxShape.prototype.augmentBoundingBox.apply(this, arguments);\n\t\n\t// Adds marker sizes\n\tvar size = 0;\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_STARTARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = mxUtils.getNumber(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_MARKERSIZE) + 1;\n\t}\n\t\n\tif (mxUtils.getValue(this.style, mxConstants.STYLE_ENDARROW, mxConstants.NONE) != mxConstants.NONE)\n\t{\n\t\tsize = Math.max(size, mxUtils.getNumber(this.style, mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE)) + 1;\n\t}\n\t\n\tbbox.grow(size * this.scale);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlane\n *\n * Extends <mxShape> to implement a swimlane shape. This shape is registered\n * under <mxConstants.SHAPE_SWIMLANE> in <mxCellRenderer>. Use the\n * <mxConstants.STYLE_STYLE_STARTSIZE> to define the size of the title\n * region, <mxConstants.STYLE_SWIMLANE_FILLCOLOR> for the content area fill,\n * <mxConstants.STYLE_SEPARATORCOLOR> to draw an additional vertical separator\n * and <mxConstants.STYLE_SWIMLANE_LINE> to hide the line between the title\n * region and the content area. The <mxConstants.STYLE_HORIZONTAL> affects\n * the orientation of this shape, not only its label.\n * \n * Constructor: mxSwimlane\n *\n * Constructs a new swimlane shape.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that defines the bounds. This is stored in\n * <mxShape.bounds>.\n * fill - String that defines the fill color. This is stored in <fill>.\n * stroke - String that defines the stroke color. This is stored in <stroke>.\n * strokewidth - Optional integer that defines the stroke width. Default is\n * 1. This is stored in <strokewidth>.\n */\nfunction mxSwimlane(bounds, fill, stroke, strokewidth)\n{\n\tmxShape.call(this);\n\tthis.bounds = bounds;\n\tthis.fill = fill;\n\tthis.stroke = stroke;\n\tthis.strokewidth = (strokewidth != null) ? strokewidth : 1;\n};\n\n/**\n * Extends mxShape.\n */\nmxUtils.extend(mxSwimlane, mxShape);\n\n/**\n * Variable: imageSize\n *\n * Default imagewidth and imageheight if an image but no imagewidth\n * and imageheight are defined in the style. Value is 16.\n */\nmxSwimlane.prototype.imageSize = 16;\n\n/**\n * Function: isRoundable\n * \n * Adds roundable support.\n */\nmxSwimlane.prototype.isRoundable = function(c, x, y, w, h)\n{\n\treturn true;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getTitleSize = function()\n{\n\treturn Math.max(0, mxUtils.getValue(this.style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getLabelBounds = function(rect)\n{\n\tvar start = this.getTitleSize();\n\tvar bounds = new mxRectangle(rect.x, rect.y, rect.width, rect.height);\n\tvar horizontal = this.isHorizontal();\n\t\n\tvar flipH = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\tvar flipV = mxUtils.getValue(this.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t// East is default\n\tvar shapeVertical = (this.direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_SOUTH);\n\tvar realHorizontal = horizontal == !shapeVertical;\n\t\n\tvar realFlipH = !realHorizontal && flipH != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\tvar realFlipV = realHorizontal && flipV != (this.direction == mxConstants.DIRECTION_SOUTH ||\n\t\t\tthis.direction == mxConstants.DIRECTION_WEST);\n\n\t// Shape is horizontal\n\tif (!shapeVertical)\n\t{\n\t\tvar tmp = Math.min(bounds.height, start * this.scale);\n\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.y += bounds.height - tmp;\n\t\t}\n\n\t\tbounds.height = tmp;\n\t}\n\telse\n\t{\n\t\tvar tmp = Math.min(bounds.width, start * this.scale);\n\t\t\n\t\tif (realFlipH || realFlipV)\n\t\t{\n\t\t\tbounds.x += bounds.width - tmp;\t\n\t\t}\n\n\t\tbounds.width = tmp;\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getGradientBounds\n * \n * Returns the bounding box for the gradient box for this shape.\n */\nmxSwimlane.prototype.getGradientBounds = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t\treturn new mxRectangle(x, y, w, start);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t\treturn new mxRectangle(x, y, start, h);\n\t}\n};\n\n/**\n * Function: getArcSize\n * \n * Returns the arcsize for the swimlane.\n */\nmxSwimlane.prototype.getArcSize = function(w, h, start)\n{\n\tvar f = mxUtils.getValue(this.style, mxConstants.STYLE_ARCSIZE, mxConstants.RECTANGLE_ROUNDING_FACTOR * 100) / 100;\n\n\treturn start * f * 3; \n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.isHorizontal = function()\n{\n\treturn mxUtils.getValue(this.style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n};\n\n/**\n * Function: paintVertexShape\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintVertexShape = function(c, x, y, w, h)\n{\n\tvar start = this.getTitleSize();\n\tvar fill = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_FILLCOLOR, mxConstants.NONE);\n\tvar swimlaneLine = mxUtils.getValue(this.style, mxConstants.STYLE_SWIMLANE_LINE, 1) == 1;\n\tvar r = 0;\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tstart = Math.min(start, h);\n\t}\n\telse\n\t{\n\t\tstart = Math.min(start, w);\n\t}\n\t\n\tc.translate(x, y);\n\t\n\tif (!this.isRounded)\n\t{\n\t\tthis.paintSwimlane(c, x, y, w, h, start, fill, swimlaneLine);\n\t}\n\telse\n\t{\n\t\tr = this.getArcSize(w, h, start);\n\t\tr = Math.min(((this.isHorizontal()) ? h : w) - start, Math.min(start, r));\n\t\tthis.paintRoundedSwimlane(c, x, y, w, h, start, r, fill, swimlaneLine);\n\t}\n\t\n\tvar sep = mxUtils.getValue(this.style, mxConstants.STYLE_SEPARATORCOLOR, mxConstants.NONE);\n\tthis.paintSeparator(c, x, y, w, h, start, sep);\n\n\tif (this.image != null)\n\t{\n\t\tvar bounds = this.getImageBounds(x, y, w, h);\n\t\tc.image(bounds.x - x, bounds.y - y, bounds.width, bounds.height,\n\t\t\t\tthis.image, false, false, false);\n\t}\n\t\n\tif (this.glass)\n\t{\n\t\tc.setShadow(false);\n\t\tthis.paintGlassEffect(c, 0, 0, w, start, r);\n\t}\n};\n\n/**\n * Function: paintSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintSwimlane = function(c, x, y, w, h, start, fill, swimlaneLine)\n{\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(w, 0);\n\t\tc.lineTo(w, start);\n\t\tc.fillAndStroke();\n\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(0, 0);\n\t\tc.lineTo(0, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t\tc.lineTo(w, h);\n\t\t\tc.lineTo(start, h);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintRoundedSwimlane\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.paintRoundedSwimlane = function(c, x, y, w, h, start, r, fill, swimlaneLine)\n{\n\tc.begin();\n\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(w, start);\n\t\tc.lineTo(w, r);\n\t\tc.quadTo(w, 0, w - Math.min(w / 2, r), 0);\n\t\tc.lineTo(Math.min(w / 2, r), 0);\n\t\tc.quadTo(0, 0, 0, r);\n\t\tc.lineTo(0, start);\n\t\tc.fillAndStroke();\n\t\t\n\t\tif (start < h)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(0, start);\n\t\t\tc.lineTo(0, h - r);\n\t\t\tc.quadTo(0, h, Math.min(w / 2, r), h);\n\t\t\tc.lineTo(w - Math.min(w / 2, r), h);\n\t\t\tc.quadTo(w, h, w, h - r);\n\t\t\tc.lineTo(w, start);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(r, 0);\n\t\tc.quadTo(0, 0, 0, Math.min(h / 2, r));\n\t\tc.lineTo(0, h - Math.min(h / 2, r));\n\t\tc.quadTo(0, h, r, h);\n\t\tc.lineTo(start, h);\n\t\tc.fillAndStroke();\n\n\t\tif (start < w)\n\t\t{\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.pointerEvents = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.setFillColor(fill);\n\t\t\t}\n\t\t\t\n\t\t\tc.begin();\n\t\t\tc.moveTo(start, h);\n\t\t\tc.lineTo(w - r, h);\n\t\t\tc.quadTo(w, h, w, h - Math.min(h / 2, r));\n\t\t\tc.lineTo(w, Math.min(h / 2, r));\n\t\t\tc.quadTo(w, 0, w - r, 0);\n\t\t\tc.lineTo(start, 0);\n\t\t\t\n\t\t\tif (fill == mxConstants.NONE)\n\t\t\t{\n\t\t\t\tc.stroke();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tc.fillAndStroke();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (swimlaneLine)\n\t{\n\t\tthis.paintDivider(c, x, y, w, h, start, fill == mxConstants.NONE);\n\t}\n};\n\n/**\n * Function: paintDivider\n *\n * Paints the divider between swimlane title and content area.\n */\nmxSwimlane.prototype.paintDivider = function(c, x, y, w, h, start, shadow)\n{\n\tif (!shadow)\n\t{\n\t\tc.setShadow(false);\n\t}\n\n\tc.begin();\n\t\n\tif (this.isHorizontal())\n\t{\n\t\tc.moveTo(0, start);\n\t\tc.lineTo(w, start);\n\t}\n\telse\n\t{\n\t\tc.moveTo(start, 0);\n\t\tc.lineTo(start, h);\n\t}\n\n\tc.stroke();\n};\n\n/**\n * Function: paintSeparator\n *\n * Paints the vertical or horizontal separator line between swimlanes.\n */\nmxSwimlane.prototype.paintSeparator = function(c, x, y, w, h, start, color)\n{\n\tif (color != mxConstants.NONE)\n\t{\n\t\tc.setStrokeColor(color);\n\t\tc.setDashed(true);\n\t\tc.begin();\n\t\t\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tc.moveTo(w, start);\n\t\t\tc.lineTo(w, h);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tc.moveTo(start, 0);\n\t\t\tc.lineTo(w, 0);\n\t\t}\n\t\t\n\t\tc.stroke();\n\t\tc.setDashed(false);\n\t}\n};\n\n/**\n * Function: getImageBounds\n *\n * Paints the swimlane vertex shape.\n */\nmxSwimlane.prototype.getImageBounds = function(x, y, w, h)\n{\n\tif (this.isHorizontal())\n\t{\n\t\treturn new mxRectangle(x + w - this.imageSize, y, this.imageSize, this.imageSize);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangle(x, y, this.imageSize, this.imageSize);\n\t}\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphLayout\n * \n * Base class for all layout algorithms in mxGraph. Main public functions are\n * <move> for handling a moved cell within a layouted parent, and <execute> for\n * running the layout on a given parent cell.\n *\n * Known Subclasses:\n *\n * <mxCircleLayout>, <mxCompactTreeLayout>, <mxCompositeLayout>,\n * <mxFastOrganicLayout>, <mxParallelEdgeLayout>, <mxPartitionLayout>,\n * <mxStackLayout>\n * \n * Constructor: mxGraphLayout\n *\n * Constructs a new layout using the given layouts.\n *\n * Arguments:\n * \n * graph - Enclosing \n */\nfunction mxGraphLayout(graph)\n{\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphLayout.prototype.graph = null;\n\n/**\n * Variable: useBoundingBox\n *\n * Boolean indicating if the bounding box of the label should be used if\n * its available. Default is true.\n */\nmxGraphLayout.prototype.useBoundingBox = true;\n\n/**\n * Variable: parent\n *\n * The parent cell of the layout, if any\n */\nmxGraphLayout.prototype.parent = null;\n\n/**\n * Function: moveCell\n * \n * Notified when a cell is being moved in a parent that has automatic\n * layout to update the cell state (eg. index) so that the outcome of the\n * layout will position the vertex as close to the point (x, y) as\n * possible.\n * \n * Empty implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> which has been moved.\n * x - X-coordinate of the new cell location.\n * y - Y-coordinate of the new cell location.\n */\nmxGraphLayout.prototype.moveCell = function(cell, x, y) { };\n\n/**\n * Function: execute\n * \n * Executes the layout algorithm for the children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be layed out.\n */\nmxGraphLayout.prototype.execute = function(parent) { };\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxGraphLayout.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: getConstraint\n * \n * Returns the constraint for the given key and cell. The optional edge and\n * source arguments are used to return inbound and outgoing routing-\n * constraints for the given edge and vertex. This implementation always\n * returns the value for the given key in the style of the given cell.\n * \n * Parameters:\n * \n * key - Key of the constraint to be returned.\n * cell - <mxCell> whose constraint should be returned.\n * edge - Optional <mxCell> that represents the connection whose constraint\n * should be returned. Default is null.\n * source - Optional boolean that specifies if the connection is incoming\n * or outgoing. Default is null.\n */\nmxGraphLayout.prototype.getConstraint = function(key, cell, edge, source)\n{\n\tvar state = this.graph.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.graph.getCellStyle(cell);\n\t\n\treturn (style != null) ? style[key] : null;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> of cell paths for the visited cells.\n */\nmxGraphLayout.traverse = function(vertex, directed, func, edge, visited)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.graph.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.graph.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.graph.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || isSource)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.graph.view.getVisibleTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n * traverseAncestors - boolean whether to \n */\nmxGraphLayout.prototype.isAncestor = function(parent, child, traverseAncestors)\n{\n\tif (!traverseAncestors)\n\t{\n\t\treturn (this.graph.model.getParent(child) == parent);\n\t}\t\n\t\n\tif (child == parent)\n\t{\n\t\treturn false;\n\t}\n\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.graph.model.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: isVertexMovable\n * \n * Returns a boolean indicating if the given <mxCell> is movable or\n * bendable by the algorithm. This implementation returns true if the given\n * cell is movable in the graph.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraphLayout.prototype.isVertexMovable = function(cell)\n{\n\treturn this.graph.isCellMovable(cell);\n};\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn !this.graph.getModel().isVertex(vertex) ||\n\t\t!this.graph.isCellVisible(vertex);\n};\n\n/**\n * Function: isEdgeIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored by\n * the algorithm. This implementation returns false for all vertices.\n * \n * Parameters:\n * \n * cell - <mxCell> whose ignored state should be returned.\n */\nmxGraphLayout.prototype.isEdgeIgnored = function(edge)\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn !model.isEdge(edge) ||\n\t\t!this.graph.isCellVisible(edge) ||\n\t\tmodel.getTerminal(edge, true) == null ||\n\t\tmodel.getTerminal(edge, false) == null;\n};\n\n/**\n * Function: setEdgeStyleEnabled\n * \n * Disables or enables the edge style of the given edge.\n */\nmxGraphLayout.prototype.setEdgeStyleEnabled = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_NOEDGESTYLE,\n\t\t\t(value) ? '0' : '1', [edge]);\n};\n\n/**\n * Function: setOrthogonalEdge\n * \n * Disables or enables orthogonal end segments of the given edge.\n */\nmxGraphLayout.prototype.setOrthogonalEdge = function(edge, value)\n{\n\tthis.graph.setCellStyles(mxConstants.STYLE_ORTHOGONAL,\n\t\t\t(value) ? '1' : '0', [edge]);\n};\n\n/**\n * Function: getParentOffset\n * \n * Determines the offset of the given parent to the parent\n * of the layout\n */\nmxGraphLayout.prototype.getParentOffset = function(parent)\n{\n\tvar result = new mxPoint();\n\n\tif (parent != null && parent != this.parent)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isAncestor(this.parent, parent))\n\t\t{\n\t\t\tvar parentGeo = model.getGeometry(parent);\n\n\t\t\twhile (parent != this.parent)\n\t\t\t{\n\t\t\t\tresult.x = result.x + parentGeo.x;\n\t\t\t\tresult.y = result.y + parentGeo.y;\n\n\t\t\t\tparent = model.getParent(parent);;\n\t\t\t\tparentGeo = model.getGeometry(parent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: setEdgePoints\n * \n * Replaces the array of mxPoints in the geometry of the given edge\n * with the given array of mxPoints.\n */\nmxGraphLayout.prototype.setEdgePoints = function(edge, points)\n{\n\tif (edge != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar geometry = model.getGeometry(edge);\n\n\t\tif (geometry == null)\n\t\t{\n\t\t\tgeometry = new mxGeometry();\n\t\t\tgeometry.setRelative(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t}\n\n\t\tif (this.parent != null && points != null)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tpoints[i].x = points[i].x - parentOffset.x;\n\t\t\t\tpoints[i].y = points[i].y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tgeometry.points = points;\n\t\tmodel.setGeometry(edge, geometry);\n\t}\n};\n\n/**\n * Function: setVertexLocation\n * \n * Sets the new position of the given cell taking into account the size of\n * the bounding box if <useBoundingBox> is true. The change is only carried\n * out if the new location is not equal to the existing location, otherwise\n * the geometry is not replaced with an updated instance. The new or old\n * bounds are returned (including overlapping labels).\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry is to be set.\n * x - Integer that defines the x-coordinate of the new location.\n * y - Integer that defines the y-coordinate of the new location.\n */\nmxGraphLayout.prototype.setVertexLocation = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(cell);\n\tvar result = null;\n\t\n\tif (geometry != null)\n\t{\n\t\tresult = new mxRectangle(x, y, geometry.width, geometry.height);\n\t\t\n\t\t// Checks for oversize labels and shifts the result\n\t\t// TODO: Use mxUtils.getStringSize for label bounds\n\t\tif (this.useBoundingBox)\n\t\t{\n\t\t\tvar state = this.graph.getView().getState(cell);\n\t\t\t\n\t\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar box = state.text.boundingBox;\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.x < state.x)\n\t\t\t\t{\n\t\t\t\t\tx += (state.x - box.x) / scale;\n\t\t\t\t\tresult.width = box.width;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y < state.y)\n\t\t\t\t{\n\t\t\t\t\ty += (state.y - box.y) / scale;\n\t\t\t\t\tresult.height = box.height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parent != null)\n\t\t{\n\t\t\tvar parent = model.getParent(cell);\n\n\t\t\tif (parent != null && parent != this.parent)\n\t\t\t{\n\t\t\t\tvar parentOffset = this.getParentOffset(parent);\n\n\t\t\t\tx = x - parentOffset.x;\n\t\t\t\ty = y - parentOffset.y;\n\t\t\t}\n\t\t}\n\n\t\tif (geometry.x != x || geometry.y != y)\n\t\t{\n\t\t\tgeometry = geometry.clone();\n\t\t\tgeometry.x = x;\n\t\t\tgeometry.y = y;\n\t\t\t\n\t\t\tmodel.setGeometry(cell, geometry);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getVertexBounds\n * \n * Returns an <mxRectangle> that defines the bounds of the given cell or\n * the bounding box if <useBoundingBox> is true.\n */\nmxGraphLayout.prototype.getVertexBounds = function(cell)\n{\n\tvar geo = this.graph.getModel().getGeometry(cell);\n\n\t// Checks for oversize label bounding box and corrects\n\t// the return value accordingly\n\t// TODO: Use mxUtils.getStringSize for label bounds\n\tif (this.useBoundingBox)\n\t{\n\t\tvar state = this.graph.getView().getState(cell);\n\n\t\tif (state != null && state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tvar scale = this.graph.getView().scale;\n\t\t\tvar tmp = state.text.boundingBox;\n\n\t\t\tvar dx0 = Math.max(state.x - tmp.x, 0) / scale;\n\t\t\tvar dy0 = Math.max(state.y - tmp.y, 0) / scale;\n\t\t\tvar dx1 = Math.max((tmp.x + tmp.width) - (state.x + state.width), 0) / scale;\n  \t\t\tvar dy1 = Math.max((tmp.y + tmp.height) - (state.y + state.height), 0) / scale;\n\n\t\t\tgeo = new mxRectangle(geo.x - dx0, geo.y - dy0, geo.width + dx0 + dx1, geo.height + dy0 + dy1);\n\t\t}\n\t}\n\n\tif (this.parent != null)\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\tgeo = geo.clone();\n\n\t\tif (parent != null && parent != this.parent)\n\t\t{\n\t\t\tvar parentOffset = this.getParentOffset(parent);\n\t\t\tgeo.x = geo.x + parentOffset.x;\n\t\t\tgeo.y = geo.y + parentOffset.y;\n\t\t}\n\t}\n\n\treturn new mxRectangle(geo.x, geo.y, geo.width, geo.height);\n};\n\n/**\n * Function: arrangeGroups\n * \n * Shortcut to <mxGraph.updateGroupBounds> with moveGroup set to true.\n */\nmxGraphLayout.prototype.arrangeGroups = function(cells, border, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\treturn this.graph.updateGroupBounds(cells, border, true, topBorder, rightBorder, bottomBorder, leftBorder);\n};\n\n/**\n * Class: WeightedCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the weighted\n * sum of their connected edges. Does not violate (x.compareTo(y)==0) ==\n * (x.equals(y))\n *\n * Constructor: WeightedCellSorter\n * \n * Constructs a new weighted cell sorted for the given cell and weight.\n */\nfunction WeightedCellSorter(cell, weightedValue)\n{\n\tthis.cell = cell;\n\tthis.weightedValue = weightedValue;\n};\n\n/**\n * Variable: weightedValue\n * \n * The weighted value of the cell stored.\n */\nWeightedCellSorter.prototype.weightedValue = 0;\n\n/**\n * Variable: nudge\n * \n * Whether or not to flip equal weight values.\n */\nWeightedCellSorter.prototype.nudge = false;\n\n/**\n * Variable: visited\n * \n * Whether or not this cell has been visited in the current assignment.\n */\nWeightedCellSorter.prototype.visited = false;\n\n/**\n * Variable: rankIndex\n * \n * The index this cell is in the model rank.\n */\nWeightedCellSorter.prototype.rankIndex = null;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated.\n */\nWeightedCellSorter.prototype.cell = null;\n\n/**\n * Function: compare\n * \n * Compares two WeightedCellSorters.\n */\nWeightedCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.weightedValue > a.weightedValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.weightedValue < a.weightedValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (b.nudge)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStackLayout\n * \n * Extends <mxGraphLayout> to create a horizontal or vertical stack of the\n * child vertices. The children do not need to be connected for this layout\n * to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxStackLayout(graph, true);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxStackLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxStackLayout(graph, horizontal, spacing, x0, y0, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = (spacing != null) ? spacing : 0;\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.border = (border != null) ? border : 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxStackLayout.prototype = new mxGraphLayout();\nmxStackLayout.prototype.constructor = mxStackLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxStackLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n *\n * Specifies the spacing between the cells. Default is 0.\n */\nmxStackLayout.prototype.spacing = null;\n\n/**\n * Variable: x0\n *\n * Specifies the horizontal origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.x0 = null;\n\n/**\n * Variable: y0\n *\n * Specifies the vertical origin of the layout. Default is 0.\n */\nmxStackLayout.prototype.y0 = null;\n\n/**\n * Variable: border\n *\n * Border to be added if fill is true. Default is 0.\n */\nmxStackLayout.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginTop = 0;\n\n/**\n * Variable: marginLeft\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginLeft = 0;\n\n/**\n * Variable: marginRight\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginRight = 0;\n\n/**\n * Variable: marginBottom\n * \n * Top margin for the child area. Default is 0.\n */\nmxStackLayout.prototype.marginBottom = 0;\n\n/**\n * Variable: keepFirstLocation\n * \n * Boolean indicating if the location of the first cell should be\n * kept, that is, it will not be moved to x0 or y0.\n */\nmxStackLayout.prototype.keepFirstLocation = false;\n\n/**\n * Variable: fill\n * \n * Boolean indicating if dimension should be changed to fill out the parent\n * cell. Default is false.\n */\nmxStackLayout.prototype.fill = false;\n\t\n/**\n * Variable: resizeParent\n * \n * If the parent should be resized to match the width/height of the\n * stack. Default is false.\n */\nmxStackLayout.prototype.resizeParent = false;\n\n/**\n * Variable: resizeParentMax\n * \n * Use maximum of existing value and new value for resize of parent.\n * Default is false.\n */\nmxStackLayout.prototype.resizeParentMax = false;\n\n/**\n * Variable: resizeLast\n * \n * If the last element should be resized to fill out the parent. Default is\n * false. If <resizeParent> is true then this is ignored.\n */\nmxStackLayout.prototype.resizeLast = false;\n\n/**\n * Variable: wrap\n * \n * Value at which a new column or row should be created. Default is null.\n */\nmxStackLayout.prototype.wrap = null;\n\n/**\n * Variable: borderCollapse\n * \n * If the strokeWidth should be ignored. Default is true.\n */\nmxStackLayout.prototype.borderCollapse = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxStackLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxStackLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\tvar horizontal = this.isHorizontal();\n\t\n\tif (cell != null && parent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar value = (horizontal) ? x : y;\n\t\tvar pstate = this.graph.getView().getState(parent);\n\n\t\tif (pstate != null)\n\t\t{\n\t\t\tvalue -= (horizontal) ? pstate.x : pstate.y;\n\t\t}\n\t\t\n\t\tvalue /= this.graph.view.scale;\n\t\t\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (child != cell)\n\t\t\t{\n\t\t\t\tvar bounds = model.getGeometry(child);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = (horizontal) ?\n\t\t\t\t\t\tbounds.x + bounds.width / 2 :\n\t\t\t\t\t\tbounds.y + bounds.height / 2;\n\t\t\t\t\t\n\t\t\t\t\tif (last <= value && tmp > value)\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tlast = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: getParentSize\n * \n * Returns the size for the parent container or the size of the graph\n * container if the parent is a layer or the root of the model.\n */\nmxStackLayout.prototype.getParentSize = function(parent)\n{\n\tvar model = this.graph.getModel();\t\t\t\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null && ((pgeo == null &&\n\t\tmodel.isLayer(parent)) || parent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\t\n\treturn pgeo;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.execute = function(parent)\n{\n\tif (parent != null)\n\t{\n\t\tvar pgeo = this.getParentSize(parent);\n\t\tvar horizontal = this.isHorizontal();\n\t\tvar model = this.graph.getModel();\t\n\t\tvar fillValue = null;\n\t\t\n\t\tif (pgeo != null)\n\t\t{\n\t\t\tfillValue = (horizontal) ? pgeo.height - this.marginTop - this.marginBottom :\n\t\t\t\tpgeo.width - this.marginLeft - this.marginRight;\n\t\t}\n\t\t\n\t\tfillValue -= 2 * this.border;\n\t\tvar x0 = this.x0 + this.border + this.marginLeft;\n\t\tvar y0 = this.y0 + this.border + this.marginTop;\n\t\t\n\t\t// Handles swimlane start size\n\t\tif (this.graph.isSwimlane(parent))\n\t\t{\n\t\t\t// Uses computed style to get latest \n\t\t\tvar style = this.graph.getCellStyle(parent);\n\t\t\tvar start = mxUtils.getNumber(style, mxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE);\n\t\t\tvar horz = mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true) == 1;\n\n\t\t\tif (pgeo != null)\n\t\t\t{\n\t\t\t\tif (horz)\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.height);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstart = Math.min(start, pgeo.width);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal == horz)\n\t\t\t{\n\t\t\t\tfillValue -= start;\n\t\t\t}\n\n\t\t\tif (horz)\n\t\t\t{\n\t\t\t\ty0 += start;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx0 += start;\n\t\t\t}\n\t\t}\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar last = null;\n\t\t\tvar lastValue = 0;\n\t\t\tvar lastChild = null;\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\t\n\t\t\t\tif (!this.isVertexIgnored(child) && this.isVertexMovable(child))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.wrap != null && last != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ((horizontal && last.x + last.width +\n\t\t\t\t\t\t\t\tgeo.width + 2 * this.spacing > this.wrap) ||\n\t\t\t\t\t\t\t\t(!horizontal && last.y + last.height +\n\t\t\t\t\t\t\t\tgeo.height + 2 * this.spacing > this.wrap))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlast = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ty0 += tmp + this.spacing;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx0 += tmp + this.spacing;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ttmp = 0;\n\t\t\t\t\t\t\t}\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp = Math.max(tmp, (horizontal) ? geo.height : geo.width);\n\t\t\t\t\t\tvar sw = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!this.borderCollapse)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar childStyle = this.graph.getCellStyle(child);\n\t\t\t\t\t\t\tsw = mxUtils.getNumber(childStyle, mxConstants.STYLE_STROKEWIDTH, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (last != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y = lastValue + this.spacing + Math.floor(sw / 2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!this.keepFirstLocation)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.y = y0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.fill && fillValue != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.height = fillValue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.width = fillValue;\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.setChildGeometry(child, geo);\n\t\t\t\t\t\tlastChild = child;\n\t\t\t\t\t\tlast = geo;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastValue = last.x + last.width + Math.floor(sw / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastValue = last.y + last.height + Math.floor(sw / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resizeParent && pgeo != null && last != null && !this.graph.isCellCollapsed(parent))\n\t\t\t{\n\t\t\t\tthis.updateParentGeometry(parent, pgeo, last);\n\t\t\t}\n\t\t\telse if (this.resizeLast && pgeo != null && last != null && lastChild != null)\n\t\t\t{\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tlast.width = pgeo.width - last.x - this.spacing - this.marginRight - this.marginLeft;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlast.height = pgeo.height - last.y - this.spacing - this.marginBottom;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.setChildGeometry(lastChild, last);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.setChildGeometry = function(child, geo)\n{\n\tvar geo2 = this.graph.getCellGeometry(child);\n\t\n\tif (geo2 == null || geo.x != geo2.x || geo.y != geo2.y ||\n\t\tgeo.width != geo2.width || geo.height != geo2.height)\n\t{\n\t\tthis.graph.getModel().setGeometry(child, geo);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * Only children where <isVertexIgnored> returns false are taken into\n * account.\n */\nmxStackLayout.prototype.updateParentGeometry = function(parent, pgeo, last)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\t\n\n\tvar pgeo2 = pgeo.clone();\n\t\n\tif (horizontal)\n\t{\n\t\tvar tmp = last.x + last.width + this.marginRight + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.width = Math.max(pgeo2.width, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.width = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar tmp = last.y + last.height + this.marginBottom + this.border;\n\t\t\n\t\tif (this.resizeParentMax)\n\t\t{\n\t\t\tpgeo2.height = Math.max(pgeo2.height, tmp);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpgeo2.height = tmp;\n\t\t}\n\t}\n\t\n\tif (pgeo.x != pgeo2.x || pgeo.y != pgeo2.y ||\n\t\tpgeo.width != pgeo2.width || pgeo.height != pgeo2.height)\n\t{\n\t\tmodel.setGeometry(parent, pgeo2);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPartitionLayout\n * \n * Extends <mxGraphLayout> for partitioning the parent cell vertically or\n * horizontally by filling the complete area with the child cells. A horizontal\n * layout partitions the height of the given parent whereas a a non-horizontal\n * layout partitions the width. If the parent is a layer (that is, a child of\n * the root node), then the current graph size is partitioned. The children do\n * not need to be connected for this layout to work.\n * \n * Example:\n * \n * (code)\n * var layout = new mxPartitionLayout(graph, true, 10, 20);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxPartitionLayout\n * \n * Constructs a new stack layout layout for the specified graph,\n * spacing, orientation and offset.\n */\nfunction mxPartitionLayout(graph, horizontal, spacing, border)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.spacing = spacing || 0;\n\tthis.border = border || 0;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxPartitionLayout.prototype = new mxGraphLayout();\nmxPartitionLayout.prototype.constructor = mxPartitionLayout;\n\n/**\n * Variable: horizontal\n * \n * Boolean indicating the direction in which the space is partitioned.\n * Default is true.\n */\nmxPartitionLayout.prototype.horizontal = null;\n\n/**\n * Variable: spacing\n * \n * Integer that specifies the absolute spacing in pixels between the\n * children. Default is 0.\n */\nmxPartitionLayout.prototype.spacing = null;\n\n/**\n * Variable: border\n * \n * Integer that specifies the absolute inset in pixels for the parent that\n * contains the children. Default is 0.\n */\nmxPartitionLayout.prototype.border = null;\n\n/**\n * Variable: resizeVertices\n * \n * Boolean that specifies if vertices should be resized. Default is true.\n */\nmxPartitionLayout.prototype.resizeVertices = true;\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxPartitionLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell>.\n */\nmxPartitionLayout.prototype.moveCell = function(cell, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(cell);\n\t\n\tif (cell != null &&\n\t\tparent != null)\n\t{\n\t\tvar i = 0;\n\t\tvar last = 0;\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\t// Finds index of the closest swimlane\n\t\t// TODO: Take into account the orientation\n\t\tfor (i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\tvar bounds = this.getVertexBounds(child);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tvar tmp = bounds.x + bounds.width / 2;\n\t\t\t\t\n\t\t\t\tif (last < x && tmp > x)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlast = tmp;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Changes child order in parent\n\t\tvar idx = parent.getIndex(cell);\n\t\tidx = Math.max(0, i - ((i > idx) ? 1 : 0));\n\t\t\n\t\tmodel.add(parent, cell, idx);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. All children where <isVertexIgnored>\n * returns false and <isVertexMovable> returns true are modified.\n */\nmxPartitionLayout.prototype.execute = function(parent)\n{\n\tvar horizontal = this.isHorizontal();\n\tvar model = this.graph.getModel();\n\tvar pgeo = model.getGeometry(parent);\n\t\n\t// Handles special case where the parent is either a layer with no\n\t// geometry or the current root of the view in which case the size\n\t// of the graph's container will be used.\n\tif (this.graph.container != null &&\n\t\t((pgeo == null &&\n\t\tmodel.isLayer(parent)) ||\n\t\tparent == this.graph.getView().currentRoot))\n\t{\n\t\tvar width = this.graph.container.offsetWidth - 1;\n\t\tvar height = this.graph.container.offsetHeight - 1;\n\t\tpgeo = new mxRectangle(0, 0, width, height);\n\t}\n\n\tif (pgeo != null)\n\t{\n\t\tvar children = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(child) &&\n\t\t\t\tthis.isVertexMovable(child))\n\t\t\t{\n\t\t\t\tchildren.push(child);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar n = children.length;\n\n\t\tif (n > 0)\n\t\t{\n\t\t\tvar x0 = this.border;\n\t\t\tvar y0 = this.border;\n\t\t\tvar other = (horizontal) ? pgeo.height : pgeo.width;\n\t\t\tother -= 2 * this.border;\n\n\t\t\tvar size = (this.graph.isSwimlane(parent)) ?\n\t\t\t\tthis.graph.getStartSize(parent) :\n\t\t\t\tnew mxRectangle();\n\n\t\t\tother -= (horizontal) ? size.height : size.width;\n\t\t\tx0 = x0 + size.width;\n\t\t\ty0 = y0 + size.height;\n\n\t\t\tvar tmp = this.border + (n - 1) * this.spacing;\n\t\t\tvar value = (horizontal) ?\n\t\t\t\t((pgeo.width - x0 - tmp) / n) :\n\t\t\t\t((pgeo.height - y0 - tmp) / n);\n\t\t\t\n\t\t\t// Avoids negative values, that is values where the sum of the\n\t\t\t// spacing plus the border is larger then the available space\n\t\t\tif (value > 0)\n\t\t\t{\n\t\t\t\tmodel.beginUpdate();\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < n; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\tvar geo = model.getGeometry(child);\n\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.x = x0;\n\t\t\t\t\t\t\tgeo.y = y0;\n\n\t\t\t\t\t\t\tif (horizontal)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.width = value;\n\t\t\t\t\t\t\t\t\tgeo.height = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tx0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (this.resizeVertices)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.height = value;\n\t\t\t\t\t\t\t\t\tgeo.width = other;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ty0 += value + this.spacing;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmodel.setGeometry(child, geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfinally\n\t\t\t\t{\n\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCompactTreeLayout\n * \n * Extends <mxGraphLayout> to implement a compact tree (Moen) algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCompactTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new compact tree layout for the specified graph\n * and orientation.\n */\nfunction mxCompactTreeLayout(graph, horizontal, invert)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.invert = (invert != null) ? invert : false;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompactTreeLayout.prototype = new mxGraphLayout();\nmxCompactTreeLayout.prototype.constructor = mxCompactTreeLayout;\n\n/**\n * Variable: horizontal\n *\n * Specifies the orientation of the layout. Default is true.\n */\nmxCompactTreeLayout.prototype.horizontal = null;\t \n\n/**\n * Variable: invert\n *\n * Specifies if edge directions should be inverted. Default is false.\n */\nmxCompactTreeLayout.prototype.invert = null;\t \n\n/**\n * Variable: resizeParent\n * \n * If the parents should be resized to match the width/height of the\n * children. Default is true.\n */\nmxCompactTreeLayout.prototype.resizeParent = true;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxCompactTreeLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents. Default is 10.\n */\nmxCompactTreeLayout.prototype.groupPadding = 10;\n\n/**\n * Variable: groupPaddingTop\n * \n * Top padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingTop = 0;\n\n/**\n * Variable: groupPaddingRight\n * \n * Right padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingRight = 0;\n\n/**\n * Variable: groupPaddingBottom\n * \n * Bottom padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingBottom = 0;\n\n/**\n * Variable: groupPaddingLeft\n * \n * Left padding added to resized parents. Default is 0.\n */\nmxCompactTreeLayout.prototype.groupPaddingLeft = 0;\n\n/**\n * Variable: parentsChanged\n *\n * A set of the parents that need updating based on children\n * process as part of the layout.\n */\nmxCompactTreeLayout.prototype.parentsChanged = null;\n\n/**\n * Variable: moveTree\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.moveTree = false;\n\n/**\n * Variable: visited\n * \n * Specifies if the tree should be moved to the top, left corner\n * if it is inside a top-level layer. Default is false.\n */\nmxCompactTreeLayout.prototype.visited = null;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 10.\n */\nmxCompactTreeLayout.prototype.levelDistance = 10;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 20.\n */\nmxCompactTreeLayout.prototype.nodeDistance = 20;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCompactTreeLayout.prototype.resetEdges = true;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex.\n */\nmxCompactTreeLayout.prototype.prefVertEdgeOff = 4;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex.\n */\nmxCompactTreeLayout.prototype.minEdgeJetty = 8;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed.\n */\nmxCompactTreeLayout.prototype.channelBuffer = 4;\n\n/**\n * Variable: edgeRouting\n * \n * Whether or not to apply the internal tree edge routing.\n */\nmxCompactTreeLayout.prototype.edgeRouting = true;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxCompactTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: alignRanks\n * \n * Whether or not the tops of cells in each rank should be aligned\n * across the rank\n */\nmxCompactTreeLayout.prototype.alignRanks = false;\n\n/**\n * Variable: maxRankHeight\n * \n * An array of the maximum height of cells (relative to the layout direction)\n * per rank\n */\nmxCompactTreeLayout.prototype.maxRankHeight = null;\n\n/**\n * Variable: root\n * \n * The cell to use as the root of the tree\n */\nmxCompactTreeLayout.prototype.root = null;\n\n/**\n * Variable: node\n * \n * The internal node representation of the root cell. Do not set directly\n * , this value is only exposed to assist with post-processing functionality\n */\nmxCompactTreeLayout.prototype.node = null;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxCompactTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxCompactTreeLayout.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n * Overrides <root> if specified.\n */\nmxCompactTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.getModel();\n\n\tif (root == null)\n\t{\n\t\t// Takes the parent as the root if it has outgoing edges\n\t\tif (this.graph.getEdges(parent, model.getParent(parent),\n\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t{\n\t\t\tthis.root = parent;\n\t\t}\n\t\t\n\t\t// Tries to find a suitable root in the parent's\n\t\t// children\n\t\telse\n\t\t{\n\t\t\tvar roots = this.graph.findTreeRoots(parent, true, this.invert);\n\t\t\t\n\t\t\tif (roots.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < roots.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (!this.isVertexIgnored(roots[i]) &&\n\t\t\t\t\t\tthis.graph.getEdges(roots[i], null,\n\t\t\t\t\t\t\tthis.invert, !this.invert, false).length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.root = roots[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.root = root;\n\t}\n\t\n\tif (this.root != null)\n\t{\n\t\tif (this.resizeParent)\n\t\t{\n\t\t\tthis.parentsChanged = new Object();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.parentsChanged = null;\n\t\t}\n\n\t\t//  Maintaining parent location\n\t\tthis.parentX = null;\n\t\tthis.parentY = null;\n\t\t\n\t\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tthis.parentX = geo.x;\n\t\t\t\tthis.parentY = geo.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tmodel.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tthis.visited = new Object();\n\t\t\tthis.node = this.dfs(this.root, parent);\n\t\t\t\n\t\t\tif (this.alignRanks)\n\t\t\t{\n\t\t\t\tthis.maxRankHeight = [];\n\t\t\t\tthis.findRankHeights(this.node, 0);\n\t\t\t\tthis.setCellHeights(this.node, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.node != null)\n\t\t\t{\n\t\t\t\tthis.layout(this.node);\n\t\t\t\tvar x0 = this.graph.gridSize;\n\t\t\t\tvar y0 = x0;\n\t\t\t\t\n\t\t\t\tif (!this.moveTree)\n\t\t\t\t{\n\t\t\t\t\tvar g = this.getVertexBounds(this.root);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx0 = g.x;\n\t\t\t\t\t\ty0 = g.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bounds = null;\n\t\t\t\t\n\t\t\t\tif (this.isHorizontal())\n\t\t\t\t{\n\t\t\t\t\tbounds = this.horizontalLayout(this.node, x0, y0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbounds = this.verticalLayout(this.node, null, x0, y0);\n\t\t\t\t}\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\tvar dy = 0;\n\n\t\t\t\t\tif (bounds.x < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = Math.abs(x0 - bounds.x);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bounds.y < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = Math.abs(y0 - bounds.y);\t\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.moveNode(this.node, dx, dy);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.resizeParent)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.adjustParents();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.edgeRouting)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Iterate through all edges setting their positions\n\t\t\t\t\t\tthis.localEdgeProcessing(this.node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Maintaining parent location\n\t\t\t\tif (this.parentX != null && this.parentY != null)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\tgeo.x = this.parentX;\n\t\t\t\t\t\tgeo.y = this.parentY;\n\t\t\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: moveNode\n * \n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.moveNode = function(node, dx, dy)\n{\n\tnode.x += dx;\n\tnode.y += dy;\n\tthis.apply(node);\n\t\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.moveNode(child, dx, dy);\n\t\tchild = child.next;\n\t}\n};\n\n\n/**\n * Function: sortOutgoingEdges\n * \n * Called if <sortEdges> is true to sort the array of outgoing edges in place.\n */\nmxCompactTreeLayout.prototype.sortOutgoingEdges = function(source, edges)\n{\n\tvar lookup = new mxDictionary();\n\t\n\tedges.sort(function(e1, e2)\n\t{\n\t\tvar end1 = e1.getTerminal(e1.getTerminal(false) == source);\n\t\tvar p1 = lookup.get(end1);\n\t\t\n\t\tif (p1 == null)\n\t\t{\n\t\t\tp1 = mxCellPath.create(end1).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end1, p1);\n\t\t}\n\n\t\tvar end2 = e2.getTerminal(e2.getTerminal(false) == source);\n\t\tvar p2 = lookup.get(end2);\n\t\t\n\t\tif (p2 == null)\n\t\t{\n\t\t\tp2 = mxCellPath.create(end2).split(mxCellPath.PATH_SEPARATOR);\n\t\t\tlookup.put(end2, p2);\n\t\t}\n\n\t\treturn mxCellPath.compare(p1, p2);\n\t});\n};\n\n/**\n * Function: findRankHeights\n * \n * Stores the maximum height (relative to the layout\n * direction) of cells in each rank\n */\nmxCompactTreeLayout.prototype.findRankHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] == null || this.maxRankHeight[rank] < node.height)\n\t{\n\t\tthis.maxRankHeight[rank] = node.height;\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.findRankHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: setCellHeights\n * \n * Set the cells heights (relative to the layout\n * direction) when the tops of each rank are to be aligned\n */\nmxCompactTreeLayout.prototype.setCellHeights = function(node, rank)\n{\n\tif (this.maxRankHeight[rank] != null && this.maxRankHeight[rank] > node.height)\n\t{\n\t\tnode.height = this.maxRankHeight[rank];\n\t}\n\n\tvar child = node.child;\n\t\n\twhile (child != null)\n\t{\n\t\tthis.setCellHeights(child, rank + 1);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: dfs\n * \n * Does a depth first search starting at the specified cell.\n * Makes sure the specified parent is never left by the\n * algorithm.\n */\nmxCompactTreeLayout.prototype.dfs = function(cell, parent)\n{\n\tvar id = mxCellPath.create(cell);\n\tvar node = null;\n\t\n\tif (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell))\n\t{\n\t\tthis.visited[id] = cell;\n\t\tnode = this.createNode(cell);\n\n\t\tvar model = this.graph.getModel();\n\t\tvar prev = null;\n\t\tvar out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);\n\t\tvar view = this.graph.getView();\n\t\t\n\t\tif (this.sortEdges)\n\t\t{\n\t\t\tthis.sortOutgoingEdges(cell, out);\n\t\t}\n\n\t\tfor (var i = 0; i < out.length; i++)\n\t\t{\n\t\t\tvar edge = out[i];\n\t\t\t\n\t\t\tif (!this.isEdgeIgnored(edge))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.edgeRouting)\n\t\t\t\t{\n\t\t\t\t\tthis.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\tthis.setEdgePoints(edge, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if terminal in same swimlane\n\t\t\t\tvar state = view.getState(edge);\n\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);\n\t\t\t\tvar tmp = this.dfs(target, parent);\n\t\t\t\t\n\t\t\t\tif (tmp != null && model.getGeometry(target) != null)\n\t\t\t\t{\n\t\t\t\t\tif (prev == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.child = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tprev.next = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tprev = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: layout\n * \n * Starts the actual compact tree layout algorithm\n * at the given node.\n */\nmxCompactTreeLayout.prototype.layout = function(node)\n{\n\tif (node != null)\n\t{\n\t\tvar child = node.child;\n\t\t\n\t\twhile (child != null)\n\t\t{\n\t\t\tthis.layout(child);\n\t\t\tchild = child.next;\n\t\t}\n\t\t\n\t\tif (node.child != null)\n\t\t{\n\t\t\tthis.attachParent(node, this.join(node));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.layoutLeaf(node);\n\t\t}\n\t}\n};\n\n/**\n * Function: horizontalLayout\n */\nmxCompactTreeLayout.prototype.horizontalLayout = function(node, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetX;\n\tnode.y += y0 + node.offsetY;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.horizontalLayout(child, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.y + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\t\n/**\n * Function: verticalLayout\n */\nmxCompactTreeLayout.prototype.verticalLayout = function(node, parent, x0, y0, bounds)\n{\n\tnode.x += x0 + node.offsetY;\n\tnode.y += y0 + node.offsetX;\n\tbounds = this.apply(node, bounds);\n\tvar child = node.child;\n\t\n\tif (child != null)\n\t{\n\t\tbounds = this.verticalLayout(child, node, node.x, node.y, bounds);\n\t\tvar siblingOffset = node.x + child.offsetY;\n\t\tvar s = child.next;\n\t\t\n\t\twhile (s != null)\n\t\t{\n\t\t\tbounds = this.verticalLayout(s, node, siblingOffset, node.y + child.offsetX, bounds);\n\t\t\tsiblingOffset += s.offsetY;\n\t\t\ts = s.next;\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: attachParent\n */\nmxCompactTreeLayout.prototype.attachParent = function(node, height)\n{\n\tvar x = this.nodeDistance + this.levelDistance;\n\tvar y2 = (height - node.width) / 2 - this.nodeDistance;\n\tvar y1 = y2 + node.width + 2 * this.nodeDistance - height;\n\t\n\tnode.child.offsetX = x + node.height;\n\tnode.child.offsetY = y1;\n\t\n\tnode.contour.upperHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y1, node.contour.upperHead));\n\tnode.contour.lowerHead = this.createLine(node.height, 0,\n\t\tthis.createLine(x, y2, node.contour.lowerHead));\n};\n\n/**\n * Function: layoutLeaf\n */\nmxCompactTreeLayout.prototype.layoutLeaf = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tnode.contour.upperTail = this.createLine(\n\t\tnode.height + dist, 0);\n\tnode.contour.upperHead = node.contour.upperTail;\n\tnode.contour.lowerTail = this.createLine(\n\t\t0, -node.width - dist);\n\tnode.contour.lowerHead = this.createLine(\n\t\tnode.height + dist, 0, node.contour.lowerTail);\n};\n\n/**\n * Function: join\n */\nmxCompactTreeLayout.prototype.join = function(node)\n{\n\tvar dist = 2 * this.nodeDistance;\n\t\n\tvar child = node.child;\n\tnode.contour = child.contour;\n\tvar h = child.width + dist;\n\tvar sum = h;\n\tchild = child.next;\n\t\n\twhile (child != null)\n\t{\n\t\tvar d = this.merge(node.contour, child.contour);\n\t\tchild.offsetY = d + h;\n\t\tchild.offsetX = 0;\n\t\th = child.width + dist;\n\t\tsum += d + h;\n\t\tchild = child.next;\n\t}\n\t\n\treturn sum;\n};\n\n/**\n * Function: merge\n */\nmxCompactTreeLayout.prototype.merge = function(p1, p2)\n{\n\tvar x = 0;\n\tvar y = 0;\n\tvar total = 0;\n\t\n\tvar upper = p1.lowerHead;\n\tvar lower = p2.upperHead;\n\t\n\twhile (lower != null && upper != null)\n\t{\n\t\tvar d = this.offset(x, y, lower.dx, lower.dy,\n\t\t\tupper.dx, upper.dy);\n\t\ty += d;\n\t\ttotal += d;\n\t\t\n\t\tif (x + lower.dx <= upper.dx)\n\t\t{\n\t\t\tx += lower.dx;\n\t\t\ty += lower.dy;\n\t\t\tlower = lower.next;\n\t\t}\n\t\telse\n\t\t{\t\t\t\t\n\t\t\tx -= upper.dx;\n\t\t\ty -= upper.dy;\n\t\t\tupper = upper.next;\n\t\t}\n\t}\n\t\n\tif (lower != null)\n\t{\n\t\tvar b = this.bridge(p1.upperTail, 0, 0, lower, x, y);\n\t\tp1.upperTail = (b.next != null) ? p2.upperTail : b;\n\t\tp1.lowerTail = p2.lowerTail;\n\t}\n\telse\n\t{\n\t\tvar b = this.bridge(p2.lowerTail, x, y, upper, 0, 0);\n\t\t\n\t\tif (b.next == null)\n\t\t{\n\t\t\tp1.lowerTail = b;\n\t\t}\n\t}\n\t\n\tp1.lowerHead = p2.lowerHead;\n\t\n\treturn total;\n};\n\n/**\n * Function: offset\n */\nmxCompactTreeLayout.prototype.offset = function(p1, p2, a1, a2, b1, b2)\n{\n\tvar d = 0;\n\t\n\tif (b1 <= p1 || p1 + a1 <= 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar t = b1 * a2 - a1 * b2;\n\t\n\tif (t > 0)\n\t{\n\t\tif (p1 < 0)\n\t\t{\n\t\t\tvar s = p1 * a2;\n\t\t\td = s / a1 - p2;\n\t\t}\n\t\telse if (p1 > 0)\n\t\t{\n\t\t\tvar s = p1 * b2;\n\t\t\td = s / b1 - p2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = -p2;\n\t\t}\n\t}\n\telse if (b1 < p1 + a1)\n\t{\n\t\tvar s = (b1 - p1) * a2;\n\t\td = b2 - (p2 + s / a1);\n\t}\n\telse if (b1 > p1 + a1)\n\t{\n\t\tvar s = (a1 + p1) * b2;\n\t\td = s / b1 - (p2 + a2);\n\t}\n\telse\n\t{\n\t\td = b2 - (p2 + a2);\n\t}\n\n\tif (d > 0)\n\t{\n\t\treturn d;\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n\n/**\n * Function: bridge\n */\nmxCompactTreeLayout.prototype.bridge = function(line1, x1, y1, line2, x2, y2)\n{\n\tvar dx = x2 + line2.dx - x1;\n\tvar dy = 0;\n\tvar s = 0;\n\t\n\tif (line2.dx == 0)\n\t{\n\t\tdy = line2.dy;\n\t}\n\telse\n\t{\n\t\ts = dx * line2.dy;\n\t\tdy = s / line2.dx;\n\t}\n\t\n\tvar r = this.createLine(dx, dy, line2.next);\n\tline1.next = this.createLine(0, y2 + line2.dy - dy - y1, r);\n\t\n\treturn r;\n};\n\n/**\n * Function: createNode\n */\nmxCompactTreeLayout.prototype.createNode = function(cell)\n{\n\tvar node = new Object();\n\tnode.cell = cell;\n\tnode.x = 0;\n\tnode.y = 0;\n\tnode.width = 0;\n\tnode.height = 0;\n\t\n\tvar geo = this.getVertexBounds(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (this.isHorizontal())\n\t\t{\n\t\t\tnode.width = geo.height;\n\t\t\tnode.height = geo.width;\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnode.width = geo.width;\n\t\t\tnode.height = geo.height;\n\t\t}\n\t}\n\t\n\tnode.offsetX = 0;\n\tnode.offsetY = 0;\n\tnode.contour = new Object();\n\t\n\treturn node;\n};\n\n/**\n * Function: apply\n */\nmxCompactTreeLayout.prototype.apply = function(node, bounds)\n{\n\tvar model = this.graph.getModel();\n\tvar cell = node.cell;\n\tvar g = model.getGeometry(cell);\n\n\tif (cell != null && g != null)\n\t{\n\t\tif (this.isVertexMovable(cell))\n\t\t{\n\t\t\tg = this.setVertexLocation(cell, node.x, node.y);\n\t\t\t\n\t\t\tif (this.resizeParent)\n\t\t\t{\n\t\t\t\tvar parent = model.getParent(cell);\n\t\t\t\tvar id = mxCellPath.create(parent);\n\t\t\t\t\n\t\t\t\t// Implements set semantic\n\t\t\t\tif (this.parentsChanged[id] == null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentsChanged[id] = parent;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (bounds == null)\n\t\t{\n\t\t\tbounds = new mxRectangle(g.x, g.y, g.width, g.height);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds = new mxRectangle(Math.min(bounds.x, g.x),\n\t\t\t\tMath.min(bounds.y, g.y),\n\t\t\t\tMath.max(bounds.x + bounds.width, g.x + g.width),\n\t\t\t\tMath.max(bounds.y + bounds.height, g.y + g.height));\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: createLine\n */\nmxCompactTreeLayout.prototype.createLine = function(dx, dy, next)\n{\n\tvar line = new Object();\n\tline.dx = dx;\n\tline.dy = dy;\n\tline.next = next;\n\t\n\treturn line;\n};\n\n/**\n * Function: adjustParents\n * \n * Adjust parent cells whose child geometries have changed. The default \n * implementation adjusts the group to just fit around the children with \n * a padding.\n */\nmxCompactTreeLayout.prototype.adjustParents = function()\n{\n\tvar tmp = [];\n\t\n\tfor (var id in this.parentsChanged)\n\t{\n\t\ttmp.push(this.parentsChanged[id]);\n\t}\n\t\n\tthis.arrangeGroups(mxUtils.sortCells(tmp, true), this.groupPadding, this.groupPaddingTop,\n\t\tthis.groupPaddingRight, this.groupPaddingBottom, this.groupPaddingLeft);\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Moves the specified node and all of its children by the given amount.\n */\nmxCompactTreeLayout.prototype.localEdgeProcessing = function(node)\n{\n\tthis.processNodeOutgoing(node);\n\tvar child = node.child;\n\n\twhile (child != null)\n\t{\n\t\tthis.localEdgeProcessing(child);\n\t\tchild = child.next;\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n *\n * Separates the x position of edges as they connect to vertices\n */\nmxCompactTreeLayout.prototype.processNodeOutgoing = function(node)\n{\n\tvar child = node.child;\n\tvar parentCell = node.cell;\n\n\tvar childCount = 0;\n\tvar sortedCells = [];\n\n\twhile (child != null)\n\t{\n\t\tchildCount++;\n\n\t\tvar sortingCriterion = child.x;\n\n\t\tif (this.horizontal)\n\t\t{\n\t\t\tsortingCriterion = child.y;\n\t\t}\n\n\t\tsortedCells.push(new WeightedCellSorter(child, sortingCriterion));\n\t\tchild = child.next;\n\t}\n\n\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\tvar availableWidth = node.width;\n\n\tvar requiredWidth = (childCount + 1) * this.prefHozEdgeSep;\n\n\t// Add a buffer on the edges of the vertex if the edge count allows\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tavailableWidth -= 2 * this.prefHozEdgeSep;\n\t}\n\n\tvar edgeSpacing = availableWidth / childCount;\n\n\tvar currentXOffset = edgeSpacing / 2.0;\n\n\tif (availableWidth > requiredWidth + (2 * this.prefHozEdgeSep))\n\t{\n\t\tcurrentXOffset += this.prefHozEdgeSep;\n\t}\n\n\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\tvar maxYOffset = 0;\n\n\tvar parentBounds = this.getVertexBounds(parentCell);\n\tchild = node.child;\n\n\tfor (var j = 0; j < sortedCells.length; j++)\n\t{\n\t\tvar childCell = sortedCells[j].cell.cell;\n\t\tvar childBounds = this.getVertexBounds(childCell);\n\n\t\tvar edges = this.graph.getEdgesBetween(parentCell,\n\t\t\t\tchildCell, false);\n\t\t\n\t\tvar newPoints = [];\n\t\tvar x = 0;\n\t\tvar y = 0;\n\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tif (this.horizontal)\n\t\t\t{\n\t\t\t\t// Use opposite co-ords, calculation was done for \n\t\t\t\t// \n\t\t\t\tx = parentBounds.x + parentBounds.width;\n\t\t\t\ty = parentBounds.y + currentXOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = parentBounds.x + parentBounds.width\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = childBounds.y + childBounds.height / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = parentBounds.x + currentXOffset;\n\t\t\t\ty = parentBounds.y + parentBounds.height;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\ty = parentBounds.y + parentBounds.height\n\t\t\t\t\t\t+ currentYOffset;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tx = childBounds.x + childBounds.width / 2.0;\n\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\tthis.setEdgePoints(edges[i], newPoints);\n\t\t\t}\n\t\t}\n\n\t\tif (j < childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t}\n\t\telse if (j > childCount / 2)\n\t\t{\n\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t}\n\t\t// Ignore the case if equals, this means the second of 2\n\t\t// jettys with the same y (even number of edges)\n\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2] = currentX;\n\t\tcurrentXOffset += edgeSpacing;\n\t\t//\t\t\t\t\t\t\t\tpos[k * 2 + 1] = currentYOffset;\n\n\t\tmaxYOffset = Math.max(maxYOffset, currentYOffset);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxRadialTreeLayout\n * \n * Extends <mxGraphLayout> to implement a radial tree algorithm. This\n * layout is suitable for graphs that have no cycles (trees). Vertices that are\n * not connected to the tree will be ignored by this layout.\n * \n * Example:\n * \n * (code)\n * var layout = new mxRadialTreeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxRadialTreeLayout\n * \n * Constructs a new radial tree layout for the specified graph\n */\nfunction mxRadialTreeLayout(graph)\n{\n\tmxCompactTreeLayout.call(this, graph , false);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxUtils.extend(mxRadialTreeLayout, mxCompactTreeLayout);\n\n/**\n * Variable: angleOffset\n *\n * The initial offset to compute the angle position.\n */\nmxRadialTreeLayout.prototype.angleOffset = 0.5;\n\n/**\n * Variable: rootx\n *\n * The X co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rootx = 0;\n\n/**\n * Variable: rooty\n *\n * The Y co-ordinate of the root cell\n */\nmxRadialTreeLayout.prototype.rooty = 0;\n\n/**\n * Variable: levelDistance\n *\n * Holds the levelDistance. Default is 120.\n */\nmxRadialTreeLayout.prototype.levelDistance = 120;\n\n/**\n * Variable: nodeDistance\n *\n * Holds the nodeDistance. Default is 10.\n */\nmxRadialTreeLayout.prototype.nodeDistance = 10;\n\n/**\n * Variable: autoRadius\n * \n * Specifies if the radios should be computed automatically\n */\nmxRadialTreeLayout.prototype.autoRadius = false;\n\n/**\n * Variable: sortEdges\n * \n * Specifies if edges should be sorted according to the order of their\n * opposite terminal cell in the model.\n */\nmxRadialTreeLayout.prototype.sortEdges = false;\n\n/**\n * Variable: rowMinX\n * \n * Array of leftmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMinX = [];\n\n/**\n * Variable: rowMaxX\n * \n * Array of rightmost x coordinate of each row\n */\nmxRadialTreeLayout.prototype.rowMaxX = [];\n\n/**\n * Variable: rowMinCenX\n * \n * Array of x coordinate of leftmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMinCenX = [];\n\n/**\n * Variable: rowMaxCenX\n * \n * Array of x coordinate of rightmost vertex of each row\n */\nmxRadialTreeLayout.prototype.rowMaxCenX = [];\n\n/**\n * Variable: rowRadi\n * \n * Array of y deltas of each row behind root vertex, also the radius in the tree\n */\nmxRadialTreeLayout.prototype.rowRadi = [];\n\n/**\n * Variable: row\n * \n * Array of vertices on each row\n */\nmxRadialTreeLayout.prototype.row = [];\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxRadialTreeLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n * \n * If the parent has any connected edges, then it is used as the root of\n * the tree. Else, <mxGraph.findTreeRoots> will be used to find a suitable\n * root node within the set of children of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be laid out.\n * root - Optional <mxCell> that will be used as the root of the tree.\n */\nmxRadialTreeLayout.prototype.execute = function(parent, root)\n{\n\tthis.parent = parent;\n\t\n\tthis.useBoundingBox = false;\n\tthis.edgeRouting = false;\n\t//this.horizontal = false;\n\n\tmxCompactTreeLayout.prototype.execute.apply(this, arguments);\n\t\n\tvar bounds = null;\n\tvar rootBounds = this.getVertexBounds(this.root);\n\tthis.centerX = rootBounds.x + rootBounds.width / 2;\n\tthis.centerY = rootBounds.y + rootBounds.height / 2;\n\n\t// Calculate the bounds of the involved vertices directly from the values set in the compact tree\n\tfor (var vertex in this.visited)\n\t{\n\t\tvar vertexBounds = this.getVertexBounds(this.visited[vertex]);\n\t\tbounds = (bounds != null) ? bounds : vertexBounds.clone();\n\t\tbounds.add(vertexBounds);\n\t}\n\t\n\tthis.calcRowDims([this.node], 0);\n\t\n\tvar maxLeftGrad = 0;\n\tvar maxRightGrad = 0;\n\n\t// Find the steepest left and right gradients\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar leftGrad = (this.centerX - this.rowMinX[i] - this.nodeDistance) / this.rowRadi[i];\n\t\tvar rightGrad = (this.rowMaxX[i] - this.centerX - this.nodeDistance) / this.rowRadi[i];\n\t\t\n\t\tmaxLeftGrad = Math.max (maxLeftGrad, leftGrad);\n\t\tmaxRightGrad = Math.max (maxRightGrad, rightGrad);\n\t}\n\t\n\t// Extend out row so they meet the maximum gradient and convert to polar co-ords\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tvar xLeftLimit = this.centerX - this.nodeDistance - maxLeftGrad * this.rowRadi[i];\n\t\tvar xRightLimit = this.centerX + this.nodeDistance + maxRightGrad * this.rowRadi[i];\n\t\tvar fullWidth = xRightLimit - xLeftLimit;\n\t\t\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tvar xProportion = (vertexBounds.x + vertexBounds.width / 2 - xLeftLimit) / (fullWidth);\n\t\t\tvar theta =  2 * Math.PI * xProportion;\n\t\t\tnode.theta = theta;\n\t\t}\n\t}\n\n\t// Post-process from outside inwards to try to align parents with children\n\tfor (var i = this.row.length - 2; i >= 0; i--)\n\t{\n\t\tvar row = this.row[i];\n\t\t\n\t\tfor (var j = 0; j < row.length; j++)\n\t\t{\n\t\t\tvar node = row[j];\n\t\t\tvar child = node.child;\n\t\t\tvar counter = 0;\n\t\t\tvar totalTheta = 0;\n\t\t\t\n\t\t\twhile (child != null)\n\t\t\t{\n\t\t\t\ttotalTheta += child.theta;\n\t\t\t\tcounter++;\n\t\t\t\tchild = child.next;\n\t\t\t}\n\t\t\t\n\t\t\tif (counter > 0)\n\t\t\t{\n\t\t\t\tvar averTheta = totalTheta / counter;\n\t\t\t\t\n\t\t\t\tif (averTheta > node.theta && j < row.length - 1)\n\t\t\t\t{\n\t\t\t\t\tvar nextTheta = row[j+1].theta;\n\t\t\t\t\tnode.theta = Math.min (averTheta, nextTheta - Math.PI/10);\n\t\t\t\t}\n\t\t\t\telse if (averTheta < node.theta && j > 0 )\n\t\t\t\t{\n\t\t\t\t\tvar lastTheta = row[j-1].theta;\n\t\t\t\t\tnode.theta = Math.max (averTheta, lastTheta + Math.PI/10);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Set locations\n\tfor (var i = 0; i < this.row.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.row[i].length; j ++)\n\t\t{\n\t\t\tvar row = this.row[i];\n\t\t\tvar node = row[j];\n\t\t\tvar vertexBounds = this.getVertexBounds(node.cell);\n\t\t\tthis.setVertexLocation(node.cell,\n\t\t\t\t\t\t\t\t\tthis.centerX - vertexBounds.width / 2 + this.rowRadi[i] * Math.cos(node.theta),\n\t\t\t\t\t\t\t\t\tthis.centerY - vertexBounds.height / 2 + this.rowRadi[i] * Math.sin(node.theta));\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRowDims\n * \n * Recursive function to calculate the dimensions of each row\n * \n * Parameters:\n * \n * row - Array of internal nodes, the children of which are to be processed.\n * rowNum - Integer indicating which row is being processed.\n */\nmxRadialTreeLayout.prototype.calcRowDims = function(row, rowNum)\n{\n\tif (row == null || row.length == 0)\n\t{\n\t\treturn;\n\t}\n\n\t// Place root's children proportionally around the first level\n\tthis.rowMinX[rowNum] = this.centerX;\n\tthis.rowMaxX[rowNum] = this.centerX;\n\tthis.rowMinCenX[rowNum] = this.centerX;\n\tthis.rowMaxCenX[rowNum] = this.centerX;\n\tthis.row[rowNum] = [];\n\n\tvar rowHasChildren = false;\n\n\tfor (var i = 0; i < row.length; i++)\n\t{\n\t\tvar child = row[i] != null ? row[i].child : null;\n\n\t\twhile (child != null)\n\t\t{\n\t\t\tvar cell = child.cell;\n\t\t\tvar vertexBounds = this.getVertexBounds(cell);\n\t\t\t\n\t\t\tthis.rowMinX[rowNum] = Math.min(vertexBounds.x, this.rowMinX[rowNum]);\n\t\t\tthis.rowMaxX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width, this.rowMaxX[rowNum]);\n\t\t\tthis.rowMinCenX[rowNum] = Math.min(vertexBounds.x + vertexBounds.width / 2, this.rowMinCenX[rowNum]);\n\t\t\tthis.rowMaxCenX[rowNum] = Math.max(vertexBounds.x + vertexBounds.width / 2, this.rowMaxCenX[rowNum]);\n\t\t\tthis.rowRadi[rowNum] = vertexBounds.y - this.getVertexBounds(this.root).y;\n\t\n\t\t\tif (child.child != null)\n\t\t\t{\n\t\t\t\trowHasChildren = true;\n\t\t\t}\n\t\t\t\n\t\t\tthis.row[rowNum].push(child);\n\t\t\tchild = child.next;\n\t\t}\n\t}\n\t\n\tif (rowHasChildren)\n\t{\n\t\tthis.calcRowDims(this.row[rowNum], rowNum + 1);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxFastOrganicLayout\n * \n * Extends <mxGraphLayout> to implement a fast organic layout algorithm.\n * The vertices need to be connected for this layout to work, vertices\n * with no connections are ignored.\n * \n * Example:\n * \n * (code)\n * var layout = new mxFastOrganicLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxFastOrganicLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxFastOrganicLayout.prototype = new mxGraphLayout();\nmxFastOrganicLayout.prototype.constructor = mxFastOrganicLayout;\n\n/**\n * Variable: useInputOrigin\n * \n * Specifies if the top left corner of the input cells should be the origin\n * of the layout result. Default is true.\n */\nmxFastOrganicLayout.prototype.useInputOrigin = true;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxFastOrganicLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxFastOrganicLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: forceConstant\n * \n * The force constant by which the attractive forces are divided and the\n * replusive forces are multiple by the square of. The value equates to the\n * average radius there is of free space around each node. Default is 50.\n */\nmxFastOrganicLayout.prototype.forceConstant = 50;\n\n/**\n * Variable: forceConstantSquared\n * \n * Cache of <forceConstant>^2 for performance.\n */\nmxFastOrganicLayout.prototype.forceConstantSquared = 0;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.minDistanceLimit = 2;\n\n/**\n * Variable: minDistanceLimit\n * \n * Minimal distance limit. Default is 2. Prevents of\n * dividing by zero.\n */\nmxFastOrganicLayout.prototype.maxDistanceLimit = 500;\n\n/**\n * Variable: minDistanceLimitSquared\n * \n * Cached version of <minDistanceLimit> squared.\n */\nmxFastOrganicLayout.prototype.minDistanceLimitSquared = 4;\n\n/**\n * Variable: initialTemp\n * \n * Start value of temperature. Default is 200.\n */\nmxFastOrganicLayout.prototype.initialTemp = 200;\n\n/**\n * Variable: temperature\n * \n * Temperature to limit displacement at later stages of layout.\n */\nmxFastOrganicLayout.prototype.temperature = 0;\n\n/**\n * Variable: maxIterations\n * \n * Total number of iterations to run the layout though.\n */\nmxFastOrganicLayout.prototype.maxIterations = 0;\n\n/**\n * Variable: iteration\n * \n * Current iteration count.\n */\nmxFastOrganicLayout.prototype.iteration = 0;\n\n/**\n * Variable: vertexArray\n * \n * An array of all vertices to be laid out.\n */\nmxFastOrganicLayout.prototype.vertexArray;\n\n/**\n * Variable: dispX\n * \n * An array of locally stored X co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispX;\n\n/**\n * Variable: dispY\n * \n * An array of locally stored Y co-ordinate displacements for the vertices.\n */\nmxFastOrganicLayout.prototype.dispY;\n\n/**\n * Variable: cellLocation\n * \n * An array of locally stored co-ordinate positions for the vertices.\n */\nmxFastOrganicLayout.prototype.cellLocation;\n\n/**\n * Variable: radius\n * \n * The approximate radius of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radius;\n\n/**\n * Variable: radiusSquared\n * \n * The approximate radius squared of each cell, nodes only.\n */\nmxFastOrganicLayout.prototype.radiusSquared;\n\n/**\n * Variable: isMoveable\n * \n * Array of booleans representing the movable states of the vertices.\n */\nmxFastOrganicLayout.prototype.isMoveable;\n\n/**\n * Variable: neighbours\n * \n * Local copy of cell neighbours.\n */\nmxFastOrganicLayout.prototype.neighbours;\n\n/**\n * Variable: indices\n * \n * Hashtable from cells to local indices.\n */\nmxFastOrganicLayout.prototype.indices;\n\n/**\n * Variable: allowedToRun\n * \n * Boolean flag that specifies if the layout is allowed to run. If this is\n * set to false, then the layout exits in the following iteration.\n */\nmxFastOrganicLayout.prototype.allowedToRun = true;\n\n/**\n * Function: isVertexIgnored\n * \n * Returns a boolean indicating if the given <mxCell> should be ignored as a\n * vertex. This returns true if the cell has no connections.\n * \n * Parameters:\n * \n * vertex - <mxCell> whose ignored state should be returned.\n */\nmxFastOrganicLayout.prototype.isVertexIgnored = function(vertex)\n{\n\treturn mxGraphLayout.prototype.isVertexIgnored.apply(this, arguments) ||\n\t\tthis.graph.getConnections(vertex).length == 0;\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>. This operates on all children of the\n * given parent where <isVertexIgnored> returns false.\n */\nmxFastOrganicLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tthis.vertexArray = [];\n\tvar cells = this.graph.getChildVertices(parent);\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (!this.isVertexIgnored(cells[i]))\n\t\t{\n\t\t\tthis.vertexArray.push(cells[i]);\n\t\t}\n\t}\n\t\n\tvar initialBounds = (this.useInputOrigin) ?\n\t\t\tthis.graph.getBoundingBoxFromGeometry(this.vertexArray) :\n\t\t\t\tnull;\n\tvar n = this.vertexArray.length;\n\n\tthis.indices = [];\n\tthis.dispX = [];\n\tthis.dispY = [];\n\tthis.cellLocation = [];\n\tthis.isMoveable = [];\n\tthis.neighbours = [];\n\tthis.radius = [];\n\tthis.radiusSquared = [];\n\n\tif (this.forceConstant < 0.001)\n\t{\n\t\tthis.forceConstant = 0.001;\n\t}\n\n\tthis.forceConstantSquared = this.forceConstant * this.forceConstant;\n\n\t// Create a map of vertices first. This is required for the array of\n\t// arrays called neighbours which holds, for each vertex, a list of\n\t// ints which represents the neighbours cells to that vertex as\n\t// the indices into vertexArray\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tvar vertex = this.vertexArray[i];\n\t\tthis.cellLocation[i] = [];\n\t\t\n\t\t// Set up the mapping from array indices to cells\n\t\tvar id = mxObjectIdentity.get(vertex);\n\t\tthis.indices[id] = i;\n\t\tvar bounds = this.getVertexBounds(vertex);\n\n\t\t// Set the X,Y value of the internal version of the cell to\n\t\t// the center point of the vertex for better positioning\n\t\tvar width = bounds.width;\n\t\tvar height = bounds.height;\n\t\t\n\t\t// Randomize (0, 0) locations\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\t\n\t\tthis.cellLocation[i][0] = x + width / 2.0;\n\t\tthis.cellLocation[i][1] = y + height / 2.0;\n\t\tthis.radius[i] = Math.min(width, height);\n\t\tthis.radiusSquared[i] = this.radius[i] * this.radius[i];\n\t}\n\n\t// Moves cell location back to top-left from center locations used in\n\t// algorithm, resetting the edge points is part of the transaction\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < n; i++)\n\t\t{\n\t\t\tthis.dispX[i] = 0;\n\t\t\tthis.dispY[i] = 0;\n\t\t\tthis.isMoveable[i] = this.isVertexMovable(this.vertexArray[i]);\n\n\t\t\t// Get lists of neighbours to all vertices, translate the cells\n\t\t\t// obtained in indices into vertexArray and store as an array\n\t\t\t// against the orginial cell index\n\t\t\tvar edges = this.graph.getConnections(this.vertexArray[i], parent);\n\t\t\tvar cells = this.graph.getOpposites(edges, this.vertexArray[i]);\n\t\t\tthis.neighbours[i] = [];\n\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(edges[j]);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \tthis.setEdgeStyleEnabled(edges[j], false);\n\t\t\t    }\n\n\t\t\t\t// Looks the cell up in the indices dictionary\n\t\t\t\tvar id = mxObjectIdentity.get(cells[j]);\n\t\t\t\tvar index = this.indices[id];\n\n\t\t\t\t// Check the connected cell in part of the vertex list to be\n\t\t\t\t// acted on by this layout\n\t\t\t\tif (index != null)\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = index;\n\t\t\t\t}\n\n\t\t\t\t// Else if index of the other cell doesn't correspond to\n\t\t\t\t// any cell listed to be acted upon in this layout. Set\n\t\t\t\t// the index to the value of this vertex (a dummy self-loop)\n\t\t\t\t// so the attraction force of the edge is not calculated\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.neighbours[i][j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.temperature = this.initialTemp;\n\n\t\t// If max number of iterations has not been set, guess it\n\t\tif (this.maxIterations == 0)\n\t\t{\n\t\t\tthis.maxIterations = 20 * Math.sqrt(n);\n\t\t}\n\t\t\n\t\t// Main iteration loop\n\t\tfor (this.iteration = 0; this.iteration < this.maxIterations; this.iteration++)\n\t\t{\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Calculate repulsive forces on all vertices\n\t\t\tthis.calcRepulsion();\n\n\t\t\t// Calculate attractive forces through edges\n\t\t\tthis.calcAttraction();\n\n\t\t\tthis.calcPositions();\n\t\t\tthis.reduceTemperature();\n\t\t}\n\n\t\tvar minx = null;\n\t\tvar miny = null;\n\t\t\n\t\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t\t{\n\t\t\tvar vertex = this.vertexArray[i];\n\t\t\t\n\t\t\tif (this.isVertexMovable(vertex))\n\t\t\t{\n\t\t\t\tvar bounds = this.getVertexBounds(vertex);\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tthis.cellLocation[i][0] -= bounds.width / 2.0;\n\t\t\t\t\tthis.cellLocation[i][1] -= bounds.height / 2.0;\n\t\t\t\t\t\n\t\t\t\t\tvar x = this.graph.snap(Math.round(this.cellLocation[i][0]));\n\t\t\t\t\tvar y = this.graph.snap(Math.round(this.cellLocation[i][1]));\n\t\t\t\t\t\n\t\t\t\t\tthis.setVertexLocation(vertex, x, y);\n\t\t\t\t\t\n\t\t\t\t\tif (minx == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminx = Math.min(minx, x);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (miny == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = y;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tminy = Math.min(miny, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Modifies the cloned geometries in-place. Not needed\n\t\t// to clone the geometries again as we're in the same\n\t\t// undoable change.\n\t\tvar dx = -(minx || 0) + 1;\n\t\tvar dy = -(miny || 0) + 1;\n\t\t\n\t\tif (initialBounds != null)\n\t\t{\n\t\t\tdx += initialBounds.x;\n\t\t\tdy += initialBounds.y;\n\t\t}\n\t\t\n\t\tthis.graph.moveCells(this.vertexArray, dx, dy);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: calcPositions\n * \n * Takes the displacements calculated for each cell and applies them to the\n * local cache of cell positions. Limits the displacement to the current\n * temperature.\n */\nmxFastOrganicLayout.prototype.calcPositions = function()\n{\n\tfor (var index = 0; index < this.vertexArray.length; index++)\n\t{\n\t\tif (this.isMoveable[index])\n\t\t{\n\t\t\t// Get the distance of displacement for this node for this\n\t\t\t// iteration\n\t\t\tvar deltaLength = Math.sqrt(this.dispX[index] * this.dispX[index] +\n\t\t\t\tthis.dispY[index] * this.dispY[index]);\n\n\t\t\tif (deltaLength < 0.001)\n\t\t\t{\n\t\t\t\tdeltaLength = 0.001;\n\t\t\t}\n\n\t\t\t// Scale down by the current temperature if less than the\n\t\t\t// displacement distance\n\t\t\tvar newXDisp = this.dispX[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\tvar newYDisp = this.dispY[index] / deltaLength\n\t\t\t\t* Math.min(deltaLength, this.temperature);\n\n\t\t\t// reset displacements\n\t\t\tthis.dispX[index] = 0;\n\t\t\tthis.dispY[index] = 0;\n\n\t\t\t// Update the cached cell locations\n\t\t\tthis.cellLocation[index][0] += newXDisp;\n\t\t\tthis.cellLocation[index][1] += newYDisp;\n\t\t}\n\t}\n};\n\n/**\n * Function: calcAttraction\n * \n * Calculates the attractive forces between all laid out nodes linked by\n * edges\n */\nmxFastOrganicLayout.prototype.calcAttraction = function()\n{\n\t// Check the neighbours of each vertex and calculate the attractive\n\t// force of the edge connecting them\n\tfor (var i = 0; i < this.vertexArray.length; i++)\n\t{\n\t\tfor (var k = 0; k < this.neighbours[i].length; k++)\n\t\t{\n\t\t\t// Get the index of the othe cell in the vertex array\n\t\t\tvar j = this.neighbours[i][k];\n\t\t\t\n\t\t\t// Do not proceed self-loops\n\t\t\tif (i != j &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\t// The distance between the nodes\n\t\t\t\tvar deltaLengthSquared = xDelta * xDelta + yDelta\n\t\t\t\t\t\t* yDelta - this.radiusSquared[i] - this.radiusSquared[j];\n\n\t\t\t\tif (deltaLengthSquared < this.minDistanceLimitSquared)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthSquared = this.minDistanceLimitSquared;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar deltaLength = Math.sqrt(deltaLengthSquared);\n\t\t\t\tvar force = (deltaLengthSquared) / this.forceConstant;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] -= displacementX;\n\t\t\t\tthis.dispY[i] -= displacementY;\n\t\t\t\t\n\t\t\t\tthis.dispX[j] += displacementX;\n\t\t\t\tthis.dispY[j] += displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: calcRepulsion\n * \n * Calculates the repulsive forces between all laid out nodes\n */\nmxFastOrganicLayout.prototype.calcRepulsion = function()\n{\n\tvar vertexCount = this.vertexArray.length;\n\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tfor (var j = i; j < vertexCount; j++)\n\t\t{\n\t\t\t// Exits if the layout is no longer allowed to run\n\t\t\tif (!this.allowedToRun)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (j != i &&\n\t\t\t\tthis.isMoveable[i] &&\n\t\t\t\tthis.isMoveable[j])\n\t\t\t{\n\t\t\t\tvar xDelta = this.cellLocation[i][0] - this.cellLocation[j][0];\n\t\t\t\tvar yDelta = this.cellLocation[i][1] - this.cellLocation[j][1];\n\n\t\t\t\tif (xDelta == 0)\n\t\t\t\t{\n\t\t\t\t\txDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (yDelta == 0)\n\t\t\t\t{\n\t\t\t\t\tyDelta = 0.01 + Math.random();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Distance between nodes\n\t\t\t\tvar deltaLength = Math.sqrt((xDelta * xDelta)\n\t\t\t\t\t\t+ (yDelta * yDelta));\n\t\t\t\tvar deltaLengthWithRadius = deltaLength - this.radius[i]\n\t\t\t\t\t\t- this.radius[j];\n\n\t\t\t\tif (deltaLengthWithRadius > this.maxDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\t// Ignore vertices too far apart\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (deltaLengthWithRadius < this.minDistanceLimit)\n\t\t\t\t{\n\t\t\t\t\tdeltaLengthWithRadius = this.minDistanceLimit;\n\t\t\t\t}\n\n\t\t\t\tvar force = this.forceConstantSquared / deltaLengthWithRadius;\n\n\t\t\t\tvar displacementX = (xDelta / deltaLength) * force;\n\t\t\t\tvar displacementY = (yDelta / deltaLength) * force;\n\t\t\t\t\n\t\t\t\tthis.dispX[i] += displacementX;\n\t\t\t\tthis.dispY[i] += displacementY;\n\n\t\t\t\tthis.dispX[j] -= displacementX;\n\t\t\t\tthis.dispY[j] -= displacementY;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reduceTemperature\n * \n * Reduces the temperature of the layout from an initial setting in a linear\n * fashion to zero.\n */\nmxFastOrganicLayout.prototype.reduceTemperature = function()\n{\n\tthis.temperature = this.initialTemp * (1.0 - this.iteration / this.maxIterations);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCircleLayout\n * \n * Extends <mxGraphLayout> to implement a circluar layout for a given radius.\n * The vertices do not need to be connected for this layout to work and all\n * connections between vertices are not taken into account.\n * \n * Example:\n * \n * (code)\n * var layout = new mxCircleLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCircleLayout\n *\n * Constructs a new circular layout for the specified radius.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n * radius - Optional radius as an int. Default is 100.\n */\nfunction mxCircleLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.radius = (radius != null) ? radius : 100;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCircleLayout.prototype = new mxGraphLayout();\nmxCircleLayout.prototype.constructor = mxCircleLayout;\n\n/**\n * Variable: radius\n * \n * Integer specifying the size of the radius. Default is 100.\n */\nmxCircleLayout.prototype.radius = null;\n\n/**\n * Variable: moveCircle\n * \n * Boolean specifying if the circle should be moved to the top,\n * left corner specified by <x0> and <y0>. Default is false.\n */\nmxCircleLayout.prototype.moveCircle = false;\n\n/**\n * Variable: x0\n * \n * Integer specifying the left coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.x0 = 0;\n\n/**\n * Variable: y0\n * \n * Integer specifying the top coordinate of the circle.\n * Default is 0.\n */\nmxCircleLayout.prototype.y0 = 0;\n\n/**\n * Variable: resetEdges\n * \n * Specifies if all edge points of traversed edges should be removed.\n * Default is true.\n */\nmxCircleLayout.prototype.resetEdges = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxCircleLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxCircleLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\t// Gets all vertices inside the parent and finds\n\t\t// the maximum dimension of the largest vertex\n\t\tvar max = 0;\n\t\tvar top = null;\n\t\tvar left = null;\n\t\tvar vertices = [];\n\t\tvar childCount = model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(cell);\n\t\t\t\tvar bounds = this.getVertexBounds(cell);\n\t\t\t\t\n\t\t\t\tif (top == null)\n\t\t\t\t{\n\t\t\t\t\ttop = bounds.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttop = Math.min(top, bounds.y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (left == null)\n\t\t\t\t{\n\t\t\t\t\tleft = bounds.x;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleft = Math.min(left, bounds.x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmax = Math.max(max, Math.max(bounds.width, bounds.height));\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\t// Resets the points on the traversed edge\n\t\t\t\tif (this.resetEdges)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.resetEdge(cell);\n\t\t\t\t}\n\n\t\t\t    if (this.disableEdgeStyle)\n\t\t\t    {\n\t\t\t    \t\tthis.setEdgeStyleEnabled(cell, false);\n\t\t\t    }\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar r = this.getRadius(vertices.length, max);\n\n\t\t// Moves the circle to the specified origin\n\t\tif (this.moveCircle)\n\t\t{\n\t\t\tleft = this.x0;\n\t\t\ttop = this.y0;\n\t\t}\n\t\t\n\t\tthis.circle(vertices, r, left, top);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: getRadius\n * \n * Returns the radius to be used for the given vertex count. Max is the maximum\n * width or height of all vertices in the layout.\n */\nmxCircleLayout.prototype.getRadius = function(count, max)\n{\n\treturn Math.max(count * max / Math.PI, this.radius);\n};\n\n/**\n * Function: circle\n * \n * Executes the circular layout for the specified array\n * of vertices and the given radius. This is called from\n * <execute>.\n */\nmxCircleLayout.prototype.circle = function(vertices, r, left, top)\n{\n\tvar vertexCount = vertices.length;\n\tvar phi = 2 * Math.PI / vertexCount;\n\t\n\tfor (var i = 0; i < vertexCount; i++)\n\t{\n\t\tif (this.isVertexMovable(vertices[i]))\n\t\t{\n\t\t\tthis.setVertexLocation(vertices[i],\n\t\t\t\tMath.round(left + r + r * Math.sin(i * phi)),\n\t\t\t\tMath.round(top + r + r * Math.cos(i * phi)));\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxParallelEdgeLayout\n * \n * Extends <mxGraphLayout> for arranging parallel edges. This layout works\n * on edges for all pairs of vertices where there is more than one edge\n * connecting the latter.\n * \n * Example:\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * To run the layout for the parallel edges of a changed edge only, the\n * following code can be used.\n * \n * (code)\n * var layout = new mxParallelEdgeLayout(graph);\n * \n * graph.addListener(mxEvent.CELL_CONNECTED, function(sender, evt)\n * {\n *   var model = graph.getModel();\n *   var edge = evt.getProperty('edge');\n *   var src = model.getTerminal(edge, true);\n *   var trg = model.getTerminal(edge, false);\n *   \n *   layout.isEdgeIgnored = function(edge2)\n *   {\n *     var src2 = model.getTerminal(edge2, true);\n *     var trg2 = model.getTerminal(edge2, false);\n *     \n *     return !(model.isEdge(edge2) && ((src == src2 && trg == trg2) || (src == trg2 && trg == src2)));\n *   };\n *   \n *   layout.execute(graph.getDefaultParent());\n * });\n * (end)\n * \n * Constructor: mxCompactTreeLayout\n * \n * Constructs a new fast organic layout for the specified graph.\n */\nfunction mxParallelEdgeLayout(graph)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxParallelEdgeLayout.prototype = new mxGraphLayout();\nmxParallelEdgeLayout.prototype.constructor = mxParallelEdgeLayout;\n\n/**\n * Variable: spacing\n * \n * Defines the spacing between the parallels. Default is 20.\n */\nmxParallelEdgeLayout.prototype.spacing = 20;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxParallelEdgeLayout.prototype.execute = function(parent)\n{\n\tvar lookup = this.findParallels(parent);\n\t\n\tthis.graph.model.beginUpdate();\t\n\ttry\n\t{\n\t\tfor (var i in lookup)\n\t\t{\n\t\t\tvar parallels = lookup[i];\n\n\t\t\tif (parallels.length > 1)\n\t\t\t{\n\t\t\t\tthis.layout(parallels);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.model.endUpdate();\n\t}\n};\n\n/**\n * Function: findParallels\n * \n * Finds the parallel edges in the given parent.\n */\nmxParallelEdgeLayout.prototype.findParallels = function(parent)\n{\n\tvar model = this.graph.getModel();\n\tvar lookup = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (!this.isEdgeIgnored(child))\n\t\t{\n\t\t\tvar id = this.getEdgeId(child);\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tif (lookup[id] == null)\n\t\t\t\t{\n\t\t\t\t\tlookup[id] = [];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlookup[id].push(child);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn lookup;\n};\n\n/**\n * Function: getEdgeId\n * \n * Returns a unique ID for the given edge. The id is independent of the\n * edge direction and is built using the visible terminal of the given\n * edge.\n */\nmxParallelEdgeLayout.prototype.getEdgeId = function(edge)\n{\n\tvar view = this.graph.getView();\n\t\n\t// Cannot used cached visible terminal because this could be triggered in BEFORE_UNDO\n\tvar src = view.getVisibleTerminal(edge, true);\n\tvar trg = view.getVisibleTerminal(edge, false);\n\n\tif (src != null && trg != null)\n\t{\n\t\tsrc = mxObjectIdentity.get(src);\n\t\ttrg = mxObjectIdentity.get(trg);\n\t\t\n\t\treturn (src > trg) ? trg + '-' + src : src + '-' + trg;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: layout\n * \n * Lays out the parallel edges in the given array.\n */\nmxParallelEdgeLayout.prototype.layout = function(parallels)\n{\n\tvar edge = parallels[0];\n\tvar view = this.graph.getView();\n\tvar model = this.graph.getModel();\n\tvar src = model.getGeometry(view.getVisibleTerminal(edge, true));\n\tvar trg = model.getGeometry(view.getVisibleTerminal(edge, false));\n\t\n\t// Routes multiple loops\n\tif (src == trg)\n\t{\n\t\tvar x0 = src.x + src.width + this.spacing;\n\t\tvar y0 = src.y + src.height / 2;\n\n\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t{\n\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\tx0 += this.spacing;\n\t\t}\n\t}\n\telse if (src != null && trg != null)\n\t{\n\t\t// Routes parallel edges\n\t\tvar scx = src.x + src.width / 2;\n\t\tvar scy = src.y + src.height / 2;\n\t\t\n\t\tvar tcx = trg.x + trg.width / 2;\n\t\tvar tcy = trg.y + trg.height / 2;\n\t\t\n\t\tvar dx = tcx - scx;\n\t\tvar dy = tcy - scy;\n\n\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\n\t\tif (len > 0)\n\t\t{\n\t\t\tvar x0 = scx + dx / 2;\n\t\t\tvar y0 = scy + dy / 2;\n\t\t\t\n\t\t\tvar nx = dy * this.spacing / len;\n\t\t\tvar ny = dx * this.spacing / len;\n\t\t\t\n\t\t\tx0 += nx * (parallels.length - 1) / 2;\n\t\t\ty0 -= ny * (parallels.length - 1) / 2;\n\t\n\t\t\tfor (var i = 0; i < parallels.length; i++)\n\t\t\t{\n\t\t\t\tthis.route(parallels[i], x0, y0);\n\t\t\t\tx0 -= nx;\n\t\t\t\ty0 += ny;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: route\n * \n * Routes the given edge via the given point.\n */\nmxParallelEdgeLayout.prototype.route = function(edge, x, y)\n{\n\tif (this.graph.isCellMovable(edge))\n\t{\n\t\tthis.setEdgePoints(edge, [new mxPoint(x, y)]);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCompositeLayout\n * \n * Allows to compose multiple layouts into a single layout. The master layout\n * is the layout that handles move operations if another layout than the first\n * element in <layouts> should be used. The <master> layout is not executed as\n * the code assumes that it is part of <layouts>.\n * \n * Example:\n * (code)\n * var first = new mxFastOrganicLayout(graph);\n * var second = new mxParallelEdgeLayout(graph);\n * var layout = new mxCompositeLayout(graph, [first, second], first);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxCompositeLayout\n *\n * Constructs a new layout using the given layouts. The graph instance is\n * required for creating the transaction that contains all layouts.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * layouts - Array of <mxGraphLayouts>.\n * master - Optional layout that handles moves. If no layout is given then\n * the first layout of the above array is used to handle moves.\n */\nfunction mxCompositeLayout(graph, layouts, master)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.layouts = layouts;\n\tthis.master = master;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxCompositeLayout.prototype = new mxGraphLayout();\nmxCompositeLayout.prototype.constructor = mxCompositeLayout;\n\t\n/**\n * Variable: layouts\n * \n * Holds the array of <mxGraphLayouts> that this layout contains.\n */\nmxCompositeLayout.prototype.layouts = null;\n\n/**\n * Variable: layouts\n * \n * Reference to the <mxGraphLayouts> that handles moves. If this is null\n * then the first layout in <layouts> is used.\n */\nmxCompositeLayout.prototype.master = null;\n\n/**\n * Function: moveCell\n * \n * Implements <mxGraphLayout.moveCell> by calling move on <master> or the first\n * layout in <layouts>.\n */\nmxCompositeLayout.prototype.moveCell = function(cell, x, y)\n{\n\tif (this.master != null)\n\t{\n\t\tthis.master.move.apply(this.master, arguments);\n\t}\n\telse\n\t{\n\t\tthis.layouts[0].move.apply(this.layouts[0], arguments);\n\t}\n};\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute> by executing all <layouts> in a\n * single transaction.\n */\nmxCompositeLayout.prototype.execute = function(parent)\n{\n\tvar model = this.graph.getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < this.layouts.length; i++)\n\t\t{\n\t\t\tthis.layouts[i].execute.apply(this.layouts[i], arguments);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeLabelLayout\n * \n * Extends <mxGraphLayout> to implement an edge label layout. This layout\n * makes use of cell states, which means the graph must be validated in\n * a graph view (so that the label bounds are available) before this layout\n * can be executed.\n * \n * Example:\n * \n * (code)\n * var layout = new mxEdgeLabelLayout(graph);\n * layout.execute(graph.getDefaultParent());\n * (end)\n * \n * Constructor: mxEdgeLabelLayout\n *\n * Constructs a new edge label layout.\n *\n * Arguments:\n * \n * graph - <mxGraph> that contains the cells.\n */\nfunction mxEdgeLabelLayout(graph, radius)\n{\n\tmxGraphLayout.call(this, graph);\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxEdgeLabelLayout.prototype = new mxGraphLayout();\nmxEdgeLabelLayout.prototype.constructor = mxEdgeLabelLayout;\n\n/**\n * Function: execute\n * \n * Implements <mxGraphLayout.execute>.\n */\nmxEdgeLabelLayout.prototype.execute = function(parent)\n{\n\tvar view = this.graph.view;\n\tvar model = this.graph.getModel();\n\t\n\t// Gets all vertices and edges inside the parent\n\tvar edges = [];\n\tvar vertices = [];\n\tvar childCount = model.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar cell = model.getChildAt(parent, i);\n\t\tvar state = view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tif (!this.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\tvertices.push(state);\n\t\t\t}\n\t\t\telse if (!this.isEdgeIgnored(cell))\n\t\t\t{\n\t\t\t\tedges.push(state);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.placeLabels(vertices, edges);\n};\n\n/**\n * Function: placeLabels\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.placeLabels = function(v, e)\n{\n\tvar model = this.graph.getModel();\n\t\n\t// Moves the vertices to build a circle. Makes sure the\n\t// radius is large enough for the vertices to not\n\t// overlap\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = 0; i < e.length; i++)\n\t\t{\n\t\t\tvar edge = e[i];\n\t\t\t\n\t\t\tif (edge != null && edge.text != null &&\n\t\t\t\tedge.text.boundingBox != null)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < v.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar vertex = v[j];\n\t\t\t\t\t\n\t\t\t\t\tif (vertex != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.avoid(edge, vertex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: avoid\n * \n * Places the labels of the given edges.\n */\nmxEdgeLabelLayout.prototype.avoid = function(edge, vertex)\n{\n\tvar model = this.graph.getModel();\n\tvar labRect = edge.text.boundingBox;\n\t\n\tif (mxUtils.intersects(labRect, vertex))\n\t{\n\t\tvar dy1 = -labRect.y - labRect.height + vertex.y;\n\t\tvar dy2 = -labRect.y + vertex.y + vertex.height;\n\t\t\n\t\tvar dy = (Math.abs(dy1) < Math.abs(dy2)) ? dy1 : dy2;\n\t\t\n\t\tvar dx1 = -labRect.x - labRect.width + vertex.x;\n\t\tvar dx2 = -labRect.x + vertex.x + vertex.width;\n\t\n\t\tvar dx = (Math.abs(dx1) < Math.abs(dx2)) ? dx1 : dx2;\n\t\t\n\t\tif (Math.abs(dx) < Math.abs(dy))\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\n\t\tvar g = model.getGeometry(edge.cell);\n\t\t\n\t\tif (g != null)\n\t\t{\n\t\t\tg = g.clone();\n\t\t\t\n\t\t\tif (g.offset != null)\n\t\t\t{\n\t\t\t\tg.offset.x += dx;\n\t\t\t\tg.offset.y += dy;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\t\n\t\t\tmodel.setGeometry(edge.cell, g);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphAbstractHierarchyCell\n * \n * An abstraction of an internal hierarchy node or edge\n * \n * Constructor: mxGraphAbstractHierarchyCell\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxGraphAbstractHierarchyCell()\n{\n\tthis.x = [];\n\tthis.y = [];\n\tthis.temp = [];\n};\n\n/**\n * Variable: maxRank\n * \n * The maximum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.maxRank = -1;\n\n/**\n * Variable: minRank\n * \n * The minimum rank this cell occupies. Default is -1.\n */\nmxGraphAbstractHierarchyCell.prototype.minRank = -1;\n\n/**\n * Variable: x\n * \n * The x position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.x = null;\n\n/**\n * Variable: y\n * \n * The y position of this cell for each layer it occupies\n */\nmxGraphAbstractHierarchyCell.prototype.y = null;\n\n/**\n * Variable: width\n * \n * The width of this cell\n */\nmxGraphAbstractHierarchyCell.prototype.width = 0;\n\n/**\n * Variable: height\n * \n * The height of this cell\n */\nmxGraphAbstractHierarchyCell.prototype.height = 0;\n\n/**\n * Variable: nextLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.nextLayerConnectedCells = null;\n\n/**\n * Variable: previousLayerConnectedCells\n * \n * A cached version of the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.previousLayerConnectedCells = null;\n\n/**\n * Variable: temp\n * \n * Temporary variable for general use. Generally, try to avoid\n * carrying information between stages. Currently, the longest\n * path layering sets temp to the rank position in fixRanks()\n * and the crossing reduction uses this. This meant temp couldn't\n * be used for hashing the nodes in the model dfs and so hashCode\n * was created\n */\nmxGraphAbstractHierarchyCell.prototype.temp = null;\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphAbstractHierarchyCell.prototype.getNextLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphAbstractHierarchyCell.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: isEdge\n * \n * Returns whether or not this cell is an edge\n */\nmxGraphAbstractHierarchyCell.prototype.isEdge = function()\n{\n\treturn false;\n};\n\n/**\n * Function: isVertex\n * \n * Returns whether or not this cell is a node\n */\nmxGraphAbstractHierarchyCell.prototype.isVertex = function()\n{\n\treturn false;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn null;\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\treturn null;\n};\n\n/**\n * Function: setX\n * \n * Set the value of x for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setX = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.x[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.x[layer - this.minRank - 1] = value;\n\t}\n};\n\n/**\n * Function: getX\n * \n * Gets the value of x on the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.getX = function(layer)\n{\n\tif (this.isVertex())\n\t{\n\t\treturn this.x[0];\n\t}\n\telse if (this.isEdge())\n\t{\n\t\treturn this.x[layer - this.minRank - 1];\n\t}\n\n\treturn 0.0;\n};\n\n/**\n * Function: setY\n * \n * Set the value of y for the specified layer\n */\nmxGraphAbstractHierarchyCell.prototype.setY = function(layer, value)\n{\n\tif (this.isVertex())\n\t{\n\t\tthis.y[0] = value;\n\t}\n\telse if (this.isEdge())\n\t{\n\t\tthis.y[layer -this. minRank - 1] = value;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyNode\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyNode\n *\n * Constructs an internal node to represent the specified real graph cell\n *\n * Arguments:\n * \n * cell - the real graph cell this node represents\n */\nfunction mxGraphHierarchyNode(cell)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.cell = cell;\n\tthis.id = mxObjectIdentity.get(cell);\n\tthis.connectsAsTarget = [];\n\tthis.connectsAsSource = [];\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyNode.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyNode.prototype.constructor = mxGraphHierarchyNode;\n\n/**\n * Variable: cell\n * \n * The graph cell this object represents.\n */\nmxGraphHierarchyNode.prototype.cell = null;\n\n/**\n * Variable: id\n * \n * The object identity of the wrapped cell\n */\nmxGraphHierarchyNode.prototype.id = null;\n\n/**\n * Variable: connectsAsTarget\n * \n * Collection of hierarchy edges that have this node as a target\n */\nmxGraphHierarchyNode.prototype.connectsAsTarget = null;\n\n/**\n * Variable: connectsAsSource\n * \n * Collection of hierarchy edges that have this node as a source\n */\nmxGraphHierarchyNode.prototype.connectsAsSource = null;\n\n/**\n * Variable: hashCode\n * \n * Assigns a unique hashcode for each node. Used by the model dfs instead\n * of copying HashSets\n */\nmxGraphHierarchyNode.prototype.hashCode = false;\n\n/**\n * Function: getRankValue\n * \n * Returns the integer value of the layer that this node resides in\n */\nmxGraphHierarchyNode.prototype.getRankValue = function(layer)\n{\n\treturn this.maxRank;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyNode.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\tthis.nextLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsTarget.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsTarget[i];\n\n\t\t\tif (edge.maxRank == -1 || edge.maxRank == layer + 1)\n\t\t\t{\n\t\t\t\t// Either edge is not in any rank or\n\t\t\t\t// no dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.nextLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.nextLayerConnectedCells[0];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyNode.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\t\tthis.previousLayerConnectedCells[0] = [];\n\t\t\n\t\tfor (var i = 0; i < this.connectsAsSource.length; i++)\n\t\t{\n\t\t\tvar edge = this.connectsAsSource[i];\n\n\t\t\tif (edge.minRank == -1 || edge.minRank == layer - 1)\n\t\t\t{\n\t\t\t\t// No dummy nodes in edge, add node of other side of edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Edge spans at least two layers, add edge\n\t\t\t\tthis.previousLayerConnectedCells[0].push(edge);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[0];\n};\n\n/**\n * Function: isVertex\n * \n * Returns true.\n */\nmxGraphHierarchyNode.prototype.isVertex = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[0];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyNode.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[0] = value;\n};\n\n/**\n * Function: isAncestor\n */\nmxGraphHierarchyNode.prototype.isAncestor = function(otherNode)\n{\n\t// Firstly, the hash code of this node needs to be shorter than the\n\t// other node\n\tif (otherNode != null && this.hashCode != null && otherNode.hashCode != null\n\t\t\t&& this.hashCode.length < otherNode.hashCode.length)\n\t{\n\t\tif (this.hashCode == otherNode.hashCode)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif (this.hashCode == null || this.hashCode == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t// Secondly, this hash code must match the start of the other\n\t\t// node's hash code. Arrays.equals cannot be used here since\n\t\t// the arrays are different length, and we do not want to\n\t\t// perform another array copy.\n\t\tfor (var i = 0; i < this.hashCode.length; i++)\n\t\t{\n\t\t\tif (this.hashCode[i] != otherNode.hashCode[i])\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the core vertex associated with this wrapper\n */\nmxGraphHierarchyNode.prototype.getCoreCell = function()\n{\n\treturn this.cell;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyEdge\n * \n * An abstraction of a hierarchical edge for the hierarchy layout\n * \n * Constructor: mxGraphHierarchyEdge\n *\n * Constructs a hierarchy edge\n *\n * Arguments:\n * \n * edges - a list of real graph edges this abstraction represents\n */\nfunction mxGraphHierarchyEdge(edges)\n{\n\tmxGraphAbstractHierarchyCell.apply(this, arguments);\n\tthis.edges = edges;\n\tthis.ids = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.ids.push(mxObjectIdentity.get(edges[i]));\n\t}\n};\n\n/**\n * Extends mxGraphAbstractHierarchyCell.\n */\nmxGraphHierarchyEdge.prototype = new mxGraphAbstractHierarchyCell();\nmxGraphHierarchyEdge.prototype.constructor = mxGraphHierarchyEdge;\n\n/**\n * Variable: edges\n * \n * The graph edge(s) this object represents. Parallel edges are all grouped\n * together within one hierarchy edge.\n */\nmxGraphHierarchyEdge.prototype.edges = null;\n\n/**\n * Variable: ids\n * \n * The object identities of the wrapped cells\n */\nmxGraphHierarchyEdge.prototype.ids = null;\n\n/**\n * Variable: source\n * \n * The node this edge is sourced at\n */\nmxGraphHierarchyEdge.prototype.source = null;\n\n/**\n * Variable: target\n * \n * The node this edge targets\n */\nmxGraphHierarchyEdge.prototype.target = null;\n\n/**\n * Variable: isReversed\n * \n * Whether or not the direction of this edge has been reversed\n * internally to create a DAG for the hierarchical layout\n */\nmxGraphHierarchyEdge.prototype.isReversed = false;\n\n/**\n * Function: invert\n * \n * Inverts the direction of this internal edge(s)\n */\nmxGraphHierarchyEdge.prototype.invert = function(layer)\n{\n\tvar temp = this.source;\n\tthis.source = this.target;\n\tthis.target = temp;\n\tthis.isReversed = !this.isReversed;\n};\n\n/**\n * Function: getNextLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer up\n */\nmxGraphHierarchyEdge.prototype.getNextLayerConnectedCells = function(layer)\n{\n\tif (this.nextLayerConnectedCells == null)\n\t{\n\t\tthis.nextLayerConnectedCells = [];\n\t\t\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.nextLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == this.temp.length - 1)\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this.source);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.nextLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn this.nextLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: getPreviousLayerConnectedCells\n * \n * Returns the cells this cell connects to on the next layer down\n */\nmxGraphHierarchyEdge.prototype.getPreviousLayerConnectedCells = function(layer)\n{\n\tif (this.previousLayerConnectedCells == null)\n\t{\n\t\tthis.previousLayerConnectedCells = [];\n\n\t\tfor (var i = 0; i < this.temp.length; i++)\n\t\t{\n\t\t\tthis.previousLayerConnectedCells[i] = [];\n\t\t\t\n\t\t\tif (i == 0)\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this.target);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.previousLayerConnectedCells[i].push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.previousLayerConnectedCells[layer - this.minRank - 1];\n};\n\n/**\n * Function: isEdge\n * \n * Returns true.\n */\nmxGraphHierarchyEdge.prototype.isEdge = function()\n{\n\treturn true;\n};\n\n/**\n * Function: getGeneralPurposeVariable\n * \n * Gets the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.getGeneralPurposeVariable = function(layer)\n{\n\treturn this.temp[layer - this.minRank - 1];\n};\n\n/**\n * Function: setGeneralPurposeVariable\n * \n * Set the value of temp for the specified layer\n */\nmxGraphHierarchyEdge.prototype.setGeneralPurposeVariable = function(layer, value)\n{\n\tthis.temp[layer - this.minRank - 1] = value;\n};\n\n/**\n * Function: getCoreCell\n * \n * Gets the first core edge associated with this wrapper\n */\nmxGraphHierarchyEdge.prototype.getCoreCell = function()\n{\n\tif (this.edges != null && this.edges.length > 0)\n\t{\n\t\treturn this.edges[0];\n\t}\n\t\n\treturn null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHierarchyModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxGraphHierarchyModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxGraphHierarchyModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxGraphHierarchyModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxGraphHierarchyModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxGraphHierarchyModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxGraphHierarchyModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxGraphHierarchyModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxGraphHierarchyModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxGraphHierarchyModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxGraphHierarchyModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxGraphHierarchyModel.prototype.tightenToSource = false;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxGraphHierarchyModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxGraphHierarchyModel.prototype.initialRank = function()\n{\n\tvar startNodes = [];\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = this.SOURCESCANSTARTRANK;\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\t\t\tthis.maxRank = Math.min(this.maxRank, minimumLayer);\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] -= this.maxRank;\n\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n\tfor ( var i = 0; i < startNodesCopy.length; i++)\n\t{\n\t\tvar internalNode = startNodesCopy[i];\n\t\tvar currentMaxLayer = 0;\n\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n\n\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[j];\n\t\t\tvar otherNode = internalEdge.target;\n\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n\t\t\t\t\totherNode.temp[0] + 1);\n\t\t\tcurrentMaxLayer = internalNode.temp[0];\n\t\t}\n\t}\n\t\n\t// Reset the maxRank to that which would be expected for a from-sink\n\t// scan\n\tthis.maxRank = this.SOURCESCANSTARTRANK - this.maxRank;\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxGraphHierarchyModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxGraphHierarchyModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxGraphHierarchyModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneModel\n *\n * Internal model of a hierarchical graph. This model stores nodes and edges\n * equivalent to the real graph nodes and edges, but also stores the rank of the\n * cells, the order within the ranks and the new candidate locations of cells.\n * The internal model also reverses edge direction were appropriate , ignores\n * self-loop and groups parallels together under one edge object.\n *\n * Constructor: mxSwimlaneModel\n *\n * Creates an internal ordered graph model using the vertices passed in. If\n * there are any, leftward edge need to be inverted in the internal model\n *\n * Arguments:\n *\n * graph - the facade describing the graph to be operated on\n * vertices - the vertices for this hierarchy\n * ordered - whether or not the vertices are already ordered\n * deterministic - whether or not this layout should be deterministic on each\n * tightenToSource - whether or not to tighten vertices towards the sources\n * scanRanksFromSinks - Whether rank assignment is from the sinks or sources.\n * usage\n */\nfunction mxSwimlaneModel(layout, vertices, roots, parent, tightenToSource)\n{\n\tvar graph = layout.getGraph();\n\tthis.tightenToSource = tightenToSource;\n\tthis.roots = roots;\n\tthis.parent = parent;\n\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly\n\tthis.vertexMapper = new mxDictionary();\n\tthis.edgeMapper = new mxDictionary();\n\tthis.maxRank = 0;\n\tvar internalVertices = [];\n\n\tif (vertices == null)\n\t{\n\t\tvertices = this.graph.getChildVertices(parent);\n\t}\n\n\tthis.maxRank = this.SOURCESCANSTARTRANK;\n\t// map of cells to internal cell needed for second run through\n\t// to setup the sink of edges correctly. Guess size by number\n\t// of edges is roughly same as number of vertices.\n\tthis.createInternalCells(layout, vertices, internalVertices);\n\n\t// Go through edges set their sink values. Also check the\n\t// ordering if and invert edges if necessary\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tvar edges = internalVertices[i].connectsAsSource;\n\n\t\tfor (var j = 0; j < edges.length; j++)\n\t\t{\n\t\t\tvar internalEdge = edges[j];\n\t\t\tvar realEdges = internalEdge.edges;\n\n\t\t\t// Only need to process the first real edge, since\n\t\t\t// all the edges connect to the same other vertex\n\t\t\tif (realEdges != null && realEdges.length > 0)\n\t\t\t{\n\t\t\t\tvar realEdge = realEdges[0];\n\t\t\t\tvar targetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\trealEdge, false);\n\t\t\t\tvar internalTargetCell = this.vertexMapper.get(targetCell);\n\n\t\t\t\tif (internalVertices[i] == internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\t// If there are parallel edges going between two vertices and not all are in the same direction\n\t\t\t\t\t// you can have navigated across one direction when doing the cycle reversal that isn't the same\n\t\t\t\t\t// direction as the first real edge in the array above. When that happens the if above catches\n\t\t\t\t\t// that and we correct the target cell before continuing.\n\t\t\t\t\t// This branch only detects this single case\n\t\t\t\t\ttargetCell = layout.getVisibleTerminal(\n\t\t\t\t\t\t\trealEdge, true);\n\t\t\t\t\tinternalTargetCell = this.vertexMapper.get(targetCell);\n\t\t\t\t}\n\n\t\t\t\tif (internalTargetCell != null\n\t\t\t\t\t\t&& internalVertices[i] != internalTargetCell)\n\t\t\t\t{\n\t\t\t\t\tinternalEdge.target = internalTargetCell;\n\n\t\t\t\t\tif (internalTargetCell.connectsAsTarget.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.indexOf(internalTargetCell.connectsAsTarget, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalTargetCell.connectsAsTarget.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Use the temp variable in the internal nodes to mark this\n\t\t// internal vertex as having been visited.\n\t\tinternalVertices[i].temp[0] = 1;\n\t}\n};\n\n/**\n * Variable: maxRank\n *\n * Stores the largest rank number allocated\n */\nmxSwimlaneModel.prototype.maxRank = null;\n\n/**\n * Variable: vertexMapper\n *\n * Map from graph vertices to internal model nodes.\n */\nmxSwimlaneModel.prototype.vertexMapper = null;\n\n/**\n * Variable: edgeMapper\n *\n * Map from graph edges to internal model edges\n */\nmxSwimlaneModel.prototype.edgeMapper = null;\n\n/**\n * Variable: ranks\n *\n * Mapping from rank number to actual rank\n */\nmxSwimlaneModel.prototype.ranks = null;\n\n/**\n * Variable: roots\n *\n * Store of roots of this hierarchy model, these are real graph cells, not\n * internal cells\n */\nmxSwimlaneModel.prototype.roots = null;\n\n/**\n * Variable: parent\n *\n * The parent cell whose children are being laid out\n */\nmxSwimlaneModel.prototype.parent = null;\n\n/**\n * Variable: dfsCount\n *\n * Count of the number of times the ancestor dfs has been used.\n */\nmxSwimlaneModel.prototype.dfsCount = 0;\n\n/**\n * Variable: SOURCESCANSTARTRANK\n *\n * High value to start source layering scan rank value from.\n */\nmxSwimlaneModel.prototype.SOURCESCANSTARTRANK = 100000000;\n\n/**\n * Variable: tightenToSource\n *\n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneModel.prototype.tightenToSource = false;\n\n/**\n * Variable: ranksPerGroup\n *\n * An array of the number of ranks within each swimlane\n */\nmxSwimlaneModel.prototype.ranksPerGroup = null;\n\n/**\n * Function: createInternalCells\n *\n * Creates all edges in the internal model\n *\n * Parameters:\n *\n * layout - Reference to the <mxHierarchicalLayout> algorithm.\n * vertices - Array of <mxCells> that represent the vertices whom are to\n * have an internal representation created.\n * internalVertices - The array of <mxGraphHierarchyNodes> to have their\n * information filled in using the real vertices.\n */\nmxSwimlaneModel.prototype.createInternalCells = function(layout, vertices, internalVertices)\n{\n\tvar graph = layout.getGraph();\n\tvar swimlanes = layout.swimlanes;\n\n\t// Create internal edges\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tinternalVertices[i] = new mxGraphHierarchyNode(vertices[i]);\n\t\tthis.vertexMapper.put(vertices[i], internalVertices[i]);\n\t\tinternalVertices[i].swimlaneIndex = -1;\n\n\t\tfor (var ii = 0; ii < swimlanes.length; ii++)\n\t\t{\n\t\t\tif (graph.model.getParent(vertices[i]) == swimlanes[ii])\n\t\t\t{\n\t\t\t\tinternalVertices[i].swimlaneIndex = ii;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If the layout is deterministic, order the cells\n\t\t//List outgoingCells = graph.getNeighbours(vertices[i], deterministic);\n\t\tvar conns = layout.getEdges(vertices[i]);\n\t\tinternalVertices[i].connectsAsSource = [];\n\n\t\t// Create internal edges, but don't do any rank assignment yet\n\t\t// First use the information from the greedy cycle remover to\n\t\t// invert the leftward edges internally\n\t\tfor (var j = 0; j < conns.length; j++)\n\t\t{\n\t\t\tvar cell = layout.getVisibleTerminal(conns[j], false);\n\n\t\t\t// Looking for outgoing edges only\n\t\t\tif (cell != vertices[i] && layout.graph.model.isVertex(cell) &&\n\t\t\t\t\t!layout.isVertexIgnored(cell))\n\t\t\t{\n\t\t\t\t// We process all edge between this source and its targets\n\t\t\t\t// If there are edges going both ways, we need to collect\n\t\t\t\t// them all into one internal edges to avoid looping problems\n\t\t\t\t// later. We assume this direction (source -> target) is the \n\t\t\t\t// natural direction if at least half the edges are going in\n\t\t\t\t// that direction.\n\n\t\t\t\t// The check below for edges[0] being in the vertex mapper is\n\t\t\t\t// in case we've processed this the other way around\n\t\t\t\t// (target -> source) and the number of edges in each direction\n\t\t\t\t// are the same. All the graph edges will have been assigned to\n\t\t\t\t// an internal edge going the other way, so we don't want to \n\t\t\t\t// process them again\n\t\t\t\tvar undirectedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, false);\n\t\t\t\tvar directedEdges = layout.getEdgesBetween(vertices[i],\n\t\t\t\t\t\tcell, true);\n\t\t\t\t\n\t\t\t\tif (undirectedEdges != null &&\n\t\t\t\t\t\tundirectedEdges.length > 0 &&\n\t\t\t\t\t\tthis.edgeMapper.get(undirectedEdges[0]) == null &&\n\t\t\t\t\t\tdirectedEdges.length * 2 >= undirectedEdges.length)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = new mxGraphHierarchyEdge(undirectedEdges);\n\n\t\t\t\t\tfor (var k = 0; k < undirectedEdges.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar edge = undirectedEdges[k];\n\t\t\t\t\t\tthis.edgeMapper.put(edge, internalEdge);\n\n\t\t\t\t\t\t// Resets all point on the edge and disables the edge style\n\t\t\t\t\t\t// without deleting it from the cell style\n\t\t\t\t\t\tgraph.resetEdge(edge);\n\n\t\t\t\t\t    if (layout.disableEdgeStyle)\n\t\t\t\t\t    {\n\t\t\t\t\t    \tlayout.setEdgeStyleEnabled(edge, false);\n\t\t\t\t\t    \tlayout.setOrthogonalEdge(edge,true);\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tinternalEdge.source = internalVertices[i];\n\n\t\t\t\t\tif (mxUtils.indexOf(internalVertices[i].connectsAsSource, internalEdge) < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tinternalVertices[i].connectsAsSource.push(internalEdge);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Ensure temp variable is cleared from any previous use\n\t\tinternalVertices[i].temp[0] = 0;\n\t}\n};\n\n/**\n * Function: initialRank\n *\n * Basic determination of minimum layer ranking by working from from sources\n * or sinks and working through each node in the relevant edge direction.\n * Starting at the sinks is basically a longest path layering algorithm.\n*/\nmxSwimlaneModel.prototype.initialRank = function()\n{\n\tthis.ranksPerGroup = [];\n\t\n\tvar startNodes = [];\n\tvar seen = new Object();\n\n\tif (this.roots != null)\n\t{\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar internalNode = this.vertexMapper.get(this.roots[i]);\n\t\t\tthis.maxChainDfs(null, internalNode, null, seen, 0);\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tstartNodes.push(internalNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Calculate the lower and upper rank bounds of each swimlane\n\tvar lowerRank = [];\n\tvar upperRank = [];\n\t\n\tfor (var i = this.ranksPerGroup.length - 1; i >= 0; i--)\n\t{\n\t\tif (i == this.ranksPerGroup.length - 1)\n\t\t{\n\t\t\tlowerRank[i] = 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlowerRank[i] = upperRank[i+1] + 1;\n\t\t}\n\t\t\n\t\tupperRank[i] = lowerRank[i] + this.ranksPerGroup[i];\n\t}\n\t\n\tthis.maxRank = upperRank[0];\n\n\tvar internalNodes = this.vertexMapper.getValues();\n\t\n\tfor (var i=0; i < internalNodes.length; i++)\n\t{\n\t\t// Mark the node as not having had a layer assigned\n\t\tinternalNodes[i].temp[0] = -1;\n\t}\n\n\tvar startNodesCopy = startNodes.slice();\n\t\n\twhile (startNodes.length > 0)\n\t{\n\t\tvar internalNode = startNodes[0];\n\t\tvar layerDeterminingEdges;\n\t\tvar edgesToBeMarked;\n\n\t\tlayerDeterminingEdges = internalNode.connectsAsTarget;\n\t\tedgesToBeMarked = internalNode.connectsAsSource;\n\n\t\t// flag to keep track of whether or not all layer determining\n\t\t// edges have been scanned\n\t\tvar allEdgesScanned = true;\n\n\t\t// Work out the layer of this node from the layer determining\n\t\t// edges. The minimum layer number of any node connected by one of\n\t\t// the layer determining edges variable\n\t\tvar minimumLayer = upperRank[0];\n\n\t\tfor (var i = 0; i < layerDeterminingEdges.length; i++)\n\t\t{\n\t\t\tvar internalEdge = layerDeterminingEdges[i];\n\n\t\t\tif (internalEdge.temp[0] == 5270620)\n\t\t\t{\n\t\t\t\t// This edge has been scanned, get the layer of the\n\t\t\t\t// node on the other end\n\t\t\t\tvar otherNode = internalEdge.source;\n\t\t\t\tminimumLayer = Math.min(minimumLayer, otherNode.temp[0] - 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tallEdgesScanned = false;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// If all edge have been scanned, assign the layer, mark all\n\t\t// edges in the other direction and remove from the nodes list\n\t\tif (allEdgesScanned)\n\t\t{\n\t\t\tif (minimumLayer > upperRank[internalNode.swimlaneIndex])\n\t\t\t{\n\t\t\t\tminimumLayer = upperRank[internalNode.swimlaneIndex];\n\t\t\t}\n\n\t\t\tinternalNode.temp[0] = minimumLayer;\n\n\t\t\tif (edgesToBeMarked != null)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < edgesToBeMarked.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar internalEdge = edgesToBeMarked[i];\n\n\t\t\t\t\t// Assign unique stamp ( y/m/d/h )\n\t\t\t\t\tinternalEdge.temp[0] = 5270620;\n\n\t\t\t\t\t// Add node on other end of edge to LinkedList of\n\t\t\t\t\t// nodes to be analysed\n\t\t\t\t\tvar otherNode = internalEdge.target;\n\n\t\t\t\t\t// Only add node if it hasn't been assigned a layer\n\t\t\t\t\tif (otherNode.temp[0] == -1)\n\t\t\t\t\t{\n\t\t\t\t\t\tstartNodes.push(otherNode);\n\n\t\t\t\t\t\t// Mark this other node as neither being\n\t\t\t\t\t\t// unassigned nor assigned so it isn't\n\t\t\t\t\t\t// added to this list again, but it's\n\t\t\t\t\t\t// layer isn't used in any calculation.\n\t\t\t\t\t\totherNode.temp[0] = -2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstartNodes.shift();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Not all the edges have been scanned, get to the back of\n\t\t\t// the class and put the dunces cap on\n\t\t\tvar removedCell = startNodes.shift();\n\t\t\tstartNodes.push(internalNode);\n\n\t\t\tif (removedCell == internalNode && startNodes.length == 1)\n\t\t\t{\n\t\t\t\t// This is an error condition, we can't get out of\n\t\t\t\t// this loop. It could happen for more than one node\n\t\t\t\t// but that's a lot harder to detect. Log the error\n\t\t\t\t// TODO make log comment\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize the ranks down from their large starting value to place\n\t// at least 1 sink on layer 0\n//\tfor (var key in this.vertexMapper)\n//\t{\n//\t\tvar internalNode = this.vertexMapper[key];\n//\t\t// Mark the node as not having had a layer assigned\n//\t\tinternalNode.temp[0] -= this.maxRank;\n//\t}\n\t\n\t// Tighten the rank 0 nodes as far as possible\n//\tfor ( var i = 0; i < startNodesCopy.length; i++)\n//\t{\n//\t\tvar internalNode = startNodesCopy[i];\n//\t\tvar currentMaxLayer = 0;\n//\t\tvar layerDeterminingEdges = internalNode.connectsAsSource;\n//\n//\t\tfor ( var j = 0; j < layerDeterminingEdges.length; j++)\n//\t\t{\n//\t\t\tvar internalEdge = layerDeterminingEdges[j];\n//\t\t\tvar otherNode = internalEdge.target;\n//\t\t\tinternalNode.temp[0] = Math.max(currentMaxLayer,\n//\t\t\t\t\totherNode.temp[0] + 1);\n//\t\t\tcurrentMaxLayer = internalNode.temp[0];\n//\t\t}\n//\t}\n};\n\n/**\n * Function: maxChainDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of chains within groups.\n * Any cycles should be removed prior to running, but previously seen cells\n * are ignored.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * seen - a set of all nodes seen by this dfs\n * chainCount - the number of edges in the chain of vertices going through\n * the current swimlane\n */\nmxSwimlaneModel.prototype.maxChainDfs = function(parent, root, connectingEdge, seen, chainCount)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = mxCellPath.create(root.cell);\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvar slIndex = root.swimlaneIndex;\n\t\t\t\n\t\t\tif (this.ranksPerGroup[slIndex] == null || this.ranksPerGroup[slIndex] < chainCount)\n\t\t\t{\n\t\t\t\tthis.ranksPerGroup[slIndex] = chainCount;\n\t\t\t}\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), 0);\n\t\t\t\t}\n\t\t\t\telse if (root.swimlaneIndex == targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.maxChainDfs(root, targetNode, internalEdge, mxUtils.clone(seen, null , true), chainCount + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: fixRanks\n *\n * Fixes the layer assignments to the values stored in the nodes. Also needs\n * to create dummy nodes for edges that cross layers.\n */\nmxSwimlaneModel.prototype.fixRanks = function()\n{\n\tvar rankList = [];\n\tthis.ranks = [];\n\n\tfor (var i = 0; i < this.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tthis.ranks[i] = rankList[i];\n\t}\n\n\t// Perform a DFS to obtain an initial ordering for each rank.\n\t// Without doing this you would end up having to process\n\t// crossings for a standard tree.\n\tvar rootsArray = null;\n\n\tif (this.roots != null)\n\t{\n\t\tvar oldRootsArray = this.roots;\n\t\trootsArray = [];\n\n\t\tfor (var i = 0; i < oldRootsArray.length; i++)\n\t\t{\n\t\t\tvar cell = oldRootsArray[i];\n\t\t\tvar internalNode = this.vertexMapper.get(cell);\n\t\t\trootsArray[i] = internalNode;\n\t\t}\n\t}\n\n\tthis.visit(function(parent, node, edge, layer, seen)\n\t{\n\t\tif (seen == 0 && node.maxRank < 0 && node.minRank < 0)\n\t\t{\n\t\t\trankList[node.temp[0]].push(node);\n\t\t\tnode.maxRank = node.temp[0];\n\t\t\tnode.minRank = node.temp[0];\n\n\t\t\t// Set temp[0] to the nodes position in the rank\n\t\t\tnode.temp[0] = rankList[node.maxRank].length - 1;\n\t\t}\n\n\t\tif (parent != null && edge != null)\n\t\t{\n\t\t\tvar parentToCellRankDifference = parent.maxRank - node.maxRank;\n\n\t\t\tif (parentToCellRankDifference > 1)\n\t\t\t{\n\t\t\t\t// There are ranks in between the parent and current cell\n\t\t\t\tedge.maxRank = parent.maxRank;\n\t\t\t\tedge.minRank = node.maxRank;\n\t\t\t\tedge.temp = [];\n\t\t\t\tedge.x = [];\n\t\t\t\tedge.y = [];\n\n\t\t\t\tfor (var i = edge.minRank + 1; i < edge.maxRank; i++)\n\t\t\t\t{\n\t\t\t\t\t// The connecting edge must be added to the\n\t\t\t\t\t// appropriate ranks\n\t\t\t\t\trankList[i].push(edge);\n\t\t\t\t\tedge.setGeneralPurposeVariable(i, rankList[i]\n\t\t\t\t\t\t\t.length - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, rootsArray, false, null);\n};\n\n/**\n * Function: visit\n *\n * A depth first search through the internal heirarchy model.\n *\n * Parameters:\n *\n * visitor - The visitor function pattern to be called for each node.\n * trackAncestors - Whether or not the search is to keep track all nodes\n * directly above this one in the search path.\n */\nmxSwimlaneModel.prototype.visit = function(visitor, dfsRoots, trackAncestors, seenNodes)\n{\n\t// Run dfs through on all roots\n\tif (dfsRoots != null)\n\t{\n\t\tfor (var i = 0; i < dfsRoots.length; i++)\n\t\t{\n\t\t\tvar internalNode = dfsRoots[i];\n\n\t\t\tif (internalNode != null)\n\t\t\t{\n\t\t\t\tif (seenNodes == null)\n\t\t\t\t{\n\t\t\t\t\tseenNodes = new Object();\n\t\t\t\t}\n\n\t\t\t\tif (trackAncestors)\n\t\t\t\t{\n\t\t\t\t\t// Set up hash code for root\n\t\t\t\t\tinternalNode.hashCode = [];\n\t\t\t\t\tinternalNode.hashCode[0] = this.dfsCount;\n\t\t\t\t\tinternalNode.hashCode[1] = i;\n\t\t\t\t\tthis.extendedDfs(null, internalNode, null, visitor, seenNodes,\n\t\t\t\t\t\t\tinternalNode.hashCode, i, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.dfs(null, internalNode, null, visitor, seenNodes, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.dfsCount++;\n\t}\n};\n\n/**\n * Function: dfs\n *\n * Performs a depth first search on the internal hierarchy model\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs a set of all of the\n * ancestor node of the current node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.dfs = function(parent, root, connectingEdge, visitor, seen, layer)\n{\n\tif (root != null)\n\t{\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\t\n\t\t\tfor (var i = 0; i< outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\n\t\t\t\t// Root check is O(|roots|)\n\t\t\t\tthis.dfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\tlayer + 1);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendedDfs\n *\n * Performs a depth first search on the internal hierarchy model. This dfs\n * extends the default version by keeping track of cells ancestors, but it\n * should be only used when necessary because of it can be computationally\n * intensive for deep searches.\n *\n * Parameters:\n *\n * parent - the parent internal node of the current internal node\n * root - the current internal node\n * connectingEdge - the internal edge connecting the internal node and the parent\n * internal node, if any\n * visitor - the visitor pattern to be called for each node\n * seen - a set of all nodes seen by this dfs\n * ancestors - the parent hash code\n * childHash - the new hash code for this node\n * layer - the layer on the dfs tree ( not the same as the model ranks )\n */\nmxSwimlaneModel.prototype.extendedDfs = function(parent, root, connectingEdge, visitor, seen, ancestors, childHash, layer)\n{\n\t// Explanation of custom hash set. Previously, the ancestors variable\n\t// was passed through the dfs as a HashSet. The ancestors were copied\n\t// into a new HashSet and when the new child was processed it was also\n\t// added to the set. If the current node was in its ancestor list it\n\t// meant there is a cycle in the graph and this information is passed\n\t// to the visitor.visit() in the seen parameter. The HashSet clone was\n\t// very expensive on CPU so a custom hash was developed using primitive\n\t// types. temp[] couldn't be used so hashCode[] was added to each node.\n\t// Each new child adds another int to the array, copying the prefix\n\t// from its parent. Child of the same parent add different ints (the\n\t// limit is therefore 2^32 children per parent...). If a node has a\n\t// child with the hashCode already set then the child code is compared\n\t// to the same portion of the current nodes array. If they match there\n\t// is a loop.\n\t// Note that the basic mechanism would only allow for 1 use of this\n\t// functionality, so the root nodes have two ints. The second int is\n\t// incremented through each node root and the first is incremented\n\t// through each run of the dfs algorithm (therefore the dfs is not\n\t// thread safe). The hash code of each node is set if not already set,\n\t// or if the first int does not match that of the current run.\n\tif (root != null)\n\t{\n\t\tif (parent != null)\n\t\t{\n\t\t\t// Form this nodes hash code if necessary, that is, if the\n\t\t\t// hashCode variable has not been initialized or if the\n\t\t\t// start of the parent hash code does not equal the start of\n\t\t\t// this nodes hash code, indicating the code was set on a\n\t\t\t// previous run of this dfs.\n\t\t\tif (root.hashCode == null ||\n\t\t\t\troot.hashCode[0] != parent.hashCode[0])\n\t\t\t{\n\t\t\t\tvar hashCodeLength = parent.hashCode.length + 1;\n\t\t\t\troot.hashCode = parent.hashCode.slice();\n\t\t\t\troot.hashCode[hashCodeLength - 1] = childHash;\n\t\t\t}\n\t\t}\n\n\t\tvar rootId = root.id;\n\n\t\tif (seen[rootId] == null)\n\t\t{\n\t\t\tseen[rootId] = root;\n\t\t\tvisitor(parent, root, connectingEdge, layer, 0);\n\n\t\t\t// Copy the connects as source list so that visitors\n\t\t\t// can change the original for edge direction inversions\n\t\t\tvar outgoingEdges = root.connectsAsSource.slice();\n\t\t\tvar incomingEdges = root.connectsAsTarget.slice();\n\n\t\t\tfor (var i = 0; i < outgoingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = outgoingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.target;\n\t\t\t\t\n\t\t\t\t// Only navigate in source->target direction within the same\n\t\t\t\t// swimlane, or from a lower index swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex <= targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < incomingEdges.length; i++)\n\t\t\t{\n\t\t\t\tvar internalEdge = incomingEdges[i];\n\t\t\t\tvar targetNode = internalEdge.source;\n\n\t\t\t\t// Only navigate in target->source direction from a lower index \n\t\t\t\t// swimlane to a higher one\n\t\t\t\tif (root.swimlaneIndex < targetNode.swimlaneIndex)\n\t\t\t\t{\n\t\t\t\t\tthis.extendedDfs(root, targetNode, internalEdge, visitor, seen,\n\t\t\t\t\t\t\troot.hashCode, i, layer + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Use the int field to indicate this node has been seen\n\t\t\tvisitor(parent, root, connectingEdge, layer, 1);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayoutStage\n * \n * The specific layout interface for hierarchical layouts. It adds a\n * <code>run</code> method with a parameter for the hierarchical layout model\n * that is shared between the layout stages.\n * \n * Constructor: mxHierarchicalLayoutStage\n *\n * Constructs a new hierarchical layout stage.\n */\nfunction mxHierarchicalLayoutStage() { };\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxHierarchicalLayoutStage.prototype.execute = function(parent) { };\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMedianHybridCrossingReduction\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well heuristic to straighten edges as\n * far as possible.\n * \n * Constructor: mxMedianHybridCrossingReduction\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxMedianHybridCrossingReduction(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxMedianHybridCrossingReduction.\n */\nmxMedianHybridCrossingReduction.prototype = new mxHierarchicalLayoutStage();\nmxMedianHybridCrossingReduction.prototype.constructor = mxMedianHybridCrossingReduction;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMedianHybridCrossingReduction.prototype.layout = null;\n\n/**\n * Variable: maxIterations\n * \n * The maximum number of iterations to perform whilst reducing edge\n * crossings. Default is 24.\n */\nmxMedianHybridCrossingReduction.prototype.maxIterations = 24;\n\n/**\n * Variable: nestedBestRanks\n * \n * Stores each rank as a collection of cells in the best order found for\n * each layer so far\n */\nmxMedianHybridCrossingReduction.prototype.nestedBestRanks = null;\n\n/**\n * Variable: currentBestCrossings\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.currentBestCrossings = 0;\n\n/**\n * Variable: iterationsWithoutImprovement\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.iterationsWithoutImprovement = 0;\n\n/**\n * Variable: maxNoImprovementIterations\n * \n * The total number of crossings found in the best configuration so far\n */\nmxMedianHybridCrossingReduction.prototype.maxNoImprovementIterations = 2;\n\n/**\n * Function: execute\n * \n * Performs a vertex ordering within ranks as described by Gansner et al\n * 1993\n */\nmxMedianHybridCrossingReduction.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\n\t// Stores initial ordering as being the best one found so far\n\tthis.nestedBestRanks = [];\n\t\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.nestedBestRanks[i] = model.ranks[i].slice();\n\t}\n\n\tvar iterationsWithoutImprovement = 0;\n\tvar currentBestCrossings = this.calculateCrossings(model);\n\n\tfor (var i = 0; i < this.maxIterations &&\n\t\titerationsWithoutImprovement < this.maxNoImprovementIterations; i++)\n\t{\n\t\tthis.weightedMedian(i, model);\n\t\tthis.transpose(i, model);\n\t\tvar candidateCrossings = this.calculateCrossings(model);\n\n\t\tif (candidateCrossings < currentBestCrossings)\n\t\t{\n\t\t\tcurrentBestCrossings = candidateCrossings;\n\t\t\titerationsWithoutImprovement = 0;\n\n\t\t\t// Store the current rankings as the best ones\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tthis.nestedBestRanks[j][cell.getGeneralPurposeVariable(j)] = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Increase count of iterations where we haven't improved the\n\t\t\t// layout\n\t\t\titerationsWithoutImprovement++;\n\n\t\t\t// Restore the best values to the cells\n\t\t\tfor (var j = 0; j < this.nestedBestRanks.length; j++)\n\t\t\t{\n\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\tcell.setGeneralPurposeVariable(j, k);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (currentBestCrossings == 0)\n\t\t{\n\t\t\t// Do nothing further\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Store the best rankings but in the model\n\tvar ranks = [];\n\tvar rankList = [];\n\n\tfor (var i = 0; i < model.maxRank + 1; i++)\n\t{\n\t\trankList[i] = [];\n\t\tranks[i] = rankList[i];\n\t}\n\n\tfor (var i = 0; i < this.nestedBestRanks.length; i++)\n\t{\n\t\tfor (var j = 0; j < this.nestedBestRanks[i].length; j++)\n\t\t{\n\t\t\trankList[i].push(this.nestedBestRanks[i][j]);\n\t\t}\n\t}\n\n\tmodel.ranks = ranks;\n};\n\n\n/**\n * Function: calculateCrossings\n * \n * Calculates the total number of edge crossing in the current graph.\n * Returns the current number of edge crossings in the hierarchy graph\n * model in the current candidate layout\n * \n * Parameters:\n * \n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateCrossings = function(model)\n{\n\tvar numRanks = model.ranks.length;\n\tvar totalCrossings = 0;\n\n\tfor (var i = 1; i < numRanks; i++)\n\t{\n\t\ttotalCrossings += this.calculateRankCrossing(i, model);\n\t}\n\t\n\treturn totalCrossings;\n};\n\n/**\n * Function: calculateRankCrossing\n * \n * Calculates the number of edges crossings between the specified rank and\n * the rank below it. Returns the number of edges crossings with the rank\n * beneath\n * \n * Parameters:\n * \n * i -  the topmost rank of the pair ( higher rank value )\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.calculateRankCrossing = function(i, model)\n{\n\tvar totalCrossings = 0;\n\tvar rank = model.ranks[i];\n\tvar previousRank = model.ranks[i - 1];\n\n\tvar tmpIndices = [];\n\n\t// Iterate over the top rank and fill in the connection information\n\tfor (var j = 0; j < rank.length; j++)\n\t{\n\t\tvar node = rank[j];\n\t\tvar rankPosition = node.getGeneralPurposeVariable(i);\n\t\tvar connectedCells = node.getPreviousLayerConnectedCells(i);\n\t\tvar nodeIndices = [];\n\n\t\tfor (var k = 0; k < connectedCells.length; k++)\n\t\t{\n\t\t\tvar connectedNode = connectedCells[k];\n\t\t\tvar otherCellRankPosition = connectedNode.getGeneralPurposeVariable(i - 1);\n\t\t\tnodeIndices.push(otherCellRankPosition);\n\t\t}\n\t\t\n\t\tnodeIndices.sort(function(x, y) { return x - y; });\n\t\ttmpIndices[rankPosition] = nodeIndices;\n\t}\n\t\n\tvar indices = [];\n\n\tfor (var j = 0; j < tmpIndices.length; j++)\n\t{\n\t\tindices = indices.concat(tmpIndices[j]);\n\t}\n\n\tvar firstIndex = 1;\n\t\n\twhile (firstIndex < previousRank.length)\n\t{\n\t\tfirstIndex <<= 1;\n\t}\n\n\tvar treeSize = 2 * firstIndex - 1;\n\tfirstIndex -= 1;\n\n\tvar tree = [];\n\t\n\tfor (var j = 0; j < treeSize; ++j)\n\t{\n\t\ttree[j] = 0;\n\t}\n\n\tfor (var j = 0; j < indices.length; j++)\n\t{\n\t\tvar index = indices[j];\n\t    var treeIndex = index + firstIndex;\n\t    ++tree[treeIndex];\n\t    \n\t    while (treeIndex > 0)\n\t    {\n\t    \tif (treeIndex % 2)\n\t    \t{\n\t    \t\ttotalCrossings += tree[treeIndex + 1];\n\t    \t}\n\t      \n\t    \ttreeIndex = (treeIndex - 1) >> 1;\n\t    \t++tree[treeIndex];\n\t    }\n\t}\n\n\treturn totalCrossings;\n};\n\n/**\n * Function: transpose\n * \n * Takes each possible adjacent cell pair on each rank and checks if\n * swapping them around reduces the number of crossing\n * \n * Parameters:\n * \n * mainLoopIteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.transpose = function(mainLoopIteration, model)\n{\n\tvar improved = true;\n\n\t// Track the number of iterations in case of looping\n\tvar count = 0;\n\tvar maxCount = 10;\n\twhile (improved && count++ < maxCount)\n\t{\n\t\t// On certain iterations allow allow swapping of cell pairs with\n\t\t// equal edge crossings switched or not switched. This help to\n\t\t// nudge a stuck layout into a lower crossing total.\n\t\tvar nudge = mainLoopIteration % 2 == 1 && count % 2 == 1;\n\t\timproved = false;\n\t\t\n\t\tfor (var i = 0; i < model.ranks.length; i++)\n\t\t{\n\t\t\tvar rank = model.ranks[i];\n\t\t\tvar orderedCells = [];\n\t\t\t\n\t\t\tfor (var j = 0; j < rank.length; j++)\n\t\t\t{\n\t\t\t\tvar cell = rank[j];\n\t\t\t\tvar tempRank = cell.getGeneralPurposeVariable(i);\n\t\t\t\t\n\t\t\t\t// FIXME: Workaround to avoid negative tempRanks\n\t\t\t\tif (tempRank < 0)\n\t\t\t\t{\n\t\t\t\t\ttempRank = j;\n\t\t\t\t}\n\t\t\t\torderedCells[tempRank] = cell;\n\t\t\t}\n\t\t\t\n\t\t\tvar leftCellAboveConnections = null;\n\t\t\tvar leftCellBelowConnections = null;\n\t\t\tvar rightCellAboveConnections = null;\n\t\t\tvar rightCellBelowConnections = null;\n\t\t\t\n\t\t\tvar leftAbovePositions = null;\n\t\t\tvar leftBelowPositions = null;\n\t\t\tvar rightAbovePositions = null;\n\t\t\tvar rightBelowPositions = null;\n\t\t\t\n\t\t\tvar leftCell = null;\n\t\t\tvar rightCell = null;\n\n\t\t\tfor (var j = 0; j < (rank.length - 1); j++)\n\t\t\t{\n\t\t\t\t// For each intra-rank adjacent pair of cells\n\t\t\t\t// see if swapping them around would reduce the\n\t\t\t\t// number of edges crossing they cause in total\n\t\t\t\t// On every cell pair except the first on each rank, we\n\t\t\t\t// can save processing using the previous values for the\n\t\t\t\t// right cell on the new left cell\n\t\t\t\tif (j == 0)\n\t\t\t\t{\n\t\t\t\t\tleftCell = orderedCells[j];\n\t\t\t\t\tleftCellAboveConnections = leftCell\n\t\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\t\tleftCellBelowConnections = leftCell\n\t\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\t\t\t\t\tleftAbovePositions = [];\n\t\t\t\t\tleftBelowPositions = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellAboveConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftAbovePositions[k] = leftCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < leftCellBelowConnections.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tleftBelowPositions[k] = leftCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftCellAboveConnections = rightCellAboveConnections;\n\t\t\t\t\tleftCellBelowConnections = rightCellBelowConnections;\n\t\t\t\t\tleftAbovePositions = rightAbovePositions;\n\t\t\t\t\tleftBelowPositions = rightBelowPositions;\n\t\t\t\t\tleftCell = rightCell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\trightCell = orderedCells[j + 1];\n\t\t\t\trightCellAboveConnections = rightCell\n\t\t\t\t\t\t.getNextLayerConnectedCells(i);\n\t\t\t\trightCellBelowConnections = rightCell\n\t\t\t\t\t\t.getPreviousLayerConnectedCells(i);\n\n\t\t\t\trightAbovePositions = [];\n\t\t\t\trightBelowPositions = [];\n\n\t\t\t\tfor (var k = 0; k < rightCellAboveConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightAbovePositions[k] = rightCellAboveConnections[k].getGeneralPurposeVariable(i + 1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < rightCellBelowConnections.length; k++)\n\t\t\t\t{\n\t\t\t\t\trightBelowPositions[k] = rightCellBelowConnections[k].getGeneralPurposeVariable(i - 1);\n\t\t\t\t}\n\n\t\t\t\tvar totalCurrentCrossings = 0;\n\t\t\t\tvar totalSwitchedCrossings = 0;\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftAbovePositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightAbovePositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftAbovePositions[k] > rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftAbovePositions[k] < rightAbovePositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var k = 0; k < leftBelowPositions.length; k++)\n\t\t\t\t{\n\t\t\t\t\tfor (var ik = 0; ik < rightBelowPositions.length; ik++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (leftBelowPositions[k] > rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalCurrentCrossings++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (leftBelowPositions[k] < rightBelowPositions[ik])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttotalSwitchedCrossings++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((totalSwitchedCrossings < totalCurrentCrossings) ||\n\t\t\t\t\t(totalSwitchedCrossings == totalCurrentCrossings &&\n\t\t\t\t\tnudge))\n\t\t\t\t{\n\t\t\t\t\tvar temp = leftCell.getGeneralPurposeVariable(i);\n\t\t\t\t\tleftCell.setGeneralPurposeVariable(i, rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(i));\n\t\t\t\t\trightCell.setGeneralPurposeVariable(i, temp);\n\n\t\t\t\t\t// With this pair exchanged we have to switch all of\n\t\t\t\t\t// values for the left cell to the right cell so the\n\t\t\t\t\t// next iteration for this rank uses it as the left\n\t\t\t\t\t// cell again\n\t\t\t\t\trightCellAboveConnections = leftCellAboveConnections;\n\t\t\t\t\trightCellBelowConnections = leftCellBelowConnections;\n\t\t\t\t\trightAbovePositions = leftAbovePositions;\n\t\t\t\t\trightBelowPositions = leftBelowPositions;\n\t\t\t\t\trightCell = leftCell;\n\t\t\t\t\t\n\t\t\t\t\tif (!nudge)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Don't count nudges as improvement or we'll end\n\t\t\t\t\t\t// up stuck in two combinations and not finishing\n\t\t\t\t\t\t// as early as we should\n\t\t\t\t\t\timproved = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: weightedMedian\n * \n * Sweeps up or down the layout attempting to minimise the median placement\n * of connected cells on adjacent ranks\n * \n * Parameters:\n * \n * iteration - the iteration number of the main loop\n * model - the internal model describing the hierarchy\n */\nmxMedianHybridCrossingReduction.prototype.weightedMedian = function(iteration, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (iteration % 2 == 0);\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank - 1; j >= 0; j--)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 1; j < model.maxRank; j++)\n\t\t{\n\t\t\tthis.medianRank(j, downwardSweep);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianRank\n * \n * Attempts to minimise the median placement of connected cells on this rank\n * and one of the adjacent ranks\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * downwardSweep - whether or not this is a downward sweep through the graph\n */\nmxMedianHybridCrossingReduction.prototype.medianRank = function(rankValue, downwardSweep)\n{\n\tvar numCellsForRank = this.nestedBestRanks[rankValue].length;\n\tvar medianValues = [];\n\tvar reservedPositions = [];\n\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tvar cell = this.nestedBestRanks[rankValue][i];\n\t\tvar sorterEntry = new MedianCellSorter();\n\t\tsorterEntry.cell = cell;\n\n\t\t// Flip whether or not equal medians are flipped on up and down\n\t\t// sweeps\n\t\t// TODO re-implement some kind of nudge\n\t\t// medianValues[i].nudge = !downwardSweep;\n\t\tvar nextLevelConnectedCells;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLevelConnectedCells = cell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\t\n\t\tvar nextRankValue;\n\t\t\n\t\tif (downwardSweep)\n\t\t{\n\t\t\tnextRankValue = rankValue + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextRankValue = rankValue - 1;\n\t\t}\n\n\t\tif (nextLevelConnectedCells != null\n\t\t\t\t&& nextLevelConnectedCells.length != 0)\n\t\t{\n\t\t\tsorterEntry.medianValue = this.medianValue(\n\t\t\t\t\tnextLevelConnectedCells, nextRankValue);\n\t\t\tmedianValues.push(sorterEntry);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Nodes with no adjacent vertices are flagged in the reserved array\n\t\t\t// to indicate they should be left in their current position.\n\t\t\treservedPositions[cell.getGeneralPurposeVariable(rankValue)] = true;\n\t\t}\n\t}\n\t\n\tmedianValues.sort(MedianCellSorter.prototype.compare);\n\t\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\tfor (var i = 0; i < numCellsForRank; i++)\n\t{\n\t\tif (reservedPositions[i] == null)\n\t\t{\n\t\t\tvar cell = medianValues.shift().cell;\n\t\t\tcell.setGeneralPurposeVariable(rankValue, i);\n\t\t}\n\t}\n};\n\n/**\n * Function: medianValue\n * \n * Calculates the median rank order positioning for the specified cell using\n * the connected cells on the specified rank. Returns the median rank\n * ordering value of the connected cells\n * \n * Parameters:\n * \n * connectedCells - the cells on the specified rank connected to the\n * specified cell\n * rankValue - the rank that the connected cell lie upon\n */\nmxMedianHybridCrossingReduction.prototype.medianValue = function(connectedCells, rankValue)\n{\n\tvar medianValues = [];\n\tvar arrayCount = 0;\n\t\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tvar cell = connectedCells[i];\n\t\tmedianValues[arrayCount++] = cell.getGeneralPurposeVariable(rankValue);\n\t}\n\n\t// Sort() sorts lexicographically by default (i.e. 11 before 9) so force\n\t// numerical order sort\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (arrayCount % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(arrayCount / 2)];\n\t}\n\telse if (arrayCount == 2)\n\t{\n\t\treturn ((medianValues[0] + medianValues[1]) / 2.0);\n\t}\n\telse\n\t{\n\t\tvar medianPoint = arrayCount / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1] - medianValues[0];\n\t\tvar rightMedian = medianValues[arrayCount - 1]\n\t\t\t\t- medianValues[medianPoint];\n\n\t\treturn (medianValues[medianPoint - 1] * rightMedian + medianValues[medianPoint]\n\t\t\t\t* leftMedian)\n\t\t\t\t/ (leftMedian + rightMedian);\n\t}\n};\n\n/**\n * Class: MedianCellSorter\n * \n * A utility class used to track cells whilst sorting occurs on the median\n * values. Does not violate (x.compareTo(y)==0) == (x.equals(y))\n *\n * Constructor: MedianCellSorter\n * \n * Constructs a new median cell sorter.\n */\nfunction MedianCellSorter()\n{\n\t// empty\n};\n\n/**\n * Variable: medianValue\n * \n * The weighted value of the cell stored.\n */\nMedianCellSorter.prototype.medianValue = 0;\n\n/**\n * Variable: cell\n * \n * The cell whose median value is being calculated\n */\nMedianCellSorter.prototype.cell = false;\n\n/**\n * Function: compare\n * \n * Compares two MedianCellSorters.\n */\nMedianCellSorter.prototype.compare = function(a, b)\n{\n\tif (a != null && b != null)\n\t{\n\t\tif (b.medianValue > a.medianValue)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\telse if (b.medianValue < a.medianValue)\n\t\t{\n\t\t\treturn 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMinimumCycleRemover\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxMinimumCycleRemover\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxMinimumCycleRemover(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxMinimumCycleRemover.prototype = new mxHierarchicalLayoutStage();\nmxMinimumCycleRemover.prototype.constructor = mxMinimumCycleRemover;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxMinimumCycleRemover.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxMinimumCycleRemover.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodesArray = model.vertexMapper.getValues();\n\tvar unseenNodes = new Object();\n\t\n\tfor (var i = 0; i < unseenNodesArray.length; i++)\n\t{\n\t\tunseenNodes[unseenNodesArray[i].id] = unseenNodesArray[i];\n\t}\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, rootsArray, true, null);\n\n\t// If there are any nodes that should be nodes that the dfs can miss\n\t// these need to be processed with the dfs and the roots assigned\n\t// correctly to form a correct internal model\n\tvar seenNodesCopy = mxUtils.clone(seenNodes, null, true);\n\n\t// Pick a random cell and dfs from it\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\tif (node.isAncestor(parent))\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\t\n\t\tseenNodes[node.id] = node;\n\t\tdelete unseenNodes[node.id];\n\t}, unseenNodes, true, seenNodesCopy);\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxCoordinateAssignment\n * \n * Sets the horizontal locations of node and edge dummy nodes on each layer.\n * Uses median down and up weighings as well as heuristics to straighten edges as\n * far as possible.\n * \n * Constructor: mxCoordinateAssignment\n *\n * Creates a coordinate assignment.\n * \n * Arguments:\n * \n * intraCellSpacing - the minimum buffer between cells on the same rank\n * interRankCellSpacing - the minimum distance between cells on adjacent ranks\n * orientation - the position of the root node(s) relative to the graph\n * initialX - the leftmost coordinate node placement starts at\n */\nfunction mxCoordinateAssignment(layout, intraCellSpacing, interRankCellSpacing,\n\torientation, initialX, parallelEdgeSpacing)\n{\n\tthis.layout = layout;\n\tthis.intraCellSpacing = intraCellSpacing;\n\tthis.interRankCellSpacing = interRankCellSpacing;\n\tthis.orientation = orientation;\n\tthis.initialX = initialX;\n\tthis.parallelEdgeSpacing = parallelEdgeSpacing;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxCoordinateAssignment.prototype = new mxHierarchicalLayoutStage();\nmxCoordinateAssignment.prototype.constructor = mxCoordinateAssignment;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxCoordinateAssignment.prototype.layout = null;\n\n/**\n * Variable: intraCellSpacing\n * \n * The minimum buffer between cells on the same rank. Default is 30.\n */\nmxCoordinateAssignment.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The minimum distance between cells on adjacent ranks. Default is 10.\n */\nmxCoordinateAssignment.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges.\n * Default is 10.\n */\nmxCoordinateAssignment.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: maxIterations\n * \n * The number of heuristic iterations to run. Default is 8.\n */\nmxCoordinateAssignment.prototype.maxIterations = 8;\n\n/**\n * Variable: prefHozEdgeSep\n * \n * The preferred horizontal distance between edges exiting a vertex\n */\nmxCoordinateAssignment.prototype.prefHozEdgeSep = 5;\n\n/**\n * Variable: prefVertEdgeOff\n * \n * The preferred vertical offset between edges exiting a vertex\n */\nmxCoordinateAssignment.prototype.prefVertEdgeOff = 2;\n\n/**\n * Variable: minEdgeJetty\n * \n * The minimum distance for an edge jetty from a vertex\n */\nmxCoordinateAssignment.prototype.minEdgeJetty = 12;\n\n/**\n * Variable: channelBuffer\n * \n * The size of the vertical buffer in the center of inter-rank channels\n * where edge control points should not be placed\n */\nmxCoordinateAssignment.prototype.channelBuffer = 4;\n\n/**\n * Variable: jettyPositions\n * \n * Map of internal edges and (x,y) pair of positions of the start and end jetty\n * for that edge where it connects to the source and target vertices.\n * Note this should technically be a WeakHashMap, but since JS does not\n * have an equivalent, housekeeping must be performed before using.\n * i.e. check all edges are still in the model and clear the values.\n * Note that the y co-ord is the offset of the jetty, not the\n * absolute point\n */\nmxCoordinateAssignment.prototype.jettyPositions = null;\n\n/**\n * Variable: orientation\n * \n * The position of the root ( start ) node(s) relative to the rest of the\n * laid out graph. Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxCoordinateAssignment.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: initialX\n * \n * The minimum x position node placement starts at\n */\nmxCoordinateAssignment.prototype.initialX = null;\n\n/**\n * Variable: limitX\n * \n * The maximum x value this positioning lays up to\n */\nmxCoordinateAssignment.prototype.limitX = null;\n\n/**\n * Variable: currentXDelta\n * \n * The sum of x-displacements for the current iteration\n */\nmxCoordinateAssignment.prototype.currentXDelta = null;\n\n/**\n * Variable: widestRank\n * \n * The rank that has the widest x position\n */\nmxCoordinateAssignment.prototype.widestRank = null;\n\n/**\n * Variable: rankTopY\n * \n * Internal cache of top-most values of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankTopY = null;\n\n/**\n * Variable: rankBottomY\n * \n * Internal cache of bottom-most value of Y for each rank\n */\nmxCoordinateAssignment.prototype.rankBottomY = null;\n\n/**\n * Variable: widestRankValue\n * \n * The X-coordinate of the edge of the widest rank\n */\nmxCoordinateAssignment.prototype.widestRankValue = null;\n\n/**\n * Variable: rankWidths\n * \n * The width of all the ranks\n */\nmxCoordinateAssignment.prototype.rankWidths = null;\n\n/**\n * Variable: rankY\n * \n * The Y-coordinate of all the ranks\n */\nmxCoordinateAssignment.prototype.rankY = null;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxCoordinateAssignment.prototype.fineTuning = true;\n\n/**\n * Variable: nextLayerConnectedCache\n * \n * A store of connections to the layer above for speed\n */\nmxCoordinateAssignment.prototype.nextLayerConnectedCache = null;\n\n/**\n * Variable: previousLayerConnectedCache\n * \n * A store of connections to the layer below for speed\n */\nmxCoordinateAssignment.prototype.previousLayerConnectedCache = null;\n\n/**\n * Variable: groupPadding\n * \n * Padding added to resized parents\n */\nmxCoordinateAssignment.prototype.groupPadding = 10;\n\n/**\n * Utility method to display current positions\n */\nmxCoordinateAssignment.prototype.printStatus = function()\n{\n\tvar model = this.layout.getModel();\n\tmxLog.show();\n\n\tmxLog.writeln('======Coord assignment debug=======');\n\n\tfor (var j = 0; j < model.ranks.length; j++)\n\t{\n\t\tmxLog.write('Rank ', j, ' : ' );\n\t\tvar rank = model.ranks[j];\n\t\t\n\t\tfor (var k = 0; k < rank.length; k++)\n\t\t{\n\t\t\tvar cell = rank[k];\n\t\t\t\n\t\t\tmxLog.write(cell.getGeneralPurposeVariable(j), '  ');\n\t\t}\n\t\tmxLog.writeln();\n\t}\n\t\n\tmxLog.writeln('====================================');\n};\n\n/**\n * Function: execute\n * \n * A basic horizontal coordinate assignment algorithm\n */\nmxCoordinateAssignment.prototype.execute = function(parent)\n{\n\tthis.jettyPositions = Object();\n\tvar model = this.layout.getModel();\n\tthis.currentXDelta = 0.0;\n\n\tthis.initialCoords(this.layout.getGraph(), model);\n\t\n//\tthis.printStatus();\n\t\n\tif (this.fineTuning)\n\t{\n\t\tthis.minNode(model);\n\t}\n\t\n\tvar bestXDelta = 100000000.0;\n\t\n\tif (this.fineTuning)\n\t{\n\t\tfor (var i = 0; i < this.maxIterations; i++)\n\t\t{\n//\t\t\tthis.printStatus();\n\t\t\n\t\t\t// Median Heuristic\n\t\t\tif (i != 0)\n\t\t\t{\n\t\t\t\tthis.medianPos(i, model);\n\t\t\t\tthis.minNode(model);\n\t\t\t}\n\t\t\t\n\t\t\t// if the total offset is less for the current positioning,\n\t\t\t// there are less heavily angled edges and so the current\n\t\t\t// positioning is used\n\t\t\tif (this.currentXDelta < bestXDelta)\n\t\t\t{\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setX(j, cell.getGeneralPurposeVariable(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbestXDelta = this.currentXDelta;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Restore the best positions\n\t\t\t\tfor (var j = 0; j < model.ranks.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar rank = model.ranks[j];\n\t\t\t\t\t\n\t\t\t\t\tfor (var k = 0; k < rank.length; k++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar cell = rank[k];\n\t\t\t\t\t\tcell.setGeneralPurposeVariable(j, cell.getX(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.minPath(this.layout.getGraph(), model);\n\t\t\t\n\t\t\tthis.currentXDelta = 0;\n\t\t}\n\t}\n\t\n\tthis.setCellLocations(this.layout.getGraph(), model);\n};\n\n/**\n * Function: minNode\n * \n * Performs one median positioning sweep in both directions\n */\nmxCoordinateAssignment.prototype.minNode = function(model)\n{\n\t// Queue all nodes\n\tvar nodeList = [];\n\t\n\t// Need to be able to map from cell to cellWrapper\n\tvar map = new mxDictionary();\n\tvar rank = [];\n\t\n\tfor (var i = 0; i <= model.maxRank; i++)\n\t{\n\t\trank[i] = model.ranks[i];\n\t\t\n\t\tfor (var j = 0; j < rank[i].length; j++)\n\t\t{\n\t\t\t// Use the weight to store the rank and visited to store whether\n\t\t\t// or not the cell is in the list\n\t\t\tvar node = rank[i][j];\n\t\t\tvar nodeWrapper = new WeightedCellSorter(node, i);\n\t\t\tnodeWrapper.rankIndex = j;\n\t\t\tnodeWrapper.visited = true;\n\t\t\tnodeList.push(nodeWrapper);\n\t\t\t\n\t\t\tmap.put(node, nodeWrapper);\n\t\t}\n\t}\n\t\n\t// Set a limit of the maximum number of times we will access the queue\n\t// in case a loop appears\n\tvar maxTries = nodeList.length * 10;\n\tvar count = 0;\n\t\n\t// Don't move cell within this value of their median\n\tvar tolerance = 1;\n\t\n\twhile (nodeList.length > 0 && count <= maxTries)\n\t{\n\t\tvar cellWrapper = nodeList.shift();\n\t\tvar cell = cellWrapper.cell;\n\t\t\n\t\tvar rankValue = cellWrapper.weightedValue;\n\t\tvar rankIndex = parseInt(cellWrapper.rankIndex);\n\t\t\n\t\tvar nextLayerConnectedCells = cell.getNextLayerConnectedCells(rankValue);\n\t\tvar previousLayerConnectedCells = cell.getPreviousLayerConnectedCells(rankValue);\n\t\t\n\t\tvar numNextLayerConnected = nextLayerConnectedCells.length;\n\t\tvar numPreviousLayerConnected = previousLayerConnectedCells.length;\n\n\t\tvar medianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\trankValue + 1);\n\t\tvar medianPreviousLevel = this.medianXValue(previousLayerConnectedCells,\n\t\t\t\trankValue - 1);\n\n\t\tvar numConnectedNeighbours = numNextLayerConnected\n\t\t\t\t+ numPreviousLayerConnected;\n\t\tvar currentPosition = cell.getGeneralPurposeVariable(rankValue);\n\t\tvar cellMedian = currentPosition;\n\t\t\n\t\tif (numConnectedNeighbours > 0)\n\t\t{\n\t\t\tcellMedian = (medianNextLevel * numNextLayerConnected + medianPreviousLevel\n\t\t\t\t\t* numPreviousLayerConnected)\n\t\t\t\t\t/ numConnectedNeighbours;\n\t\t}\n\n\t\t// Flag storing whether or not position has changed\n\t\tvar positionChanged = false;\n\t\t\n\t\tif (cellMedian < currentPosition - tolerance)\n\t\t{\n\t\t\tif (rankIndex == 0)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar leftCell = rank[rankValue][rankIndex - 1];\n\t\t\t\tvar leftLimit = leftCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\t\t\tif (leftLimit < cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (leftLimit < cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t- tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (cellMedian > currentPosition + tolerance)\n\t\t{\n\t\t\tvar rankSize = rank[rankValue].length;\n\t\t\t\n\t\t\tif (rankIndex == rankSize - 1)\n\t\t\t{\n\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\tpositionChanged = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar rightCell = rank[rankValue][rankIndex + 1];\n\t\t\t\tvar rightLimit = rightCell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue);\n\t\t\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\t\t\t\t\n\t\t\t\tif (rightLimit > cellMedian)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, cellMedian);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t\telse if (rightLimit > cell\n\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t+ tolerance)\n\t\t\t\t{\n\t\t\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\t\t\tpositionChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (positionChanged)\n\t\t{\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < nextLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = nextLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\t\t\t\t\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add connected nodes to map and list\n\t\t\tfor (var i = 0; i < previousLayerConnectedCells.length; i++)\n\t\t\t{\n\t\t\t\tvar connectedCell = previousLayerConnectedCells[i];\n\t\t\t\tvar connectedCellWrapper = map.get(connectedCell);\n\n\t\t\t\tif (connectedCellWrapper != null)\n\t\t\t\t{\n\t\t\t\t\tif (connectedCellWrapper.visited == false)\n\t\t\t\t\t{\n\t\t\t\t\t\tconnectedCellWrapper.visited = true;\n\t\t\t\t\t\tnodeList.push(connectedCellWrapper);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tcellWrapper.visited = false;\n\t\tcount++;\n\t}\n};\n\n/**\n * Function: medianPos\n * \n * Performs one median positioning sweep in one direction\n * \n * Parameters:\n * \n * i - the iteration of the whole process\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.medianPos = function(i, model)\n{\n\t// Reverse sweep direction each time through this method\n\tvar downwardSweep = (i % 2 == 0);\n\t\n\tif (downwardSweep)\n\t{\n\t\tfor (var j = model.maxRank; j > 0; j--)\n\t\t{\n\t\t\tthis.rankMedianPosition(j - 1, model, j);\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (var j = 0; j < model.maxRank - 1; j++)\n\t\t{\n\t\t\tthis.rankMedianPosition(j + 1, model, j);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankMedianPosition\n * \n * Performs median minimisation over one rank.\n * \n * Parameters:\n * \n * rankValue - the layer number of this rank\n * model - an internal model of the hierarchical layout\n * nextRankValue - the layer number whose connected cels are to be laid out\n * relative to\n */\nmxCoordinateAssignment.prototype.rankMedianPosition = function(rankValue, model, nextRankValue)\n{\n\tvar rank = model.ranks[rankValue];\n\n\t// Form an array of the order in which the cell are to be processed\n\t// , the order is given by the weighted sum of the in or out edges,\n\t// depending on whether we're traveling up or down the hierarchy.\n\tvar weightedValues = [];\n\tvar cellMap = new Object();\n\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar currentCell = rank[i];\n\t\tweightedValues[i] = new WeightedCellSorter();\n\t\tweightedValues[i].cell = currentCell;\n\t\tweightedValues[i].rankIndex = i;\n\t\tcellMap[currentCell.id] = weightedValues[i];\n\t\tvar nextLayerConnectedCells = null;\n\t\t\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getPreviousLayerConnectedCells(rankValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = currentCell\n\t\t\t\t\t.getNextLayerConnectedCells(rankValue);\n\t\t}\n\n\t\t// Calculate the weighing based on this node type and those this\n\t\t// node is connected to on the next layer\n\t\tweightedValues[i].weightedValue = this.calculatedWeightedValue(\n\t\t\t\tcurrentCell, nextLayerConnectedCells);\n\t}\n\n\tweightedValues.sort(WeightedCellSorter.prototype.compare);\n\n\t// Set the new position of each node within the rank using\n\t// its temp variable\n\t\n\tfor (var i = 0; i < weightedValues.length; i++)\n\t{\n\t\tvar numConnectionsNextLevel = 0;\n\t\tvar cell = weightedValues[i].cell;\n\t\tvar nextLayerConnectedCells = null;\n\t\tvar medianNextLevel = 0;\n\n\t\tif (nextRankValue < rankValue)\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getPreviousLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnextLayerConnectedCells = cell.getNextLayerConnectedCells(\n\t\t\t\t\trankValue).slice();\n\t\t}\n\n\t\tif (nextLayerConnectedCells != null)\n\t\t{\n\t\t\tnumConnectionsNextLevel = nextLayerConnectedCells.length;\n\t\t\t\n\t\t\tif (numConnectionsNextLevel > 0)\n\t\t\t{\n\t\t\t\tmedianNextLevel = this.medianXValue(nextLayerConnectedCells,\n\t\t\t\t\t\tnextRankValue);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// For case of no connections on the next level set the\n\t\t\t\t// median to be the current position and try to be\n\t\t\t\t// positioned there\n\t\t\t\tmedianNextLevel = cell.getGeneralPurposeVariable(rankValue);\n\t\t\t}\n\t\t}\n\n\t\tvar leftBuffer = 0.0;\n\t\tvar leftLimit = -100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex - 1; j >= 0;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar leftCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\tleftLimit = leftCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t+ leftCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t+ this.intraCellSpacing\n\t\t\t\t\t\t\t+ leftBuffer + cell.width / 2.0;\n\t\t\t\t\tj = -1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tleftBuffer += leftCell.width + this.intraCellSpacing;\n\t\t\t\t\tj--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar rightBuffer = 0.0;\n\t\tvar rightLimit = 100000000.0;\n\t\t\n\t\tfor (var j = weightedValues[i].rankIndex + 1; j < weightedValues.length;)\n\t\t{\n\t\t\tvar weightedValue = cellMap[rank[j].id];\n\t\t\t\n\t\t\tif (weightedValue != null)\n\t\t\t{\n\t\t\t\tvar rightCell = weightedValue.cell;\n\t\t\t\t\n\t\t\t\tif (weightedValue.visited)\n\t\t\t\t{\n\t\t\t\t\t// The left limit is the right hand limit of that\n\t\t\t\t\t// cell plus any allowance for unallocated cells\n\t\t\t\t\t// in-between\n\t\t\t\t\trightLimit = rightCell\n\t\t\t\t\t\t\t.getGeneralPurposeVariable(rankValue)\n\t\t\t\t\t\t\t- rightCell.width\n\t\t\t\t\t\t\t/ 2.0\n\t\t\t\t\t\t\t- this.intraCellSpacing\n\t\t\t\t\t\t\t- rightBuffer - cell.width / 2.0;\n\t\t\t\t\tj = weightedValues.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trightBuffer += rightCell.width + this.intraCellSpacing;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (medianNextLevel >= leftLimit && medianNextLevel <= rightLimit)\n\t\t{\n\t\t\tcell.setGeneralPurposeVariable(rankValue, medianNextLevel);\n\t\t}\n\t\telse if (medianNextLevel < leftLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, leftLimit);\n\t\t\tthis.currentXDelta += leftLimit - medianNextLevel;\n\t\t}\n\t\telse if (medianNextLevel > rightLimit)\n\t\t{\n\t\t\t// Couldn't place at median value, place as close to that\n\t\t\t// value as possible\n\t\t\tcell.setGeneralPurposeVariable(rankValue, rightLimit);\n\t\t\tthis.currentXDelta += medianNextLevel - rightLimit;\n\t\t}\n\n\t\tweightedValues[i].visited = true;\n\t}\n};\n\n/**\n * Function: calculatedWeightedValue\n * \n * Calculates the priority the specified cell has based on the type of its\n * cell and the cells it is connected to on the next layer\n * \n * Parameters:\n * \n * currentCell - the cell whose weight is to be calculated\n * collection - the cells the specified cell is connected to\n */\nmxCoordinateAssignment.prototype.calculatedWeightedValue = function(currentCell, collection)\n{\n\tvar totalWeight = 0;\n\t\n\tfor (var i = 0; i < collection.length; i++)\n\t{\n\t\tvar cell = collection[i];\n\n\t\tif (currentCell.isVertex() && cell.isVertex())\n\t\t{\n\t\t\ttotalWeight++;\n\t\t}\n\t\telse if (currentCell.isEdge() && cell.isEdge())\n\t\t{\n\t\t\ttotalWeight += 8;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ttotalWeight += 2;\n\t\t}\n\t}\n\n\treturn totalWeight;\n};\n\n/**\n * Function: medianXValue\n * \n * Calculates the median position of the connected cell on the specified\n * rank\n * \n * Parameters:\n * \n * connectedCells - the cells the candidate connects to on this level\n * rankValue - the layer number of this rank\n */\nmxCoordinateAssignment.prototype.medianXValue = function(connectedCells, rankValue)\n{\n\tif (connectedCells.length == 0)\n\t{\n\t\treturn 0;\n\t}\n\n\tvar medianValues = [];\n\n\tfor (var i = 0; i < connectedCells.length; i++)\n\t{\n\t\tmedianValues[i] = connectedCells[i].getGeneralPurposeVariable(rankValue);\n\t}\n\n\tmedianValues.sort(function(a,b){return a - b;});\n\t\n\tif (connectedCells.length % 2 == 1)\n\t{\n\t\t// For odd numbers of adjacent vertices return the median\n\t\treturn medianValues[Math.floor(connectedCells.length / 2)];\n\t}\n\telse\n\t{\n\t\tvar medianPoint = connectedCells.length / 2;\n\t\tvar leftMedian = medianValues[medianPoint - 1];\n\t\tvar rightMedian = medianValues[medianPoint];\n\n\t\treturn ((leftMedian + rightMedian) / 2);\n\t}\n};\n\n/**\n * Function: initialCoords\n * \n * Sets up the layout in an initial positioning. The ranks are all centered\n * as much as possible along the middle vertex in each rank. The other cells\n * are then placed as close as possible on either side.\n * \n * Parameters:\n * \n * facade - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.initialCoords = function(facade, model)\n{\n\tthis.calculateWidestRank(facade, model);\n\n\t// Sweep up and down from the widest rank\n\tfor (var i = this.widestRank; i >= 0; i--)\n\t{\n\t\tif (i < model.maxRank)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n\n\tfor (var i = this.widestRank+1; i <= model.maxRank; i++)\n\t{\n\t\tif (i > 0)\n\t\t{\n\t\t\tthis.rankCoordinates(i, facade, model);\n\t\t}\n\t}\n};\n\n/**\n * Function: rankCoordinates\n * \n * Sets up the layout in an initial positioning. All the first cells in each\n * rank are moved to the left and the rest of the rank inserted as close\n * together as their size and buffering permits. This method works on just\n * the specified rank.\n * \n * Parameters:\n * \n * rankValue - the current rank being processed\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.rankCoordinates = function(rankValue, graph, model)\n{\n\tvar rank = model.ranks[rankValue];\n\tvar maxY = 0.0;\n\tvar localX = this.initialX + (this.widestRankValue - this.rankWidths[rankValue])\n\t\t\t/ 2;\n\n\t// Store whether or not any of the cells' bounds were unavailable so\n\t// to only issue the warning once for all cells\n\tvar boundsWarning = false;\n\t\n\tfor (var i = 0; i < rank.length; i++)\n\t{\n\t\tvar node = rank[i];\n\t\t\n\t\tif (node.isVertex())\n\t\t{\n\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tboundsWarning = true;\n\t\t\t}\n\n\t\t\tmaxY = Math.max(maxY, node.height);\n\t\t}\n\t\telse if (node.isEdge())\n\t\t{\n\t\t\t// The width is the number of additional parallel edges\n\t\t\t// time the parallel edge spacing\n\t\t\tvar numEdges = 1;\n\n\t\t\tif (node.edges != null)\n\t\t\t{\n\t\t\t\tnumEdges = node.edges.length;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t}\n\n\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t}\n\n\t\t// Set the initial x-value as being the best result so far\n\t\tlocalX += node.width / 2.0;\n\t\tnode.setX(rankValue, localX);\n\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\tlocalX += node.width / 2.0;\n\t\tlocalX += this.intraCellSpacing;\n\t}\n\n\tif (boundsWarning == true)\n\t{\n\t\tmxLog.warn('At least one cell has no bounds');\n\t}\n};\n\n/**\n * Function: calculateWidestRank\n * \n * Calculates the width rank in the hierarchy. Also set the y value of each\n * rank whilst performing the calculation\n * \n * Parameters:\n * \n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.calculateWidestRank = function(graph, model)\n{\n\t// Starting y co-ordinate\n\tvar y = -this.interRankCellSpacing;\n\t\n\t// Track the widest cell on the last rank since the y\n\t// difference depends on it\n\tvar lastRankMaxCellHeight = 0.0;\n\tthis.rankWidths = [];\n\tthis.rankY = [];\n\n\tfor (var rankValue = model.maxRank; rankValue >= 0; rankValue--)\n\t{\n\t\t// Keep track of the widest cell on this rank\n\t\tvar maxCellHeight = 0.0;\n\t\tvar rank = model.ranks[rankValue];\n\t\tvar localX = this.initialX;\n\n\t\t// Store whether or not any of the cells' bounds were unavailable so\n\t\t// to only issue the warning once for all cells\n\t\tvar boundsWarning = false;\n\t\t\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar node = rank[i];\n\n\t\t\tif (node.isVertex())\n\t\t\t{\n\t\t\t\tvar bounds = this.layout.getVertexBounds(node.cell);\n\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.width;\n\t\t\t\t\t\tnode.height = bounds.height;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.width = bounds.height;\n\t\t\t\t\t\tnode.height = bounds.width;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tboundsWarning = true;\n\t\t\t\t}\n\n\t\t\t\tmaxCellHeight = Math.max(maxCellHeight, node.height);\n\t\t\t}\n\t\t\telse if (node.isEdge())\n\t\t\t{\n\t\t\t\t// The width is the number of additional parallel edges\n\t\t\t\t// time the parallel edge spacing\n\t\t\t\tvar numEdges = 1;\n\n\t\t\t\tif (node.edges != null)\n\t\t\t\t{\n\t\t\t\t\tnumEdges = node.edges.length;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmxLog.warn('edge.edges is null');\n\t\t\t\t}\n\n\t\t\t\tnode.width = (numEdges - 1) * this.parallelEdgeSpacing;\n\t\t\t}\n\n\t\t\t// Set the initial x-value as being the best result so far\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tnode.setX(rankValue, localX);\n\t\t\tnode.setGeneralPurposeVariable(rankValue, localX);\n\t\t\tlocalX += node.width / 2.0;\n\t\t\tlocalX += this.intraCellSpacing;\n\n\t\t\tif (localX > this.widestRankValue)\n\t\t\t{\n\t\t\t\tthis.widestRankValue = localX;\n\t\t\t\tthis.widestRank = rankValue;\n\t\t\t}\n\n\t\t\tthis.rankWidths[rankValue] = localX;\n\t\t}\n\n\t\tif (boundsWarning == true)\n\t\t{\n\t\t\tmxLog.warn('At least one cell has no bounds');\n\t\t}\n\n\t\tthis.rankY[rankValue] = y;\n\t\tvar distanceToNextRank = maxCellHeight / 2.0\n\t\t\t\t+ lastRankMaxCellHeight / 2.0 + this.interRankCellSpacing;\n\t\tlastRankMaxCellHeight = maxCellHeight;\n\n\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\tthis.orientation == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\ty += distanceToNextRank;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ty -= distanceToNextRank;\n\t\t}\n\n\t\tfor (var i = 0; i < rank.length; i++)\n\t\t{\n\t\t\tvar cell = rank[i];\n\t\t\tcell.setY(rankValue, y);\n\t\t}\n\t}\n};\n\n/**\n * Function: minPath\n * \n * Straightens out chains of virtual nodes where possibleacade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the facade describing the input graph\n * model - an internal model of the hierarchical layout\n */\nmxCoordinateAssignment.prototype.minPath = function(graph, model)\n{\n\t// Work down and up each edge with at least 2 control points\n\t// trying to straighten each one out. If the same number of\n\t// straight segments are formed in both directions, the \n\t// preferred direction used is the one where the final\n\t// control points have the least offset from the connectable \n\t// region of the terminating vertices\n\tvar edges = model.edgeMapper.getValues();\n\t\n\tfor (var j = 0; j < edges.length; j++)\n\t{\n\t\tvar cell = edges[j];\n\t\t\n\t\tif (cell.maxRank - cell.minRank - 1 < 1)\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At least two virtual nodes in the edge\n\t\t// Check first whether the edge is already straight\n\t\tvar referenceX = cell\n\t\t\t\t.getGeneralPurposeVariable(cell.minRank + 1);\n\t\tvar edgeStraight = true;\n\t\tvar refSegCount = 0;\n\t\t\n\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t{\n\t\t\tvar x = cell.getGeneralPurposeVariable(i);\n\n\t\t\tif (referenceX != x)\n\t\t\t{\n\t\t\t\tedgeStraight = false;\n\t\t\t\treferenceX = x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trefSegCount++;\n\t\t\t}\n\t\t}\n\n\t\tif (!edgeStraight)\n\t\t{\n\t\t\tvar upSegCount = 0;\n\t\t\tvar downSegCount = 0;\n\t\t\tvar upXPositions = [];\n\t\t\tvar downXPositions = [];\n\n\t\t\tvar currentX = cell.getGeneralPurposeVariable(cell.minRank + 1);\n\n\t\t\tfor (var i = cell.minRank + 1; i < cell.maxRank - 1; i++)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment up with the current control point.\n\t\t\t\tvar nextX = cell.getX(i + 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i + 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = currentX;\n\t\t\t\t\tupSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tupXPositions[i - cell.minRank - 1] = nextX;\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\n\t\t\tcurrentX = cell.getX(i);\n\n\t\t\tfor (var i = cell.maxRank - 1; i > cell.minRank + 1; i--)\n\t\t\t{\n\t\t\t\t// Attempt to straight out the control point on the\n\t\t\t\t// next segment down with the current control point.\n\t\t\t\tvar nextX = cell.getX(i - 1);\n\n\t\t\t\tif (currentX == nextX)\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t}\n\t\t\t\telse if (this.repositionValid(model, cell, i - 1, currentX))\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = currentX;\n\t\t\t\t\tdownSegCount++;\n\t\t\t\t\t// Leave currentX at same value\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdownXPositions[i - cell.minRank - 2] = cell.getX(i-1);\n\t\t\t\t\tcurrentX = nextX;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (downSegCount > refSegCount || upSegCount > refSegCount)\n\t\t\t{\n\t\t\t\tif (downSegCount >= upSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply down calculation values\n\t\t\t\t\tfor (var i = cell.maxRank - 2; i > cell.minRank; i--)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, downXPositions[i - cell.minRank - 1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (upSegCount > downSegCount)\n\t\t\t\t{\n\t\t\t\t\t// Apply up calculation values\n\t\t\t\t\tfor (var i = cell.minRank + 2; i < cell.maxRank; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell.setX(i, upXPositions[i - cell.minRank - 2]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// Neither direction provided a favourable result\n\t\t\t\t\t// But both calculations are better than the\n\t\t\t\t\t// existing solution, so apply the one with minimal\n\t\t\t\t\t// offset to attached vertices at either end.\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: repositionValid\n * \n * Determines whether or not a node may be moved to the specified x \n * position on the specified rank\n * \n * Parameters:\n *\n * model - the layout model\n * cell - the cell being analysed\n * rank - the layer of the cell\n * position - the x position being sought\n */\nmxCoordinateAssignment.prototype.repositionValid = function(model, cell, rank, position)\n{\n\tvar rankArray = model.ranks[rank];\n\tvar rankIndex = -1;\n\n\tfor (var i = 0; i < rankArray.length; i++)\n\t{\n\t\tif (cell == rankArray[i])\n\t\t{\n\t\t\trankIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (rankIndex < 0)\n\t{\n\t\treturn false;\n\t}\n\n\tvar currentX = cell.getGeneralPurposeVariable(rank);\n\n\tif (position < currentX)\n\t{\n\t\t// Trying to move node to the left.\n\t\tif (rankIndex == 0)\n\t\t{\n\t\t\t// Left-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar leftCell = rankArray[rankIndex - 1];\n\t\tvar leftLimit = leftCell.getGeneralPurposeVariable(rank);\n\t\tleftLimit = leftLimit + leftCell.width / 2\n\t\t\t\t+ this.intraCellSpacing + cell.width / 2;\n\n\t\tif (leftLimit <= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (position > currentX)\n\t{\n\t\t// Trying to move node to the right.\n\t\tif (rankIndex == rankArray.length - 1)\n\t\t{\n\t\t\t// Right-most node, can move anywhere\n\t\t\treturn true;\n\t\t}\n\n\t\tvar rightCell = rankArray[rankIndex + 1];\n\t\tvar rightLimit = rightCell.getGeneralPurposeVariable(rank);\n\t\trightLimit = rightLimit - rightCell.width / 2\n\t\t\t\t- this.intraCellSpacing - cell.width / 2;\n\n\t\tif (rightLimit >= position)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\n/**\n * Function: setCellLocations\n * \n * Sets the cell locations in the facade to those stored after this layout\n * processing step has completed.\n * \n * Parameters:\n *\n * graph - the input graph\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.setCellLocations = function(graph, model)\n{\n\tthis.rankTopY = [];\n\tthis.rankBottomY = [];\n\n\tfor (var i = 0; i < model.ranks.length; i++)\n\t{\n\t\tthis.rankTopY[i] = Number.MAX_VALUE;\n\t\tthis.rankBottomY[i] = -Number.MAX_VALUE;\n\t}\n\t\n\tvar vertices = model.vertexMapper.getValues();\n\n\t// Process vertices all first, since they define the lower and \n\t// limits of each rank. Between these limits lie the channels\n\t// where the edges can be routed across the graph\n\n\tfor (var i = 0; i < vertices.length; i++)\n\t{\n\t\tthis.setVertexLocation(vertices[i]);\n\t}\n\t\n\t// Post process edge styles. Needs the vertex locations set for initial\n\t// values of the top and bottoms of each rank\n\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.ORTHOGONAL\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.POLYLINE\n\t\t\t|| this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t{\n\t\tthis.localEdgeProcessing(model);\n\t}\n\n\tvar edges = model.edgeMapper.getValues();\n\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tthis.setEdgePosition(edges[i]);\n\t}\n};\n\n/**\n * Function: localEdgeProcessing\n * \n * Separates the x position of edges as they connect to vertices\n * \n * Parameters:\n *\n * model - the layout model\n */\nmxCoordinateAssignment.prototype.localEdgeProcessing = function(model)\n{\n\t// Iterate through each vertex, look at the edges connected in\n\t// both directions.\n\tfor (var rankIndex = 0; rankIndex < model.ranks.length; rankIndex++)\n\t{\n\t\tvar rank = model.ranks[rankIndex];\n\n\t\tfor (var cellIndex = 0; cellIndex < rank.length; cellIndex++)\n\t\t{\n\t\t\tvar cell = rank[cellIndex];\n\n\t\t\tif (cell.isVertex())\n\t\t\t{\n\t\t\t\tvar currentCells = cell.getPreviousLayerConnectedCells(rankIndex);\n\n\t\t\t\tvar currentRank = rankIndex - 1;\n\n\t\t\t\t// Two loops, last connected cells, and next\n\t\t\t\tfor (var k = 0; k < 2; k++)\n\t\t\t\t{\n\t\t\t\t\tif (currentRank > -1\n\t\t\t\t\t\t\t&& currentRank < model.ranks.length\n\t\t\t\t\t\t\t&& currentCells != null\n\t\t\t\t\t\t\t&& currentCells.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar sortedCells = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < currentCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar sorter = new WeightedCellSorter(\n\t\t\t\t\t\t\t\t\tcurrentCells[j], currentCells[j].getX(currentRank));\n\t\t\t\t\t\t\tsortedCells.push(sorter);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsortedCells.sort(WeightedCellSorter.prototype.compare);\n\n\t\t\t\t\t\tvar leftLimit = cell.x[0] - cell.width / 2;\n\t\t\t\t\t\tvar rightLimit = leftLimit + cell.width;\n\n\t\t\t\t\t\t// Connected edge count starts at 1 to allow for buffer\n\t\t\t\t\t\t// with edge of vertex\n\t\t\t\t\t\tvar connectedEdgeCount = 0;\n\t\t\t\t\t\tvar connectedEdgeGroupCount = 0;\n\t\t\t\t\t\tvar connectedEdges = [];\n\t\t\t\t\t\t// Calculate width requirements for all connected edges\n\t\t\t\t\t\tfor (var j = 0; j < sortedCells.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar innerCell = sortedCells[j].cell;\n\t\t\t\t\t\t\tvar connections;\n\n\t\t\t\t\t\t\tif (innerCell.isVertex())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Get the connecting edge\n\t\t\t\t\t\t\t\tif (k == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsSource;\n\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnections = cell.connectsAsTarget;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor (var connIndex = 0; connIndex < connections.length; connIndex++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (connections[connIndex].source == innerCell\n\t\t\t\t\t\t\t\t\t\t\t|| connections[connIndex].target == innerCell)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeCount += connections[connIndex].edges\n\t\t\t\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\n\t\t\t\t\t\t\t\t\t\tconnectedEdges.push(connections[connIndex]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconnectedEdgeCount += innerCell.edges.length;\n\t\t\t\t\t\t\t\tconnectedEdgeGroupCount++;\n\t\t\t\t\t\t\t\tconnectedEdges.push(innerCell);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar requiredWidth = (connectedEdgeCount + 1)\n\t\t\t\t\t\t\t\t* this.prefHozEdgeSep;\n\n\t\t\t\t\t\t// Add a buffer on the edges of the vertex if the edge count allows\n\t\t\t\t\t\tif (cell.width > requiredWidth\n\t\t\t\t\t\t\t\t+ (2 * this.prefHozEdgeSep))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tleftLimit += this.prefHozEdgeSep;\n\t\t\t\t\t\t\trightLimit -= this.prefHozEdgeSep;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar availableWidth = rightLimit - leftLimit;\n\t\t\t\t\t\tvar edgeSpacing = availableWidth / connectedEdgeCount;\n\n\t\t\t\t\t\tvar currentX = leftLimit + edgeSpacing / 2.0;\n\t\t\t\t\t\tvar currentYOffset = this.minEdgeJetty - this.prefVertEdgeOff;\n\t\t\t\t\t\tvar maxYOffset = 0;\n\n\t\t\t\t\t\tfor (var j = 0; j < connectedEdges.length; j++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar numActualEdges = connectedEdges[j].edges\n\t\t\t\t\t\t\t\t\t.length;\n\t\t\t\t\t\t\tvar pos = this.jettyPositions[connectedEdges[j].ids[0]];\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (pos == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos = [];\n\t\t\t\t\t\t\t\tthis.jettyPositions[connectedEdges[j].ids[0]] = pos;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (j < connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset += this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (j > connectedEdgeCount / 2)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentYOffset -= this.prefVertEdgeOff;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// Ignore the case if equals, this means the second of 2\n\t\t\t\t\t\t\t// jettys with the same y (even number of edges)\n\n\t\t\t\t\t\t\tfor (var m = 0; m < numActualEdges; m++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2] = currentX;\n\t\t\t\t\t\t\t\tcurrentX += edgeSpacing;\n\t\t\t\t\t\t\t\tpos[m * 4 + k * 2 + 1] = currentYOffset;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmaxYOffset = Math.max(maxYOffset,\n\t\t\t\t\t\t\t\t\tcurrentYOffset);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentCells = cell.getNextLayerConnectedCells(rankIndex);\n\n\t\t\t\t\tcurrentRank = rankIndex + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: setEdgePosition\n * \n * Fixes the control points\n */\nmxCoordinateAssignment.prototype.setEdgePosition = function(cell)\n{\n\t// For parallel edges we need to seperate out the points a\n\t// little\n\tvar offsetX = 0;\n\t// Only set the edge control points once\n\n\tif (cell.temp[0] != 101207)\n\t{\n\t\tvar maxRank = cell.maxRank;\n\t\tvar minRank = cell.minRank;\n\t\t\n\t\tif (maxRank == minRank)\n\t\t{\n\t\t\tmaxRank = cell.source.maxRank;\n\t\t\tminRank = cell.target.minRank;\n\t\t}\n\t\t\n\t\tvar parallelEdgeCount = 0;\n\t\tvar jettys = this.jettyPositions[cell.ids[0]];\n\n\t\tvar source = cell.isReversed ? cell.target.cell : cell.source.cell;\n\t\tvar graph = this.layout.graph;\n\t\tvar layoutReversed = this.orientation == mxConstants.DIRECTION_EAST\n\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH;\n\n\t\tfor (var i = 0; i < cell.edges.length; i++)\n\t\t{\n\t\t\tvar realEdge = cell.edges[i];\n\t\t\tvar realSource = this.layout.getVisibleTerminal(realEdge, true);\n\n\t\t\t//List oldPoints = graph.getPoints(realEdge);\n\t\t\tvar newPoints = [];\n\n\t\t\t// Single length reversed edges end up with the jettys in the wrong\n\t\t\t// places. Since single length edges only have jettys, not segment\n\t\t\t// control points, we just say the edge isn't reversed in this section\n\t\t\tvar reversed = cell.isReversed;\n\t\t\t\n\t\t\tif (realSource != source)\n\t\t\t{\n\t\t\t\t// The real edges include all core model edges and these can go\n\t\t\t\t// in both directions. If the source of the hierarchical model edge\n\t\t\t\t// isn't the source of the specific real edge in this iteration\n\t\t\t\t// treat if as reversed\n\t\t\t\treversed = !reversed;\n\t\t\t}\n\n\t\t\t// First jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar y = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 1 + arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ty += jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelSource = graph.model.getTerminal(realEdge, true);\n\n\t\t\t\tif (this.layout.isPort(modelSource) && graph.model.getParent(modelSource) == realSource)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelSource);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realSource.geometry.x + cell.source.width * modelSource.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH\n\t\t\t\t\t\t|| this.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y + jetty));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t\t\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y + jetty, x));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Declare variables to define loop through edge points and \n\t\t\t// change direction if edge is reversed\n\n\t\t\tvar loopStart = cell.x.length - 1;\n\t\t\tvar loopLimit = -1;\n\t\t\tvar loopDelta = -1;\n\t\t\tvar currentRank = cell.maxRank - 1;\n\n\t\t\tif (reversed)\n\t\t\t{\n\t\t\t\tloopStart = 0;\n\t\t\t\tloopLimit = cell.x.length;\n\t\t\t\tloopDelta = 1;\n\t\t\t\tcurrentRank = cell.minRank + 1;\n\t\t\t}\n\t\t\t// Reversed edges need the points inserted in\n\t\t\t// reverse order\n\t\t\tfor (var j = loopStart; (cell.maxRank != cell.minRank) && j != loopLimit; j += loopDelta)\n\t\t\t{\n\t\t\t\t// The horizontal position in a vertical layout\n\t\t\t\tvar positionX = cell.x[j] + offsetX;\n\n\t\t\t\t// Work out the vertical positions in a vertical layout\n\t\t\t\t// in the edge buffer channels above and below this rank\n\t\t\t\tvar topChannelY = (this.rankTopY[currentRank] + this.rankBottomY[currentRank + 1]) / 2.0;\n\t\t\t\tvar bottomChannelY = (this.rankTopY[currentRank - 1] + this.rankBottomY[currentRank]) / 2.0;\n\n\t\t\t\tif (reversed)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = topChannelY;\n\t\t\t\t\ttopChannelY = bottomChannelY;\n\t\t\t\t\tbottomChannelY = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, topChannelY));\n\t\t\t\t\tnewPoints.push(new mxPoint(positionX, bottomChannelY));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tnewPoints.push(new mxPoint(topChannelY, positionX));\n\t\t\t\t\tnewPoints.push(new mxPoint(bottomChannelY, positionX));\n\t\t\t\t}\n\n\t\t\t\tthis.limitX = Math.max(this.limitX, positionX);\n\t\t\t\tcurrentRank += loopDelta;\n\t\t\t}\n\n\t\t\t// Second jetty of edge\n\t\t\tif (jettys != null)\n\t\t\t{\n\t\t\t\tvar arrayOffset = reversed ? 2 : 0;\n\t\t\t\tvar rankY = reversed ?\n\t\t\t\t\t\t(layoutReversed ? this.rankTopY[maxRank] : this.rankBottomY[maxRank]) :\n\t\t\t\t\t\t\t(layoutReversed ? this.rankBottomY[minRank] : this.rankTopY[minRank]);\n\t\t\t\tvar jetty = jettys[parallelEdgeCount * 4 + 3 - arrayOffset];\n\t\t\t\t\n\t\t\t\tif (reversed != layoutReversed)\n\t\t\t\t{\n\t\t\t\t\tjetty = -jetty;\n\t\t\t\t}\n\t\t\t\tvar y = rankY - jetty;\n\t\t\t\tvar x = jettys[parallelEdgeCount * 4 + 2 - arrayOffset];\n\t\t\t\t\n\t\t\t\tvar modelTarget = graph.model.getTerminal(realEdge, false);\n\t\t\t\tvar realTarget = this.layout.getVisibleTerminal(realEdge, false);\n\n\t\t\t\tif (this.layout.isPort(modelTarget) && graph.model.getParent(modelTarget) == realTarget)\n\t\t\t\t{\n\t\t\t\t\tvar state = graph.view.getState(modelTarget);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = state.x;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = realTarget.geometry.x + cell.target.width * modelTarget.geometry.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\t\t\t\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(x, y - jetty));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(x, y));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (this.layout.edgeStyle == mxHierarchicalEdgeStyle.CURVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tnewPoints.push(new mxPoint(y - jetty, x));\n\t\t\t\t\t}\n\n\t\t\t\t\tnewPoints.push(new mxPoint(y, x));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cell.isReversed)\n\t\t\t{\n\t\t\t\tthis.processReversedEdge(cell, realEdge);\n\t\t\t}\n\n\t\t\tthis.layout.setEdgePoints(realEdge, newPoints);\n\n\t\t\t// Increase offset so next edge is drawn next to\n\t\t\t// this one\n\t\t\tif (offsetX == 0.0)\n\t\t\t{\n\t\t\t\toffsetX = this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\telse if (offsetX > 0)\n\t\t\t{\n\t\t\t\toffsetX = -offsetX;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\toffsetX = -offsetX + this.parallelEdgeSpacing;\n\t\t\t}\n\t\t\t\n\t\t\tparallelEdgeCount++;\n\t\t}\n\n\t\tcell.temp[0] = 101207;\n\t}\n};\n\n\n/**\n * Function: setVertexLocation\n * \n * Fixes the position of the specified vertex.\n * \n * Parameters:\n * \n * cell - the vertex to position\n */\nmxCoordinateAssignment.prototype.setVertexLocation = function(cell)\n{\n\tvar realCell = cell.cell;\n\tvar positionX = cell.x[0] - cell.width / 2;\n\tvar positionY = cell.y[0] - cell.height / 2;\n\n\tthis.rankTopY[cell.minRank] = Math.min(this.rankTopY[cell.minRank], positionY);\n\tthis.rankBottomY[cell.minRank] = Math.max(this.rankBottomY[cell.minRank],\n\t\t\tpositionY + cell.height);\n\n\tif (this.orientation == mxConstants.DIRECTION_NORTH ||\n\t\tthis.orientation == mxConstants.DIRECTION_SOUTH)\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionX, positionY);\n\t}\n\telse\n\t{\n\t\tthis.layout.setVertexLocation(realCell, positionY, positionX);\n\t}\n\n\tthis.limitX = Math.max(this.limitX, positionX + cell.width);\n};\n\n/**\n * Function: processReversedEdge\n * \n * Hook to add additional processing\n * \n * Parameters:\n * \n * edge - the hierarchical model edge\n * realEdge - the real edge in the graph\n */\nmxCoordinateAssignment.prototype.processReversedEdge = function(graph, model)\n{\n\t// hook for subclassers\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneOrdering\n * \n * An implementation of the first stage of the Sugiyama layout. Straightforward\n * longest path calculation of layer assignment\n * \n * Constructor: mxSwimlaneOrdering\n *\n * Creates a cycle remover for the given internal model.\n */\nfunction mxSwimlaneOrdering(layout)\n{\n\tthis.layout = layout;\n};\n\n/**\n * Extends mxHierarchicalLayoutStage.\n */\nmxSwimlaneOrdering.prototype = new mxHierarchicalLayoutStage();\nmxSwimlaneOrdering.prototype.constructor = mxSwimlaneOrdering;\n\n/**\n * Variable: layout\n * \n * Reference to the enclosing <mxHierarchicalLayout>.\n */\nmxSwimlaneOrdering.prototype.layout = null;\n\n/**\n * Function: execute\n * \n * Takes the graph detail and configuration information within the facade\n * and creates the resulting laid out graph within that facade for further\n * use.\n */\nmxSwimlaneOrdering.prototype.execute = function(parent)\n{\n\tvar model = this.layout.getModel();\n\tvar seenNodes = new Object();\n\tvar unseenNodes = mxUtils.clone(model.vertexMapper, null, true);\n\t\n\t// Perform a dfs through the internal model. If a cycle is found,\n\t// reverse it.\n\tvar rootsArray = null;\n\t\n\tif (model.roots != null)\n\t{\n\t\tvar modelRoots = model.roots;\n\t\trootsArray = [];\n\t\t\n\t\tfor (var i = 0; i < modelRoots.length; i++)\n\t\t{\n\t\t\tvar nodeId = mxCellPath.create(modelRoots[i]);\n\t\t\trootsArray[i] = model.vertexMapper.get(modelRoots[i]);\n\t\t}\n\t}\n\n\tmodel.visit(function(parent, node, connectingEdge, layer, seen)\n\t{\n\t\t// Check if the cell is in it's own ancestor list, if so\n\t\t// invert the connecting edge and reverse the target/source\n\t\t// relationship to that edge in the parent and the cell\n\t\t// Ancestor hashes only line up within a swimlane\n\t\tvar isAncestor = parent != null && parent.swimlaneIndex == node.swimlaneIndex && node.isAncestor(parent);\n\n\t\t// If the source->target swimlane indices go from higher to\n\t\t// lower, the edge is reverse\n\t\tvar reversedOverSwimlane = parent != null && connectingEdge != null &&\n\t\t\t\t\t\tparent.swimlaneIndex < node.swimlaneIndex && connectingEdge.source == node;\n\n\t\tif (isAncestor)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsSource);\n\t\t\tnode.connectsAsSource.push(connectingEdge);\n\t\t\tparent.connectsAsTarget.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsTarget);\n\t\t}\n\t\telse if (reversedOverSwimlane)\n\t\t{\n\t\t\tconnectingEdge.invert();\n\t\t\tmxUtils.remove(connectingEdge, parent.connectsAsTarget);\n\t\t\tnode.connectsAsTarget.push(connectingEdge);\n\t\t\tparent.connectsAsSource.push(connectingEdge);\n\t\t\tmxUtils.remove(connectingEdge, node.connectsAsSource);\n\t\t}\n\t\t\n\t\tvar cellId = mxCellPath.create(node.cell);\n\t\tseenNodes[cellId] = node;\n\t\tdelete unseenNodes[cellId];\n\t}, rootsArray, true, null);\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxHierarchicalLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxHierarchicalLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxHierarchicalLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\nvar mxHierarchicalEdgeStyle =\n{\n\tORTHOGONAL: 1,\n\tPOLYLINE: 2,\n\tSTRAIGHT: 3,\n\tCURVE: 4\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxHierarchicalLayout.prototype = new mxGraphLayout();\nmxHierarchicalLayout.prototype.constructor = mxHierarchicalLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxHierarchicalLayout.prototype.roots = null;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxHierarchicalLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxHierarchicalLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxHierarchicalLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxHierarchicalLayout.prototype.parentBorder = 0;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxHierarchicalLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 50.\n */\nmxHierarchicalLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxHierarchicalLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges\n */\nmxHierarchicalLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxHierarchicalLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxHierarchicalLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxHierarchicalLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxHierarchicalLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices have different parents but are in the same \n * ancestry chain\n */\nmxHierarchicalLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxGraphHierarchyModel> formed of the layout.\n */\nmxHierarchicalLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxGraphHierarchyModel> for this layout algorithm.\n */\nmxHierarchicalLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * roots - Optional starting roots of the layout.\n */\nmxHierarchicalLayout.prototype.execute = function(parent, roots)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\tif (roots != null && !(roots instanceof Array))\n\t{\n\t\troots = [roots];\n\t}\n\t\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (roots == null && parent == null)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\t\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\t\n\tif (roots != null)\n\t{\n\t\tvar rootsCopy = [];\n\n\t\tfor (var i = 0; i < roots.length; i++)\n\t\t{\n\t\t\tvar ancestor = parent != null ? model.isAncestor(parent, roots[i]) : true;\n\t\t\t\n\t\t\tif (ancestor && model.isVertex(roots[i]))\n\t\t\t{\n\t\t\t\trootsCopy.push(roots[i]);\n\t\t\t}\n\t\t}\n\n\t\tthis.roots = rootsCopy;\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxHierarchicalLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (model.isVertex(cell) && this.graph.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxHierarchicalLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) ||\n\t\t\t\t((source != target) &&\n\t\t\t\t\t\t((target == cell && (this.parent == null || this.isAncestor(this.parent, source, this.traverseAncestors))) ||\n\t\t\t\t\t\t \t(source == cell && (this.parent == null || this.isAncestor(this.parent, target, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxHierarchicalLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxHierarchicalLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.roots == null && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\tthis.filterDescendants(parent, filledVertexSet);\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\twhile (!filledVertexSetEmpty)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(parent, filledVertexSet);\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\t\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\t// Iterate through the result removing parents who have children in this layout\n\t\n\t// Perform a layout for each seperate hierarchy\n\t// Track initial coordinate x-positioning\n\tvar initialX = 0;\n\n\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t{\n\t\tvar vertexSet = hierarchyVertices[i];\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var key in vertexSet)\n\t\t{\n\t\t\ttmp.push(vertexSet[key]);\n\t\t}\n\t\t\n\t\tthis.model = new mxGraphHierarchyModel(this, tmp, this.roots,\n\t\t\tparent, this.tightenToSource);\n\n\t\tthis.cycleStage(parent);\n\t\tthis.layeringStage();\n\t\t\n\t\tthis.crossingStage(parent);\n\t\tinitialX = this.placementStage(initialX, parent);\n\t}\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxHierarchicalLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxHierarchicalLayout.prototype.isPort = function(cell)\n{\n\tif (cell != null && cell.geometry != null)\n\t{\n\t\treturn cell.geometry.relative;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxHierarchicalLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n */\nmxHierarchicalLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar edgeIsSource = [];\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tedgeIsSource[i] = (this.getVisibleTerminal(edges[i], true) == vertex);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tif (!directed || edgeIsSource[i])\n\t\t\t\t{\n\t\t\t\t\tvar next = this.getVisibleTerminal(edges[i], !edgeIsSource[i]);\n\t\t\t\t\t\n\t\t\t\t\t// Check whether there are more edges incoming from the target vertex than outgoing\n\t\t\t\t\t// The hierarchical model treats bi-directional parallel edges as being sourced\n\t\t\t\t\t// from the more \"sourced\" terminal. If the directions are equal in number, the direction\n\t\t\t\t\t// is that of the natural direction from the roots of the layout.\n\t\t\t\t\t// The checks below are slightly more verbose than need be for performance reasons\n\t\t\t\t\tvar netCount = 1;\n\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (j == i)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar isSource2 = edgeIsSource[j];\n\t\t\t\t\t\t\tvar otherTerm = this.getVisibleTerminal(edges[j], !isSource2);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (otherTerm == next)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (isSource2)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tnetCount--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (netCount >= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcurrentComp = this.traverse(next, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxHierarchicalLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxMinimumCycleRemover(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxHierarchicalLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxHierarchicalLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxHierarchicalLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneLayout\n * \n * A hierarchical layout algorithm.\n * \n * Constructor: mxSwimlaneLayout\n *\n * Constructs a new hierarchical layout algorithm.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * orientation - Optional constant that defines the orientation of this\n * layout.\n * deterministic - Optional boolean that specifies if this layout should be\n * deterministic. Default is true.\n */\nfunction mxSwimlaneLayout(graph, orientation, deterministic)\n{\n\tmxGraphLayout.call(this, graph);\n\tthis.orientation = (orientation != null) ? orientation : mxConstants.DIRECTION_NORTH;\n\tthis.deterministic = (deterministic != null) ? deterministic : true;\n};\n\n/**\n * Extends mxGraphLayout.\n */\nmxSwimlaneLayout.prototype = new mxGraphLayout();\nmxSwimlaneLayout.prototype.constructor = mxSwimlaneLayout;\n\n/**\n * Variable: roots\n * \n * Holds the array of <mxCell> that this layout contains.\n */\nmxSwimlaneLayout.prototype.roots = null;\n\n/**\n * Variable: swimlanes\n * \n * Holds the array of <mxCell> of the ordered swimlanes to lay out\n */\nmxSwimlaneLayout.prototype.swimlanes = null;\n\n/**\n * Variable: dummyVertices\n * \n * Holds an array of <mxCell> of dummy vertices inserted during the layout\n * to pad out empty swimlanes\n */\nmxSwimlaneLayout.prototype.dummyVertices = null;\n\n/**\n * Variable: dummyVertexWidth\n * \n * The cell width of any dummy vertices inserted\n */\nmxSwimlaneLayout.prototype.dummyVertexWidth = 50;\n\n/**\n * Variable: resizeParent\n * \n * Specifies if the parent should be resized after the layout so that it\n * contains all the child cells. Default is false. See also <parentBorder>.\n */\nmxSwimlaneLayout.prototype.resizeParent = false;\n\n/**\n * Variable: maintainParentLocation\n * \n * Specifies if the parent location should be maintained, so that the\n * top, left corner stays the same before and after execution of\n * the layout. Default is false for backwards compatibility.\n */\nmxSwimlaneLayout.prototype.maintainParentLocation = false;\n\n/**\n * Variable: moveParent\n * \n * Specifies if the parent should be moved if <resizeParent> is enabled.\n * Default is false.\n */\nmxSwimlaneLayout.prototype.moveParent = false;\n\n/**\n * Variable: parentBorder\n * \n * The border to be added around the children if the parent is to be\n * resized using <resizeParent>. Default is 0.\n */\nmxSwimlaneLayout.prototype.parentBorder = 30;\n\n/**\n * Variable: intraCellSpacing\n * \n * The spacing buffer added between cells on the same layer. Default is 30.\n */\nmxSwimlaneLayout.prototype.intraCellSpacing = 30;\n\n/**\n * Variable: interRankCellSpacing\n * \n * The spacing buffer added between cell on adjacent layers. Default is 50.\n */\nmxSwimlaneLayout.prototype.interRankCellSpacing = 100;\n\n/**\n * Variable: interHierarchySpacing\n * \n * The spacing buffer between unconnected hierarchies. Default is 60.\n */\nmxSwimlaneLayout.prototype.interHierarchySpacing = 60;\n\n/**\n * Variable: parallelEdgeSpacing\n * \n * The distance between each parallel edge on each ranks for long edges\n */\nmxSwimlaneLayout.prototype.parallelEdgeSpacing = 10;\n\n/**\n * Variable: orientation\n * \n * The position of the root node(s) relative to the laid out graph in.\n * Default is <mxConstants.DIRECTION_NORTH>.\n */\nmxSwimlaneLayout.prototype.orientation = mxConstants.DIRECTION_NORTH;\n\n/**\n * Variable: fineTuning\n * \n * Whether or not to perform local optimisations and iterate multiple times\n * through the algorithm. Default is true.\n */\nmxSwimlaneLayout.prototype.fineTuning = true;\n\n/**\n * \n * Variable: tightenToSource\n * \n * Whether or not to tighten the assigned ranks of vertices up towards\n * the source cells.\n */\nmxSwimlaneLayout.prototype.tightenToSource = true;\n\n/**\n * Variable: disableEdgeStyle\n * \n * Specifies if the STYLE_NOEDGESTYLE flag should be set on edges that are\n * modified by the result. Default is true.\n */\nmxSwimlaneLayout.prototype.disableEdgeStyle = true;\n\n/**\n * Variable: traverseAncestors\n * \n * Whether or not to drill into child cells and layout in reverse\n * group order. This also cause the layout to navigate edges whose \n * terminal vertices  * have different parents but are in the same \n * ancestry chain\n */\nmxSwimlaneLayout.prototype.traverseAncestors = true;\n\n/**\n * Variable: model\n * \n * The internal <mxSwimlaneModel> formed of the layout.\n */\nmxSwimlaneLayout.prototype.model = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxSwimlaneLayout.prototype.edgesCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgeSourceTermCache = null;\n\n/**\n * Variable: edgesSet\n * \n * A cache of edges whose source terminal is the key\n */\nmxHierarchicalLayout.prototype.edgesTargetTermCache = null;\n\n/**\n * Variable: edgeStyle\n * \n * The style to apply between cell layers to edge segments\n */\nmxHierarchicalLayout.prototype.edgeStyle = mxHierarchicalEdgeStyle.POLYLINE;\n\n/**\n * Function: getModel\n * \n * Returns the internal <mxSwimlaneModel> for this layout algorithm.\n */\nmxSwimlaneLayout.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: execute\n * \n * Executes the layout for the children of the specified parent.\n * \n * Parameters:\n * \n * parent - Parent <mxCell> that contains the children to be laid out.\n * swimlanes - Ordered array of swimlanes to be laid out\n */\nmxSwimlaneLayout.prototype.execute = function(parent, swimlanes)\n{\n\tthis.parent = parent;\n\tvar model = this.graph.model;\n\tthis.edgesCache = new mxDictionary();\n\tthis.edgeSourceTermCache = new mxDictionary();\n\tthis.edgesTargetTermCache = new mxDictionary();\n\n\t// If the roots are set and the parent is set, only\n\t// use the roots that are some dependent of the that\n\t// parent.\n\t// If just the root are set, use them as-is\n\t// If just the parent is set use it's immediate\n\t// children as the initial set\n\n\tif (swimlanes == null || swimlanes.length < 1)\n\t{\n\t\t// TODO indicate the problem\n\t\treturn;\n\t}\n\n\tif (parent == null)\n\t{\n\t\tparent = model.getParent(swimlanes[0]);\n\t}\n\n\t//  Maintaining parent location\n\tthis.parentX = null;\n\tthis.parentY = null;\n\t\n\tif (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tthis.parentX = geo.x;\n\t\t\tthis.parentY = geo.y;\n\t\t}\n\t}\n\n\tthis.swimlanes = swimlanes;\n\tthis.dummyVertices = [];\n\t// Check the swimlanes all have vertices\n\t// in them\n\tfor (var i = 0; i < swimlanes.length; i++)\n\t{\n\t\tvar children = this.graph.getChildCells(swimlanes[i]);\n\t\t\n\t\tif (children == null || children.length == 0)\n\t\t{\n\t\t\tvar vertex = this.graph.insertVertex(swimlanes[i], null, null, 0, 0, this.dummyVertexWidth, 0);\n\t\t\tthis.dummyVertices.push(vertex);\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tthis.run(parent);\n\t\t\n\t\tif (this.resizeParent && !this.graph.isCellCollapsed(parent))\n\t\t{\n\t\t\tthis.graph.updateGroupBounds([parent], this.parentBorder, this.moveParent);\n\t\t}\n\t\t\n\t\t// Maintaining parent location\n\t\tif (this.parentX != null && this.parentY != null)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(parent);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.x = this.parentX;\n\t\t\t\tgeo.y = this.parentY;\n\t\t\t\tmodel.setGeometry(parent, geo);\n\t\t\t}\n\t\t}\n\n\t\tthis.graph.removeCells(this.dummyVertices);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given array of groups so that it includes\n * all child vertices.\n * \n */\nmxSwimlaneLayout.prototype.updateGroupBounds = function()\n{\n\t// Get all vertices and edge in the layout\n\tvar cells = [];\n\tvar model = this.model;\n\t\n\tfor (var key in model.edgeMapper)\n\t{\n\t\tvar edge = model.edgeMapper[key];\n\t\t\n\t\tfor (var i = 0; i < edge.edges.length; i++)\n\t\t{\n\t\t\tcells.push(edge.edges[i]);\n\t\t}\n\t}\n\t\n\tvar layoutBounds = this.graph.getBoundingBoxFromGeometry(cells, true);\n\tvar childBounds = [];\n\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar bounds = this.graph.getBoundingBoxFromGeometry(children);\n\t\t\tchildBounds[i] = bounds;\n\t\t\tvar childrenY = bounds.y + geo.y - size.height - this.parentBorder;\n\t\t\tvar maxChildrenY = bounds.y + geo.y + bounds.height;\n\n\t\t\tif (layoutBounds == null)\n\t\t\t{\n\t\t\t\tlayoutBounds = new mxRectangle(0, childrenY, 0, maxChildrenY - childrenY);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlayoutBounds.y = Math.min(layoutBounds.y, childrenY);\n\t\t\t\tvar maxY = Math.max(layoutBounds.y + layoutBounds.height, maxChildrenY);\n\t\t\t\tlayoutBounds.height = maxY - layoutBounds.y;\n\t\t\t}\n\t\t}\n\t}\n\n\t\n\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t{\n\t\tvar lane = this.swimlanes[i];\n\t\tvar geo = this.graph.getCellGeometry(lane);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tvar children = this.graph.getChildCells(lane);\n\t\t\t\n\t\t\tvar size = (this.graph.isSwimlane(lane)) ?\n\t\t\t\t\tthis.graph.getStartSize(lane) : new mxRectangle();\n\n\t\t\tvar newGeo = geo.clone();\n\t\t\t\n\t\t\tvar leftGroupBorder = (i == 0) ? this.parentBorder : this.interRankCellSpacing/2;\n\t\t\tnewGeo.x += childBounds[i].x - size.width - leftGroupBorder;\n\t\t\tnewGeo.y = newGeo.y + layoutBounds.y - geo.y - this.parentBorder;\n\t\t\t\n\t\t\tnewGeo.width = childBounds[i].width + size.width + this.interRankCellSpacing/2 + leftGroupBorder;\n\t\t\tnewGeo.height = layoutBounds.height + size.height + 2 * this.parentBorder;\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(lane, newGeo);\n\t\t\tthis.graph.moveCells(children, -childBounds[i].x + size.width + leftGroupBorder, \n\t\t\t\t\tgeo.y - layoutBounds.y + this.parentBorder);\n\t\t}\n\t}\n};\n\n/**\n * Function: findRoots\n * \n * Returns all visible children in the given parent which do not have\n * incoming edges. If the result is empty then the children with the\n * maximum difference between incoming and outgoing edges are returned.\n * This takes into account edges that are being promoted to the given\n * root due to invisible children or collapsed cells.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * vertices - array of vertices to limit search to\n */\nmxSwimlaneLayout.prototype.findRoots = function(parent, vertices)\n{\n\tvar roots = [];\n\t\n\tif (parent != null && vertices != null)\n\t{\n\t\tvar model = this.graph.model;\n\t\tvar best = null;\n\t\tvar maxDiff = -100000;\n\t\t\n\t\tfor (var i in vertices)\n\t\t{\n\t\t\tvar cell = vertices[i];\n\n\t\t\tif (cell != null && model.isVertex(cell) && this.graph.isCellVisible(cell) && model.isAncestor(parent, cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getEdges(cell);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\n\t\t\t\tfor (var k = 0; k < conns.length; k++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.getVisibleTerminal(conns[k], true);\n\n\t\t\t\t\tif (src == cell)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Only count connection within this swimlane\n\t\t\t\t\t\tvar other = this.getVisibleTerminal(conns[k], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (model.isAncestor(parent, other))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfanOut++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (model.isAncestor(parent, src))\n\t\t\t\t\t{\n\t\t\t\t\t\tfanIn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fanIn == 0 && fanOut > 0)\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\n\t\t\t\tvar diff = fanOut - fanIn;\n\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: getEdges\n * \n * Returns the connected edges for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n */\nmxSwimlaneLayout.prototype.getEdges = function(cell)\n{\n\tvar cachedEdges = this.edgesCache.get(cell);\n\t\n\tif (cachedEdges != null)\n\t{\n\t\treturn cachedEdges;\n\t}\n\n\tvar model = this.graph.model;\n\tvar edges = [];\n\tvar isCollapsed = this.graph.isCellCollapsed(cell);\n\tvar childCount = model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\n\t\tif (this.isPort(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t\telse if (isCollapsed || !this.graph.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(model.getEdges(child, true, true));\n\t\t}\n\t}\n\n\tedges = edges.concat(model.getEdges(cell, true, true));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar source = this.getVisibleTerminal(edges[i], true);\n\t\tvar target = this.getVisibleTerminal(edges[i], false);\n\t\t\n\t\tif ((source == target) || ((source != target) && ((target == cell && (this.parent == null || this.graph.isValidAncestor(source, this.parent, this.traverseAncestors))) ||\n\t\t\t(source == cell && (this.parent == null ||\n\t\t\t\t\tthis.graph.isValidAncestor(target, this.parent, this.traverseAncestors))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\tthis.edgesCache.put(cell, result);\n\n\treturn result;\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Helper function to return visible terminal for edge allowing for ports\n * \n * Parameters:\n * \n * edge - <mxCell> whose edges should be returned.\n * source - Boolean that specifies whether the source or target terminal is to be returned\n */\nmxSwimlaneLayout.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar terminalCache = this.edgesTargetTermCache;\n\t\n\tif (source)\n\t{\n\t\tterminalCache = this.edgeSourceTermCache;\n\t}\n\n\tvar term = terminalCache.get(edge);\n\n\tif (term != null)\n\t{\n\t\treturn term;\n\t}\n\n\tvar state = this.graph.view.getState(edge);\n\t\n\tvar terminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t\n\tif (terminal == null)\n\t{\n\t\tterminal = (state != null) ? state.getVisibleTerminal(source) : this.graph.view.getVisibleTerminal(edge, source);\n\t}\n\n\tif (terminal != null)\n\t{\n\t\tif (this.isPort(terminal))\n\t\t{\n\t\t\tterminal = this.graph.model.getParent(terminal);\n\t\t}\n\t\t\n\t\tterminalCache.put(edge, terminal);\n\t}\n\n\treturn terminal;\n};\n\n/**\n * Function: run\n * \n * The API method used to exercise the layout upon the graph description\n * and produce a separate description of the vertex position and edge\n * routing changes made. It runs each stage of the layout that has been\n * created.\n */\nmxSwimlaneLayout.prototype.run = function(parent)\n{\n\t// Separate out unconnected hierarchies\n\tvar hierarchyVertices = [];\n\tvar allVertexSet = [];\n\n\tif (this.swimlanes != null && this.swimlanes.length > 0 && parent != null)\n\t{\n\t\tvar filledVertexSet = Object();\n\t\t\n\t\tfor (var i = 0; i < this.swimlanes.length; i++)\n\t\t{\n\t\t\tthis.filterDescendants(this.swimlanes[i], filledVertexSet);\n\t\t}\n\n\t\tthis.roots = [];\n\t\tvar filledVertexSetEmpty = true;\n\n\t\t// Poor man's isSetEmpty\n\t\tfor (var key in filledVertexSet)\n\t\t{\n\t\t\tif (filledVertexSet[key] != null)\n\t\t\t{\n\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Only test for candidates in each swimlane in order\n\t\tvar laneCounter = 0;\n\n\t\twhile (!filledVertexSetEmpty && laneCounter < this.swimlanes.length)\n\t\t{\n\t\t\tvar candidateRoots = this.findRoots(this.swimlanes[laneCounter], filledVertexSet);\n\t\t\t\n\t\t\tif (candidateRoots.length == 0)\n\t\t\t{\n\t\t\t\tlaneCounter++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// If the candidate root is an unconnected group cell, remove it from\n\t\t\t// the layout. We may need a custom set that holds such groups and forces\n\t\t\t// them to be processed for resizing and/or moving.\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tvar vertexSet = Object();\n\t\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\t\tthis.traverse(candidateRoots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\t\thierarchyVertices, filledVertexSet, laneCounter);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < candidateRoots.length; i++)\n\t\t\t{\n\t\t\t\tthis.roots.push(candidateRoots[i]);\n\t\t\t}\n\t\t\t\n\t\t\tfilledVertexSetEmpty = true;\n\t\t\t\n\t\t\t// Poor man's isSetEmpty\n\t\t\tfor (var key in filledVertexSet)\n\t\t\t{\n\t\t\t\tif (filledVertexSet[key] != null)\n\t\t\t\t{\n\t\t\t\t\tfilledVertexSetEmpty = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Find vertex set as directed traversal from roots\n\n\t\tfor (var i = 0; i < this.roots.length; i++)\n\t\t{\n\t\t\tvar vertexSet = Object();\n\t\t\thierarchyVertices.push(vertexSet);\n\n\t\t\tthis.traverse(this.roots[i], true, null, allVertexSet, vertexSet,\n\t\t\t\t\thierarchyVertices, null);\n\t\t}\n\t}\n\n\tvar tmp = [];\n\t\n\tfor (var key in allVertexSet)\n\t{\n\t\ttmp.push(allVertexSet[key]);\n\t}\n\t\n\tthis.model = new mxSwimlaneModel(this, tmp, this.roots,\n\t\tparent, this.tightenToSource);\n\n\tthis.cycleStage(parent);\n\tthis.layeringStage();\n\t\n\tthis.crossingStage(parent);\n\tinitialX = this.placementStage(0, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Creates an array of descendant cells\n */\nmxSwimlaneLayout.prototype.filterDescendants = function(cell, result)\n{\n\tvar model = this.graph.model;\n\n\tif (model.isVertex(cell) && cell != this.parent && model.getParent(cell) != this.parent && this.graph.isCellVisible(cell))\n\t{\n\t\tresult[mxObjectIdentity.get(cell)] = cell;\n\t}\n\n\tif (this.traverseAncestors || cell == this.parent\n\t\t\t&& this.graph.isCellVisible(cell))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\n\t\t\t// Ignore ports in the layout vertex list, they are dealt with\n\t\t\t// in the traversal mechanisms\n\t\t\tif (!this.isPort(child))\n\t\t\t{\n\t\t\t\tthis.filterDescendants(child, result);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, its parent is the connecting vertex in terms of graph traversal\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxSwimlaneLayout.prototype.isPort = function(cell)\n{\n\tif (cell.geometry.relative)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and ports.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxSwimlaneLayout.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar src = this.getVisibleTerminal(edges[i], true);\n\t\tvar trg = this.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * allVertices - Array of cell paths for the visited cells.\n * swimlaneIndex - the laid out order index of the swimlane vertex is contained in\n */\nmxSwimlaneLayout.prototype.traverse = function(vertex, directed, edge, allVertices, currentComp,\n\t\t\t\t\t\t\t\t\t\t\thierarchyVertices, filledVertexSet, swimlaneIndex)\n{\n\tif (vertex != null && allVertices != null)\n\t{\n\t\t// Has this vertex been seen before in any traversal\n\t\t// And if the filled vertex set is populated, only \n\t\t// process vertices in that it contains\n\t\tvar vertexID = mxObjectIdentity.get(vertex);\n\t\t\n\t\tif ((allVertices[vertexID] == null)\n\t\t\t\t&& (filledVertexSet == null ? true : filledVertexSet[vertexID] != null))\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\tcurrentComp[vertexID] = vertex;\n\t\t\t}\n\t\t\tif (allVertices[vertexID] == null)\n\t\t\t{\n\t\t\t\tallVertices[vertexID] = vertex;\n\t\t\t}\n\n\t\t\tif (filledVertexSet !== null)\n\t\t\t{\n\t\t\t\tdelete filledVertexSet[vertexID];\n\t\t\t}\n\n\t\t\tvar edges = this.getEdges(vertex);\n\t\t\tvar model = this.graph.model;\n\n\t\t\tfor (var i = 0; i < edges.length; i++)\n\t\t\t{\n\t\t\t\tvar otherVertex = this.getVisibleTerminal(edges[i], true);\n\t\t\t\tvar isSource = otherVertex == vertex;\n\t\t\t\t\n\t\t\t\tif (isSource)\n\t\t\t\t{\n\t\t\t\t\totherVertex = this.getVisibleTerminal(edges[i], false);\n\t\t\t\t}\n\n\t\t\t\tvar otherIndex = 0;\n\t\t\t\t// Get the swimlane index of the other terminal\n\t\t\t\tfor (otherIndex = 0; otherIndex < this.swimlanes.length; otherIndex++)\n\t\t\t\t{\n\t\t\t\t\tif (model.isAncestor(this.swimlanes[otherIndex], otherVertex))\n\t\t\t\t\t{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (otherIndex >= this.swimlanes.length)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Traverse if the other vertex is within the same swimlane as\n\t\t\t\t// as the current vertex, or if the swimlane index of the other\n\t\t\t\t// vertex is greater than that of this vertex\n\t\t\t\tif ((otherIndex > swimlaneIndex) ||\n\t\t\t\t\t\t((!directed || isSource) && otherIndex == swimlaneIndex))\n\t\t\t\t{\n\t\t\t\t\tcurrentComp = this.traverse(otherVertex, directed, edges[i], allVertices,\n\t\t\t\t\t\t\tcurrentComp, hierarchyVertices,\n\t\t\t\t\t\t\tfilledVertexSet, otherIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (currentComp[vertexID] == null)\n\t\t\t{\n\t\t\t\t// We've seen this vertex before, but not in the current component\n\t\t\t\t// This component and the one it's in need to be merged\n\t\t\t\tfor (var i = 0; i < hierarchyVertices.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar comp = hierarchyVertices[i];\n\n\t\t\t\t\tif (comp[vertexID] != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tfor (var key in comp)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrentComp[key] = comp[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Remove the current component from the hierarchy set\n\t\t\t\t\t\thierarchyVertices.splice(i, 1);\n\t\t\t\t\t\treturn currentComp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn currentComp;\n};\n\n/**\n * Function: cycleStage\n * \n * Executes the cycle stage using mxMinimumCycleRemover.\n */\nmxSwimlaneLayout.prototype.cycleStage = function(parent)\n{\n\tvar cycleStage = new mxSwimlaneOrdering(this);\n\tcycleStage.execute(parent);\n};\n\n/**\n * Function: layeringStage\n * \n * Implements first stage of a Sugiyama layout.\n */\nmxSwimlaneLayout.prototype.layeringStage = function()\n{\n\tthis.model.initialRank();\n\tthis.model.fixRanks();\n};\n\n/**\n * Function: crossingStage\n * \n * Executes the crossing stage using mxMedianHybridCrossingReduction.\n */\nmxSwimlaneLayout.prototype.crossingStage = function(parent)\n{\n\tvar crossingStage = new mxMedianHybridCrossingReduction(this);\n\tcrossingStage.execute(parent);\n};\n\n/**\n * Function: placementStage\n * \n * Executes the placement stage using mxCoordinateAssignment.\n */\nmxSwimlaneLayout.prototype.placementStage = function(initialX, parent)\n{\n\tvar placementStage = new mxCoordinateAssignment(this, this.intraCellSpacing,\n\t\t\tthis.interRankCellSpacing, this.orientation, initialX,\n\t\t\tthis.parallelEdgeSpacing);\n\tplacementStage.fineTuning = this.fineTuning;\n\tplacementStage.execute(parent);\n\t\n\treturn placementStage.limitX + this.interHierarchySpacing;\n};\n/**\n * Copyright (c) 2006-2018, JGraph Ltd\n * Copyright (c) 2006-2018, Gaudenz Alder\n */\n/**\n * Class: mxGraphModel\n * \n * Extends <mxEventSource> to implement a graph model. The graph model acts as\n * a wrapper around the cells which are in charge of storing the actual graph\n * datastructure. The model acts as a transactional wrapper with event\n * notification for all changes, whereas the cells contain the atomic\n * operations for updating the actual datastructure.\n * \n * Layers:\n * \n * The cell hierarchy in the model must have a top-level root cell which\n * contains the layers (typically one default layer), which in turn contain the\n * top-level cells of the layers. This means each cell is contained in a layer.\n * If no layers are required, then all new cells should be added to the default\n * layer.\n * \n * Layers are useful for hiding and showing groups of cells, or for placing\n * groups of cells on top of other cells in the display. To identify a layer,\n * the <isLayer> function is used. It returns true if the parent of the given\n * cell is the root of the model.\n * \n * Events:\n * \n * See events section for more details. There is a new set of events for\n * tracking transactional changes as they happen. The events are called\n * startEdit for the initial beginUpdate, executed for each executed change\n * and endEdit for the terminal endUpdate. The executed event contains a\n * property called change which represents the change after execution.\n * \n * Encoding the model:\n * \n * To encode a graph model, use the following code:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will create an XML node that contains all the model information.\n * \n * Encoding and decoding changes:\n * \n * For the encoding of changes, a graph model listener is required that encodes\n * each change from the given array of changes.\n * \n * (code)\n * model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n *   var nodes = [];\n *   var codec = new mxCodec();\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     nodes.push(codec.encode(changes[i]));\n *   }\n *   // do something with the nodes\n * });\n * (end)\n * \n * For the decoding and execution of changes, the codec needs a lookup function\n * that allows it to resolve cell IDs as follows:\n * \n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * }\n * (end)\n * \n * For each encoded change (represented by a node), the following code can be\n * used to carry out the decoding and create a change object.\n * \n * (code)\n * var changes = [];\n * var change = codec.decode(node);\n * change.model = model;\n * change.execute();\n * changes.push(change);\n * (end)\n * \n * The changes can then be dispatched using the model as follows.\n * \n * (code)\n * var edit = new mxUndoableEdit(model, false);\n * edit.changes = changes;\n * \n * edit.notify = function()\n * {\n *   edit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n *   \t'edit', edit, 'changes', edit.changes));\n *   edit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n *   \t'edit', edit, 'changes', edit.changes));\n * }\n * \n * model.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n * model.fireEvent(new mxEventObject(mxEvent.CHANGE,\n * \t\t'edit', edit, 'changes', changes));\n * (end)\n *\n * Event: mxEvent.CHANGE\n *\n * Fires when an undoable edit is dispatched. The <code>edit</code> property\n * contains the <mxUndoableEdit>. The <code>changes</code> property contains\n * the array of atomic changes inside the undoable edit. The changes property\n * is <strong>deprecated</strong>, please use edit.changes instead.\n *\n * Example:\n * \n * For finding newly inserted cells, the following code can be used:\n * \n * (code)\n * graph.model.addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var changes = evt.getProperty('edit').changes;\n * \n *   for (var i = 0; i < changes.length; i++)\n *   {\n *     var change = changes[i];\n *     \n *     if (change instanceof mxChildChange &&\n *       change.change.previous == null)\n *     {\n *       graph.startEditingAtCell(change.child);\n *       break;\n *     }\n *   }\n * });\n * (end)\n * \n * \n * Event: mxEvent.NOTIFY\n *\n * Same as <mxEvent.CHANGE>, this event can be used for classes that need to\n * implement a sync mechanism between this model and, say, a remote model. In\n * such a setup, only local changes should trigger a notify event and all\n * changes should trigger a change event.\n * \n * Event: mxEvent.EXECUTE\n * \n * Fires between begin- and endUpdate and after an atomic change was executed\n * in the model. The <code>change</code> property contains the atomic change\n * that was executed.\n * \n * Event: mxEvent.EXECUTED\n * \n * Fires between START_EDIT and END_EDIT after an atomic change was executed.\n * The <code>change</code> property contains the change that was executed.\n *\n * Event: mxEvent.BEGIN_UPDATE\n *\n * Fires after the <updateLevel> was incremented in <beginUpdate>. This event\n * contains no properties.\n * \n * Event: mxEvent.START_EDIT\n *\n * Fires after the <updateLevel> was changed from 0 to 1. This event\n * contains no properties.\n * \n * Event: mxEvent.END_UPDATE\n * \n * Fires after the <updateLevel> was decreased in <endUpdate> but before any\n * notification or change dispatching. The <code>edit</code> property contains\n * the <currentEdit>.\n * \n * Event: mxEvent.END_EDIT\n *\n * Fires after the <updateLevel> was changed from 1 to 0. This event\n * contains no properties.\n * \n * Event: mxEvent.BEFORE_UNDO\n * \n * Fires before the change is dispatched after the update level has reached 0\n * in <endUpdate>. The <code>edit</code> property contains the <curreneEdit>.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the change was dispatched in <endUpdate>. The <code>edit</code>\n * property contains the <currentEdit>.\n * \n * Constructor: mxGraphModel\n * \n * Constructs a new graph model. If no root is specified then a new root\n * <mxCell> with a default layer is created.\n * \n * Parameters:\n * \n * root - <mxCell> that represents the root cell.\n */\nfunction mxGraphModel(root)\n{\n\tthis.currentEdit = this.createUndoableEdit();\n\t\n\tif (root != null)\n\t{\n\t\tthis.setRoot(root);\n\t}\n\telse\n\t{\n\t\tthis.clear();\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphModel.prototype = new mxEventSource();\nmxGraphModel.prototype.constructor = mxGraphModel;\n\n/**\n * Variable: root\n * \n * Holds the root cell, which in turn contains the cells that represent the\n * layers of the diagram as child cells. That is, the actual elements of the\n * diagram are supposed to live in the third generation of cells and below.\n */\nmxGraphModel.prototype.root = null;\n\n/**\n * Variable: cells\n * \n * Maps from Ids to cells.\n */\nmxGraphModel.prototype.cells = null;\n\n/**\n * Variable: maintainEdgeParent\n * \n * Specifies if edges should automatically be moved into the nearest common\n * ancestor of their terminals. Default is true.\n */\nmxGraphModel.prototype.maintainEdgeParent = true;\n\n/**\n * Variable: ignoreRelativeEdgeParent\n * \n * Specifies if relative edge parents should be ignored for finding the nearest\n * common ancestors of an edge's terminals. Default is true.\n */\nmxGraphModel.prototype.ignoreRelativeEdgeParent = true;\n\n/**\n * Variable: createIds\n * \n * Specifies if the model should automatically create Ids for new cells.\n * Default is true.\n */\nmxGraphModel.prototype.createIds = true;\n\n/**\n * Variable: prefix\n * \n * Defines the prefix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.prefix = '';\n\n/**\n * Variable: postfix\n * \n * Defines the postfix of new Ids. Default is an empty string.\n */\nmxGraphModel.prototype.postfix = '';\n\n/**\n * Variable: nextId\n * \n * Specifies the next Id to be created. Initial value is 0.\n */\nmxGraphModel.prototype.nextId = 0;\n\n/**\n * Variable: currentEdit\n * \n * Holds the changes for the current transaction. If the transaction is\n * closed then a new object is created for this variable using\n * <createUndoableEdit>.\n */\nmxGraphModel.prototype.currentEdit = null;\n\n/**\n * Variable: updateLevel\n * \n * Counter for the depth of nested transactions. Each call to <beginUpdate>\n * will increment this number and each call to <endUpdate> will decrement\n * it. When the counter reaches 0, the transaction is closed and the\n * respective events are fired. Initial value is 0.\n */\nmxGraphModel.prototype.updateLevel = 0;\n\n/**\n * Variable: endingUpdate\n * \n * True if the program flow is currently inside endUpdate.\n */\nmxGraphModel.prototype.endingUpdate = false;\n\n/**\n * Function: clear\n *\n * Sets a new root using <createRoot>.\n */\nmxGraphModel.prototype.clear = function()\n{\n\tthis.setRoot(this.createRoot());\n};\n\n/**\n * Function: isCreateIds\n *\n * Returns <createIds>.\n */\nmxGraphModel.prototype.isCreateIds = function()\n{\n\treturn this.createIds;\n};\n\n/**\n * Function: setCreateIds\n *\n * Sets <createIds>.\n */\nmxGraphModel.prototype.setCreateIds = function(value)\n{\n\tthis.createIds = value;\n};\n\n/**\n * Function: createRoot\n *\n * Creates a new root cell with a default layer (child 0).\n */\nmxGraphModel.prototype.createRoot = function()\n{\n\tvar cell = new mxCell();\n\tcell.insert(new mxCell());\n\t\n\treturn cell;\n};\n\n/**\n * Function: getCell\n *\n * Returns the <mxCell> for the specified Id or null if no cell can be\n * found for the given Id.\n *\n * Parameters:\n * \n * id - A string representing the Id of the cell.\n */\nmxGraphModel.prototype.getCell = function(id)\n{\n\treturn (this.cells != null) ? this.cells[id] : null;\n};\n\n/**\n * Function: filterCells\n * \n * Returns the cells from the given array where the given filter function\n * returns true.\n */\nmxGraphModel.prototype.filterCells = function(cells, filter)\n{\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (filter(cells[i]))\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getDescendants\n * \n * Returns all descendants of the given cell and the cell itself in an array.\n * \n * Parameters:\n * \n * parent - <mxCell> whose descendants should be returned.\n */\nmxGraphModel.prototype.getDescendants = function(parent)\n{\n\treturn this.filterDescendants(null, parent);\n};\n\n/**\n * Function: filterDescendants\n * \n * Visits all cells recursively and applies the specified filter function\n * to each cell. If the function returns true then the cell is added\n * to the resulting array. The parent and result paramters are optional.\n * If parent is not specified then the recursion starts at <root>.\n * \n * Example:\n * The following example extracts all vertices from a given model:\n * (code)\n * var filter = function(cell)\n * {\n * \treturn model.isVertex(cell);\n * }\n * var vertices = model.filterDescendants(filter);\n * (end)\n * \n * Parameters:\n * \n * filter - JavaScript function that takes an <mxCell> as an argument\n * and returns a boolean.\n * parent - Optional <mxCell> that is used as the root of the recursion.\n */\nmxGraphModel.prototype.filterDescendants = function(filter, parent)\n{\n\t// Creates a new array for storing the result\n\tvar result = [];\n\n\t// Recursion starts at the root of the model\n\tparent = parent || this.getRoot();\n\t\n\t// Checks if the filter returns true for the cell\n\t// and adds it to the result array\n\tif (filter == null || filter(parent))\n\t{\n\t\tresult.push(parent);\n\t}\n\t\n\t// Visits the children of the cell\n\tvar childCount = this.getChildCount(parent);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\t\tresult = result.concat(this.filterDescendants(filter, child));\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root of the model or the topmost parent of the given cell.\n *\n * Parameters:\n * \n * cell - Optional <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.getRoot = function(cell)\n{\n\tvar root = cell || this.root;\n\t\n\tif (cell != null)\n\t{\n\t\twhile (cell != null)\n\t\t{\n\t\t\troot = cell;\n\t\t\tcell = this.getParent(cell);\n\t\t}\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: setRoot\n * \n * Sets the <root> of the model using <mxRootChange> and adds the change to\n * the current transaction. This resets all datastructures in the model and\n * is the preferred way of clearing an existing model. Returns the new\n * root.\n * \n * Example:\n * \n * (code)\n * var root = new mxCell();\n * root.insert(new mxCell());\n * model.setRoot(root);\n * (end)\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.setRoot = function(root)\n{\n\tthis.execute(new mxRootChange(this, root));\n\t\n\treturn root;\n};\n\n/**\n * Function: rootChanged\n * \n * Inner callback to change the root of the model and update the internal\n * datastructures, such as <cells> and <nextId>. Returns the previous root.\n *\n * Parameters:\n * \n * root - <mxCell> that specifies the new root.\n */\nmxGraphModel.prototype.rootChanged = function(root)\n{\n\tvar oldRoot = this.root;\n\tthis.root = root;\n\t\n\t// Resets counters and datastructures\n\tthis.nextId = 0;\n\tthis.cells = null;\n\tthis.cellAdded(root);\n\t\n\treturn oldRoot;\n};\n\n/**\n * Function: isRoot\n * \n * Returns true if the given cell is the root of the model and a non-null\n * value.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible root.\n */\nmxGraphModel.prototype.isRoot = function(cell)\n{\n\treturn cell != null && this.root == cell;\n};\n\n/**\n * Function: isLayer\n * \n * Returns true if <isRoot> returns true for the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible layer.\n */\nmxGraphModel.prototype.isLayer = function(cell)\n{\n\treturn this.isRoot(this.getParent(cell));\n};\n\n/**\n * Function: isAncestor\n * \n * Returns true if the given parent is an ancestor of the given child. Note \n * returns true if child == parent.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent.\n * child - <mxCell> that specifies the child.\n */\nmxGraphModel.prototype.isAncestor = function(parent, child)\n{\n\twhile (child != null && child != parent)\n\t{\n\t\tchild = this.getParent(child);\n\t}\n\t\n\treturn child == parent;\n};\n\n/**\n * Function: contains\n * \n * Returns true if the model contains the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n */\nmxGraphModel.prototype.contains = function(cell)\n{\n\treturn this.isAncestor(this.root, cell);\n};\n\n/**\n * Function: getParent\n * \n * Returns the parent of the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose parent should be returned.\n */\nmxGraphModel.prototype.getParent = function(cell)\n{\n\treturn (cell != null) ? cell.getParent() : null;\n};\n\n/**\n * Function: add\n * \n * Adds the specified child to the parent at the given index using\n * <mxChildChange> and adds the change to the current transaction. If no\n * index is specified then the child is appended to the parent's array of\n * children. Returns the inserted child.\n * \n * Parameters:\n * \n * parent - <mxCell> that specifies the parent to contain the child.\n * child - <mxCell> that specifies the child to be inserted.\n * index - Optional integer that specifies the index of the child.\n */\nmxGraphModel.prototype.add = function(parent, child, index)\n{\n\tif (child != parent && parent != null && child != null)\n\t{\t\n\t\t// Appends the child if no index was specified\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount(parent);\n\t\t}\n\t\t\n\t\tvar parentChanged = parent != this.getParent(child);\n\t\tthis.execute(new mxChildChange(this, parent, child, index));\n\n\t\t// Maintains the edges parents by moving the edges\n\t\t// into the nearest common ancestor of its terminals\n\t\tif (this.maintainEdgeParent && parentChanged)\n\t\t{\n\t\t\tthis.updateEdgeParents(child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: cellAdded\n * \n * Inner callback to update <cells> when a cell has been added. This\n * implementation resolves collisions by creating new Ids. To change the\n * ID of a cell after it was inserted into the model, use the following\n * code:\n * \n * (code\n * delete model.cells[cell.getId()];\n * cell.setId(newId);\n * model.cells[cell.getId()] = cell;\n * (end)\n *\n * If the change of the ID should be part of the command history, then the\n * cell should be removed from the model and a clone with the new ID should\n * be reinserted into the model instead.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been added.\n */\nmxGraphModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\t// Creates an Id for the cell if not Id exists\n\t\tif (cell.getId() == null && this.createIds)\n\t\t{\n\t\t\tcell.setId(this.createId(cell));\n\t\t}\n\t\t\n\t\tif (cell.getId() != null)\n\t\t{\n\t\t\tvar collision = this.getCell(cell.getId());\n\t\t\t\n\t\t\tif (collision != cell)\n\t\t\t{\t\n\t\t\t\t// Creates new Id for the cell\n\t\t\t\t// as long as there is a collision\n\t\t\t\twhile (collision != null)\n\t\t\t\t{\n\t\t\t\t\tcell.setId(this.createId(cell));\n\t\t\t\t\tcollision = this.getCell(cell.getId());\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Lazily creates the cells dictionary\n\t\t\t\tif (this.cells == null)\n\t\t\t\t{\n\t\t\t\t\tthis.cells = new Object();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.cells[cell.getId()] = cell;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Makes sure IDs of deleted cells are not reused\n\t\tif (mxUtils.isNumeric(cell.getId()))\n\t\t{\n\t\t\tthis.nextId = Math.max(this.nextId, cell.getId());\n\t\t}\n\t\t\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tthis.cellAdded(this.getChildAt(cell, i));\n\t\t}\n\t}\n};\n\n/**\n * Function: createId\n * \n * Hook method to create an Id for the specified cell. This implementation\n * concatenates <prefix>, id and <postfix> to create the Id and increments\n * <nextId>. The cell is ignored by this implementation, but can be used in\n * overridden methods to prefix the Ids with eg. the cell type.\n *\n * Parameters:\n *\n * cell - <mxCell> to create the Id for.\n */\nmxGraphModel.prototype.createId = function(cell)\n{\n\tvar id = this.nextId;\n\tthis.nextId++;\n\t\n\treturn this.prefix + id + this.postfix;\n};\n\n/**\n * Function: updateEdgeParents\n * \n * Updates the parent for all edges that are connected to cell or one of\n * its descendants using <updateEdgeParent>.\n */\nmxGraphModel.prototype.updateEdgeParents = function(cell, root)\n{\n\t// Gets the topmost node of the hierarchy\n\troot = root || this.getRoot(cell);\n\t\n\t// Updates edges on children first\n\tvar childCount = this.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(cell, i);\n\t\tthis.updateEdgeParents(child, root);\n\t}\n\t\n\t// Updates the parents of all connected edges\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar edges = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tedges.push(this.getEdgeAt(cell, i));\n\t}\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar edge = edges[i];\n\t\t\n\t\t// Updates edge parent if edge and child have\n\t\t// a common root node (does not need to be the\n\t\t// model root node)\n\t\tif (this.isAncestor(root, edge))\n\t\t{\n\t\t\tthis.updateEdgeParent(edge, root);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateEdgeParent\n *\n * Inner callback to update the parent of the specified <mxCell> to the\n * nearest-common-ancestor of its two terminals.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * root - <mxCell> that represents the current root of the model.\n */\nmxGraphModel.prototype.updateEdgeParent = function(edge, root)\n{\n\tvar source = this.getTerminal(edge, true);\n\tvar target = this.getTerminal(edge, false);\n\tvar cell = null;\n\t\n\t// Uses the first non-relative descendants of the source terminal\n\twhile (source != null && !this.isEdge(source) &&\n\t\tsource.geometry != null && source.geometry.relative)\n\t{\n\t\tsource = this.getParent(source);\n\t}\n\t\n\t// Uses the first non-relative descendants of the target terminal\n\twhile (target != null && this.ignoreRelativeEdgeParent &&\n\t\t!this.isEdge(target) && target.geometry != null && \n\t\ttarget.geometry.relative)\n\t{\n\t\ttarget = this.getParent(target);\n\t}\n\t\n\tif (this.isAncestor(root, source) && this.isAncestor(root, target))\n\t{\n\t\tif (source == target)\n\t\t{\n\t\t\tcell = this.getParent(source);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcell = this.getNearestCommonAncestor(source, target);\n\t\t}\n\n\t\tif (cell != null && (this.getParent(cell) != this.root ||\n\t\t\tthis.isAncestor(cell, edge)) && this.getParent(edge) != cell)\n\t\t{\n\t\t\tvar geo = this.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar origin1 = this.getOrigin(this.getParent(edge));\n\t\t\t\tvar origin2 = this.getOrigin(cell);\n\t\t\t\t\n\t\t\t\tvar dx = origin2.x - origin1.x;\n\t\t\t\tvar dy = origin2.y - origin1.y;\n\t\t\t\t\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.translate(-dx, -dy);\n\t\t\t\tthis.setGeometry(edge, geo);\n\t\t\t}\n\n\t\t\tthis.add(cell, edge, this.getChildCount(cell));\n\t\t}\n\t}\n};\n\n/**\n * Function: getOrigin\n * \n * Returns the absolute, accumulated origin for the children inside the\n * given parent as an <mxPoint>.\n */\nmxGraphModel.prototype.getOrigin = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tresult = this.getOrigin(this.getParent(cell));\n\t\t\n\t\tif (!this.isEdge(cell))\n\t\t{\n\t\t\tvar geo = this.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tresult.x += geo.x;\n\t\t\t\tresult.y += geo.y;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint();\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getNearestCommonAncestor\n * \n * Returns the nearest common ancestor for the specified cells.\n *\n * Parameters:\n * \n * cell1 - <mxCell> that specifies the first cell in the tree.\n * cell2 - <mxCell> that specifies the second cell in the tree.\n */\nmxGraphModel.prototype.getNearestCommonAncestor = function(cell1, cell2)\n{\n\tif (cell1 != null && cell2 != null)\n\t{\t\t\n\t\t// Creates the cell path for the second cell\n\t\tvar path = mxCellPath.create(cell2);\n\n\t\tif (path != null && path.length > 0)\n\t\t{\n\t\t\t// Bubbles through the ancestors of the first\n\t\t\t// cell to find the nearest common ancestor.\n\t\t\tvar cell = cell1;\n\t\t\tvar current = mxCellPath.create(cell);\n\t\t\t\n\t\t\t// Inverts arguments\n\t\t\tif (path.length < current.length)\n\t\t\t{\n\t\t\t\tcell = cell2;\n\t\t\t\tvar tmp = current;\n\t\t\t\tcurrent = path;\n\t\t\t\tpath = tmp;\n\t\t\t}\n\t\t\t\n\t\t\twhile (cell != null)\n\t\t\t{\n\t\t\t\tvar parent = this.getParent(cell);\n\t\t\t\t\n\t\t\t\t// Checks if the cell path is equal to the beginning of the given cell path\n\t\t\t\tif (path.indexOf(current + mxCellPath.PATH_SEPARATOR) == 0 && parent != null)\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrent = mxCellPath.getParentPath(current);\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: remove\n * \n * Removes the specified cell from the model using <mxChildChange> and adds\n * the change to the current transaction. This operation will remove the\n * cell and all of its children from the model. Returns the removed cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be removed.\n */\nmxGraphModel.prototype.remove = function(cell)\n{\n\tif (cell == this.root)\n\t{\n\t\tthis.setRoot(null);\n\t}\n\telse if (this.getParent(cell) != null)\n\t{\n\t\tthis.execute(new mxChildChange(this, null, cell));\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellRemoved\n * \n * Inner callback to update <cells> when a cell has been removed.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell that has been removed.\n */\nmxGraphModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null && this.cells != null)\n\t{\n\t\t// Recursively processes child cells\n\t\tvar childCount = this.getChildCount(cell);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tthis.cellRemoved(this.getChildAt(cell, i));\n\t\t}\n\t\t\n\t\t// Removes the dictionary entry for the cell\n\t\tif (this.cells != null && cell.getId() != null)\n\t\t{\n\t\t\tdelete this.cells[cell.getId()];\n\t\t}\n\t}\n};\n\n/**\n * Function: parentForCellChanged\n * \n * Inner callback to update the parent of a cell using <mxCell.insert>\n * on the parent and return the previous parent.\n *\n * Parameters:\n * \n * cell - <mxCell> to update the parent for.\n * parent - <mxCell> that specifies the new parent of the cell.\n * index - Optional integer that defines the index of the child\n * in the parent's child array.\n */\nmxGraphModel.prototype.parentForCellChanged = function(cell, parent, index)\n{\n\tvar previous = this.getParent(cell);\n\t\n\tif (parent != null)\n\t{\n\t\tif (parent != previous || previous.getIndex(cell) != index)\n\t\t{\n\t\t\tparent.insert(cell, index);\n\t\t}\n\t}\n\telse if (previous != null)\n\t{\n\t\tvar oldIndex = previous.getIndex(cell);\n\t\tprevious.remove(oldIndex);\n\t}\n\t\n\t// Checks if the previous parent was already in the\n\t// model and avoids calling cellAdded if it was.\n\tif (!this.contains(previous) && parent != null)\n\t{\n\t\tthis.cellAdded(cell);\n\t}\n\telse if (parent == null)\n\t{\n\t\tthis.cellRemoved(cell);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of children in the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> whose number of children should be returned.\n */\nmxGraphModel.prototype.getChildCount = function(cell)\n{\n\treturn (cell != null) ? cell.getChildCount() : 0;\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child of the given <mxCell> at the given index.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the parent.\n * index - Integer that specifies the index of the child to be returned.\n */\nmxGraphModel.prototype.getChildAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getChildAt(index) : null;\n};\n\n/**\n * Function: getChildren\n * \n * Returns all children of the given <mxCell> as an array of <mxCells>. The\n * return value should be only be read.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n */\nmxGraphModel.prototype.getChildren = function(cell)\n{\n\treturn (cell != null) ? cell.children : null;\n};\n\t\n/**\n * Function: getChildVertices\n * \n * Returns the child vertices of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child vertices should be returned.\n */\nmxGraphModel.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\t\n/**\n * Function: getChildEdges\n * \n * Returns the child edges of the given parent.\n *\n * Parameters:\n * \n * cell - <mxCell> whose child edges should be returned.\n */\nmxGraphModel.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the children of the given cell that are vertices and/or edges\n * depending on the arguments.\n *\n * Parameters:\n * \n * cell - <mxCell> the represents the parent.\n * vertices - Boolean indicating if child vertices should be returned.\n * Default is false.\n * edges - Boolean indicating if child edges should be returned.\n * Default is false.\n */\nmxGraphModel.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\t\n\tvar childCount = this.getChildCount(parent);\n\tvar result = [];\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.getChildAt(parent, i);\n\n\t\tif ((!edges && !vertices) || (edges && this.isEdge(child)) ||\n\t\t\t(vertices && this.isVertex(child)))\n\t\t{\n\t\t\tresult.push(child);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\t\n/**\n * Function: getTerminal\n * \n * Returns the source or target <mxCell> of the given edge depending on the\n * value of the boolean parameter.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * isSource - Boolean indicating which end of the edge should be returned.\n */\nmxGraphModel.prototype.getTerminal = function(edge, isSource)\n{\n\treturn (edge != null) ? edge.getTerminal(isSource) : null;\n};\n\n/**\n * Function: setTerminal\n * \n * Sets the source or target terminal of the given <mxCell> using\n * <mxTerminalChange> and adds the change to the current transaction.\n * This implementation updates the parent of the edge using <updateEdgeParent>\n * if required.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.setTerminal = function(edge, terminal, isSource)\n{\n\tvar terminalChanged = terminal != this.getTerminal(edge, isSource);\n\tthis.execute(new mxTerminalChange(this, edge, terminal, isSource));\n\t\n\tif (this.maintainEdgeParent && terminalChanged)\n\t{\n\t\tthis.updateEdgeParent(edge, this.getRoot());\n\t}\n\t\n\treturn terminal;\n};\n\t\n/**\n * Function: setTerminals\n * \n * Sets the source and target <mxCell> of the given <mxCell> in a single\n * transaction using <setTerminal> for each end of the edge.\n *\n * Parameters:\n * \n * edge - <mxCell> that specifies the edge.\n * source - <mxCell> that specifies the new source terminal.\n * target - <mxCell> that specifies the new target terminal.\n */\nmxGraphModel.prototype.setTerminals = function(edge, source, target)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tthis.setTerminal(edge, source, true);\n\t\tthis.setTerminal(edge, target, false);\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: terminalForCellChanged\n * \n * Inner helper function to update the terminal of the edge using\n * <mxCell.insertEdge> and return the previous terminal.\n * \n * Parameters:\n * \n * edge - <mxCell> that specifies the edge to be updated.\n * terminal - <mxCell> that specifies the new terminal.\n * isSource - Boolean indicating if the terminal is the new source or\n * target terminal of the edge.\n */\nmxGraphModel.prototype.terminalForCellChanged = function(edge, terminal, isSource)\n{\n\tvar previous = this.getTerminal(edge, isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.insertEdge(edge, isSource);\n\t}\n\telse if (previous != null)\n\t{\n\t\tprevious.removeEdge(edge, isSource);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: getEdgeCount\n * \n * Returns the number of distinct edges connected to the given cell.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the vertex.\n */\nmxGraphModel.prototype.getEdgeCount = function(cell)\n{\n\treturn (cell != null) ? cell.getEdgeCount() : 0;\n};\n\n/**\n * Function: getEdgeAt\n * \n * Returns the edge of cell at the given index.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the vertex.\n * index - Integer that specifies the index of the edge\n * to return.\n */\nmxGraphModel.prototype.getEdgeAt = function(cell, index)\n{\n\treturn (cell != null) ? cell.getEdgeAt(index) : null;\n};\n\t\n/**\n * Function: getDirectedEdgeCount\n * \n * Returns the number of incoming or outgoing edges, ignoring the given\n * edge.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edge count should be returned.\n * outgoing - Boolean that specifies if the number of outgoing or\n * incoming edges should be returned.\n * ignoredEdge - <mxCell> that represents an edge to be ignored.\n */\nmxGraphModel.prototype.getDirectedEdgeCount = function(cell, outgoing, ignoredEdge)\n{\n\tvar count = 0;\n\tvar edgeCount = this.getEdgeCount(cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\n\t\tif (edge != ignoredEdge && this.getTerminal(edge, outgoing) == cell)\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n};\n\n/**\n * Function: getConnections\n * \n * Returns all edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * \n */\nmxGraphModel.prototype.getConnections = function(cell)\n{\n\treturn this.getEdges(cell, true, true, false);\n};\n\n/**\n * Function: getIncomingEdges\n * \n * Returns the incoming edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * \n */\nmxGraphModel.prototype.getIncomingEdges = function(cell)\n{\n\treturn this.getEdges(cell, true, false, false);\n};\n\n/**\n * Function: getOutgoingEdges\n * \n * Returns the outgoing edges of the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * \n */\nmxGraphModel.prototype.getOutgoingEdges = function(cell)\n{\n\treturn this.getEdges(cell, false, true, false);\n};\n\n/**\n * Function: getEdges\n * \n * Returns all distinct edges connected to this cell as a new array of\n * <mxCells>. If at least one of incoming or outgoing is true, then loops\n * are ignored, otherwise if both are false, then all edges connected to\n * the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> that specifies the cell.\n * incoming - Optional boolean that specifies if incoming edges should be\n * returned. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should be\n * returned. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be returned.\n * Default is true. \n */\nmxGraphModel.prototype.getEdges = function(cell, incoming, outgoing, includeLoops)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\t\n\tvar edgeCount = this.getEdgeCount(cell);\n\tvar result = [];\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(cell, i);\n\t\tvar source = this.getTerminal(edge, true);\n\t\tvar target = this.getTerminal(edge, false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming && target == cell) ||\n\t\t\t(outgoing && source == cell))))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns all edges between the given source and target pair. If directed\n * is true, then only edges from the source to the target are returned,\n * otherwise, all edges between the two cells are returned.\n * \n * Parameters:\n * \n * source - <mxCell> that defines the source terminal of the edge to be\n * returned.\n * target - <mxCell> that defines the target terminal of the edge to be\n * returned.\n * directed - Optional boolean that specifies if the direction of the\n * edge should be taken into account. Default is false.\n */\nmxGraphModel.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\t\n\tvar tmp1 = this.getEdgeCount(source);\n\tvar tmp2 = this.getEdgeCount(target);\n\t\n\t// Assumes the source has less connected edges\n\tvar terminal = source;\n\tvar edgeCount = tmp1;\n\t\n\t// Uses the smaller array of connected edges\n\t// for searching the edge\n\tif (tmp2 < tmp1)\n\t{\n\t\tedgeCount = tmp2;\n\t\tterminal = target;\n\t}\n\t\n\tvar result = [];\n\t\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar edge = this.getEdgeAt(terminal, i);\n\t\tvar src = this.getTerminal(edge, true);\n\t\tvar trg = this.getTerminal(edge, false);\n\t\tvar directedMatch = (src == source) && (trg == target);\n\t\tvar oppositeMatch = (trg == source) && (src == target);\n\n\t\tif (directedMatch || (!directed && oppositeMatch))\n\t\t{\n\t\t\tresult.push(edge);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all opposite vertices wrt terminal for the given edges, only\n * returning sources and/or targets as specified. The result is returned\n * as an array of <mxCells>.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contain the edges to be examined.\n * terminal - <mxCell> that specifies the known end of the edges.\n * sources - Boolean that specifies if source terminals should be contained\n * in the result. Default is true.\n * targets - Boolean that specifies if target terminals should be contained\n * in the result. Default is true.\n */\nmxGraphModel.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar source = this.getTerminal(edges[i], true);\n\t\t\tvar target = this.getTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of\n\t\t\t// the edge and if the target should be\n\t\t\t// stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tterminals.push(target);\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of\n\t\t\t// the edge and if the source should be\n\t\t\t// stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tterminals.push(source);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getTopmostCells\n * \n * Returns the topmost cells of the hierarchy in an array that contains no\n * descendants for each <mxCell> that it contains. Duplicates should be\n * removed in the cells array to improve performance.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose topmost ancestors should be returned.\n */\nmxGraphModel.prototype.getTopmostCells = function(cells)\n{\n\tvar dict = new mxDictionary();\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tdict.put(cells[i], true);\n\t}\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tvar cell = cells[i];\n\t\tvar topmost = true;\n\t\tvar parent = this.getParent(cell);\n\t\t\n\t\twhile (parent != null)\n\t\t{\n\t\t\tif (dict.get(parent))\n\t\t\t{\n\t\t\t\ttopmost = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tparent = this.getParent(parent);\n\t\t}\n\t\t\n\t\tif (topmost)\n\t\t{\n\t\t\ttmp.push(cell);\n\t\t}\n\t}\n\t\n\treturn tmp;\n};\n\n/**\n * Function: isVertex\n * \n * Returns true if the given cell is a vertex.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible vertex.\n */\nmxGraphModel.prototype.isVertex = function(cell)\n{\n\treturn (cell != null) ? cell.isVertex() : false;\n};\n\n/**\n * Function: isEdge\n * \n * Returns true if the given cell is an edge.\n *\n * Parameters:\n * \n * cell - <mxCell> that represents the possible edge.\n */\nmxGraphModel.prototype.isEdge = function(cell)\n{\n\treturn (cell != null) ? cell.isEdge() : false;\n};\n\n/**\n * Function: isConnectable\n * \n * Returns true if the given <mxCell> is connectable. If <edgesConnectable>\n * is false, then this function returns false for all edges else it returns\n * the return value of <mxCell.isConnectable>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraphModel.prototype.isConnectable = function(cell)\n{\n\treturn (cell != null) ? cell.isConnectable() : false;\n};\n\n/**\n * Function: getValue\n * \n * Returns the user object of the given <mxCell> using <mxCell.getValue>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be returned.\n */\nmxGraphModel.prototype.getValue = function(cell)\n{\n\treturn (cell != null) ? cell.getValue() : null;\n};\n\n/**\n * Function: setValue\n * \n * Sets the user object of then given <mxCell> using <mxValueChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose user object should be changed.\n * value - Object that defines the new user object.\n */\nmxGraphModel.prototype.setValue = function(cell, value)\n{\n\tthis.execute(new mxValueChange(this, cell, value));\n\t\n\treturn value;\n};\n\n/**\n * Function: valueForCellChanged\n * \n * Inner callback to update the user object of the given <mxCell>\n * using <mxCell.valueChanged> and return the previous value,\n * that is, the return value of <mxCell.valueChanged>.\n * \n * To change a specific attribute in an XML node, the following code can be\n * used.\n * \n * (code)\n * graph.getModel().valueForCellChanged = function(cell, value)\n * {\n *   var previous = cell.value.getAttribute('label');\n *   cell.value.setAttribute('label', value);\n *   \n *   return previous;\n * };\n * (end) \n */\nmxGraphModel.prototype.valueForCellChanged = function(cell, value)\n{\n\treturn cell.valueChanged(value);\n};\n\n/**\n * Function: getGeometry\n * \n * Returns the <mxGeometry> of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraphModel.prototype.getGeometry = function(cell)\n{\n\treturn (cell != null) ? cell.getGeometry() : null;\n};\n\n/**\n * Function: setGeometry\n * \n * Sets the <mxGeometry> of the given <mxCell>. The actual update\n * of the cell is carried out in <geometryForCellChanged>. The\n * <mxGeometryChange> action is used to encapsulate the change.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be changed.\n * geometry - <mxGeometry> that defines the new geometry.\n */\nmxGraphModel.prototype.setGeometry = function(cell, geometry)\n{\n\tif (geometry != this.getGeometry(cell))\n\t{\n\t\tthis.execute(new mxGeometryChange(this, cell, geometry));\n\t}\n\t\n\treturn geometry;\n};\n\n/**\n * Function: geometryForCellChanged\n * \n * Inner callback to update the <mxGeometry> of the given <mxCell> using\n * <mxCell.setGeometry> and return the previous <mxGeometry>.\n */\nmxGraphModel.prototype.geometryForCellChanged = function(cell, geometry)\n{\n\tvar previous = this.getGeometry(cell);\n\tcell.setGeometry(geometry);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getStyle\n * \n * Returns the style of the given <mxCell>.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be returned.\n */\nmxGraphModel.prototype.getStyle = function(cell)\n{\n\treturn (cell != null) ? cell.getStyle() : null;\n};\n\n/**\n * Function: setStyle\n * \n * Sets the style of the given <mxCell> using <mxStyleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose style should be changed.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.setStyle = function(cell, style)\n{\n\tif (style != this.getStyle(cell))\n\t{\n\t\tthis.execute(new mxStyleChange(this, cell, style));\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: styleForCellChanged\n * \n * Inner callback to update the style of the given <mxCell>\n * using <mxCell.setStyle> and return the previous style.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * style - String of the form [stylename;|key=value;] to specify\n * the new cell style.\n */\nmxGraphModel.prototype.styleForCellChanged = function(cell, style)\n{\n\tvar previous = this.getStyle(cell);\n\tcell.setStyle(style);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isCollapsed\n * \n * Returns true if the given <mxCell> is collapsed.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraphModel.prototype.isCollapsed = function(cell)\n{\n\treturn (cell != null) ? cell.isCollapsed() : false;\n};\n\n/**\n * Function: setCollapsed\n * \n * Sets the collapsed state of the given <mxCell> using <mxCollapseChange>\n * and adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be changed.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.setCollapsed = function(cell, collapsed)\n{\n\tif (collapsed != this.isCollapsed(cell))\n\t{\n\t\tthis.execute(new mxCollapseChange(this, cell, collapsed));\n\t}\n\t\n\treturn collapsed;\n};\n\t\n/**\n * Function: collapsedStateForCellChanged\n *\n * Inner callback to update the collapsed state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous collapsed state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * collapsed - Boolean that specifies the new collpased state.\n */\nmxGraphModel.prototype.collapsedStateForCellChanged = function(cell, collapsed)\n{\n\tvar previous = this.isCollapsed(cell);\n\tcell.setCollapsed(collapsed);\n\t\n\treturn previous;\n};\n\n/**\n * Function: isVisible\n * \n * Returns true if the given <mxCell> is visible.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraphModel.prototype.isVisible = function(cell)\n{\n\treturn (cell != null) ? cell.isVisible() : false;\n};\n\n/**\n * Function: setVisible\n * \n * Sets the visible state of the given <mxCell> using <mxVisibleChange> and\n * adds the change to the current transaction.\n *\n * Parameters:\n * \n * cell - <mxCell> whose visible state should be changed.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.setVisible = function(cell, visible)\n{\n\tif (visible != this.isVisible(cell))\n\t{\n\t\tthis.execute(new mxVisibleChange(this, cell, visible));\n\t}\n\t\n\treturn visible;\n};\n\t\n/**\n * Function: visibleStateForCellChanged\n *\n * Inner callback to update the visible state of the\n * given <mxCell> using <mxCell.setCollapsed> and return\n * the previous visible state.\n *\n * Parameters:\n * \n * cell - <mxCell> that specifies the cell to be updated.\n * visible - Boolean that specifies the new visible state.\n */\nmxGraphModel.prototype.visibleStateForCellChanged = function(cell, visible)\n{\n\tvar previous = this.isVisible(cell);\n\tcell.setVisible(visible);\n\t\n\treturn previous;\n};\n\n/**\n * Function: execute\n * \n * Executes the given edit and fires events if required. The edit object\n * requires an execute function which is invoked. The edit is added to the\n * <currentEdit> between <beginUpdate> and <endUpdate> calls, so that\n * events will be fired if this execute is an individual transaction, that\n * is, if no previous <beginUpdate> calls have been made without calling\n * <endUpdate>. This implementation fires an <execute> event before\n * executing the given change.\n * \n * Parameters:\n * \n * change - Object that described the change.\n */\nmxGraphModel.prototype.execute = function(change)\n{\n\tchange.execute();\n\tthis.beginUpdate();\n\tthis.currentEdit.add(change);\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTE, 'change', change));\n\t// New global executed event\n\tthis.fireEvent(new mxEventObject(mxEvent.EXECUTED, 'change', change));\n\tthis.endUpdate();\n};\n\n/**\n * Function: beginUpdate\n * \n * Increments the <updateLevel> by one. The event notification\n * is queued until <updateLevel> reaches 0 by use of\n * <endUpdate>.\n *\n * All changes on <mxGraphModel> are transactional,\n * that is, they are executed in a single undoable change\n * on the model (without transaction isolation).\n * Therefore, if you want to combine any\n * number of changes into a single undoable change,\n * you should group any two or more API calls that\n * modify the graph model between <beginUpdate>\n * and <endUpdate> calls as shown here:\n * \n * (code)\n * var model = graph.getModel();\n * var parent = graph.getDefaultParent();\n * var index = model.getChildCount(parent);\n * model.beginUpdate();\n * try\n * {\n *   model.add(parent, v1, index);\n *   model.add(parent, v2, index+1);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * Of course there is a shortcut for appending a\n * sequence of cells into the default parent:\n * \n * (code)\n * graph.addCells([v1, v2]).\n * (end)\n */\nmxGraphModel.prototype.beginUpdate = function()\n{\n\tthis.updateLevel++;\n\tthis.fireEvent(new mxEventObject(mxEvent.BEGIN_UPDATE));\n\t\n\tif (this.updateLevel == 1)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDIT));\n\t}\n};\n\n/**\n * Function: endUpdate\n * \n * Decrements the <updateLevel> by one and fires an <undo>\n * event if the <updateLevel> reaches 0. This function\n * indirectly fires a <change> event by invoking the notify\n * function on the <currentEdit> und then creates a new\n * <currentEdit> using <createUndoableEdit>.\n *\n * The <undo> event is fired only once per edit, whereas\n * the <change> event is fired whenever the notify\n * function is invoked, that is, on undo and redo of\n * the edit.\n */\nmxGraphModel.prototype.endUpdate = function()\n{\n\tthis.updateLevel--;\n\t\n\tif (this.updateLevel == 0)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_EDIT));\n\t}\n\t\n\tif (!this.endingUpdate)\n\t{\n\t\tthis.endingUpdate = this.updateLevel == 0;\n\t\tthis.fireEvent(new mxEventObject(mxEvent.END_UPDATE, 'edit', this.currentEdit));\n\n\t\ttry\n\t\t{\t\t\n\t\t\tif (this.endingUpdate && !this.currentEdit.isEmpty())\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_UNDO, 'edit', this.currentEdit));\n\t\t\t\tvar tmp = this.currentEdit;\n\t\t\t\tthis.currentEdit = this.createUndoableEdit();\n\t\t\t\ttmp.notify();\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', tmp));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.endingUpdate = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: createUndoableEdit\n * \n * Creates a new <mxUndoableEdit> that implements the\n * notify function to fire a <change> and <notify> event\n * through the <mxUndoableEdit>'s source.\n * \n * Parameters:\n * \n * significant - Optional boolean that specifies if the edit to be created is\n * significant. Default is true.\n */\nmxGraphModel.prototype.createUndoableEdit = function(significant)\n{\n\tvar edit = new mxUndoableEdit(this, (significant != null) ? significant : true);\n\t\n\tedit.notify = function()\n\t{\n\t\t// LATER: Remove changes property (deprecated)\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t\tedit.source.fireEvent(new mxEventObject(mxEvent.NOTIFY,\n\t\t\t'edit', edit, 'changes', edit.changes));\n\t};\n\t\n\treturn edit;\n};\n\n/**\n * Function: mergeChildren\n * \n * Merges the children of the given cell into the given target cell inside\n * this model. All cells are cloned unless there is a corresponding cell in\n * the model with the same id, in which case the source cell is ignored and\n * all edges are connected to the corresponding cell in this model. Edges\n * are considered to have no identity and are always cloned unless the\n * cloneAllEdges flag is set to false, in which case edges with the same\n * id in the target model are reconnected to reflect the terminals of the\n * source edges.\n */\nmxGraphModel.prototype.mergeChildren = function(from, to, cloneAllEdges)\n{\n\tcloneAllEdges = (cloneAllEdges != null) ? cloneAllEdges : true;\n\t\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar mapping = new Object();\n\t\tthis.mergeChildrenImpl(from, to, cloneAllEdges, mapping);\n\t\t\n\t\t// Post-processes all edges in the mapping and\n\t\t// reconnects the terminals to the corresponding\n\t\t// cells in the target model\n\t\tfor (var key in mapping)\n\t\t{\n\t\t\tvar cell = mapping[key];\n\t\t\tvar terminal = this.getTerminal(cell, true);\n\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, true);\n\t\t\t}\n\t\t\t\n\t\t\tterminal = this.getTerminal(cell, false);\n\t\t\t\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tterminal = mapping[mxCellPath.create(terminal)];\n\t\t\t\tthis.setTerminal(cell, terminal, false);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: mergeChildren\n * \n * Clones the children of the source cell into the given target cell in\n * this model and adds an entry to the mapping that maps from the source\n * cell to the target cell with the same id or the clone of the source cell\n * that was inserted into this model.\n */\nmxGraphModel.prototype.mergeChildrenImpl = function(from, to, cloneAllEdges, mapping)\n{\n\tthis.beginUpdate();\n\ttry\n\t{\n\t\tvar childCount = from.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar cell = from.getChildAt(i);\n\t\t\t\n\t\t\tif (typeof(cell.getId) == 'function')\n\t\t\t{\n\t\t\t\tvar id = cell.getId();\n\t\t\t\tvar target = (id != null && (!this.isEdge(cell) || !cloneAllEdges)) ?\n\t\t\t\t\t\tthis.getCell(id) : null;\n\t\t\t\t\n\t\t\t\t// Clones and adds the child if no cell exists for the id\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar clone = cell.clone();\n\t\t\t\t\tclone.setId(id);\n\t\t\t\t\t\n\t\t\t\t\t// Sets the terminals from the original cell to the clone\n\t\t\t\t\t// because the lookup uses strings not cells in JS\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(true), true);\n\t\t\t\t\tclone.setTerminal(cell.getTerminal(false), false);\n\t\t\t\t\t\n\t\t\t\t\t// Do *NOT* use model.add as this will move the edge away\n\t\t\t\t\t// from the parent in updateEdgeParent if maintainEdgeParent\n\t\t\t\t\t// is enabled in the target model\n\t\t\t\t\ttarget = to.insert(clone);\n\t\t\t\t\tthis.cellAdded(target);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Stores the mapping for later reconnecting edges\n\t\t\t\tmapping[mxCellPath.create(cell)] = target;\n\t\t\t\t\n\t\t\t\t// Recurses\n\t\t\t\tthis.mergeChildrenImpl(cell, target, cloneAllEdges, mapping);\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.endUpdate();\n\t}\n};\n\n/**\n * Function: getParents\n * \n * Returns an array that represents the set (no duplicates) of all parents\n * for the given array of cells.\n * \n * Parameters:\n * \n * cells - Array of cells whose parents should be returned.\n */\nmxGraphModel.prototype.getParents = function(cells)\n{\n\tvar parents = [];\n\t\n\tif (cells != null)\n\t{\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = this.getParent(cells[i]);\n\t\t\t\n\t\t\tif (parent != null && !dict.get(parent))\n\t\t\t{\n\t\t\t\tdict.put(parent, true);\n\t\t\t\tparents.push(parent);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn parents;\n};\n\n//\n// Cell Cloning\n//\n\n/**\n * Function: cloneCell\n * \n * Returns a deep clone of the given <mxCell> (including\n * the children) which is created using <cloneCells>.\n *\n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n */\nmxGraphModel.prototype.cloneCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn this.cloneCells([cell], true)[0];\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: cloneCells\n * \n * Returns an array of clones for the given array of <mxCells>.\n * Depending on the value of includeChildren, a deep clone is created for\n * each cell. Connections are restored based if the corresponding\n * cell is contained in the passed in array.\n *\n * Parameters:\n * \n * cells - Array of <mxCell> to be cloned.\n * includeChildren - Boolean indicating if the cells should be cloned\n * with all descendants.\n * mapping - Optional mapping for existing clones.\n */\nmxGraphModel.prototype.cloneCells = function(cells, includeChildren, mapping)\n{\n\tmapping = (mapping != null) ? mapping : new Object();\n\tvar clones = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (cells[i] != null)\n\t\t{\n\t\t\tclones.push(this.cloneCellImpl(cells[i], mapping, includeChildren));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones.push(null);\n\t\t}\n\t}\n\t\n\tfor (var i = 0; i < clones.length; i++)\n\t{\n\t\tif (clones[i] != null)\n\t\t{\n\t\t\tthis.restoreClone(clones[i], cells[i], mapping);\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\t\t\t\n/**\n * Function: cloneCellImpl\n * \n * Inner helper method for cloning cells recursively.\n */\nmxGraphModel.prototype.cloneCellImpl = function(cell, mapping, includeChildren)\n{\n\tvar ident = mxObjectIdentity.get(cell);\n\tvar clone = mapping[ident];\n\t\n\tif (clone == null)\n\t{\n\t\tclone = this.cellCloned(cell);\n\t\tmapping[ident] = clone;\n\n\t\tif (includeChildren)\n\t\t{\n\t\t\tvar childCount = this.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cloneChild = this.cloneCellImpl(\n\t\t\t\t\tthis.getChildAt(cell, i), mapping, true);\n\t\t\t\tclone.insert(cloneChild);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn clone;\n};\n\n/**\n * Function: cellCloned\n * \n * Hook for cloning the cell. This returns cell.clone() or\n * any possible exceptions.\n */\nmxGraphModel.prototype.cellCloned = function(cell)\n{\n\treturn cell.clone();\n};\n\n/**\n * Function: restoreClone\n * \n * Inner helper method for restoring the connections in\n * a network of cloned cells.\n */\nmxGraphModel.prototype.restoreClone = function(clone, cell, mapping)\n{\n\tvar source = this.getTerminal(cell, true);\n\t\n\tif (source != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(source)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\ttmp.insertEdge(clone, true);\n\t\t}\n\t}\n\t\n\tvar target = this.getTerminal(cell, false);\n\t\n\tif (target != null)\n\t{\n\t\tvar tmp = mapping[mxObjectIdentity.get(target)];\n\t\t\n\t\tif (tmp != null)\n\t\t{\t\n\t\t\ttmp.insertEdge(clone, false);\n\t\t}\n\t}\n\t\n\tvar childCount = this.getChildCount(clone);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.restoreClone(this.getChildAt(clone, i),\n\t\t\tthis.getChildAt(cell, i), mapping);\n\t}\n};\n\n//\n// Atomic changes\n//\n\n/**\n * Class: mxRootChange\n * \n * Action to change the root in a model.\n *\n * Constructor: mxRootChange\n * \n * Constructs a change of the root in the\n * specified model.\n */\nfunction mxRootChange(model, root)\n{\n\tthis.model = model;\n\tthis.root = root;\n\tthis.previous = root;\n};\n\n/**\n * Function: execute\n * \n * Carries out a change of the root using\n * <mxGraphModel.rootChanged>.\n */\nmxRootChange.prototype.execute = function()\n{\n\tthis.root = this.previous;\n\tthis.previous = this.model.rootChanged(this.previous);\n};\n\n/**\n * Class: mxChildChange\n * \n * Action to add or remove a child in a model.\n *\n * Constructor: mxChildChange\n * \n * Constructs a change of a child in the\n * specified model.\n */\nfunction mxChildChange(model, parent, child, index)\n{\n\tthis.model = model;\n\tthis.parent = parent;\n\tthis.previous = parent;\n\tthis.child = child;\n\tthis.index = index;\n\tthis.previousIndex = index;\n};\n\n/**\n * Function: execute\n * \n * Changes the parent of <child> using\n * <mxGraphModel.parentForCellChanged> and\n * removes or restores the cell's\n * connections.\n */\nmxChildChange.prototype.execute = function()\n{\n\tif (this.child != null)\n\t{\n\t\tvar tmp = this.model.getParent(this.child);\n\t\tvar tmp2 = (tmp != null) ? tmp.getIndex(this.child) : 0;\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.connect(this.child, false);\n\t\t}\n\t\t\n\t\ttmp = this.model.parentForCellChanged(\n\t\t\tthis.child, this.previous, this.previousIndex);\n\t\t\t\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.connect(this.child, true);\n\t\t}\n\t\t\n\t\tthis.parent = this.previous;\n\t\tthis.previous = tmp;\n\t\tthis.index = this.previousIndex;\n\t\tthis.previousIndex = tmp2;\n\t}\n};\n\n/**\n * Function: disconnect\n * \n * Disconnects the given cell recursively from its\n * terminals and stores the previous terminal in the\n * cell's terminals.\n */\nmxChildChange.prototype.connect = function(cell, isConnect)\n{\n\tisConnect = (isConnect != null) ? isConnect : true;\n\t\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\t\n\tif (source != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, source, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, true);\n\t\t}\n\t}\n\t\n\tif (target != null)\n\t{\n\t\tif (isConnect)\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, target, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.terminalForCellChanged(cell, null, false);\n\t\t}\n\t}\n\t\n\tcell.setTerminal(source, true);\n\tcell.setTerminal(target, false);\n\t\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i=0; i<childCount; i++)\n\t{\n\t\tthis.connect(this.model.getChildAt(cell, i), isConnect);\n\t}\n};\n\n/**\n * Class: mxTerminalChange\n * \n * Action to change a terminal in a model.\n *\n * Constructor: mxTerminalChange\n * \n * Constructs a change of a terminal in the \n * specified model.\n */\nfunction mxTerminalChange(model, cell, terminal, source)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.terminal = terminal;\n\tthis.previous = terminal;\n\tthis.source = source;\n};\n\n/**\n * Function: execute\n * \n * Changes the terminal of <cell> to <previous> using\n * <mxGraphModel.terminalForCellChanged>.\n */\nmxTerminalChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.terminal = this.previous;\n\t\tthis.previous = this.model.terminalForCellChanged(\n\t\t\tthis.cell, this.previous, this.source);\n\t}\n};\n\n/**\n * Class: mxValueChange\n * \n * Action to change a user object in a model.\n *\n * Constructor: mxValueChange\n * \n * Constructs a change of a user object in the \n * specified model.\n */\nfunction mxValueChange(model, cell, value)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the value of <cell> to <previous> using\n * <mxGraphModel.valueForCellChanged>.\n */\nmxValueChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.value = this.previous;\n\t\tthis.previous = this.model.valueForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxStyleChange\n * \n * Action to change a cell's style in a model.\n *\n * Constructor: mxStyleChange\n * \n * Constructs a change of a style in the\n * specified model.\n */\nfunction mxStyleChange(model, cell, style)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.style = style;\n\tthis.previous = style;\n};\n\n/**\n * Function: execute\n * \n * Changes the style of <cell> to <previous> using\n * <mxGraphModel.styleForCellChanged>.\n */\nmxStyleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.style = this.previous;\n\t\tthis.previous = this.model.styleForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxGeometryChange\n * \n * Action to change a cell's geometry in a model.\n *\n * Constructor: mxGeometryChange\n * \n * Constructs a change of a geometry in the\n * specified model.\n */\nfunction mxGeometryChange(model, cell, geometry)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.geometry = geometry;\n\tthis.previous = geometry;\n};\n\n/**\n * Function: execute\n * \n * Changes the geometry of <cell> ro <previous> using\n * <mxGraphModel.geometryForCellChanged>.\n */\nmxGeometryChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.geometry = this.previous;\n\t\tthis.previous = this.model.geometryForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCollapseChange\n * \n * Action to change a cell's collapsed state in a model.\n *\n * Constructor: mxCollapseChange\n * \n * Constructs a change of a collapsed state in the\n * specified model.\n */\nfunction mxCollapseChange(model, cell, collapsed)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.collapsed = collapsed;\n\tthis.previous = collapsed;\n};\n\n/**\n * Function: execute\n * \n * Changes the collapsed state of <cell> to <previous> using\n * <mxGraphModel.collapsedStateForCellChanged>.\n */\nmxCollapseChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.collapsed = this.previous;\n\t\tthis.previous = this.model.collapsedStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxVisibleChange\n * \n * Action to change a cell's visible state in a model.\n *\n * Constructor: mxVisibleChange\n * \n * Constructs a change of a visible state in the\n * specified model.\n */\nfunction mxVisibleChange(model, cell, visible)\n{\n\tthis.model = model;\n\tthis.cell = cell;\n\tthis.visible = visible;\n\tthis.previous = visible;\n};\n\n/**\n * Function: execute\n * \n * Changes the visible state of <cell> to <previous> using\n * <mxGraphModel.visibleStateForCellChanged>.\n */\nmxVisibleChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tthis.visible = this.previous;\n\t\tthis.previous = this.model.visibleStateForCellChanged(\n\t\t\tthis.cell, this.previous);\n\t}\n};\n\n/**\n * Class: mxCellAttributeChange\n * \n * Action to change the attribute of a cell's user object.\n * There is no method on the graph model that uses this\n * action. To use the action, you can use the code shown\n * in the example below.\n * \n * Example:\n * \n * To change the attributeName in the cell's user object\n * to attributeValue, use the following code:\n * \n * (code)\n * model.beginUpdate();\n * try\n * {\n *   var edit = new mxCellAttributeChange(\n *     cell, attributeName, attributeValue);\n *   model.execute(edit);\n * }\n * finally\n * {\n *   model.endUpdate();\n * } \n * (end)\n *\n * Constructor: mxCellAttributeChange\n * \n * Constructs a change of a attribute of the DOM node\n * stored as the value of the given <mxCell>.\n */\nfunction mxCellAttributeChange(cell, attribute, value)\n{\n\tthis.cell = cell;\n\tthis.attribute = attribute;\n\tthis.value = value;\n\tthis.previous = value;\n};\n\n/**\n * Function: execute\n * \n * Changes the attribute of the cell's user object by\n * using <mxCell.setAttribute>.\n */\nmxCellAttributeChange.prototype.execute = function()\n{\n\tif (this.cell != null)\n\t{\n\t\tvar tmp = this.cell.getAttribute(this.attribute);\n\t\t\n\t\tif (this.previous == null)\n\t\t{\n\t\t\tthis.cell.value.removeAttribute(this.attribute);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.cell.setAttribute(this.attribute, this.previous);\n\t\t}\n\t\t\n\t\tthis.previous = tmp;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCell\n *\n * Cells are the elements of the graph model. They represent the state\n * of the groups, vertices and edges in a graph.\n * \n * Custom attributes:\n * \n * For custom attributes we recommend using an XML node as the value of a cell.\n * The following code can be used to create a cell with an XML node as the\n * value:\n * \n * (code)\n * var doc = mxUtils.createXmlDocument();\n * var node = doc.createElement('MyNode')\n * node.setAttribute('label', 'MyLabel');\n * node.setAttribute('attribute1', 'value1');\n * graph.insertVertex(graph.getDefaultParent(), null, node, 40, 40, 80, 30);\n * (end)\n * \n * For the label to work, <mxGraph.convertValueToString> and\n * <mxGraph.cellLabelChanged> should be overridden as follows:\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     return cell.getAttribute('label', '')\n *   }\n * };\n * \n * var cellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n *   if (mxUtils.isNode(cell.value))\n *   {\n *     // Clones the value for correct undo/redo\n *     var elt = cell.value.cloneNode(true);\n *     elt.setAttribute('label', newValue);\n *     newValue = elt;\n *   }\n *   \n *   cellLabelChanged.apply(this, arguments);\n * };\n * (end)\n * \n * Callback: onInit\n *\n * Called from within the constructor.\n * \n * Constructor: mxCell\n *\n * Constructs a new cell to be used in a graph model.\n * This method invokes <onInit> upon completion.\n * \n * Parameters:\n * \n * value - Optional object that represents the cell value.\n * geometry - Optional <mxGeometry> that specifies the geometry.\n * style - Optional formatted string that defines the style.\n */\nfunction mxCell(value, geometry, style)\n{\n\tthis.value = value;\n\tthis.setGeometry(geometry);\n\tthis.setStyle(style);\n\t\n\tif (this.onInit != null)\n\t{\n\t\tthis.onInit();\n\t}\n};\n\n/**\n * Variable: id\n *\n * Holds the Id. Default is null.\n */\nmxCell.prototype.id = null;\n\n/**\n * Variable: value\n *\n * Holds the user object. Default is null.\n */\nmxCell.prototype.value = null;\n\n/**\n * Variable: geometry\n *\n * Holds the <mxGeometry>. Default is null.\n */\nmxCell.prototype.geometry = null;\n\n/**\n * Variable: style\n *\n * Holds the style as a string of the form [(stylename|key=value);]. Default is\n * null.\n */\nmxCell.prototype.style = null;\n\n/**\n * Variable: vertex\n *\n * Specifies whether the cell is a vertex. Default is false.\n */\nmxCell.prototype.vertex = false;\n\n/**\n * Variable: edge\n *\n * Specifies whether the cell is an edge. Default is false.\n */\nmxCell.prototype.edge = false;\n\n/**\n * Variable: connectable\n *\n * Specifies whether the cell is connectable. Default is true.\n */\nmxCell.prototype.connectable = true;\n\n/**\n * Variable: visible\n *\n * Specifies whether the cell is visible. Default is true.\n */\nmxCell.prototype.visible = true;\n\n/**\n * Variable: collapsed\n *\n * Specifies whether the cell is collapsed. Default is false.\n */\nmxCell.prototype.collapsed = false;\n\n/**\n * Variable: parent\n *\n * Reference to the parent cell.\n */\nmxCell.prototype.parent = null;\n\n/**\n * Variable: source\n *\n * Reference to the source terminal.\n */\nmxCell.prototype.source = null;\n\n/**\n * Variable: target\n *\n * Reference to the target terminal.\n */\nmxCell.prototype.target = null;\n\n/**\n * Variable: children\n *\n * Holds the child cells.\n */\nmxCell.prototype.children = null;\n\n/**\n * Variable: edges\n *\n * Holds the edges.\n */\nmxCell.prototype.edges = null;\n\n/**\n * Variable: mxTransient\n *\n * List of members that should not be cloned inside <clone>. This field is\n * passed to <mxUtils.clone> and is not made persistent in <mxCellCodec>.\n * This is not a convention for all classes, it is only used in this class\n * to mark transient fields since transient modifiers are not supported by\n * the language.\n */\nmxCell.prototype.mxTransient = ['id', 'value', 'parent', 'source',\n                                'target', 'children', 'edges'];\n\n/**\n * Function: getId\n *\n * Returns the Id of the cell as a string.\n */\nmxCell.prototype.getId = function()\n{\n\treturn this.id;\n};\n\t\t\n/**\n * Function: setId\n *\n * Sets the Id of the cell to the given string.\n */\nmxCell.prototype.setId = function(id)\n{\n\tthis.id = id;\n};\n\n/**\n * Function: getValue\n *\n * Returns the user object of the cell. The user\n * object is stored in <value>.\n */\nmxCell.prototype.getValue = function()\n{\n\treturn this.value;\n};\n\t\t\n/**\n * Function: setValue\n *\n * Sets the user object of the cell. The user object\n * is stored in <value>.\n */\nmxCell.prototype.setValue = function(value)\n{\n\tthis.value = value;\n};\n\n/**\n * Function: valueChanged\n *\n * Changes the user object after an in-place edit\n * and returns the previous value. This implementation\n * replaces the user object with the given value and\n * returns the old user object.\n */\nmxCell.prototype.valueChanged = function(newValue)\n{\n\tvar previous = this.getValue();\n\tthis.setValue(newValue);\n\t\n\treturn previous;\n};\n\n/**\n * Function: getGeometry\n *\n * Returns the <mxGeometry> that describes the <geometry>.\n */\nmxCell.prototype.getGeometry = function()\n{\n\treturn this.geometry;\n};\n\n/**\n * Function: setGeometry\n *\n * Sets the <mxGeometry> to be used as the <geometry>.\n */\nmxCell.prototype.setGeometry = function(geometry)\n{\n\tthis.geometry = geometry;\n};\n\n/**\n * Function: getStyle\n *\n * Returns a string that describes the <style>.\n */\nmxCell.prototype.getStyle = function()\n{\n\treturn this.style;\n};\n\n/**\n * Function: setStyle\n *\n * Sets the string to be used as the <style>.\n */\nmxCell.prototype.setStyle = function(style)\n{\n\tthis.style = style;\n};\n\n/**\n * Function: isVertex\n *\n * Returns true if the cell is a vertex.\n */\nmxCell.prototype.isVertex = function()\n{\n\treturn this.vertex != 0;\n};\n\n/**\n * Function: setVertex\n *\n * Specifies if the cell is a vertex. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * vertex - Boolean that specifies if the cell is a vertex.\n */\nmxCell.prototype.setVertex = function(vertex)\n{\n\tthis.vertex = vertex;\n};\n\n/**\n * Function: isEdge\n *\n * Returns true if the cell is an edge.\n */\nmxCell.prototype.isEdge = function()\n{\n\treturn this.edge != 0;\n};\n\t\n/**\n * Function: setEdge\n * \n * Specifies if the cell is an edge. This should only be assigned at\n * construction of the cell and not be changed during its lifecycle.\n * \n * Parameters:\n * \n * edge - Boolean that specifies if the cell is an edge.\n */\nmxCell.prototype.setEdge = function(edge)\n{\n\tthis.edge = edge;\n};\n\n/**\n * Function: isConnectable\n *\n * Returns true if the cell is connectable.\n */\nmxCell.prototype.isConnectable = function()\n{\n\treturn this.connectable != 0;\n};\n\n/**\n * Function: setConnectable\n *\n * Sets the connectable state.\n * \n * Parameters:\n * \n * connectable - Boolean that specifies the new connectable state.\n */\nmxCell.prototype.setConnectable = function(connectable)\n{\n\tthis.connectable = connectable;\n};\n\n/**\n * Function: isVisible\n *\n * Returns true if the cell is visibile.\n */\nmxCell.prototype.isVisible = function()\n{\n\treturn this.visible != 0;\n};\n\n/**\n * Function: setVisible\n *\n * Specifies if the cell is visible.\n * \n * Parameters:\n * \n * visible - Boolean that specifies the new visible state.\n */\nmxCell.prototype.setVisible = function(visible)\n{\n\tthis.visible = visible;\n};\n\n/**\n * Function: isCollapsed\n *\n * Returns true if the cell is collapsed.\n */\nmxCell.prototype.isCollapsed = function()\n{\n\treturn this.collapsed != 0;\n};\n\n/**\n * Function: setCollapsed\n *\n * Sets the collapsed state.\n * \n * Parameters:\n * \n * collapsed - Boolean that specifies the new collapsed state.\n */\nmxCell.prototype.setCollapsed = function(collapsed)\n{\n\tthis.collapsed = collapsed;\n};\n\n/**\n * Function: getParent\n *\n * Returns the cell's parent.\n */\nmxCell.prototype.getParent = function()\n{\n\treturn this.parent;\n};\n\n/**\n * Function: setParent\n *\n * Sets the parent cell.\n * \n * Parameters:\n * \n * parent - <mxCell> that represents the new parent.\n */\nmxCell.prototype.setParent = function(parent)\n{\n\tthis.parent = parent;\n};\n\n/**\n * Function: getTerminal\n *\n * Returns the source or target terminal.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source terminal should be\n * returned.\n */\nmxCell.prototype.getTerminal = function(source)\n{\n\treturn (source) ? this.source : this.target;\n};\n\n/**\n * Function: setTerminal\n *\n * Sets the source or target terminal and returns the new terminal.\n * \n * Parameters:\n * \n * terminal - <mxCell> that represents the new source or target terminal.\n * isSource - Boolean that specifies if the source or target terminal\n * should be set.\n */\nmxCell.prototype.setTerminal = function(terminal, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.source = terminal;\n\t}\n\telse\n\t{\n\t\tthis.target = terminal;\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getChildCount\n *\n * Returns the number of child cells.\n */\nmxCell.prototype.getChildCount = function()\n{\n\treturn (this.children == null) ? 0 : this.children.length;\n};\n\n/**\n * Function: getIndex\n *\n * Returns the index of the specified child in the child array.\n * \n * Parameters:\n * \n * child - Child whose index should be returned.\n */\nmxCell.prototype.getIndex = function(child)\n{\n\treturn mxUtils.indexOf(this.children, child);\n};\n\n/**\n * Function: getChildAt\n *\n * Returns the child at the specified index.\n * \n * Parameters:\n * \n * index - Integer that specifies the child to be returned.\n */\nmxCell.prototype.getChildAt = function(index)\n{\n\treturn (this.children == null) ? null : this.children[index];\n};\n\n/**\n * Function: insert\n *\n * Inserts the specified child into the child array at the specified index\n * and updates the parent reference of the child. If not childIndex is\n * specified then the child is appended to the child array. Returns the\n * inserted child.\n * \n * Parameters:\n * \n * child - <mxCell> to be inserted or appended to the child array.\n * index - Optional integer that specifies the index at which the child\n * should be inserted into the child array.\n */\nmxCell.prototype.insert = function(child, index)\n{\n\tif (child != null)\n\t{\n\t\tif (index == null)\n\t\t{\n\t\t\tindex = this.getChildCount();\n\t\t\t\n\t\t\tif (child.getParent() == this)\n\t\t\t{\n\t\t\t\tindex--;\n\t\t\t}\n\t\t}\n\n\t\tchild.removeFromParent();\n\t\tchild.setParent(this);\n\t\t\n\t\tif (this.children == null)\n\t\t{\n\t\t\tthis.children = [];\n\t\t\tthis.children.push(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.children.splice(index, 0, child);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: remove\n *\n * Removes the child at the specified index from the child array and\n * returns the child that was removed. Will remove the parent reference of\n * the child.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the child to be\n * removed.\n */\nmxCell.prototype.remove = function(index)\n{\n\tvar child = null;\n\t\n\tif (this.children != null && index >= 0)\n\t{\n\t\tchild = this.getChildAt(index);\n\t\t\n\t\tif (child != null)\n\t\t{\n\t\t\tthis.children.splice(index, 1);\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\t\n\treturn child;\n};\n\n/**\n * Function: removeFromParent\n *\n * Removes the cell from its parent.\n */\nmxCell.prototype.removeFromParent = function()\n{\n\tif (this.parent != null)\n\t{\n\t\tvar index = this.parent.getIndex(this);\n\t\tthis.parent.remove(index);\n\t}\n};\n\n/**\n * Function: getEdgeCount\n *\n * Returns the number of edges in the edge array.\n */\nmxCell.prototype.getEdgeCount = function()\n{\n\treturn (this.edges == null) ? 0 : this.edges.length;\n};\n\n/**\n * Function: getEdgeIndex\n *\n * Returns the index of the specified edge in <edges>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose index in <edges> should be returned.\n */\nmxCell.prototype.getEdgeIndex = function(edge)\n{\n\treturn mxUtils.indexOf(this.edges, edge);\n};\n\n/**\n * Function: getEdgeAt\n *\n * Returns the edge at the specified index in <edges>.\n * \n * Parameters:\n * \n * index - Integer that specifies the index of the edge to be returned.\n */\nmxCell.prototype.getEdgeAt = function(index)\n{\n\treturn (this.edges == null) ? null : this.edges[index];\n};\n\n/**\n * Function: insertEdge\n *\n * Inserts the specified edge into the edge array and returns the edge.\n * Will update the respective terminal reference of the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.insertEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tedge.removeFromTerminal(isOutgoing);\n\t\tedge.setTerminal(this, isOutgoing);\n\t\t\n\t\tif (this.edges == null ||\n\t\t\tedge.getTerminal(!isOutgoing) != this ||\n\t\t\tmxUtils.indexOf(this.edges, edge) < 0)\n\t\t{\n\t\t\tif (this.edges == null)\n\t\t\t{\n\t\t\t\tthis.edges = [];\n\t\t\t}\n\t\t\t\n\t\t\tthis.edges.push(edge);\n\t\t}\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeEdge\n *\n * Removes the specified edge from the edge array and returns the edge.\n * Will remove the respective terminal reference from the edge.\n * \n * Parameters:\n * \n * edge - <mxCell> to be removed from the edge array.\n * isOutgoing - Boolean that specifies if the edge is outgoing.\n */\nmxCell.prototype.removeEdge = function(edge, isOutgoing)\n{\n\tif (edge != null)\n\t{\n\t\tif (edge.getTerminal(!isOutgoing) != this &&\n\t\t\tthis.edges != null)\n\t\t{\n\t\t\tvar index = this.getEdgeIndex(edge);\n\t\t\t\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\tthis.edges.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge.setTerminal(null, isOutgoing);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: removeFromTerminal\n *\n * Removes the edge from its source or target terminal.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the edge should be removed from its\n * source or target terminal.\n */\nmxCell.prototype.removeFromTerminal = function(isSource)\n{\n\tvar terminal = this.getTerminal(isSource);\n\t\n\tif (terminal != null)\n\t{\n\t\tterminal.removeEdge(this, isSource);\n\t}\n};\n\n/**\n * Function: hasAttribute\n * \n * Returns true if the user object is an XML node that contains the given\n * attribute.\n * \n * Parameters:\n * \n * name - Name of the attribute.\n */\nmxCell.prototype.hasAttribute = function(name)\n{\n\tvar userObject = this.getValue();\n\t\n\treturn (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT && userObject.hasAttribute) ?\n\t\tuserObject.hasAttribute(name) : userObject.getAttribute(name) != null;\n};\n\n/**\n * Function: getAttribute\n *\n * Returns the specified attribute from the user object if it is an XML\n * node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be returned.\n * defaultValue - Optional default value to use if the attribute has no\n * value.\n */\nmxCell.prototype.getAttribute = function(name, defaultValue)\n{\n\tvar userObject = this.getValue();\n\t\n\tvar val = (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT) ?\n\t\tuserObject.getAttribute(name) : null;\n\t\t\n\treturn val || defaultValue;\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the specified attribute on the user object if it is an XML node.\n * \n * Parameters:\n * \n * name - Name of the attribute whose value should be set.\n * value - New value of the attribute.\n */\nmxCell.prototype.setAttribute = function(name, value)\n{\n\tvar userObject = this.getValue();\n\t\n\tif (userObject != null &&\n\t\tuserObject.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tuserObject.setAttribute(name, value);\n\t}\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of the cell. Uses <cloneValue> to clone\n * the user object. All fields in <mxTransient> are ignored\n * during the cloning.\n */\nmxCell.prototype.clone = function()\n{\n\tvar clone = mxUtils.clone(this, this.mxTransient);\n\tclone.setValue(this.cloneValue());\n\t\n\treturn clone;\n};\n\n/**\n * Function: cloneValue\n *\n * Returns a clone of the cell's user object.\n */\nmxCell.prototype.cloneValue = function()\n{\n\tvar value = this.getValue();\n\t\n\tif (value != null)\n\t{\n\t\tif (typeof(value.clone) == 'function')\n\t\t{\n\t\t\tvalue = value.clone();\n\t\t}\n\t\telse if (!isNaN(value.nodeType))\n\t\t{\n\t\t\tvalue = value.cloneNode(true);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGeometry\n * \n * Extends <mxRectangle> to represent the geometry of a cell.\n * \n * For vertices, the geometry consists of the x- and y-location, and the width\n * and height. For edges, the geometry consists of the optional terminal- and\n * control points. The terminal points are only required if an edge is\n * unconnected, and are stored in the sourcePoint> and <targetPoint>\n * variables, respectively.\n * \n * Example:\n * \n * If an edge is unconnected, that is, it has no source or target terminal,\n * then a geometry with terminal points for a new edge can be defined as\n * follows.\n * \n * (code)\n * geometry.setTerminalPoint(new mxPoint(x1, y1), true);\n * geometry.points = [new mxPoint(x2, y2)];\n * geometry.setTerminalPoint(new mxPoint(x3, y3), false);\n * (end)\n * \n * Control points are used regardless of the connected state of an edge and may\n * be ignored or interpreted differently depending on the edge's <mxEdgeStyle>.\n * \n * To disable automatic reset of control points after a cell has been moved or\n * resized, the the <mxGraph.resizeEdgesOnMove> and\n * <mxGraph.resetEdgesOnResize> may be used.\n *\n * Edge Labels:\n * \n * Using the x- and y-coordinates of a cell's geometry, it is possible to\n * position the label on edges on a specific location on the actual edge shape\n * as it appears on the screen. The x-coordinate of an edge's geometry is used\n * to describe the distance from the center of the edge from -1 to 1 with 0\n * being the center of the edge and the default value. The y-coordinate of an\n * edge's geometry is used to describe the absolute, orthogonal distance in\n * pixels from that point. In addition, the <mxGeometry.offset> is used as an\n * absolute offset vector from the resulting point.\n * \n * This coordinate system is applied if <relative> is true, otherwise the\n * offset defines the absolute vector from the edge's center point to the\n * label and the values for <x> and <y> are ignored.\n * \n * The width and height parameter for edge geometries can be used to set the\n * label width and height (eg. for word wrapping).\n * \n * Ports:\n * \n * The term \"port\" refers to a relatively positioned, connectable child cell,\n * which is used to specify the connection between the parent and another cell\n * in the graph. Ports are typically modeled as vertices with relative\n * geometries.\n * \n * Offsets:\n * \n * The <offset> field is interpreted in 3 different ways, depending on the cell\n * and the geometry. For edges, the offset defines the absolute offset for the\n * edge label. For relative geometries, the offset defines the absolute offset\n * for the origin (top, left corner) of the vertex, otherwise the offset\n * defines the absolute offset for the label inside the vertex or group.\n * \n * Constructor: mxGeometry\n *\n * Constructs a new object to describe the size and location of a vertex or\n * the control points of an edge.\n */\nfunction mxGeometry(x, y, width, height)\n{\n\tmxRectangle.call(this, x, y, width, height);\n};\n\n/**\n * Extends mxRectangle.\n */\nmxGeometry.prototype = new mxRectangle();\nmxGeometry.prototype.constructor = mxGeometry;\n\n/**\n * Variable: TRANSLATE_CONTROL_POINTS\n * \n * Global switch to translate the points in translate. Default is true.\n */\nmxGeometry.prototype.TRANSLATE_CONTROL_POINTS = true;\n\n/**\n * Variable: alternateBounds\n *\n * Stores alternate values for x, y, width and height in a rectangle. See\n * <swap> to exchange the values. Default is null.\n */\nmxGeometry.prototype.alternateBounds = null;\n\n/**\n * Variable: sourcePoint\n *\n * Defines the source <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a source vertex. Otherwise it is\n * ignored. Default is  null.\n */\nmxGeometry.prototype.sourcePoint = null;\n\n/**\n * Variable: targetPoint\n *\n * Defines the target <mxPoint> of the edge. This is used if the\n * corresponding edge does not have a target vertex. Otherwise it is\n * ignored. Default is null.\n */\nmxGeometry.prototype.targetPoint = null;\n\n/**\n * Variable: points\n *\n * Array of <mxPoints> which specifies the control points along the edge.\n * These points are the intermediate points on the edge, for the endpoints\n * use <targetPoint> and <sourcePoint> or set the terminals of the edge to\n * a non-null value. Default is null.\n */\nmxGeometry.prototype.points = null;\n\n/**\n * Variable: offset\n *\n * For edges, this holds the offset (in pixels) from the position defined\n * by <x> and <y> on the edge. For relative geometries (for vertices), this\n * defines the absolute offset from the point defined by the relative\n * coordinates. For absolute geometries (for vertices), this defines the\n * offset for the label. Default is null.\n */\nmxGeometry.prototype.offset = null;\n\n/**\n * Variable: relative\n *\n * Specifies if the coordinates in the geometry are to be interpreted as\n * relative coordinates. For edges, this is used to define the location of\n * the edge label relative to the edge as rendered on the display. For\n * vertices, this specifies the relative location inside the bounds of the\n * parent cell.\n * \n * If this is false, then the coordinates are relative to the origin of the\n * parent cell or, for edges, the edge label position is relative to the\n * center of the edge as rendered on screen.\n * \n * Default is false.\n */\nmxGeometry.prototype.relative = false;\n\n/**\n * Function: swap\n * \n * Swaps the x, y, width and height with the values stored in\n * <alternateBounds> and puts the previous values into <alternateBounds> as\n * a rectangle. This operation is carried-out in-place, that is, using the\n * existing geometry instance. If this operation is called during a graph\n * model transactional change, then the geometry should be cloned before\n * calling this method and setting the geometry of the cell using\n * <mxGraphModel.setGeometry>.\n */\nmxGeometry.prototype.swap = function()\n{\n\tif (this.alternateBounds != null)\n\t{\n\t\tvar old = new mxRectangle(\n\t\t\tthis.x, this.y, this.width, this.height);\n\n\t\tthis.x = this.alternateBounds.x;\n\t\tthis.y = this.alternateBounds.y;\n\t\tthis.width = this.alternateBounds.width;\n\t\tthis.height = this.alternateBounds.height;\n\n\t\tthis.alternateBounds = old;\n\t}\n};\n\n/**\n * Function: getTerminalPoint\n * \n * Returns the <mxPoint> representing the source or target point of this\n * edge. This is only used if the edge has no source or target vertex.\n * \n * Parameters:\n * \n * isSource - Boolean that specifies if the source or target point\n * should be returned.\n */\nmxGeometry.prototype.getTerminalPoint = function(isSource)\n{\n\treturn (isSource) ? this.sourcePoint : this.targetPoint;\n};\n\n/**\n * Function: setTerminalPoint\n * \n * Sets the <sourcePoint> or <targetPoint> to the given <mxPoint> and\n * returns the new point.\n * \n * Parameters:\n * \n * point - Point to be used as the new source or target point.\n * isSource - Boolean that specifies if the source or target point\n * should be set.\n */\nmxGeometry.prototype.setTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tthis.sourcePoint = point;\n\t}\n\telse\n\t{\n\t\tthis.targetPoint = point;\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: rotate\n * \n * Rotates the geometry by the given angle around the given center. That is,\n * <x> and <y> of the geometry, the <sourcePoint>, <targetPoint> and all\n * <points> are translated by the given amount. <x> and <y> are only\n * translated if <relative> is false.\n * \n * Parameters:\n * \n * angle - Number that specifies the rotation angle in degrees.\n * cx - <mxPoint> that specifies the center of the rotation.\n */\nmxGeometry.prototype.rotate = function(angle, cx)\n{\n\tvar rad = mxUtils.toRadians(angle);\n\tvar cos = Math.cos(rad);\n\tvar sin = Math.sin(rad);\n\t\n\t// Rotates the geometry\n\tif (!this.relative)\n\t{\n\t\tvar ct = new mxPoint(this.getCenterX(), this.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\n\t\tthis.x = Math.round(pt.x - this.width / 2);\n\t\tthis.y = Math.round(pt.y - this.height / 2);\n\t}\n\n\t// Rotates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.sourcePoint, cos, sin, cx);\n\t\tthis.sourcePoint.x = Math.round(pt.x);\n\t\tthis.sourcePoint.y = Math.round(pt.y);\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tvar pt = mxUtils.getRotatedPoint(this.targetPoint, cos, sin, cx);\n\t\tthis.targetPoint.x = Math.round(pt.x);\n\t\tthis.targetPoint.y = Math.round(pt.y);\t\n\t}\n\t\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(this.points[i], cos, sin, cx);\n\t\t\t\tthis.points[i].x = Math.round(pt.x);\n\t\t\t\tthis.points[i].y = Math.round(pt.y);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: translate\n * \n * Translates the geometry by the specified amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are translated\n * by the given amount. <x> and <y> are only translated if <relative> is false.\n * If <TRANSLATE_CONTROL_POINTS> is false, then <points> are not modified by\n * this function.\n * \n * Parameters:\n * \n * dx - Number that specifies the x-coordinate of the translation.\n * dy - Number that specifies the y-coordinate of the translation.\n */\nmxGeometry.prototype.translate = function(dx, dy)\n{\n\tdx = parseFloat(dx);\n\tdy = parseFloat(dy);\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) + dx;\n\t\tthis.y = parseFloat(this.y) + dy;\n\t}\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) + dx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) + dy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) + dx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) + dy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.TRANSLATE_CONTROL_POINTS && this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) + dx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) + dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: scale\n * \n * Scales the geometry by the given amount. That is, <x> and <y> of the\n * geometry, the <sourcePoint>, <targetPoint> and all <points> are scaled\n * by the given amount. <x>, <y>, <width> and <height> are only scaled if\n * <relative> is false. If <fixedAspect> is true, then the smaller value\n * is used to scale the width and the height.\n * \n * Parameters:\n * \n * sx - Number that specifies the horizontal scale factor.\n * sy - Number that specifies the vertical scale factor.\n * fixedAspect - Optional boolean to keep the aspect ratio fixed.\n */\nmxGeometry.prototype.scale = function(sx, sy, fixedAspect)\n{\n\tsx = parseFloat(sx);\n\tsy = parseFloat(sy);\n\n\t// Translates the source point\n\tif (this.sourcePoint != null)\n\t{\n\t\tthis.sourcePoint.x = parseFloat(this.sourcePoint.x) * sx;\n\t\tthis.sourcePoint.y = parseFloat(this.sourcePoint.y) * sy;\n\t}\n\t\n\t// Translates the target point\n\tif (this.targetPoint != null)\n\t{\n\t\tthis.targetPoint.x = parseFloat(this.targetPoint.x) * sx;\n\t\tthis.targetPoint.y = parseFloat(this.targetPoint.y) * sy;\t\t\n\t}\n\n\t// Translate the control points\n\tif (this.points != null)\n\t{\n\t\tfor (var i = 0; i < this.points.length; i++)\n\t\t{\n\t\t\tif (this.points[i] != null)\n\t\t\t{\n\t\t\t\tthis.points[i].x = parseFloat(this.points[i].x) * sx;\n\t\t\t\tthis.points[i].y = parseFloat(this.points[i].y) * sy;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Translates the geometry\n\tif (!this.relative)\n\t{\n\t\tthis.x = parseFloat(this.x) * sx;\n\t\tthis.y = parseFloat(this.y) * sy;\n\n\t\tif (fixedAspect)\n\t\t{\n\t\t\tsy = sx = Math.min(sx, sy);\n\t\t}\n\t\t\n\t\tthis.width = parseFloat(this.width) * sx;\n\t\tthis.height = parseFloat(this.height) * sy;\n\t}\n};\n\n/**\n * Function: equals\n * \n * Returns true if the given object equals this geometry.\n */\nmxGeometry.prototype.equals = function(obj)\n{\n\treturn mxRectangle.prototype.equals.apply(this, arguments) &&\n\t\tthis.relative == obj.relative &&\n\t\t((this.sourcePoint == null && obj.sourcePoint == null) || (this.sourcePoint != null && this.sourcePoint.equals(obj.sourcePoint))) &&\n\t\t((this.targetPoint == null && obj.targetPoint == null) || (this.targetPoint != null && this.targetPoint.equals(obj.targetPoint))) &&\n\t\t((this.points == null && obj.points == null) || (this.points != null && mxUtils.equalPoints(this.points, obj.points))) &&\n\t\t((this.alternateBounds == null && obj.alternateBounds == null) || (this.alternateBounds != null && this.alternateBounds.equals(obj.alternateBounds))) &&\n\t\t((this.offset == null && obj.offset == null) || (this.offset != null && this.offset.equals(obj.offset)));\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCellPath =\n{\n\n\t/**\n\t * Class: mxCellPath\n\t * \n\t * Implements a mechanism for temporary cell Ids.\n\t * \n\t * Variable: PATH_SEPARATOR\n\t * \n\t * Defines the separator between the path components. Default is \".\".\n\t */\n\tPATH_SEPARATOR: '.',\n\t\n\t/**\n\t * Function: create\n\t * \n\t * Creates the cell path for the given cell. The cell path is a\n\t * concatenation of the indices of all ancestors on the (finite) path to\n\t * the root, eg. \"0.0.0.1\".\n\t * \n\t * Parameters:\n\t * \n\t * cell - Cell whose path should be returned.\n\t */\n\tcreate: function(cell)\n\t{\n\t\tvar result = '';\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tvar parent = cell.getParent();\n\t\t\t\n\t\t\twhile (parent != null)\n\t\t\t{\n\t\t\t\tvar index = parent.getIndex(cell);\n\t\t\t\tresult = index + mxCellPath.PATH_SEPARATOR + result;\n\t\t\t\t\n\t\t\t\tcell = parent;\n\t\t\t\tparent = cell.getParent();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes trailing separator\n\t\tvar n = result.length;\n\t\t\n\t\tif (n > 1)\n\t\t{\n\t\t\tresult = result.substring(0, n - 1);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: getParentPath\n\t * \n\t * Returns the path for the parent of the cell represented by the given\n\t * path. Returns null if the given path has no parent.\n\t * \n\t * Parameters:\n\t * \n\t * path - Path whose parent path should be returned.\n\t */\n\tgetParentPath: function(path)\n\t{\n\t\tif (path != null)\n\t\t{\n\t\t\tvar index = path.lastIndexOf(mxCellPath.PATH_SEPARATOR);\n\n\t\t\tif (index >= 0)\n\t\t\t{\n\t\t\t\treturn path.substring(0, index);\n\t\t\t}\n\t\t\telse if (path.length > 0)\n\t\t\t{\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t},\n\n\t/**\n\t * Function: resolve\n\t * \n\t * Returns the cell for the specified cell path using the given root as the\n\t * root of the path.\n\t * \n\t * Parameters:\n\t * \n\t * root - Root cell of the path to be resolved.\n\t * path - String that defines the path.\n\t */\n\tresolve: function(root, path)\n\t{\n\t\tvar parent = root;\n\t\t\n\t\tif (path != null)\n\t\t{\n\t\t\tvar tokens = path.split(mxCellPath.PATH_SEPARATOR);\n\t\t\t\n\t\t\tfor (var i=0; i<tokens.length; i++)\n\t\t\t{\n\t\t\t\tparent = parent.getChildAt(parseInt(tokens[i]));\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn parent;\n\t},\n\t\n\t/**\n\t * Function: compare\n\t * \n\t * Compares the given cell paths and returns -1 if p1 is smaller, 0 if\n\t * p1 is equal and 1 if p1 is greater than p2.\n\t */\n\tcompare: function(p1, p2)\n\t{\n\t\tvar min = Math.min(p1.length, p2.length);\n\t\tvar comp = 0;\n\t\t\n\t\tfor (var i = 0; i < min; i++)\n\t\t{\n\t\t\tif (p1[i] != p2[i])\n\t\t\t{\n\t\t\t\tif (p1[i].length == 0 ||\n\t\t\t\t\tp2[i].length == 0)\n\t\t\t\t{\n\t\t\t\t\tcomp = (p1[i] == p2[i]) ? 0 : ((p1[i] > p2[i]) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar t1 = parseInt(p1[i]);\n\t\t\t\t\tvar t2 = parseInt(p2[i]);\n\t\t\t\t\t\n\t\t\t\t\tcomp = (t1 == t2) ? 0 : ((t1 > t2) ? 1 : -1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Compares path length if both paths are equal to this point\n\t\tif (comp == 0)\n\t\t{\n\t\t\tvar t1 = p1.length;\n\t\t\tvar t2 = p2.length;\n\t\t\t\n\t\t\tif (t1 != t2)\n\t\t\t{\n\t\t\t\tcomp = (t1 > t2) ? 1 : -1;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn comp;\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxPerimeter =\n{\n\t/**\n\t * Class: mxPerimeter\n\t * \n\t * Provides various perimeter functions to be used in a style\n\t * as the value of <mxConstants.STYLE_PERIMETER>. Perimeters for\n\t * rectangle, circle, rhombus and triangle are available.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t * (end)\n\t * \n\t * Or programmatically:\n\t * \n\t * (code)\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\t * (end)\n\t * \n\t * When adding new perimeter functions, it is recommended to use the \n\t * mxPerimeter-namespace as follows:\n\t * \n\t * (code)\n\t * mxPerimeter.CustomPerimeter = function (bounds, vertex, next, orthogonal)\n\t * {\n\t *   var x = 0; // Calculate x-coordinate\n\t *   var y = 0; // Calculate y-coordainte\n\t *   \n\t *   return new mxPoint(x, y);\n\t * }\n\t * (end)\n\t * \n\t * The new perimeter should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('customPerimeter', mxPerimeter.CustomPerimeter);\n\t * (end)\n\t * \n\t * The custom perimeter above can now be used in a specific vertex as follows:\n\t * \n\t * (code)\n\t * model.setStyle(vertex, 'perimeter=customPerimeter');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxPerimeter.CustomPerimeter for the value in\n\t * the cell style above.\n\t * \n\t * Or it can be used for all vertices in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultVertexStyle();\n\t * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.CustomPerimeter;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * The parameters are explained in <RectanglePerimeter>.\n\t * \n\t * Function: RectanglePerimeter\n\t * \n\t * Describes a rectangular perimeter for the given bounds.\n\t *\n\t * Parameters:\n\t * \n\t * bounds - <mxRectangle> that represents the absolute bounds of the\n\t * vertex.\n\t * vertex - <mxCellState> that represents the vertex.\n\t * next - <mxPoint> that represents the nearest neighbour point on the\n\t * given edge.\n\t * orthogonal - Boolean that specifies if the orthogonal projection onto\n\t * the perimeter should be returned. If this is false then the intersection\n\t * of the perimeter and the line between the next and the center point is\n\t * returned.\n\t */\n\tRectanglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\t\tvar alpha = Math.atan2(dy, dx);\n\t\tvar p = new mxPoint(0, 0);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI/2;\n\t\tvar beta = pi2 - alpha;\n\t\tvar t = Math.atan2(bounds.height, bounds.width);\n\t\t\n\t\tif (alpha < -pi + t || alpha > pi - t)\n\t\t{\n\t\t\t// Left edge\n\t\t\tp.x = bounds.x;\n\t\t\tp.y = cy - bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse if (alpha < -t)\n\t\t{\n\t\t\t// Top Edge\n\t\t\tp.y = bounds.y;\n\t\t\tp.x = cx - bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\telse if (alpha < t)\n\t\t{\n\t\t\t// Right Edge\n\t\t\tp.x = bounds.x + bounds.width;\n\t\t\tp.y = cy + bounds.width * Math.tan(alpha) / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Bottom Edge\n\t\t\tp.y = bounds.y + bounds.height;\n\t\t\tp.x = cx + bounds.height * Math.tan(beta) / 2;\n\t\t}\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (next.x >= bounds.x &&\n\t\t\t\tnext.x <= bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = next.x;\n\t\t\t}\n\t\t\telse if (next.y >= bounds.y &&\n\t\t\t\t\t   next.y <= bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = next.y;\n\t\t\t}\n\t\t\tif (next.x < bounds.x)\n\t\t\t{\n\t\t\t\tp.x = bounds.x;\n\t\t\t}\n\t\t\telse if (next.x > bounds.x + bounds.width)\n\t\t\t{\n\t\t\t\tp.x = bounds.x + bounds.width;\n\t\t\t}\n\t\t\tif (next.y < bounds.y)\n\t\t\t{\n\t\t\t\tp.y = bounds.y;\n\t\t\t}\n\t\t\telse if (next.y > bounds.y + bounds.height)\n\t\t\t{\n\t\t\t\tp.y = bounds.y + bounds.height;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn p;\n\t},\n\n\t/**\n\t * Function: EllipsePerimeter\n\t * \n\t * Describes an elliptic perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tEllipsePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar a = bounds.width / 2;\n\t\tvar b = bounds.height / 2;\n\t\tvar cx = x + a;\n\t\tvar cy = y + b;\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\t\n\t\t// Calculates straight line equation through\n\t\t// point and ellipse center y = d * x + h\n\t\tvar dx = parseInt(px - cx);\n\t\tvar dy = parseInt(py - cy);\n\t\t\n\t\tif (dx == 0 && dy != 0)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy + b * dy / Math.abs(dy));\n\t\t}\n\t\telse if (dx == 0 && dy == 0)\n\t\t{\n\t\t\treturn new mxPoint(px, py);\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (py >= y && py <= y + bounds.height)\n\t\t\t{\n\t\t\t\tvar ty = py - cy;\n\t\t\t\tvar tx = Math.sqrt(a*a*(1-(ty*ty)/(b*b))) || 0;\n\t\t\t\t\n\t\t\t\tif (px <= x)\n\t\t\t\t{\n\t\t\t\t\ttx = -tx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(cx+tx, py);\n\t\t\t}\n\t\t\t\n\t\t\tif (px >= x && px <= x + bounds.width)\n\t\t\t{\n\t\t\t\tvar tx = px - cx;\n\t\t\t\tvar ty = Math.sqrt(b*b*(1-(tx*tx)/(a*a))) || 0;\n\t\t\t\t\n\t\t\t\tif (py <= y)\n\t\t\t\t{\n\t\t\t\t\tty = -ty;\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxPoint(px, cy+ty);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Calculates intersection\n\t\tvar d = dy / dx;\n\t\tvar h = cy - d * cx;\n\t\tvar e = a * a * d * d + b * b;\n\t\tvar f = -2 * cx * e;\n\t\tvar g = a * a * d * d * cx * cx +\n\t\t\t\tb * b * cx * cx -\n\t\t\t\ta * a * b * b;\n\t\tvar det = Math.sqrt(f * f - 4 * e * g);\n\t\t\n\t\t// Two solutions (perimeter points)\n\t\tvar xout1 = (-f + det) / (2 * e);\n\t\tvar xout2 = (-f - det) / (2 * e);\n\t\tvar yout1 = d * xout1 + h;\n\t\tvar yout2 = d * xout2 + h;\n\t\tvar dist1 = Math.sqrt(Math.pow((xout1 - px), 2)\n\t\t\t\t\t+ Math.pow((yout1 - py), 2));\n\t\tvar dist2 = Math.sqrt(Math.pow((xout2 - px), 2)\n\t\t\t\t\t+ Math.pow((yout2 - py), 2));\n\t\t\t\t\t\n\t\t// Correct solution\n\t\tvar xout = 0;\n\t\tvar yout = 0;\n\t\t\n\t\tif (dist1 < dist2)\n\t\t{\n\t\t\txout = xout1;\n\t\t\tyout = yout1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\txout = xout2;\n\t\t\tyout = yout2;\n\t\t}\n\t\t\n\t\treturn new mxPoint(xout, yout);\n\t},\n\n\t/**\n\t * Function: RhombusPerimeter\n\t * \n\t * Describes a rhombus (aka diamond) perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tRhombusPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\n\t\t// Special case for intersecting the diamond's corners\n\t\tif (cx == px)\n\t\t{\n\t\t\tif (cy > py)\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y); // top\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(cx, y + h); // bottom\n\t\t\t}\n\t\t}\n\t\telse if (cy == py)\n\t\t{\n\t\t\tif (cx > px)\n\t\t\t{\n\t\t\t\treturn new mxPoint(x, cy); // left\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn new mxPoint(x + w, cy); // right\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tx = cx;\n\t\tvar ty = cy;\n\t\t\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// In which quadrant will the intersection be?\n\t\t// set the slope and offset of the border line accordingly\n\t\tif (px < cx)\n\t\t{\n\t\t\tif (py < cy)\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x, cy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x, cy);\n\t\t\t}\n\t\t}\n\t\telse if (py < cy)\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y, x + w, cy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxUtils.intersection(px, py, tx, ty, cx, y + h, x + w, cy);\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: TrianglePerimeter\n\t * \n\t * Describes a triangle perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tTrianglePerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar direction = (vertex != null) ?\n\t\t\tvertex.style[mxConstants.STYLE_DIRECTION] : null;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_SOUTH;\n\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\t\t\n\t\tvar cx = x + w / 2;\n\t\tvar cy = y + h / 2;\n\t\t\n\t\tvar start = new mxPoint(x, y);\n\t\tvar corner = new mxPoint(x + w, cy);\n\t\tvar end = new mxPoint(x, y + h);\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t{\n\t\t\tstart = end;\n\t\t\tcorner = new mxPoint(cx, y);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tcorner = new mxPoint(cx, y + h);\n\t\t\tend = new mxPoint(x + w, y);\n\t\t}\n\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tstart = new mxPoint(x + w, y);\n\t\t\tcorner = new mxPoint(x, cy);\n\t\t\tend = new mxPoint(x + w, y + h);\n\t\t}\n\n\t\tvar dx = next.x - cx;\n\t\tvar dy = next.y - cy;\n\n\t\tvar alpha = (vertical) ? Math.atan2(dx, dy) : Math.atan2(dy, dx);\n\t\tvar t = (vertical) ? Math.atan2(w, h) : Math.atan2(h, w);\n\t\t\n\t\tvar base = false;\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\tdirection == mxConstants.DIRECTION_WEST)\n\t\t{\n\t\t\tbase = alpha > -t && alpha < t;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbase = alpha < -Math.PI + t || alpha > Math.PI - t;\t\n\t\t}\n\n\t\tvar result = null;\t\t\t\n\n\t\tif (base)\n\t\t{\n\t\t\tif (orthogonal && ((vertical && next.x >= start.x && next.x <= end.x) ||\n\t\t\t\t(!vertical && next.y >= start.y && next.y <= end.y)))\n\t\t\t{\n\t\t\t\tif (vertical)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(next.x, start.y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(start.x, next.y);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 + h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty + h);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w / 2 - h * Math.tan(alpha) / 2,\n\t\t\t\t\t\ty);\n\t\t\t\t}\n\t\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x + w, y + h / 2 +\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tresult = new mxPoint(x, y + h / 2 -\n\t\t\t\t\t\tw * Math.tan(alpha) / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (orthogonal)\n\t\t\t{\n\t\t\t\tvar pt = new mxPoint(cx, cy);\n\t\t\n\t\t\t\tif (next.y >= y && next.y <= y + h)\n\t\t\t\t{\n\t\t\t\t\tpt.x = (vertical) ? cx : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_WEST) ?\n\t\t\t\t\t\t\tx + w : x);\n\t\t\t\t\tpt.y = next.y;\n\t\t\t\t}\n\t\t\t\telse if (next.x >= x && next.x <= x + w)\n\t\t\t\t{\n\t\t\t\t\tpt.x = next.x;\n\t\t\t\t\tpt.y = (!vertical) ? cy : (\n\t\t\t\t\t\t(direction == mxConstants.DIRECTION_NORTH) ?\n\t\t\t\t\t\t\ty + h : y);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Compute angle\n\t\t\t\tdx = next.x - pt.x;\n\t\t\t\tdy = next.y - pt.y;\n\t\t\t\t\n\t\t\t\tcx = pt.x;\n\t\t\t\tcy = pt.y;\n\t\t\t}\n\n\t\t\tif ((vertical && next.x <= x + w / 2) ||\n\t\t\t\t(!vertical && next.y <= y + h / 2))\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tstart.x, start.y, corner.x, corner.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = mxUtils.intersection(next.x, next.y, cx, cy,\n\t\t\t\t\tcorner.x, corner.y, end.x, end.y);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\tresult = new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t},\n\t\n\t/**\n\t * Function: HexagonPerimeter\n\t * \n\t * Describes a hexagon perimeter. See <RectanglePerimeter>\n\t * for a description of the parameters.\n\t */\n\tHexagonPerimeter: function (bounds, vertex, next, orthogonal)\n\t{\n\t\tvar x = bounds.x;\n\t\tvar y = bounds.y;\n\t\tvar w = bounds.width;\n\t\tvar h = bounds.height;\n\n\t\tvar cx = bounds.getCenterX();\n\t\tvar cy = bounds.getCenterY();\n\t\tvar px = next.x;\n\t\tvar py = next.y;\n\t\tvar dx = px - cx;\n\t\tvar dy = py - cy;\n\t\tvar alpha = -Math.atan2(dy, dx);\n\t\tvar pi = Math.PI;\n\t\tvar pi2 = Math.PI / 2;\n\n\t\tvar result = new mxPoint(cx, cy);\n\n\t\tvar direction = (vertex != null) ? mxUtils.getValue(\n\t\t\t\tvertex.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_EAST) : mxConstants.DIRECTION_EAST;\n\t\tvar vertical = direction == mxConstants.DIRECTION_NORTH\n\t\t\t\t|| direction == mxConstants.DIRECTION_SOUTH;\n\t\tvar a = new mxPoint();\n\t\tvar b = new mxPoint();\n\n\t\t//Only consider corrects quadrants for the orthogonal case.\n\t\tif ((px < x) && (py < y) || (px < x) && (py > y + h)\n\t\t\t\t|| (px > x + w) && (py < y) || (px > x + w) && (py > y + h))\n\t\t{\n\t\t\torthogonal = false;\n\t\t}\n\n\t\tif (orthogonal)\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (px == cx)\n\t\t\t\t{\n\t\t\t\t\tif (py <= y)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py >= y + h)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px < x)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py == y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py == y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\tif (py < cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 4);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + 3 * h / 4);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (py == y)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y);\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(cx, y + h);\n\t\t\t\t}\n\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (px > cx)\n\t\t\t\t{\n\t\t\t\t\tif ((py > y + h / 4) && (py < y + 3 * h / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py < y + h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > y + 3 * h / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (py == cy)\n\t\t\t\t{\n\t\t\t\t\tif (px <= x)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px >= x + w)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w, y + h / 2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py < y)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px == x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px == x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py == y + h)\n\t\t\t\t{\n\t\t\t\t\tif (px < cx)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (py > cy)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn new mxPoint(x + 3 * w / 4, y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (px == x)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, cy);\n\t\t\t\t}\n\t\t\t\telse if (px == x + w)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, cy);\n\t\t\t\t}\n\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (py > cy)\n\t\t\t\t{\n\t\t\t\t\tif ((px > x + w / 4) && (px < x + 3 * w / 4))\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t\t}\n\t\t\t\t\telse if (px < x + w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t}\n\t\t\t\t\telse if (px > x + 3 * w / 4)\n\t\t\t\t\t{\n\t\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tx = cx;\n\t\t\tvar ty = cy;\n\n\t\t\tif (px >= x && px <= x + w)\n\t\t\t{\n\t\t\t\ttx = px;\n\t\t\t\t\n\t\t\t\tif (py < cy)\n\t\t\t\t{\n\t\t\t\t\tty = y + h;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tty = y;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (py >= y && py <= y + h)\n\t\t\t{\n\t\t\t\tty = py;\n\t\t\t\t\n\t\t\t\tif (px < cx)\n\t\t\t\t{\n\t\t\t\t\ttx = x + w;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttx = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(tx, ty, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (vertical)\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 4, w / 2);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == pi2)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi2))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.5 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.75 * h));\n\t\t\t\t}\n\n\t\t\t\tif ((alpha < beta) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + w, y);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y - Math.floor(0.25 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha > pi2) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y - Math.floor(0.25 * h));\n\t\t\t\t}\n\t\t\t\telse if (((alpha > (pi - beta)) && (alpha <= pi))\n\t\t\t\t\t\t|| ((alpha < (-pi + beta)) && (alpha >= -pi)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > -pi2))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(1.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -pi2) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + w, y + Math.floor(1.25 * h));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar beta = Math.atan2(h / 2, w / 4);\n\n\t\t\t\t//Special cases where intersects with hexagon corners\n\t\t\t\tif (alpha == beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (pi - beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha == pi) || (alpha == -pi))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == 0)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + w, y + Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if (alpha == -beta)\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.75 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if (alpha == (-pi + beta))\n\t\t\t\t{\n\t\t\t\t\treturn new mxPoint(x + Math.floor(0.25 * w), y + h);\n\t\t\t\t}\n\n\t\t\t\tif ((alpha > 0) && (alpha < beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > beta) && (alpha < (pi - beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y);\n\t\t\t\t\tb = new mxPoint(x + w, y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha > (pi - beta)) && (alpha < pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y + h);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t- Math.floor(0.5 * h));\n\t\t\t\t}\n\t\t\t\telse if ((alpha < 0) && (alpha > -beta))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t\tb = new mxPoint(x + Math.floor(1.25 * w), y);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < -beta) && (alpha > (-pi + beta)))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x, y + h);\n\t\t\t\t\tb = new mxPoint(x + w, y + h);\n\t\t\t\t}\n\t\t\t\telse if ((alpha < (-pi + beta)) && (alpha > -pi))\n\t\t\t\t{\n\t\t\t\t\ta = new mxPoint(x - Math.floor(0.25 * w), y);\n\t\t\t\t\tb = new mxPoint(x + Math.floor(0.5 * w), y\n\t\t\t\t\t\t\t+ Math.floor(1.5 * h));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult = mxUtils.intersection(cx, cy, next.x, next.y, a.x, a.y, b.x, b.y);\n\t\t}\n\t\t\n\t\tif (result == null)\n\t\t{\n\t\t\treturn new mxPoint(cx, cy);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxPrintPreview\n * \n * Implements printing of a diagram across multiple pages. The following opens\n * a print preview for an existing graph:\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.open();\n * (end)\n * \n * Use <mxUtils.getScaleForPageCount> as follows in order to print the graph\n * across a given number of pages:\n * \n * (code)\n * var pageCount = mxUtils.prompt('Enter page count', '1');\n * \n * if (pageCount != null)\n * {\n *   var scale = mxUtils.getScaleForPageCount(pageCount, graph);\n *   var preview = new mxPrintPreview(graph, scale);\n *   preview.open();\n * }\n * (end)\n * \n * Additional pages:\n * \n * To add additional pages before and after the output, <getCoverPages> and\n * <getAppendices> can be used, respectively.\n * \n * (code)\n * var preview = new mxPrintPreview(graph, 1);\n * \n * preview.getCoverPages = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Cover Page</p>'\n *   }))];\n * };\n * \n * preview.getAppendices = function(w, h)\n * {\n *   return [this.renderPage(w, h, 0, 0, mxUtils.bind(this, function(div)\n *   {\n *     div.innerHTML = '<div style=\"position:relative;margin:4px;\">Appendix</p>'\n *   }))];\n * };\n * \n * preview.open();\n * (end)\n * \n * CSS:\n * \n * The CSS from the original page is not carried over to the print preview.\n * To add CSS to the page, use the css argument in the <open> function or\n * override <writeHead> to add the respective link tags as follows:\n * \n * (code)\n * var writeHead = preview.writeHead;\n * preview.writeHead = function(doc, css)\n * {\n *   writeHead.apply(this, arguments);\n *   doc.writeln('<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">');\n * };\n * (end)\n * \n * Padding:\n * \n * To add a padding to the page in the preview (but not the print output), use\n * the following code:\n * \n * (code)\n * preview.writeHead = function(doc)\n * {\n *   writeHead.apply(this, arguments);\n *   \n *   doc.writeln('<style type=\"text/css\">');\n *   doc.writeln('@media screen {');\n *   doc.writeln('  body > div { padding-top:30px;padding-left:40px;box-sizing:content-box; }');\n *   doc.writeln('}');\n *   doc.writeln('</style>');\n * };\n * (end)\n * \n * Headers:\n * \n * Apart from setting the title argument in the mxPrintPreview constructor you\n * can override <renderPage> as follows to add a header to any page:\n * \n * (code)\n * var oldRenderPage = mxPrintPreview.prototype.renderPage;\n * mxPrintPreview.prototype.renderPage = function(w, h, x, y, content, pageNumber)\n * {\n *   var div = oldRenderPage.apply(this, arguments);\n *   \n *   var header = document.createElement('div');\n *   header.style.position = 'absolute';\n *   header.style.top = '0px';\n *   header.style.width = '100%';\n *   header.style.textAlign = 'right';\n *   mxUtils.write(header, 'Your header here');\n *   div.firstChild.appendChild(header);\n *   \n *   return div;\n * };\n * (end)\n * \n * The pageNumber argument contains the number of the current page, starting at\n * 1. To display a header on the first page only, check pageNumber and add a\n * vertical offset in the constructor call for the height of the header.\n * \n * Page Format:\n * \n * For landscape printing, use <mxConstants.PAGE_FORMAT_A4_LANDSCAPE> as\n * the pageFormat in <mxUtils.getScaleForPageCount> and <mxPrintPreview>.\n * Keep in mind that one can not set the defaults for the print dialog\n * of the operating system from JavaScript so the user must manually choose\n * a page format that matches this setting.\n * \n * You can try passing the following CSS directive to <open> to set the\n * page format in the print dialog to landscape. However, this CSS\n * directive seems to be ignored in most major browsers, including IE.\n * \n * (code)\n * @page {\n *   size: landscape;\n * }\n * (end)\n * \n * Note that the print preview behaves differently in IE when used from the\n * filesystem or via HTTP so printing should always be tested via HTTP.\n * \n * If you are using a DOCTYPE in the source page you can override <getDoctype>\n * and provide the same DOCTYPE for the print preview if required. Here is\n * an example for IE8 standards mode.\n * \n * (code)\n * var preview = new mxPrintPreview(graph);\n * preview.getDoctype = function()\n * {\n *   return '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=5,IE=8\" ><![endif]-->';\n * };\n * preview.open();\n * (end)\n * \n * Constructor: mxPrintPreview\n *\n * Constructs a new print preview for the given parameters.\n * \n * Parameters:\n * \n * graph - <mxGraph> to be previewed.\n * scale - Optional scale of the output. Default is 1 / <mxGraph.pageScale>.\n * border - Border in pixels along each side of every page. Note that the\n * actual print function in the browser will add another border for\n * printing.\n * pageFormat - <mxRectangle> that specifies the page format (in pixels).\n * This should match the page format of the printer. Default uses the\n * <mxGraph.pageFormat> of the given graph.\n * x0 - Optional left offset of the output. Default is 0.\n * y0 - Optional top offset of the output. Default is 0.\n * borderColor - Optional color of the page border. Default is no border.\n * Note that a border is sometimes useful to highlight the printed page\n * border in the print preview of the browser.\n * title - Optional string that is used for the window title. Default\n * is 'Printer-friendly version'.\n * pageSelector - Optional boolean that specifies if the page selector\n * should appear in the window with the print preview. Default is true.\n */\nfunction mxPrintPreview(graph, scale, pageFormat, border, x0, y0, borderColor, title, pageSelector)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.border = (border != null) ? border : 0;\n\tthis.pageFormat = mxRectangle.fromRectangle((pageFormat != null) ? pageFormat : graph.pageFormat);\n\tthis.title = (title != null) ? title : 'Printer-friendly version';\n\tthis.x0 = (x0 != null) ? x0 : 0;\n\tthis.y0 = (y0 != null) ? y0 : 0;\n\tthis.borderColor = borderColor;\n\tthis.pageSelector = (pageSelector != null) ? pageSelector : true;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> that should be previewed.\n */\nmxPrintPreview.prototype.graph = null;\n\n/**\n * Variable: pageFormat\n *\n * Holds the <mxRectangle> that defines the page format.\n */\nmxPrintPreview.prototype.pageFormat = null;\n\n/**\n * Variable: scale\n * \n * Holds the scale of the print preview.\n */\nmxPrintPreview.prototype.scale = null;\n\n/**\n * Variable: border\n * \n * The border inset around each side of every page in the preview. This is set\n * to 0 if autoOrigin is false.\n */\nmxPrintPreview.prototype.border = 0;\n\n/**\n * Variable: marginTop\n * \n * The margin at the top of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginTop = 0;\n\n/**\n * Variable: marginBottom\n * \n * The margin at the bottom of the page (number). Default is 0.\n */\nmxPrintPreview.prototype.marginBottom = 0;\n\n/**\n * Variable: x0\n * \n * Holds the horizontal offset of the output.\n */\nmxPrintPreview.prototype.x0 = 0;\n\n/**\n * Variable: y0\n *\n * Holds the vertical offset of the output.\n */\nmxPrintPreview.prototype.y0 = 0;\n\n/**\n * Variable: autoOrigin\n * \n * Specifies if the origin should be automatically computed based on the top,\n * left corner of the actual diagram contents. The required offset will be added\n * to <x0> and <y0> in <open>. Default is true.\n */\nmxPrintPreview.prototype.autoOrigin = true;\n\n/**\n * Variable: printOverlays\n * \n * Specifies if overlays should be printed. Default is false.\n */\nmxPrintPreview.prototype.printOverlays = false;\n\n/**\n * Variable: printControls\n * \n * Specifies if controls (such as folding icons) should be printed. Default is\n * false.\n */\nmxPrintPreview.prototype.printControls = false;\n\n/**\n * Variable: printBackgroundImage\n * \n * Specifies if the background image should be printed. Default is false.\n */\nmxPrintPreview.prototype.printBackgroundImage = false;\n\n/**\n * Variable: backgroundColor\n * \n * Holds the color value for the page background color. Default is #ffffff.\n */\nmxPrintPreview.prototype.backgroundColor = '#ffffff';\n\n/**\n * Variable: borderColor\n * \n * Holds the color value for the page border.\n */\nmxPrintPreview.prototype.borderColor = null;\n\n/**\n * Variable: title\n * \n * Holds the title of the preview window.\n */\nmxPrintPreview.prototype.title = null;\n\n/**\n * Variable: pageSelector\n * \n * Boolean that specifies if the page selector should be\n * displayed. Default is true.\n */\nmxPrintPreview.prototype.pageSelector = null;\n\n/**\n * Variable: wnd\n * \n * Reference to the preview window.\n */\nmxPrintPreview.prototype.wnd = null;\n\n/**\n * Variable: targetWindow\n * \n * Assign any window here to redirect the rendering in <open>.\n */\nmxPrintPreview.prototype.targetWindow = null;\n\n/**\n * Variable: pageCount\n * \n * Holds the actual number of pages in the preview.\n */\nmxPrintPreview.prototype.pageCount = 0;\n\n/**\n * Variable: clipping\n * \n * Specifies is clipping should be used to avoid creating too many cell states\n * in large diagrams. The bounding box of the cells in the original diagram is\n * used if this is enabled. Default is true.\n */\nmxPrintPreview.prototype.clipping = true;\n\n/**\n * Function: getWindow\n * \n * Returns <wnd>.\n */\nmxPrintPreview.prototype.getWindow = function()\n{\n\treturn this.wnd;\n};\n\n/**\n * Function: getDocType\n * \n * Returns the string that should go before the HTML tag in the print preview\n * page. This implementation returns an X-UA meta tag for IE5 in quirks mode,\n * IE8 in IE8 standards mode and edge in IE9 standards mode.\n */\nmxPrintPreview.prototype.getDoctype = function()\n{\n\tvar dt = '';\n\t\n\tif (document.documentMode == 5)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=5\">';\n\t}\n\telse if (document.documentMode == 8)\n\t{\n\t\tdt = '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">';\n\t}\n\telse if (document.documentMode > 8)\n\t{\n\t\t// Comment needed to make standards doctype apply in IE\n\t\tdt = '<!--[if IE]><meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"><![endif]-->';\n\t}\n\t\n\treturn dt;\n};\n\n/**\n * Function: appendGraph\n * \n * Adds the given graph to the existing print preview.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.appendGraph = function(graph, scale, x0, y0, forcePageBreaks, keepOpen)\n{\n\tthis.graph = graph;\n\tthis.scale = (scale != null) ? scale : 1 / graph.pageScale;\n\tthis.x0 = x0;\n\tthis.y0 = y0;\n\tthis.open(null, null, forcePageBreaks, keepOpen);\n};\n\n/**\n * Function: open\n * \n * Shows the print preview window. The window is created here if it does\n * not exist.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n * targetWindow - Optional window that should be used for rendering. If\n * this is specified then no HEAD tag, CSS and BODY tag will be written.\n */\nmxPrintPreview.prototype.open = function(css, targetWindow, forcePageBreaks, keepOpen)\n{\n\t// Closing the window while the page is being rendered may cause an\n\t// exception in IE. This and any other exceptions are simply ignored.\n\tvar previousInitializeOverlay = this.graph.cellRenderer.initializeOverlay;\n\tvar div = null;\n\t\n\ttry\n\t{\n\t\t// Temporarily overrides the method to redirect rendering of overlays\n\t\t// to the draw pane so that they are visible in the printout\n\t\tif (this.printOverlays)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initializeOverlay = function(state, overlay)\n\t\t\t{\n\t\t\t\toverlay.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tif (this.printControls)\n\t\t{\n\t\t\tthis.graph.cellRenderer.initControl = function(state, control, handleEvents, clickHandler)\n\t\t\t{\n\t\t\t\tcontrol.dialect = state.view.graph.dialect;\n\t\t\t\tcontrol.init(state.view.getDrawPane());\n\t\t\t};\n\t\t}\n\t\t\n\t\tthis.wnd = (targetWindow != null) ? targetWindow : this.wnd;\n\t\tvar isNewWindow = false;\n\t\t\n\t\tif (this.wnd == null)\n\t\t{\n\t\t\tisNewWindow = true;\n\t\t\tthis.wnd = window.open();\n\t\t}\n\t\t\n\t\tvar doc = this.wnd.document;\n\t\t\n\t\tif (isNewWindow)\n\t\t{\n\t\t\tvar dt = this.getDoctype();\n\t\t\t\n\t\t\tif (dt != null && dt.length > 0)\n\t\t\t{\n\t\t\t\tdoc.writeln(dt);\n\t\t\t}\n\t\t\t\n\t\t\tif (mxClient.IS_VML)\n\t\t\t{\n\t\t\t\tdoc.writeln('<html xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">');\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (document.compatMode === 'CSS1Compat')\n\t\t\t\t{\n\t\t\t\t\tdoc.writeln('<!DOCTYPE html>');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdoc.writeln('<html>');\n\t\t\t}\n\t\t\t\n\t\t\tdoc.writeln('<head>');\n\t\t\tthis.writeHead(doc, css);\n\t\t\tdoc.writeln('</head>');\n\t\t\tdoc.writeln('<body class=\"mxPage\">');\n\t\t}\n\n\t\t// Computes the horizontal and vertical page count\n\t\tvar bounds = this.graph.getGraphBounds().clone();\n\t\tvar currentScale = this.graph.getView().getScale();\n\t\tvar sc = currentScale / this.scale;\n\t\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\t\t// Uses the absolute origin with no offset for all printing\n\t\tif (!this.autoOrigin)\n\t\t{\n\t\t\tthis.x0 -= tr.x * this.scale;\n\t\t\tthis.y0 -= tr.y * this.scale;\n\t\t\tbounds.width += bounds.x;\n\t\t\tbounds.height += bounds.y;\n\t\t\tbounds.x = 0;\n\t\t\tbounds.y = 0;\n\t\t\tthis.border = 0;\n\t\t}\n\t\t\n\t\t// Store the available page area\n\t\tvar availableWidth = this.pageFormat.width - (this.border * 2);\n\t\tvar availableHeight = this.pageFormat.height - (this.border * 2);\n\t\n\t\t// Adds margins to page format\n\t\tthis.pageFormat.height += this.marginTop + this.marginBottom;\n\n\t\t// Compute the unscaled, untranslated bounds to find\n\t\t// the number of vertical and horizontal pages\n\t\tbounds.width /= sc;\n\t\tbounds.height /= sc;\n\n\t\tvar hpages = Math.max(1, Math.ceil((bounds.width + this.x0) / availableWidth));\n\t\tvar vpages = Math.max(1, Math.ceil((bounds.height + this.y0) / availableHeight));\n\t\tthis.pageCount = hpages * vpages;\n\t\t\n\t\tvar writePageSelector = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.pageSelector && (vpages > 1 || hpages > 1))\n\t\t\t{\n\t\t\t\tvar table = this.createPageSelector(vpages, hpages);\n\t\t\t\tdoc.body.appendChild(table);\n\t\t\t\t\n\t\t\t\t// Implements position: fixed in IE quirks mode\n\t\t\t\tif (mxClient.IS_IE && doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7)\n\t\t\t\t{\n\t\t\t\t\ttable.style.position = 'absolute';\n\t\t\t\t\t\n\t\t\t\t\tvar update = function()\n\t\t\t\t\t{\n\t\t\t\t\t\ttable.style.top = ((doc.body.scrollTop || doc.documentElement.scrollTop) + 10) + 'px';\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'scroll', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tmxEvent.addListener(this.wnd, 'resize', function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tupdate();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar addPage = mxUtils.bind(this, function(div, addBreak)\n\t\t{\n\t\t\t// Border of the DIV (aka page) inside the document\n\t\t\tif (this.borderColor != null)\n\t\t\t{\n\t\t\t\tdiv.style.borderColor = this.borderColor;\n\t\t\t\tdiv.style.borderStyle = 'solid';\n\t\t\t\tdiv.style.borderWidth = '1px';\n\t\t\t}\n\t\t\t\n\t\t\t// Needs to be assigned directly because IE doesn't support\n\t\t\t// child selectors, eg. body > div { background: white; }\n\t\t\tdiv.style.background = this.backgroundColor;\n\t\t\t\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tdiv.style.pageBreakAfter = 'always';\n\t\t\t}\n\n\t\t\t// NOTE: We are dealing with cross-window DOM here, which\n\t\t\t// is a problem in IE, so we copy the HTML markup instead.\n\t\t\t// The underlying problem is that the graph display markup\n\t\t\t// creation (in mxShape, mxGraphView) is hardwired to using\n\t\t\t// document.createElement and hence we must use this document\n\t\t\t// to create the complete page and then copy it over to the\n\t\t\t// new window.document. This can be fixed later by using the\n\t\t\t// ownerDocument of the container in mxShape and mxGraphView.\n\t\t\tif (isNewWindow && (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE))\n\t\t\t{\n\t\t\t\t// For some obscure reason, removing the DIV from the\n\t\t\t\t// parent before fetching its outerHTML has missing\n\t\t\t\t// fillcolor properties and fill children, so the div\n\t\t\t\t// must be removed afterwards to keep the fillcolors.\n\t\t\t\tdoc.writeln(div.outerHTML);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse if (mxClient.IS_IE || document.documentMode >= 11 || mxClient.IS_EDGE)\n\t\t\t{\n\t\t\t\tvar clone = doc.createElement('div');\n\t\t\t\tclone.innerHTML = div.outerHTML;\n\t\t\t\tclone = clone.getElementsByTagName('div')[0];\n\t\t\t\tdoc.body.appendChild(clone);\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdiv.parentNode.removeChild(div);\n\t\t\t\tdoc.body.appendChild(div);\n\t\t\t}\n\n\t\t\tif (forcePageBreaks || addBreak)\n\t\t\t{\n\t\t\t\tthis.addPageBreak(doc);\n\t\t\t}\n\t\t});\n\t\t\n\t\tvar cov = this.getCoverPages(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\tif (cov != null)\n\t\t{\n\t\t\tfor (var i = 0; i < cov.length; i++)\n\t\t\t{\n\t\t\t\taddPage(cov[i], true);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar apx = this.getAppendices(this.pageFormat.width, this.pageFormat.height);\n\t\t\n\t\t// Appends each page to the page output for printing, making\n\t\t// sure there will be a page break after each page (ie. div)\n\t\tfor (var i = 0; i < vpages; i++)\n\t\t{\n\t\t\tvar dy = i * availableHeight / this.scale - this.y0 / this.scale +\n\t\t\t\t\t(bounds.y - tr.y * currentScale) / currentScale;\n\t\t\t\n\t\t\tfor (var j = 0; j < hpages; j++)\n\t\t\t{\n\t\t\t\tif (this.wnd == null)\n\t\t\t\t{\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = j * availableWidth / this.scale - this.x0 / this.scale +\n\t\t\t\t\t\t(bounds.x - tr.x * currentScale) / currentScale;\n\t\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\t\tvar clip = new mxRectangle(dx, dy, availableWidth, availableHeight);\n\t\t\t\tdiv = this.renderPage(this.pageFormat.width, this.pageFormat.height, 0, 0, mxUtils.bind(this, function(div)\n\t\t\t\t{\n\t\t\t\t\tthis.addGraphFragment(-dx, -dy, this.scale, pageNum, div, clip);\n\t\t\t\t\t\n\t\t\t\t\tif (this.printBackgroundImage)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.insertBackgroundImage(div, -dx, -dy);\n\t\t\t\t\t}\n\t\t\t\t}), pageNum);\n\n\t\t\t\t// Gives the page a unique ID for later accessing the page\n\t\t\t\tdiv.setAttribute('id', 'mxPage-'+pageNum);\n\n\t\t\t\taddPage(div, apx != null || i < vpages - 1 || j < hpages - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (apx != null)\n\t\t{\n\t\t\tfor (var i = 0; i < apx.length; i++)\n\t\t\t{\n\t\t\t\taddPage(apx[i], i < apx.length - 1);\n\t\t\t}\n\t\t}\n\n\t\tif (isNewWindow && !keepOpen)\n\t\t{\n\t\t\tthis.closeDocument();\n\t\t\twritePageSelector();\n\t\t}\n\t\t\n\t\tthis.wnd.focus();\n\t}\n\tcatch (e)\n\t{\n\t\t// Removes the DIV from the document in case of an error\n\t\tif (div != null && div.parentNode != null)\n\t\t{\n\t\t\tdiv.parentNode.removeChild(div);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.graph.cellRenderer.initializeOverlay = previousInitializeOverlay;\n\t}\n\n\treturn this.wnd;\n};\n\n/**\n * Function: addPageBreak\n * \n * Adds a page break to the given document.\n */\nmxPrintPreview.prototype.addPageBreak = function(doc)\n{\n\tvar hr = doc.createElement('hr');\n\thr.className = 'mxPageBreak';\n\tdoc.body.appendChild(hr);\n};\n\n/**\n * Function: closeDocument\n * \n * Writes the closing tags for body and page after calling <writePostfix>.\n */\nmxPrintPreview.prototype.closeDocument = function()\n{\n\ttry\n\t{\n\t\tif (this.wnd != null && this.wnd.document != null)\n\t\t{\n\t\t\tvar doc = this.wnd.document;\n\t\t\t\n\t\t\tthis.writePostfix(doc);\n\t\t\tdoc.writeln('</body>');\n\t\t\tdoc.writeln('</html>');\n\t\t\tdoc.close();\n\t\t\t\n\t\t\t// Removes all event handlers in the print output\n\t\t\tmxEvent.release(doc.body);\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\t// ignore any errors resulting from wnd no longer being available\n\t}\n};\n\n/**\n * Function: writeHead\n * \n * Writes the HEAD section into the given document, without the opening\n * and closing HEAD tags.\n */\nmxPrintPreview.prototype.writeHead = function(doc, css)\n{\n\tif (this.title != null)\n\t{\n\t\tdoc.writeln('<title>' + this.title + '</title>');\n\t}\n\t\n\t// Adds required namespaces\n\tif (mxClient.IS_VML)\n\t{\n\t\tdoc.writeln('<style type=\"text/css\">v\\\\:*{behavior:url(#default#VML)}o\\\\:*{behavior:url(#default#VML)}</style>');\n\t}\n\n\t// Adds all required stylesheets\n\tmxClient.link('stylesheet', mxClient.basePath + '/css/common.css', doc);\n\n\t// Removes horizontal rules and page selector from print output\n\tdoc.writeln('<style type=\"text/css\">');\n\tdoc.writeln('@media print {');\n\tdoc.writeln('  * { -webkit-print-color-adjust: exact; }');\n\tdoc.writeln('  table.mxPageSelector { display: none; }');\n\tdoc.writeln('  hr.mxPageBreak { display: none; }');\n\tdoc.writeln('}');\n\tdoc.writeln('@media screen {');\n\t\n\t// NOTE: position: fixed is not supported in IE, so the page selector\n\t// position (absolute) needs to be updated in IE (see below)\n\tdoc.writeln('  table.mxPageSelector { position: fixed; right: 10px; top: 10px;' +\n\t\t\t'font-family: Arial; font-size:10pt; border: solid 1px darkgray;' +\n\t\t\t'background: white; border-collapse:collapse; }');\n\tdoc.writeln('  table.mxPageSelector td { border: solid 1px gray; padding:4px; }');\n\tdoc.writeln('  body.mxPage { background: gray; }');\n\tdoc.writeln('}');\n\t\n\tif (css != null)\n\t{\n\t\tdoc.writeln(css);\n\t}\n\t\n\tdoc.writeln('</style>');\n};\n\n/**\n * Function: writePostfix\n * \n * Called before closing the body of the page. This implementation is empty.\n */\nmxPrintPreview.prototype.writePostfix = function(doc)\n{\n\t// empty\n};\n\n/**\n * Function: createPageSelector\n * \n * Creates the page selector table.\n */\nmxPrintPreview.prototype.createPageSelector = function(vpages, hpages)\n{\n\tvar doc = this.wnd.document;\n\tvar table = doc.createElement('table');\n\ttable.className = 'mxPageSelector';\n\ttable.setAttribute('border', '0');\n\n\tvar tbody = doc.createElement('tbody');\n\t\n\tfor (var i = 0; i < vpages; i++)\n\t{\n\t\tvar row = doc.createElement('tr');\n\t\t\n\t\tfor (var j = 0; j < hpages; j++)\n\t\t{\n\t\t\tvar pageNum = i * hpages + j + 1;\n\t\t\tvar cell = doc.createElement('td');\n\t\t\tvar a = doc.createElement('a');\n\t\t\ta.setAttribute('href', '#mxPage-' + pageNum);\n\n\t\t\t// Workaround for FF where the anchor is appended to the URL of the original document\n\t\t\tif (mxClient.IS_NS && !mxClient.IS_SF && !mxClient.IS_GC)\n\t\t\t{\n\t\t\t\tvar js = 'var page = document.getElementById(\\'mxPage-' + pageNum + '\\');page.scrollIntoView(true);event.preventDefault();';\n\t\t\t\ta.setAttribute('onclick', js);\n\t\t\t}\n\t\t\t\n\t\t\tmxUtils.write(a, pageNum, doc);\n\t\t\tcell.appendChild(a);\n\t\t\trow.appendChild(cell);\n\t\t}\n\t\t\n\t\ttbody.appendChild(row);\n\t}\n\t\n\ttable.appendChild(tbody);\n\t\n\treturn table;\n};\n\n/**\n * Function: renderPage\n * \n * Creates a DIV that prints a single page of the given\n * graph using the given scale and returns the DIV that\n * represents the page.\n * \n * Parameters:\n * \n * w - Width of the page in pixels.\n * h - Height of the page in pixels.\n * dx - Optional horizontal page offset in pixels (used internally).\n * dy - Optional vertical page offset in pixels (used internally).\n * content - Callback that adds the HTML content to the inner div of a page.\n * Takes the inner div as the argument.\n * pageNumber - Integer representing the page number.\n */\nmxPrintPreview.prototype.renderPage = function(w, h, dx, dy, content, pageNumber)\n{\n\tvar doc = this.wnd.document;\n\tvar div = document.createElement('div');\n\tvar arg = null;\n\n\ttry\n\t{\n\t\t// Workaround for ignored clipping in IE 9 standards\n\t\t// when printing with page breaks and HTML labels.\n\t\tif (dx != 0 || dy != 0)\n\t\t{\n\t\t\tdiv.style.position = 'relative';\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.position = 'relative';\n\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\t\t\t\n\t\t\tvar viewport = document.createElement('div');\n\t\t\tviewport.style.position = 'relative';\n\t\t\tviewport.style.marginLeft = dx + 'px';\n\t\t\tviewport.style.marginTop = dy + 'px';\n\n\t\t\t// FIXME: IE8 standards output problems\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t\tviewport.style.position = 'absolute';\n\t\t\t}\n\t\t\n\t\t\tif (doc.documentMode == 10)\n\t\t\t{\n\t\t\t\tviewport.style.width = '100%';\n\t\t\t\tviewport.style.height = '100%';\n\t\t\t}\n\t\t\t\n\t\t\tinnerDiv.appendChild(viewport);\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = viewport;\n\t\t}\n\t\t// FIXME: IE10/11 too many pages\n\t\telse\n\t\t{\n\t\t\tdiv.style.width = w + 'px';\n\t\t\tdiv.style.height = h + 'px';\n\t\t\tdiv.style.overflow = 'hidden';\n\t\t\tdiv.style.pageBreakInside = 'avoid';\n\t\t\t\n\t\t\t// IE8 uses above branch currently\n\t\t\tif (doc.documentMode == 8)\n\t\t\t{\n\t\t\t\tdiv.style.position = 'relative';\n\t\t\t}\n\t\t\t\n\t\t\tvar innerDiv = document.createElement('div');\n\t\t\tinnerDiv.style.width = (w - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.height = (h - 2 * this.border) + 'px';\n\t\t\tinnerDiv.style.overflow = 'hidden';\n\n\t\t\tif (mxClient.IS_IE && (doc.documentMode == null || doc.documentMode == 5 || doc.documentMode == 8 || doc.documentMode == 7))\n\t\t\t{\n\t\t\t\tinnerDiv.style.marginTop = this.border + 'px';\n\t\t\t\tinnerDiv.style.marginLeft = this.border + 'px';\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinnerDiv.style.top = this.border + 'px';\n\t\t\t\tinnerDiv.style.left = this.border + 'px';\n\t\t\t}\n\t\n\t\t\tif (this.graph.dialect == mxConstants.DIALECT_VML)\n\t\t\t{\n\t\t\t\tinnerDiv.style.position = 'absolute';\n\t\t\t}\n\n\t\t\tdiv.appendChild(innerDiv);\n\t\t\tdocument.body.appendChild(div);\n\t\t\targ = innerDiv;\n\t\t}\n\t}\n\tcatch (e)\n\t{\n\t\tdiv.parentNode.removeChild(div);\n\t\tdiv = null;\n\t\t\n\t\tthrow e;\n\t}\n\n\tcontent(arg);\n\t \n\treturn div;\n};\n\n/**\n * Function: getRoot\n * \n * Returns the root cell for painting the graph.\n */\nmxPrintPreview.prototype.getRoot = function()\n{\n\tvar root = this.graph.view.currentRoot;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.graph.getModel().getRoot();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: addGraphFragment\n * \n * Adds a graph fragment to the given div.\n * \n * Parameters:\n * \n * dx - Horizontal translation for the diagram.\n * dy - Vertical translation for the diagram.\n * scale - Scale for the diagram.\n * pageNumber - Number of the page to be rendered.\n * div - Div that contains the output.\n * clip - Contains the clipping rectangle as an <mxRectangle>.\n */\nmxPrintPreview.prototype.addGraphFragment = function(dx, dy, scale, pageNumber, div, clip)\n{\n\tvar view = this.graph.getView();\n\tvar previousContainer = this.graph.container;\n\tthis.graph.container = div;\n\t\n\tvar canvas = view.getCanvas();\n\tvar backgroundPane = view.getBackgroundPane();\n\tvar drawPane = view.getDrawPane();\n\tvar overlayPane = view.getOverlayPane();\n\n\tif (this.graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tview.createSvg();\n\t\t\n\t\t// Uses CSS transform for scaling\n\t\tif (!mxClient.NO_FO)\n\t\t{\n\t\t\tvar g = view.getDrawPane().parentNode;\n\t\t\tvar prev = g.getAttribute('transform');\n\t\t\tg.setAttribute('transformOrigin', '0 0');\n\t\t\tg.setAttribute('transform', 'scale(' + scale + ',' + scale + ')' +\n\t\t\t\t'translate(' + dx + ',' + dy + ')');\n\t\t\t\n\t\t\tscale = 1;\n\t\t\tdx = 0;\n\t\t\tdy = 0;\n\t\t}\n\t}\n\telse if (this.graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tview.createVml();\n\t}\n\telse\n\t{\n\t\tview.createHtml();\n\t}\n\t\n\t// Disables events on the view\n\tvar eventsEnabled = view.isEventsEnabled();\n\tview.setEventsEnabled(false);\n\t\n\t// Disables the graph to avoid cursors\n\tvar graphEnabled = this.graph.isEnabled();\n\tthis.graph.setEnabled(false);\n\n\t// Resets the translation\n\tvar translate = view.getTranslate();\n\tview.translate = new mxPoint(dx, dy);\n\t\n\t// Redraws only states that intersect the clip\n\tvar redraw = this.graph.cellRenderer.redraw;\n\tvar states = view.states;\n\tvar s = view.scale;\n\n\t// Gets the transformed clip for intersection check below\n\tif (this.clipping)\n\t{\n\t\tvar tempClip = new mxRectangle((clip.x + translate.x) * s, (clip.y + translate.y) * s,\n\t\t\t\tclip.width * s / scale, clip.height * s / scale);\n\t\t\n\t\t// Checks clipping rectangle for speedup\n\t\t// Must create terminal states for edge clipping even if terminal outside of clip\n\t\tthis.graph.cellRenderer.redraw = function(state, force, rendering)\n\t\t{\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\t// Gets original state from graph to find bounding box\n\t\t\t\tvar orig = states.get(state.cell);\n\t\t\t\t\n\t\t\t\tif (orig != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = view.getBoundingBox(orig, false);\n\t\t\t\t\t\n\t\t\t\t\t// Stops rendering if outside clip for speedup\n\t\t\t\t\tif (bbox != null && !mxUtils.intersects(tempClip, bbox))\n\t\t\t\t\t{\n\t\t\t\t\t\t//return;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tredraw.apply(this, arguments);\n\t\t};\n\t}\n\t\n\tvar temp = null;\n\t\n\ttry\n\t{\n\t\t// Creates the temporary cell states in the view and\n\t\t// draws them onto the temporary DOM nodes in the view\n\t\tvar cells = [this.getRoot()];\n\t\ttemp = new mxTemporaryCellStates(view, scale, cells, null, mxUtils.bind(this, function(state)\n\t\t{\n\t\t\treturn this.getLinkForCellState(state);\n\t\t}));\n\t}\n\tfinally\n\t{\n\t\t// Removes overlay pane with selection handles\n\t\t// controls and icons from the print output\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tview.overlayPane.innerHTML = '';\n\t\t\tview.canvas.style.overflow = 'hidden';\n\t\t\tview.canvas.style.position = 'relative';\n\t\t\tview.canvas.style.top = this.marginTop + 'px';\n\t\t\tview.canvas.style.width = clip.width + 'px';\n\t\t\tview.canvas.style.height = clip.height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Removes everything but the SVG node\n\t\t\tvar tmp = div.firstChild;\n\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\tvar next = tmp.nextSibling;\n\t\t\t\tvar name = tmp.nodeName.toLowerCase();\n\n\t\t\t\t// Note: Width and height are required in FF 11\n\t\t\t\tif (name == 'svg')\n\t\t\t\t{\n\t\t\t\t\ttmp.style.overflow = 'hidden';\n\t\t\t\t\ttmp.style.position = 'relative';\n\t\t\t\t\ttmp.style.top = this.marginTop + 'px';\n\t\t\t\t\ttmp.setAttribute('width', clip.width);\n\t\t\t\t\ttmp.setAttribute('height', clip.height);\n\t\t\t\t\ttmp.style.width = '';\n\t\t\t\t\ttmp.style.height = '';\n\t\t\t\t}\n\t\t\t\t// Tries to fetch all text labels and only text labels\n\t\t\t\telse if (tmp.style.cursor != 'default' && name != 'div')\n\t\t\t\t{\n\t\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = next;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Puts background image behind SVG output\n\t\tif (this.printBackgroundImage)\n\t\t{\n\t\t\tvar svgs = div.getElementsByTagName('svg');\n\t\t\t\n\t\t\tif (svgs.length > 0)\n\t\t\t{\n\t\t\t\tsvgs[0].style.position = 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Completely removes the overlay pane to remove more handles\n\t\tview.overlayPane.parentNode.removeChild(view.overlayPane);\n\n\t\t// Restores the state of the view\n\t\tthis.graph.setEnabled(graphEnabled);\n\t\tthis.graph.container = previousContainer;\n\t\tthis.graph.cellRenderer.redraw = redraw;\n\t\tview.canvas = canvas;\n\t\tview.backgroundPane = backgroundPane;\n\t\tview.drawPane = drawPane;\n\t\tview.overlayPane = overlayPane;\n\t\tview.translate = translate;\n\t\ttemp.destroy();\n\t\tview.setEventsEnabled(eventsEnabled);\n\t}\n};\n\n/**\n * Function: getLinkForCellState\n * \n * Returns the link for the given cell state. This returns null.\n */\nmxPrintPreview.prototype.getLinkForCellState = function(state)\n{\n\treturn this.graph.getLinkForCell(state.cell);\n};\n\n/**\n * Function: insertBackgroundImage\n * \n * Inserts the background image into the given div.\n */\nmxPrintPreview.prototype.insertBackgroundImage = function(div, dx, dy)\n{\n\tvar bg = this.graph.backgroundImage;\n\t\n\tif (bg != null)\n\t{\n\t\tvar img = document.createElement('img');\n\t\timg.style.position = 'absolute';\n\t\timg.style.marginLeft = Math.round(dx * this.scale) + 'px';\n\t\timg.style.marginTop = Math.round(dy * this.scale) + 'px';\n\t\timg.setAttribute('width', Math.round(this.scale * bg.width));\n\t\timg.setAttribute('height', Math.round(this.scale * bg.height));\n\t\timg.src = bg.src;\n\t\t\n\t\tdiv.insertBefore(img, div.firstChild);\n\t}\n};\n\n/**\n * Function: getCoverPages\n * \n * Returns the pages to be added before the print output. This returns null.\n */\nmxPrintPreview.prototype.getCoverPages = function()\n{\n\treturn null;\n};\n\n/**\n * Function: getAppendices\n * \n * Returns the pages to be added after the print output. This returns null.\n */\nmxPrintPreview.prototype.getAppendices = function()\n{\n\treturn null;\n};\n\n/**\n * Function: print\n * \n * Opens the print preview and shows the print dialog.\n * \n * Parameters:\n * \n * css - Optional CSS string to be used in the head section.\n */\nmxPrintPreview.prototype.print = function(css)\n{\n\tvar wnd = this.open(css);\n\t\n\tif (wnd != null)\n\t{\n\t\twnd.print();\n\t}\n};\n\n/**\n * Function: close\n * \n * Closes the print preview window.\n */\nmxPrintPreview.prototype.close = function()\n{\n\tif (this.wnd != null)\n\t{\n\t\tthis.wnd.close();\n\t\tthis.wnd = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheet\n * \n * Defines the appearance of the cells in a graph. See <putCellStyle> for an\n * example of creating a new cell style. It is recommended to use objects, not\n * arrays for holding cell styles. Existing styles can be cloned using\n * <mxUtils.clone> and turned into a string for debugging using\n * <mxUtils.toString>.\n *\n * Default Styles:\n * \n * The stylesheet contains two built-in styles, which are used if no style is\n * defined for a cell:\n *\n *   defaultVertex - Default style for vertices\n *   defaultEdge - Default style for edges\n * \n * Example:\n * \n * (code)\n * var vertexStyle = stylesheet.getDefaultVertexStyle();\n * vertexStyle[mxConstants.ROUNDED] = true;\n * var edgeStyle = stylesheet.getDefaultEdgeStyle();\n * edgeStyle[mxConstants.STYLE_EDGE] = mxEdgeStyle.EntityRelation;\n * (end)\n * \n * Modifies the built-in default styles.\n * \n * To avoid the default style for a cell, add a leading semicolon\n * to the style definition, eg.\n * \n * (code)\n * ;shadow=1\n * (end)\n * \n * Removing keys:\n * \n * For removing a key in a cell style of the form [stylename;|key=value;] the\n * special value none can be used, eg. highlight;fillColor=none\n * \n * See also the helper methods in mxUtils to modify strings of this format,\n * namely <mxUtils.setStyle>, <mxUtils.indexOfStylename>,\n * <mxUtils.addStylename>, <mxUtils.removeStylename>,\n * <mxUtils.removeAllStylenames> and <mxUtils.setStyleFlag>.\n * \n * Constructor: mxStylesheet\n * \n * Constructs a new stylesheet and assigns default styles.\n */\nfunction mxStylesheet()\n{\n\tthis.styles = new Object();\n\t\n\tthis.putDefaultVertexStyle(this.createDefaultVertexStyle());\n\tthis.putDefaultEdgeStyle(this.createDefaultEdgeStyle());\n};\n\n/**\n * Function: styles\n * \n * Maps from names to cell styles. Each cell style is a map of key,\n * value pairs.\n */\nmxStylesheet.prototype.styles;\n\n/**\n * Function: createDefaultVertexStyle\n * \n * Creates and returns the default vertex style.\n */\nmxStylesheet.prototype.createDefaultVertexStyle = function()\n{\n\tvar style = new Object();\n\t\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n\tstyle[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_FILLCOLOR] = '#C3D9FF';\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#774400';\n\t\n\treturn style;\n};\n\n/**\n * Function: createDefaultEdgeStyle\n * \n * Creates and returns the default edge style.\n */\nmxStylesheet.prototype.createDefaultEdgeStyle = function()\n{\n\tvar style = new Object();\n\t\n\tstyle[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;\n\tstyle[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;\n\tstyle[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;\n\tstyle[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;\n\tstyle[mxConstants.STYLE_STROKECOLOR] = '#6482B9';\n\tstyle[mxConstants.STYLE_FONTCOLOR] = '#446299';\n\t\n\treturn style;\n};\n\n/**\n * Function: putDefaultVertexStyle\n * \n * Sets the default style for vertices using defaultVertex as the\n * stylename.\n * \n * Parameters:\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putDefaultVertexStyle = function(style)\n{\n\tthis.putCellStyle('defaultVertex', style);\n};\n\n/**\n * Function: putDefaultEdgeStyle\n * \n * Sets the default style for edges using defaultEdge as the stylename.\n */\nmxStylesheet.prototype.putDefaultEdgeStyle = function(style)\n{\n\tthis.putCellStyle('defaultEdge', style);\n};\n\n/**\n * Function: getDefaultVertexStyle\n * \n * Returns the default style for vertices.\n */\nmxStylesheet.prototype.getDefaultVertexStyle = function()\n{\n\treturn this.styles['defaultVertex'];\n};\n\n/**\n * Function: getDefaultEdgeStyle\n * \n * Sets the default style for edges.\n */\nmxStylesheet.prototype.getDefaultEdgeStyle = function()\n{\n\treturn this.styles['defaultEdge'];\n};\n\n/**\n * Function: putCellStyle\n * \n * Stores the given map of key, value pairs under the given name in\n * <styles>.\n *\n * Example:\n * \n * The following example adds a new style called 'rounded' into an\n * existing stylesheet:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n * style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;\n * style[mxConstants.STYLE_ROUNDED] = true;\n * graph.getStylesheet().putCellStyle('rounded', style);\n * (end)\n * \n * In the above example, the new style is an object. The possible keys of\n * the object are all the constants in <mxConstants> that start with STYLE\n * and the values are either JavaScript objects, such as\n * <mxPerimeter.RightAngleRectanglePerimeter> (which is in fact a function)\n * or expressions, such as true. Note that not all keys will be\n * interpreted by all shapes (eg. the line shape ignores the fill color).\n * The final call to this method associates the style with a name in the\n * stylesheet. The style is used in a cell with the following code:\n * \n * (code)\n * model.setStyle(cell, 'rounded');\n * (end)\n * \n * Parameters:\n * \n * name - Name for the style to be stored.\n * style - Key, value pairs that define the style.\n */\nmxStylesheet.prototype.putCellStyle = function(name, style)\n{\n\tthis.styles[name] = style;\n};\n\n/**\n * Function: getCellStyle\n * \n * Returns the cell style for the specified stylename or the given\n * defaultStyle if no style can be found for the given stylename.\n * \n * Parameters:\n * \n * name - String of the form [(stylename|key=value);] that represents the\n * style.\n * defaultStyle - Default style to be returned if no style can be found.\n */\nmxStylesheet.prototype.getCellStyle = function(name, defaultStyle)\n{\n\tvar style = defaultStyle;\n\t\n\tif (name != null && name.length > 0)\n\t{\n\t\tvar pairs = name.split(';');\n\n\t\tif (style != null &&\n\t\t\tname.charAt(0) != ';')\n\t\t{\n\t\t\tstyle = mxUtils.clone(style);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstyle = new Object();\n\t\t}\n\n\t\t// Parses each key, value pair into the existing style\n\t \tfor (var i = 0; i < pairs.length; i++)\n\t \t{\n\t \t\tvar tmp = pairs[i];\n\t \t\tvar pos = tmp.indexOf('=');\n\t \t\t\n\t \t\tif (pos >= 0)\n\t \t\t{\n\t\t \t\tvar key = tmp.substring(0, pos);\n\t\t \t\tvar value = tmp.substring(pos + 1);\n\n\t\t \t\tif (value == mxConstants.NONE)\n\t\t \t\t{\n\t\t \t\t\tdelete style[key];\n\t\t \t\t}\n\t\t \t\telse if (mxUtils.isNumeric(value))\n\t\t \t\t{\n\t\t \t\t\tstyle[key] = parseFloat(value);\n\t\t \t\t}\n\t\t \t\telse\n\t\t \t\t{\n\t\t\t \t\tstyle[key] = value;\n\t\t \t\t}\n\t\t\t}\n\t \t\telse\n\t \t\t{\n\t \t\t\t// Merges the entries from a named style\n\t\t\t\tvar tmpStyle = this.styles[tmp];\n\t\t\t\t\n\t\t\t\tif (tmpStyle != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var key in tmpStyle)\n\t\t\t\t\t{\n\t\t\t\t\t\tstyle[key] = tmpStyle[key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t \t\t}\n\t\t}\n\t}\n\t\n\treturn style;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellState\n * \n * Represents the current state of a cell in a given <mxGraphView>.\n * \n * For edges, the edge label position is stored in <absoluteOffset>.\n * \n * The size for oversize labels can be retrieved using the boundingBox property\n * of the <text> field as shown below.\n * \n * (code)\n * var bbox = (state.text != null) ? state.text.boundingBox : null;\n * (end)\n * \n * Constructor: mxCellState\n * \n * Constructs a new object that represents the current state of the given\n * cell in the specified view.\n * \n * Parameters:\n * \n * view - <mxGraphView> that contains the state.\n * cell - <mxCell> that this state represents.\n * style - Array of key, value pairs that constitute the style.\n */\nfunction mxCellState(view, cell, style)\n{\n\tthis.view = view;\n\tthis.cell = cell;\n\tthis.style = style;\n\t\n\tthis.origin = new mxPoint();\n\tthis.absoluteOffset = new mxPoint();\n};\n\n/**\n * Extends mxRectangle.\n */\nmxCellState.prototype = new mxRectangle();\nmxCellState.prototype.constructor = mxCellState;\n\n/**\n * Variable: view\n * \n * Reference to the enclosing <mxGraphView>.\n */\nmxCellState.prototype.view = null;\n\n/**\n * Variable: cell\n *\n * Reference to the <mxCell> that is represented by this state.\n */\nmxCellState.prototype.cell = null;\n\n/**\n * Variable: style\n * \n * Contains an array of key, value pairs that represent the style of the\n * cell.\n */\nmxCellState.prototype.style = null;\n\n/**\n * Variable: invalid\n * \n * Specifies if the state is invalid. Default is true.\n */\nmxCellState.prototype.invalid = true;\n\n/**\n * Variable: origin\n *\n * <mxPoint> that holds the origin for all child cells. Default is a new\n * empty <mxPoint>.\n */\nmxCellState.prototype.origin = null;\n\n/**\n * Variable: absolutePoints\n * \n * Holds an array of <mxPoints> that represent the absolute points of an\n * edge.\n */\nmxCellState.prototype.absolutePoints = null;\n\n/**\n * Variable: absoluteOffset\n *\n * <mxPoint> that holds the absolute offset. For edges, this is the\n * absolute coordinates of the label position. For vertices, this is the\n * offset of the label relative to the top, left corner of the vertex. \n */\nmxCellState.prototype.absoluteOffset = null;\n\n/**\n * Variable: visibleSourceState\n * \n * Caches the visible source terminal state.\n */\nmxCellState.prototype.visibleSourceState = null;\n\n/**\n * Variable: visibleTargetState\n * \n * Caches the visible target terminal state.\n */\nmxCellState.prototype.visibleTargetState = null;\n\n/**\n * Variable: terminalDistance\n * \n * Caches the distance between the end points for an edge.\n */\nmxCellState.prototype.terminalDistance = 0;\n\n/**\n * Variable: length\n *\n * Caches the length of an edge.\n */\nmxCellState.prototype.length = 0;\n\n/**\n * Variable: segments\n * \n * Array of numbers that represent the cached length of each segment of the\n * edge.\n */\nmxCellState.prototype.segments = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the cell graphically.\n */\nmxCellState.prototype.shape = null;\n\n/**\n * Variable: text\n * \n * Holds the <mxText> that represents the label of the cell. Thi smay be\n * null if the cell has no label.\n */\nmxCellState.prototype.text = null;\n\n/**\n * Variable: unscaledWidth\n * \n * Holds the unscaled width of the state.\n */\nmxCellState.prototype.unscaledWidth = null;\n\n/**\n * Function: getPerimeterBounds\n * \n * Returns the <mxRectangle> that should be used as the perimeter of the\n * cell.\n * \n * Parameters:\n * \n * border - Optional border to be added around the perimeter bounds.\n * bounds - Optional <mxRectangle> to be used as the initial bounds.\n */\nmxCellState.prototype.getPerimeterBounds = function(border, bounds)\n{\n\tborder = border || 0;\n\tbounds = (bounds != null) ? bounds : new mxRectangle(this.x, this.y, this.width, this.height);\n\t\n\tif (this.shape != null && this.shape.stencil != null && this.shape.stencil.aspect == 'fixed')\n\t{\n\t\tvar aspect = this.shape.stencil.computeAspect(this.style, bounds.x, bounds.y, bounds.width, bounds.height);\n\t\t\n\t\tbounds.x = aspect.x;\n\t\tbounds.y = aspect.y;\n\t\tbounds.width = this.shape.stencil.w0 * aspect.width;\n\t\tbounds.height = this.shape.stencil.h0 * aspect.height;\n\t}\n\t\n\tif (border != 0)\n\t{\n\t\tbounds.grow(border);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: setAbsoluteTerminalPoint\n * \n * Sets the first or last point in <absolutePoints> depending on isSource.\n * \n * Parameters:\n * \n * point - <mxPoint> that represents the terminal point.\n * isSource - Boolean that specifies if the first or last point should\n * be assigned.\n */\nmxCellState.prototype.setAbsoluteTerminalPoint = function(point, isSource)\n{\n\tif (isSource)\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t}\n\t\t\n\t\tif (this.absolutePoints.length == 0)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[0] = point;\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.absolutePoints == null)\n\t\t{\n\t\t\tthis.absolutePoints = [];\n\t\t\tthis.absolutePoints.push(null);\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse if (this.absolutePoints.length == 1)\n\t\t{\n\t\t\tthis.absolutePoints.push(point);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.absolutePoints[this.absolutePoints.length - 1] = point;\n\t\t}\n\t}\n};\n\n/**\n * Function: setCursor\n * \n * Sets the given cursor on the shape and text shape.\n */\nmxCellState.prototype.setCursor = function(cursor)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.setCursor(cursor);\n\t}\n\t\n\tif (this.text != null)\n\t{\n\t\tthis.text.setCursor(cursor);\n\t}\n};\n\n/**\n * Function: getVisibleTerminal\n * \n * Returns the visible source or target terminal cell.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target cell should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminal = function(source)\n{\n\tvar tmp = this.getVisibleTerminalState(source);\n\t\n\treturn (tmp != null) ? tmp.cell : null;\n};\n\n/**\n * Function: getVisibleTerminalState\n * \n * Returns the visible source or target terminal state.\n * \n * Parameters:\n * \n * source - Boolean that specifies if the source or target state should be\n * returned.\n */\nmxCellState.prototype.getVisibleTerminalState = function(source)\n{\n\treturn (source) ? this.visibleSourceState : this.visibleTargetState;\n};\n\n/**\n * Function: setVisibleTerminalState\n * \n * Sets the visible source or target terminal state.\n * \n * Parameters:\n * \n * terminalState - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the source or target state should be set.\n */\nmxCellState.prototype.setVisibleTerminalState = function(terminalState, source)\n{\n\tif (source)\n\t{\n\t\tthis.visibleSourceState = terminalState;\n\t}\n\telse\n\t{\n\t\tthis.visibleTargetState = terminalState;\n\t}\n};\n\n/**\n * Function: getCellBounds\n * \n * Returns the unscaled, untranslated bounds.\n */\nmxCellState.prototype.getCellBounds = function()\n{\n\treturn this.cellBounds;\n};\n\n/**\n * Function: getPaintBounds\n * \n * Returns the unscaled, untranslated paint bounds. This is the same as\n * <getCellBounds> but with a 90 degree rotation if the shape's\n * isPaintBoundsInverted returns true.\n */\nmxCellState.prototype.getPaintBounds = function()\n{\n\treturn this.paintBounds;\n};\n\n/**\n * Function: updateCachedBounds\n * \n * Updates the cellBounds and paintBounds.\n */\nmxCellState.prototype.updateCachedBounds = function()\n{\n\tvar tr = this.view.translate;\n\tvar s = this.view.scale;\n\tthis.cellBounds = new mxRectangle(this.x / s - tr.x, this.y / s - tr.y, this.width / s, this.height / s);\n\tthis.paintBounds = mxRectangle.fromRectangle(this.cellBounds);\n\t\n\tif (this.shape != null && this.shape.isPaintBoundsInverted())\n\t{\n\t\tthis.paintBounds.rotate90();\n\t}\n};\n\n/**\n * Destructor: setState\n * \n * Copies all fields from the given state to this state.\n */\nmxCellState.prototype.setState = function(state)\n{\n\tthis.view = state.view;\n\tthis.cell = state.cell;\n\tthis.style = state.style;\n\tthis.absolutePoints = state.absolutePoints;\n\tthis.origin = state.origin;\n\tthis.absoluteOffset = state.absoluteOffset;\n\tthis.boundingBox = state.boundingBox;\n\tthis.terminalDistance = state.terminalDistance;\n\tthis.segments = state.segments;\n\tthis.length = state.length;\n\tthis.x = state.x;\n\tthis.y = state.y;\n\tthis.width = state.width;\n\tthis.height = state.height;\n\tthis.unscaledWidth = state.unscaledWidth;\n};\n\n/**\n * Function: clone\n *\n * Returns a clone of this <mxPoint>.\n */\nmxCellState.prototype.clone = function()\n{\n \tvar clone = new mxCellState(this.view, this.cell, this.style);\n\n\t// Clones the absolute points\n\tif (this.absolutePoints != null)\n\t{\n\t\tclone.absolutePoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.absolutePoints.length; i++)\n\t\t{\n\t\t\tclone.absolutePoints[i] = this.absolutePoints[i].clone();\n\t\t}\n\t}\n\n\tif (this.origin != null)\n\t{\n\t\tclone.origin = this.origin.clone();\n\t}\n\n\tif (this.absoluteOffset != null)\n\t{\n\t\tclone.absoluteOffset = this.absoluteOffset.clone();\n\t}\n\n\tif (this.boundingBox != null)\n\t{\n\t\tclone.boundingBox = this.boundingBox.clone();\n\t}\n\n\tclone.terminalDistance = this.terminalDistance;\n\tclone.segments = this.segments;\n\tclone.length = this.length;\n\tclone.x = this.x;\n\tclone.y = this.y;\n\tclone.width = this.width;\n\tclone.height = this.height;\n\tclone.unscaledWidth = this.unscaledWidth;\n\t\n\treturn clone;\n};\n\n/**\n * Destructor: destroy\n * \n * Destroys the state and all associated resources.\n */\nmxCellState.prototype.destroy = function()\n{\n\tthis.view.graph.cellRenderer.destroy(this);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphSelectionModel\n *\n * Implements the selection model for a graph. Here is a listener that handles\n * all removed selection cells.\n * \n * (code)\n * graph.getSelectionModel().addListener(mxEvent.CHANGE, function(sender, evt)\n * {\n *   var cells = evt.getProperty('added');\n *   \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     // Handle cells[i]...\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the selection was changed in <changeSelection>. The\n * <code>edit</code> property contains the <mxUndoableEdit> which contains the\n * <mxSelectionChange>.\n * \n * Event: mxEvent.CHANGE\n * \n * Fires after the selection changes by executing an <mxSelectionChange>. The\n * <code>added</code> and <code>removed</code> properties contain arrays of\n * cells that have been added to or removed from the selection, respectively.\n * The names are inverted due to historic reasons. This cannot be changed.\n * \n * Constructor: mxGraphSelectionModel\n *\n * Constructs a new graph selection model for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphSelectionModel(graph)\n{\n\tthis.graph = graph;\n\tthis.cells = [];\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphSelectionModel.prototype = new mxEventSource();\nmxGraphSelectionModel.prototype.constructor = mxGraphSelectionModel;\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphSelectionModel.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Variable: updatingSelectionResource\n *\n * Specifies the resource key for the status message while the selection is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingSelection'.\n */\nmxGraphSelectionModel.prototype.updatingSelectionResource = (mxClient.language != 'none') ? 'updatingSelection' : '';\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphSelectionModel.prototype.graph = null;\n\n/**\n * Variable: singleSelection\n *\n * Specifies if only one selected item at a time is allowed.\n * Default is false.\n */\nmxGraphSelectionModel.prototype.singleSelection = false;\n\n/**\n * Function: isSingleSelection\n *\n * Returns <singleSelection> as a boolean.\n */\nmxGraphSelectionModel.prototype.isSingleSelection = function()\n{\n\treturn this.singleSelection;\n};\n\n/**\n * Function: setSingleSelection\n *\n * Sets the <singleSelection> flag.\n * \n * Parameters:\n * \n * singleSelection - Boolean that specifies the new value for\n * <singleSelection>.\n */\nmxGraphSelectionModel.prototype.setSingleSelection = function(singleSelection)\n{\n\tthis.singleSelection = singleSelection;\n};\n\n/**\n * Function: isSelected\n *\n * Returns true if the given <mxCell> is selected.\n */\nmxGraphSelectionModel.prototype.isSelected = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\treturn mxUtils.indexOf(this.cells, cell) >= 0;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isEmpty\n *\n * Returns true if no cells are currently selected.\n */\nmxGraphSelectionModel.prototype.isEmpty = function()\n{\n\treturn this.cells.length == 0;\n};\n\n/**\n * Function: clear\n *\n * Clears the selection and fires a <change> event if the selection was not\n * empty.\n */\nmxGraphSelectionModel.prototype.clear = function()\n{\n\tthis.changeSelection(null, this.cells);\n};\n\n/**\n * Function: setCell\n *\n * Selects the specified <mxCell> using <setCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraphSelectionModel.prototype.setCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.setCells([cell]);\n\t}\n};\n\n/**\n * Function: setCells\n *\n * Selects the given array of <mxCells> and fires a <change> event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraphSelectionModel.prototype.setCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\t\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, this.cells);\n\t}\n};\n\n/**\n * Function: getFirstSelectableCell\n *\n * Returns the first selectable cell in the given array of cells.\n */\nmxGraphSelectionModel.prototype.getFirstSelectableCell = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\treturn cells[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: addCell\n * \n * Adds the given <mxCell> to the selection and fires a <select> event.\n * \n * Parameters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.addCells([cell]);\n\t}\n};\n\n/**\n * Function: addCells\n * \n * Adds the given array of <mxCells> to the selection and fires a <select>\n * event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to add to the selection.\n */\nmxGraphSelectionModel.prototype.addCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar remove = null;\n\t\t\n\t\tif (this.singleSelection)\n\t\t{\n\t\t\tremove = this.cells;\n\t\t\tcells = [this.getFirstSelectableCell(cells)];\n\t\t}\n\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (!this.isSelected(cells[i]) &&\n\t\t\t\tthis.graph.isCellSelectable(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\t\n\t\t}\n\n\t\tthis.changeSelection(tmp, remove);\n\t}\n};\n\n/**\n * Function: removeCell\n *\n * Removes the specified <mxCell> from the selection and fires a <select>\n * event for the remaining cells.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.removeCell = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tthis.removeCells([cell]);\n\t}\n};\n\n/**\n * Function: removeCells\n */\nmxGraphSelectionModel.prototype.removeCells = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSelected(cells[i]))\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.changeSelection(null, tmp);\t\n\t}\n};\n\n/**\n * Function: changeSelection\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.changeSelection = function(added, removed)\n{\n\tif ((added != null &&\n\t\tadded.length > 0 &&\n\t\tadded[0] != null) ||\n\t\t(removed != null &&\n\t\tremoved.length > 0 &&\n\t\tremoved[0] != null))\n\t{\n\t\tvar change = new mxSelectionChange(this, added, removed);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t}\n};\n\n/**\n * Function: cellAdded\n *\n * Inner callback to add the specified <mxCell> to the selection. No event\n * is fired in this implementation.\n * \n * Paramters:\n * \n * cell - <mxCell> to add to the selection.\n */\nmxGraphSelectionModel.prototype.cellAdded = function(cell)\n{\n\tif (cell != null &&\n\t\t!this.isSelected(cell))\n\t{\n\t\tthis.cells.push(cell);\n\t}\n};\n\n/**\n * Function: cellRemoved\n *\n * Inner callback to remove the specified <mxCell> from the selection. No\n * event is fired in this implementation.\n * \n * Parameters:\n * \n * cell - <mxCell> to remove from the selection.\n */\nmxGraphSelectionModel.prototype.cellRemoved = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar index = mxUtils.indexOf(this.cells, cell);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tthis.cells.splice(index, 1);\n\t\t}\n\t}\n};\n\n/**\n * Class: mxSelectionChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxSelectionChange(selectionModel, added, removed)\n{\n\tthis.selectionModel = selectionModel;\n\tthis.added = (added != null) ? added.slice() : null;\n\tthis.removed = (removed != null) ? removed.slice() : null;\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxSelectionChange.prototype.execute = function()\n{\n\tvar t0 = mxLog.enter('mxSelectionChange.execute');\n\twindow.status = mxResources.get(\n\t\tthis.selectionModel.updatingSelectionResource) ||\n\t\tthis.selectionModel.updatingSelectionResource;\n\n\tif (this.removed != null)\n\t{\n\t\tfor (var i = 0; i < this.removed.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellRemoved(this.removed[i]);\n\t\t}\n\t}\n\n\tif (this.added != null)\n\t{\n\t\tfor (var i = 0; i < this.added.length; i++)\n\t\t{\n\t\t\tthis.selectionModel.cellAdded(this.added[i]);\n\t\t}\n\t}\n\t\n\tvar tmp = this.added;\n\tthis.added = this.removed;\n\tthis.removed = tmp;\n\n\twindow.status = mxResources.get(this.selectionModel.doneResource) ||\n\t\tthis.selectionModel.doneResource;\n\tmxLog.leave('mxSelectionChange.execute', t0);\n\t\n\tthis.selectionModel.fireEvent(new mxEventObject(mxEvent.CHANGE,\n\t\t\t'added', this.added, 'removed', this.removed));\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellEditor\n *\n * In-place editor for the graph. To control this editor, use\n * <mxGraph.invokesStopCellEditing>, <mxGraph.enterStopsCellEditing> and\n * <mxGraph.escapeEnabled>. If <mxGraph.enterStopsCellEditing> is true then\n * ctrl-enter or shift-enter can be used to create a linefeed. The F2 and\n * escape keys can always be used to stop editing.\n * \n * To customize the location of the textbox in the graph, override\n * <getEditorBounds> as follows:\n * \n * (code)\n * graph.cellEditor.getEditorBounds = function(state)\n * {\n *   var result = mxCellEditor.prototype.getEditorBounds.apply(this, arguments);\n *   \n *   if (this.graph.getModel().isEdge(state.cell))\n *   {\n *     result.x = state.getCenterX() - result.width / 2;\n *     result.y = state.getCenterY() - result.height / 2;\n *   }\n *   \n *   return result;\n * };\n * (end)\n * \n * Note that this hook is only called if <autoSize> is false. If <autoSize> is true,\n * then <mxShape.getLabelBounds> is used to compute the current bounds of the textbox.\n * \n * The textarea uses the mxCellEditor CSS class. You can modify this class in\n * your custom CSS. Note: You should modify the CSS after loading the client\n * in the page.\n *\n * Example:\n * \n * To only allow numeric input in the in-place editor, use the following code.\n *\n * (code)\n * var text = graph.cellEditor.textarea;\n * \n * mxEvent.addListener(text, 'keydown', function (evt)\n * {\n *   if (!(evt.keyCode >= 48 && evt.keyCode <= 57) &&\n *       !(evt.keyCode >= 96 && evt.keyCode <= 105))\n *   {\n *     mxEvent.consume(evt);\n *   }\n * }); \n * (end)\n * \n * Placeholder:\n * \n * To implement a placeholder for cells without a label, use the\n * <emptyLabelText> variable.\n * \n * Resize in Chrome:\n * \n * Resize of the textarea is disabled by default. If you want to enable\n * this feature extend <init> and set this.textarea.style.resize = ''.\n * \n * To start editing on a key press event, the container of the graph\n * should have focus or a focusable parent should be used to add the\n * key press handler as follows.\n * \n * (code)\n * mxEvent.addListener(graph.container, 'keypress', mxUtils.bind(this, function(evt)\n * {\n *   if (!graph.isEditing() && !graph.isSelectionEmpty() && evt.which !== 0 &&\n *       !mxEvent.isAltDown(evt) && !mxEvent.isControlDown(evt) && !mxEvent.isMetaDown(evt))\n *   {\n *     graph.startEditing();\n *     \n *     if (mxClient.IS_FF)\n *     {\n *       graph.cellEditor.textarea.value = String.fromCharCode(evt.which);\n *     }\n *   }\n * }));\n * (end)\n * \n * To allow focus for a DIV, and hence to receive key press events, some browsers\n * require it to have a valid tabindex attribute. In this case the following\n * code may be used to keep the container focused.\n * \n * (code)\n * var graphFireMouseEvent = graph.fireMouseEvent;\n * graph.fireMouseEvent = function(evtName, me, sender)\n * {\n *   if (evtName == mxEvent.MOUSE_DOWN)\n *   {\n *     this.container.focus();\n *   }\n *   \n *   graphFireMouseEvent.apply(this, arguments);\n * };\n * (end)\n *\n * Constructor: mxCellEditor\n *\n * Constructs a new in-place editor for the specified graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellEditor(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Stops editing after zoom changes\n\tthis.zoomHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (this.graph.isEditing())\n\t\t{\n\t\t\tthis.resize();\n\t\t}\n\t});\n\t\n\tthis.graph.view.addListener(mxEvent.SCALE, this.zoomHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.zoomHandler);\n\t\n\t// Adds handling of deleted cells while editing\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.editingCell != null && this.graph.getView().getState(this.editingCell) == null)\n\t\t{\n\t\t\tthis.stopEditing(true);\n\t\t}\n\t});\n\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellEditor.prototype.graph = null;\n\n/**\n * Variable: textarea\n *\n * Holds the DIV that is used for text editing. Note that this may be null before the first\n * edit. Instantiated in <init>.\n */\nmxCellEditor.prototype.textarea = null;\n\n/**\n * Variable: editingCell\n * \n * Reference to the <mxCell> that is currently being edited.\n */\nmxCellEditor.prototype.editingCell = null;\n\n/**\n * Variable: trigger\n * \n * Reference to the event that was used to start editing.\n */\nmxCellEditor.prototype.trigger = null;\n\n/**\n * Variable: modified\n * \n * Specifies if the label has been modified.\n */\nmxCellEditor.prototype.modified = false;\n\n/**\n * Variable: autoSize\n * \n * Specifies if the textarea should be resized while the text is being edited.\n * Default is true.\n */\nmxCellEditor.prototype.autoSize = true;\n\n/**\n * Variable: selectText\n * \n * Specifies if the text should be selected when editing starts. Default is\n * true.\n */\nmxCellEditor.prototype.selectText = true;\n\n/**\n * Variable: emptyLabelText\n * \n * Text to be displayed for empty labels. Default is '' or '<br>' in Firefox as\n * a workaround for the missing cursor bug for empty content editable. This can\n * be set to eg. \"[Type Here]\" to easier visualize editing of empty labels. The\n * value is only displayed before the first keystroke and is never used as the\n * actual editing value.\n */\nmxCellEditor.prototype.emptyLabelText = (mxClient.IS_FF) ? '<br>' : '';\n\n/**\n * Variable: escapeCancelsEditing\n * \n * If true, pressing the escape key will stop editing and not accept the new\n * value. Change this to false to accept the new value on escape, and cancel\n * editing on Shift+Escape instead. Default is true.\n */\nmxCellEditor.prototype.escapeCancelsEditing = true;\n\n/**\n * Variable: textNode\n * \n * Reference to the label DOM node that has been hidden.\n */\nmxCellEditor.prototype.textNode = '';\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the textarea. Default is 5.\n */\nmxCellEditor.prototype.zIndex = 5;\n\n/**\n * Variable: minResize\n * \n * Defines the minimum width and height to be used in <resize>. Default is 0x20px.\n */\nmxCellEditor.prototype.minResize = new mxRectangle(0, 20);\n\n/**\n * Variable: wordWrapPadding\n * \n * Correction factor for word wrapping width. Default is 2 in quirks, 0 in IE\n * 11 and 1 in all other browsers and modes.\n */\nmxCellEditor.prototype.wordWrapPadding = (mxClient.IS_QUIRKS) ? 2 : (!mxClient.IS_IE11) ? 1 : 0;\n\n/**\n * Variable: blurEnabled\n *\n * If <focusLost> should be called if <textarea> loses the focus. Default is false.\n */\nmxCellEditor.prototype.blurEnabled = false;\n\n/**\n * Variable: initialValue\n * \n * Holds the initial editing value to check if the current value was modified.\n */\nmxCellEditor.prototype.initialValue = null;\n\n/**\n * Function: init\n *\n * Creates the <textarea> and installs the event listeners. The key handler\n * updates the <modified> state.\n */\nmxCellEditor.prototype.init = function ()\n{\n\tthis.textarea = document.createElement('div');\n\tthis.textarea.className = 'mxCellEditor mxPlainTextEditor';\n\tthis.textarea.contentEditable = true;\n\t\n\t// Workaround for selection outside of DIV if height is 0\n\tif (mxClient.IS_GC)\n\t{\n\t\tthis.textarea.style.minHeight = '1em';\n\t}\n\n\tthis.textarea.style.position = ((this.isLegacyEditor())) ? 'absolute' : 'relative';\n\tthis.installListeners(this.textarea);\n};\n\n/**\n * Function: applyValue\n * \n * Called in <stopEditing> if cancel is false to invoke <mxGraph.labelChanged>.\n */\nmxCellEditor.prototype.applyValue = function(state, value)\n{\n\tthis.graph.labelChanged(state.cell, value, this.trigger);\n};\n\n/**\n * Function: getInitialValue\n * \n * Gets the initial editing value for the given cell.\n */\nmxCellEditor.prototype.getInitialValue = function(state, trigger)\n{\n\tvar result = mxUtils.htmlEntities(this.graph.getEditingValue(state.cell, trigger), false);\n\t\n    // Workaround for trailing line breaks being ignored in the editor\n\tif (!mxClient.IS_QUIRKS && document.documentMode != 8 && document.documentMode != 9 &&\n\t\tdocument.documentMode != 10)\n\t{\n\t\tresult = mxUtils.replaceTrailingNewlines(result, '<div><br></div>');\n\t}\n    \n    return result.replace(/\\n/g, '<br>');\n};\n\n/**\n * Function: getCurrentValue\n * \n * Returns the current editing value.\n */\nmxCellEditor.prototype.getCurrentValue = function(state)\n{\n\treturn mxUtils.extractTextWithWhitespace(this.textarea.childNodes);\n};\n\n/**\n * Function: isCancelEditingKeyEvent\n * \n * Returns true if <escapeCancelsEditing> is true and shift, control and meta\n * are not pressed.\n */\nmxCellEditor.prototype.isCancelEditingKeyEvent = function(evt)\n{\n\treturn this.escapeCancelsEditing || mxEvent.isShiftDown(evt) || mxEvent.isControlDown(evt) || mxEvent.isMetaDown(evt);\n};\n\n/**\n * Function: installListeners\n * \n * Installs listeners for focus, change and standard key event handling.\n */\nmxCellEditor.prototype.installListeners = function(elt)\n{\n\t// Applies value if focus is lost\n\tmxEvent.addListener(elt, 'blur', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.blurEnabled)\n\t\t{\n\t\t\tthis.focusLost(evt);\n\t\t}\n\t}));\n\n\t// Updates modified state and handles placeholder text\n\tmxEvent.addListener(elt, 'keydown', mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt))\n\t\t{\n\t\t\tif (this.isStopEditingEvent(evt))\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(false);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t\telse if (evt.keyCode == 27 /* Escape */)\n\t\t\t{\n\t\t\t\tthis.graph.stopEditing(this.isCancelEditingKeyEvent(evt));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}));\n\n\t// Keypress only fires if printable key was pressed and handles removing the empty placeholder\n\tvar keypressHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Clears the initial empty label on the first keystroke\n\t\t\t// and workaround for FF which fires keypress for delete and backspace\n\t\t\tif (this.clearOnChange && elt.innerHTML == this.getEmptyLabelText() &&\n\t\t\t\t(!mxClient.IS_FF || (evt.keyCode != 8 /* Backspace */ && evt.keyCode != 46 /* Delete */)))\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t\telt.innerHTML = '';\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, 'keypress', keypressHandler);\n\tmxEvent.addListener(elt, 'paste', keypressHandler);\n\t\n\t// Handler for updating the empty label text value after a change\n\tvar keyupHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null)\n\t\t{\n\t\t\t// Uses an optional text value for sempty labels which is cleared\n\t\t\t// when the first keystroke appears. This makes it easier to see\n\t\t\t// that a label is being edited even if the label is empty.\n\t\t\t// In Safari and FF, an empty text is represented by <BR> which isn't enough to force a valid size\n\t\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t\t{\n\t\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\t\tthis.clearOnChange = this.textarea.innerHTML.length > 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.clearOnChange = false;\n\t\t\t}\n\t\t}\n\t});\n\n\tmxEvent.addListener(elt, (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keyup', keyupHandler);\n\tmxEvent.addListener(elt, 'cut', keyupHandler);\n\tmxEvent.addListener(elt, 'paste', keyupHandler);\n\n\t// Adds automatic resizing of the textbox while typing using input, keyup and/or DOM change events\n\tvar evtName = (!mxClient.IS_IE11 && !mxClient.IS_IE) ? 'input' : 'keydown';\n\t\n\tvar resizeHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tif (this.editingCell != null && this.autoSize && !mxEvent.isConsumed(evt))\n\t\t{\n\t\t\t// Asynchronous is needed for keydown and shows better results for input events overall\n\t\t\t// (ie non-blocking and cases where the offsetWidth/-Height was wrong at this time)\n\t\t\tif (this.resizeThread != null)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.resizeThread);\n\t\t\t}\n\t\t\t\n\t\t\tthis.resizeThread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resizeThread = null;\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t});\n\t\n\tmxEvent.addListener(elt, evtName, resizeHandler);\n\n\tif (document.documentMode >= 9)\n\t{\n\t\tmxEvent.addListener(elt, 'DOMNodeRemoved', resizeHandler);\n\t\tmxEvent.addListener(elt, 'DOMNodeInserted', resizeHandler);\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(elt, 'cut', resizeHandler);\n\t\tmxEvent.addListener(elt, 'paste', resizeHandler);\n\t}\n};\n\n/**\n * Function: isStopEditingEvent\n * \n * Returns true if the given keydown event should stop cell editing. This\n * returns true if F2 is pressed of if <mxGraph.enterStopsCellEditing> is true\n * and enter is pressed without control or shift.\n */\nmxCellEditor.prototype.isStopEditingEvent = function(evt)\n{\n\treturn evt.keyCode == 113 /* F2 */ || (this.graph.isEnterStopsCellEditing() &&\n\t\tevt.keyCode == 13 /* Enter */ && !mxEvent.isControlDown(evt) &&\n\t\t!mxEvent.isShiftDown(evt));\n};\n\n/**\n * Function: isEventSource\n * \n * Returns true if this editor is the source for the given native event.\n */\nmxCellEditor.prototype.isEventSource = function(evt)\n{\n\treturn mxEvent.getSource(evt) == this.textarea;\n};\n\n/**\n * Function: resize\n * \n * Returns <modified>.\n */\nmxCellEditor.prototype.resize = function()\n{\n\tvar state = this.graph.getView().getState(this.editingCell);\n\t\n\tif (state == null)\n\t{\n\t\tthis.stopEditing(true);\n\t}\n\telse if (this.textarea != null)\n\t{\n\t\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n \t\tvar scale = this.graph.getView().scale;\n \t\tvar m = null;\n\t\t\n\t\tif (!this.autoSize || (state.style[mxConstants.STYLE_OVERFLOW] == 'fill'))\n\t\t{\n\t\t\t// Specifies the bounds of the editor box\n\t\t\tthis.bounds = this.getEditorBounds(state);\n\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + 'px';\n\t\t\tthis.textarea.style.height = Math.round(this.bounds.height / scale) + 'px';\n\t\t\t\n\t\t\t// FIXME: Offset when scaled\n\t\t\tif (document.documentMode == 8 || mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.round(this.bounds.x) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.round(this.bounds.y) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x + 1)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y + 1)) + 'px';\n\t\t\t}\n\t\t\t\n\t\t\t// Installs native word wrapping and avoids word wrap for empty label placeholder\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = Math.round(this.bounds.width / scale) + this.wordWrapPadding + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\t\n\t\t\t\tif (state.style[mxConstants.STYLE_OVERFLOW] != 'fill')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t \t{\n\t \t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\tm = (state.text != null) ? state.text.margin : null;\n\t\t\t\n\t\t\tif (m == null)\n\t\t\t{\n\t\t\t\tm = mxUtils.getAlignmentAsPoint(mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER),\n\t\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_ALIGN, mxConstants.ALIGN_MIDDLE));\n\t\t\t}\n\t\t\t\n\t \t\tif (isEdge)\n\t\t\t{\n\t\t\t\tthis.bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y, 0, 0);\n\t\t\t\t\n\t\t\t\tif (lw != null)\n\t\t\t \t{\n\t\t\t\t\tvar tmp = (parseFloat(lw) + 2) * scale;\n\t\t\t\t\tthis.bounds.width = tmp;\n\t\t\t\t\tthis.bounds.x += m.x * tmp;\n\t\t\t \t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar bds = mxRectangle.fromRectangle(state);\n\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\tbds = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(bds) : bds;\n\t\t\t \t\n\t\t\t \tif (lw != null)\n\t\t\t \t{\n\t\t\t \t\tbds.width = parseFloat(lw) * scale;\n\t\t\t \t}\n\t\t\t \t\n\t\t\t \tif (!state.view.graph.cellRenderer.legacySpacing || state.style[mxConstants.STYLE_OVERFLOW] != 'width')\n\t\t\t \t{\n\t\t\t\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 2) * scale;\n\t\t\t\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\t\t\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\t\t\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\t\t\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\t\t\t\t\n\t\t\t\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\t\t\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\n\t\t\t\t\tbds = new mxRectangle(bds.x + spacingLeft, bds.y + spacingTop,\n\t\t\t\t\t\tbds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (spacingLeft + spacingRight) : 0),\n\t\t\t\t\t\tbds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (spacingTop + spacingBottom) : 0));\n\t\t\t \t}\n\n\t\t\t\tthis.bounds = new mxRectangle(bds.x + state.absoluteOffset.x, bds.y + state.absoluteOffset.y, bds.width, bds.height);\n\t\t\t}\n\n\t\t\t// Needed for word wrap inside text blocks with oversize lines to match the final result where\n\t \t\t// the width of the longest line is used as the reference for text alignment in the cell\n\t \t\t// TODO: Fix word wrapping preview for edge labels in helloworld.html\n\t\t\tif (this.graph.isWrapping(state.cell) && (this.bounds.width >= 2 || this.bounds.height >= 2) &&\n\t\t\t\tthis.textarea.innerHTML != this.getEmptyLabelText())\n\t\t\t{\n\t\t\t\tthis.textarea.style.wordWrap = mxConstants.WORD_WRAP;\n\t\t\t\tthis.textarea.style.whiteSpace = 'normal';\n\t\t\t\t\n\t\t \t\t// Forces automatic reflow if text is removed from an oversize label and normal word wrap\n\t\t\t\tvar tmp = Math.round(this.bounds.width / ((document.documentMode == 8) ? scale : scale)) + this.wordWrapPadding;\n\n\t\t\t\tif (this.textarea.style.position != 'relative')\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.width = tmp + 'px';\n\t\t\t\t\t\n\t\t\t\t\tif (this.textarea.scrollWidth > tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.textarea.style.width = this.textarea.scrollWidth + 'px';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.textarea.style.maxWidth = tmp + 'px';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// KNOWN: Trailing cursor in IE9 quirks mode is not visible\n\t\t\t\tthis.textarea.style.whiteSpace = 'nowrap';\n\t\t\t\tthis.textarea.style.width = '';\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\t// Workaround for wrong measuring in IE8 standards\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\tthis.textarea.style.zoom = '1';\n\t\t\t\tthis.textarea.style.height = 'auto';\n\t\t\t}\n\t\t\t\n\t\t\tvar ow = this.textarea.scrollWidth;\n\t\t\tvar oh = this.textarea.scrollHeight;\n\t\t\t\n\t\t\t// TODO: Update CSS width and height if smaller than minResize or remove minResize\n\t\t\t//if (this.minResize != null)\n\t\t\t//{\n\t\t\t//\tow = Math.max(ow, this.minResize.width);\n\t\t\t//\toh = Math.max(oh, this.minResize.height);\n\t\t\t//}\n\t\t\t\n\t\t\t// LATER: Keep in visible area, add fine tuning for pixel precision\n\t\t\tif (document.documentMode == 8)\n\t\t\t{\n\t\t\t\t// LATER: Scaled wrapping and position is wrong in IE8\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil((this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2) / scale)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil((this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1) / scale)) + 'px';\n\t\t\t\t// Workaround for wrong event handling width and height\n\t\t\t\tthis.textarea.style.width = Math.round(ow * scale) + 'px';\n\t\t\t\tthis.textarea.style.height = Math.round(oh * scale) + 'px';\n\t\t\t}\n\t\t\telse if (mxClient.IS_QUIRKS)\n\t\t\t{\t\t\t\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.ceil(this.bounds.x - m.x * (this.bounds.width - (ow + 1) * scale) + ow * (scale - 1) * 0 + (m.x + 0.5) * 2)) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.ceil(this.bounds.y - m.y * (this.bounds.height - (oh + 0.5) * scale) + oh * (scale - 1) * 0 + Math.abs(m.y + 0.5) * 1)) + 'px';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.textarea.style.left = Math.max(0, Math.round(this.bounds.x - m.x * (this.bounds.width - 2)) + 1) + 'px';\n\t\t\t\tthis.textarea.style.top = Math.max(0, Math.round(this.bounds.y - m.y * (this.bounds.height - 4) + ((m.y == -1) ? 3 : 0)) + 1) + 'px';\n\t\t\t}\n\t \t}\n\n\t\tif (mxClient.IS_VML)\n\t\t{\n\t\t\tthis.textarea.style.zoom = scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transformOrigin', '0px 0px');\n\t\t\tmxUtils.setPrefixedStyle(this.textarea.style, 'transform',\n\t\t\t\t'scale(' + scale + ',' + scale + ')' + ((m == null) ? '' :\n\t\t\t\t' translate(' + (m.x * 100) + '%,' + (m.y * 100) + '%)'));\n\t\t}\n\t}\n};\n\n/**\n * Function: focusLost\n *\n * Called if the textarea has lost focus.\n */\nmxCellEditor.prototype.focusLost = function()\n{\n\tthis.stopEditing(!this.graph.isInvokesStopCellEditing());\n};\n\n/**\n * Function: getBackgroundColor\n * \n * Returns the background color for the in-place editor. This implementation\n * always returns null.\n */\nmxCellEditor.prototype.getBackgroundColor = function(state)\n{\n\treturn null;\n};\n\n/**\n * Function: isLegacyEditor\n * \n * Returns true if max-width is not supported or if the SVG root element in\n * in the graph does not have CSS position absolute. In these cases the text\n * editor must use CSS position absolute to avoid an offset but it will have\n * a less accurate line wrapping width during the text editing preview. This\n * implementation returns true for IE8- and quirks mode or if the CSS position\n * of the SVG element is not absolute.\n */\nmxCellEditor.prototype.isLegacyEditor = function()\n{\n\tif (mxClient.IS_VML)\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tvar absoluteRoot = false;\n\t\t\n\t\tif (mxClient.IS_SVG)\n\t\t{\n\t\t\tvar root = this.graph.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\tif (root != null)\n\t\t\t{\n\t\t\t\tabsoluteRoot = mxUtils.getCurrentStyle(root).position == 'absolute';\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn !absoluteRoot;\n\t}\n};\n\n/**\n * Function: startEditing\n *\n * Starts the editor for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to start editing.\n * trigger - Optional mouse event that triggered the editor.\n */\nmxCellEditor.prototype.startEditing = function(cell, trigger)\n{\n\tthis.stopEditing(true);\n\t\n\t// Creates new textarea instance\n\tif (this.textarea == null)\n\t{\n\t\tthis.init();\n\t}\n\t\n\tif (this.graph.tooltipHandler != null)\n\t{\n\t\tthis.graph.tooltipHandler.hideTooltip();\n\t}\n\t\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\t// Configures the style of the in-place editor\n\t\tvar scale = this.graph.getView().scale;\n\t\tvar size = mxUtils.getValue(state.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n\t\tvar family = mxUtils.getValue(state.style, mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY);\n\t\tvar color = mxUtils.getValue(state.style, mxConstants.STYLE_FONTCOLOR, 'black');\n\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_LEFT);\n\t\tvar bold = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_BOLD) == mxConstants.FONT_BOLD;\n\t\tvar italic = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_ITALIC) == mxConstants.FONT_ITALIC;\n\t\tvar uline = (mxUtils.getValue(state.style, mxConstants.STYLE_FONTSTYLE, 0) &\n\t\t\t\tmxConstants.FONT_UNDERLINE) == mxConstants.FONT_UNDERLINE;\n\t\t\n\t\tthis.textarea.style.lineHeight = (mxConstants.ABSOLUTE_LINE_HEIGHT) ? Math.round(size * mxConstants.LINE_HEIGHT) + 'px' : mxConstants.LINE_HEIGHT;\n\t\tthis.textarea.style.backgroundColor = this.getBackgroundColor(state);\n\t\tthis.textarea.style.textDecoration = (uline) ? 'underline' : '';\n\t\tthis.textarea.style.fontWeight = (bold) ? 'bold' : 'normal';\n\t\tthis.textarea.style.fontStyle = (italic) ? 'italic' : '';\n\t\tthis.textarea.style.fontSize = Math.round(size) + 'px';\n\t\tthis.textarea.style.zIndex = this.zIndex;\n\t\tthis.textarea.style.fontFamily = family;\n\t\tthis.textarea.style.textAlign = align;\n\t\tthis.textarea.style.outline = 'none';\n\t\tthis.textarea.style.color = color;\n\t\t\n\t\tvar dir = this.textDirection = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_AUTO)\n\t\t{\n\t\t\tif (state != null && state.text != null && state.text.dialect != mxConstants.DIALECT_STRICTHTML &&\n\t\t\t\t!mxUtils.isNode(state.text.value))\n\t\t\t{\n\t\t\t\tdir = state.text.getAutoDirection();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (dir == mxConstants.TEXT_DIRECTION_LTR || dir == mxConstants.TEXT_DIRECTION_RTL)\n\t\t{\n\t\t\tthis.textarea.setAttribute('dir', dir);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.textarea.removeAttribute('dir');\n\t\t}\n\n\t\t// Sets the initial editing value\n\t\tthis.textarea.innerHTML = this.getInitialValue(state, trigger) || '';\n\t\tthis.initialValue = this.textarea.innerHTML;\n\n\t\t// Uses an optional text value for empty labels which is cleared\n\t\t// when the first keystroke appears. This makes it easier to see\n\t\t// that a label is being edited even if the label is empty.\n\t\tif (this.textarea.innerHTML.length == 0 || this.textarea.innerHTML == '<br>')\n\t\t{\n\t\t\tthis.textarea.innerHTML = this.getEmptyLabelText();\n\t\t\tthis.clearOnChange = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.clearOnChange = this.textarea.innerHTML == this.getEmptyLabelText();\n\t\t}\n\n\t\tthis.graph.container.appendChild(this.textarea);\n\t\t\n\t\t// Update this after firing all potential events that could update the cleanOnChange flag\n\t\tthis.editingCell = cell;\n\t\tthis.trigger = trigger;\n\t\tthis.textNode = null;\n\n\t\tif (state.text != null && this.isHideLabel(state))\n\t\t{\n\t\t\tthis.textNode = state.text.node;\n\t\t\tthis.textNode.style.visibility = 'hidden';\n\t\t}\n\n\t\t// Workaround for initial offsetHeight not ready for heading in markup\n\t\tif (this.autoSize && (this.graph.model.isEdge(state.cell) || state.style[mxConstants.STYLE_OVERFLOW] != 'fill'))\n\t\t{\n\t\t\twindow.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.resize();\n\t\t\t}), 0);\n\t\t}\n\t\t\n\t\tthis.resize();\n\t\t\n\t\t// Workaround for NS_ERROR_FAILURE in FF\n\t\ttry\n\t\t{\n\t\t\t// Prefers blinking cursor over no selected text if empty\n\t\t\tthis.textarea.focus();\n\t\t\t\n\t\t\tif (this.isSelectText() && this.textarea.innerHTML.length > 0 &&\n\t\t\t\t(this.textarea.innerHTML != this.getEmptyLabelText() || !this.clearOnChange))\n\t\t\t{\n\t\t\t\tdocument.execCommand('selectAll', false, null);\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t}\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.isSelectText = function()\n{\n\treturn this.selectText;\n};\n\n/**\n * Function: isSelectText\n * \n * Returns <selectText>.\n */\nmxCellEditor.prototype.clearSelection = function()\n{\n\tvar selection = null;\n\t\n\tif (window.getSelection)\n\t{\n\t\tselection = window.getSelection();\n\t}\n\telse if (document.selection)\n\t{\n\t\tselection = document.selection;\n\t}\n\t\n\tif (selection != null)\n\t{\n\t\tif (selection.empty)\n\t\t{\n\t\t\tselection.empty();\n\t\t}\n\t\telse if (selection.removeAllRanges)\n\t\t{\n\t\t\tselection.removeAllRanges();\n\t\t}\n\t}\n};\n\n/**\n * Function: stopEditing\n *\n * Stops the editor and applies the value if cancel is false.\n */\nmxCellEditor.prototype.stopEditing = function(cancel)\n{\n\tcancel = cancel || false;\n\t\n\tif (this.editingCell != null)\n\t{\n\t\tif (this.textNode != null)\n\t\t{\n\t\t\tthis.textNode.style.visibility = 'visible';\n\t\t\tthis.textNode = null;\n\t\t}\n\n\t\tvar state = (!cancel) ? this.graph.view.getState(this.editingCell) : null;\n\n\t\tvar initial = this.initialValue;\n\t\tthis.initialValue = null;\n\t\tthis.editingCell = null;\n\t\tthis.trigger = null;\n\t\tthis.bounds = null;\n\t\tthis.textarea.blur();\n\t\tthis.clearSelection();\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tif (this.clearOnChange && this.textarea.innerHTML == this.getEmptyLabelText())\n\t\t{\n\t\t\tthis.textarea.innerHTML = '';\n\t\t\tthis.clearOnChange = false;\n\t\t}\n\t\t\n\t\tif (state != null && this.textarea.innerHTML != initial)\n\t\t{\n\t\t\tthis.prepareTextarea();\n\t\t\tvar value = this.getCurrentValue(state);\n\t\t\t\n\t\t\tif (value != null)\n\t\t\t{\n\t\t\t\tthis.applyValue(state, value);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Forces new instance on next edit for undo history reset\n\t\tmxEvent.release(this.textarea);\n\t\tthis.textarea = null;\n\t}\n};\n\n/**\n * Function: prepareTextarea\n * \n * Prepares the textarea for getting its value in <stopEditing>.\n * This implementation removes the extra trailing linefeed in Firefox.\n */\nmxCellEditor.prototype.prepareTextarea = function()\n{\n\tif (mxClient.IS_FF && this.textarea.lastChild != null &&\n\t\tthis.textarea.lastChild.nodeName == 'BR')\n\t{\n\t\tthis.textarea.removeChild(this.textarea.lastChild);\n\t}\n};\n\n/**\n * Function: isHideLabel\n * \n * Returns true if the label should be hidden while the cell is being\n * edited.\n */\nmxCellEditor.prototype.isHideLabel = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMinimumSize\n * \n * Returns the minimum width and height for editing the given state.\n */\nmxCellEditor.prototype.getMinimumSize = function(state)\n{\n\tvar scale = this.graph.getView().scale;\n\t\n\treturn new mxRectangle(0, 0, (state.text == null) ? 30 : state.text.size * scale + 20,\n\t\t\t(this.textarea.style.textAlign == 'left') ? 120 : 40);\n};\n\n/**\n * Function: getEditorBounds\n * \n * Returns the <mxRectangle> that defines the bounds of the editor.\n */\nmxCellEditor.prototype.getEditorBounds = function(state)\n{\n\tvar isEdge = this.graph.getModel().isEdge(state.cell);\n\tvar scale = this.graph.getView().scale;\n\tvar minSize = this.getMinimumSize(state);\n\tvar minWidth = minSize.width;\n \tvar minHeight = minSize.height;\n \tvar result = null;\n \t\n \tif (!isEdge && state.view.graph.cellRenderer.legacySpacing && state.style[mxConstants.STYLE_OVERFLOW] == 'fill')\n \t{\n \t\tresult = state.shape.getLabelBounds(mxRectangle.fromRectangle(state));\n \t}\n \telse\n \t{\n\t\tvar spacing = parseInt(state.style[mxConstants.STYLE_SPACING] || 0) * scale;\n\t\tvar spacingTop = (parseInt(state.style[mxConstants.STYLE_SPACING_TOP] || 0) + mxText.prototype.baseSpacingTop) * scale + spacing;\n\t\tvar spacingRight = (parseInt(state.style[mxConstants.STYLE_SPACING_RIGHT] || 0) + mxText.prototype.baseSpacingRight) * scale + spacing;\n\t\tvar spacingBottom = (parseInt(state.style[mxConstants.STYLE_SPACING_BOTTOM] || 0) + mxText.prototype.baseSpacingBottom) * scale + spacing;\n\t\tvar spacingLeft = (parseInt(state.style[mxConstants.STYLE_SPACING_LEFT] || 0) + mxText.prototype.baseSpacingLeft) * scale + spacing;\n\t\n\t \tresult = new mxRectangle(state.x, state.y,\n\t \t\t Math.max(minWidth, state.width - spacingLeft - spacingRight),\n\t \t\t Math.max(minHeight, state.height - spacingTop - spacingBottom));\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tresult = (state.shape != null && hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE) ? state.shape.getLabelBounds(result) : result;\n\t\n\t\tif (isEdge)\n\t\t{\n\t\t\tresult.x = state.absoluteOffset.x;\n\t\t\tresult.y = state.absoluteOffset.y;\n\t\n\t\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t\t{\n\t\t\t\t// Workaround for label containing just spaces in which case\n\t\t\t\t// the bounding box location contains negative numbers \n\t\t\t\tif (state.text.boundingBox.x > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.x = state.text.boundingBox.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (state.text.boundingBox.y > 0)\n\t\t\t\t{\n\t\t\t\t\tresult.y = state.text.boundingBox.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tresult.x = Math.min(result.x, state.text.boundingBox.x);\n\t\t\tresult.y = Math.min(result.y, state.text.boundingBox.y);\n\t\t}\n\t\n\t\tresult.x += spacingLeft;\n\t\tresult.y += spacingTop;\n\t\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (!isEdge)\n\t\t\t{\n\t\t\t\tresult.width = Math.max(result.width, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(result.height, state.text.boundingBox.height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.width = Math.max(minWidth, state.text.boundingBox.width);\n\t\t\t\tresult.height = Math.max(minHeight, state.text.boundingBox.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Applies the horizontal and vertical label positions\n\t\tif (this.graph.getModel().isVertex(state.cell))\n\t\t{\n\t\t\tvar horizontal = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\n\t\t\tif (horizontal == mxConstants.ALIGN_LEFT)\n\t\t\t{\n\t\t\t\tresult.x -= state.width;\n\t\t\t}\n\t\t\telse if (horizontal == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tresult.x += state.width;\n\t\t\t}\n\t\n\t\t\tvar vertical = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\t\t\tif (vertical == mxConstants.ALIGN_TOP)\n\t\t\t{\n\t\t\t\tresult.y -= state.height;\n\t\t\t}\n\t\t\telse if (vertical == mxConstants.ALIGN_BOTTOM)\n\t\t\t{\n\t\t\t\tresult.y += state.height;\n\t\t\t}\n\t\t}\n \t}\n \t\n \treturn new mxRectangle(Math.round(result.x), Math.round(result.y), Math.round(result.width), Math.round(result.height));\n};\n\n/**\n * Function: getEmptyLabelText\n *\n * Returns the initial label value to be used of the label of the given\n * cell is empty. This label is displayed and cleared on the first keystroke.\n * This implementation returns <emptyLabelText>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a text for an empty editing box should be\n * returned.\n */\nmxCellEditor.prototype.getEmptyLabelText = function (cell)\n{\n\treturn this.emptyLabelText;\n};\n\n/**\n * Function: getEditingCell\n *\n * Returns the cell that is currently being edited or null if no cell is\n * being edited.\n */\nmxCellEditor.prototype.getEditingCell = function ()\n{\n\treturn this.editingCell;\n};\n\n/**\n * Function: destroy\n *\n * Destroys the editor and removes all associated resources.\n */\nmxCellEditor.prototype.destroy = function ()\n{\n\tif (this.textarea != null)\n\t{\n\t\tmxEvent.release(this.textarea);\n\t\t\n\t\tif (this.textarea.parentNode != null)\n\t\t{\n\t\t\tthis.textarea.parentNode.removeChild(this.textarea);\n\t\t}\n\t\t\n\t\tthis.textarea = null;\n\n\t}\n\t\t\t\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\n\tif (this.zoomHandler)\n\t{\n\t\tthis.graph.view.removeListener(this.zoomHandler);\n\t\tthis.zoomHandler = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxCellRenderer\n * \n * Renders cells into a document object model. The <defaultShapes> is a global\n * map of shapename, constructor pairs that is used in all instances. You can\n * get a list of all available shape names using the following code.\n * \n * In general the cell renderer is in charge of creating, redrawing and\n * destroying the shape and label associated with a cell state, as well as\n * some other graphical objects, namely controls and overlays. The shape\n * hieararchy in the display (ie. the hierarchy in which the DOM nodes\n * appear in the document) does not reflect the cell hierarchy. The shapes\n * are a (flat) sequence of shapes and labels inside the draw pane of the\n * graph view, with some exceptions, namely the HTML labels being placed\n * directly inside the graph container for certain browsers.\n * \n * (code)\n * mxLog.show();\n * for (var i in mxCellRenderer.defaultShapes)\n * {\n *   mxLog.debug(i);\n * }\n * (end)\n *\n * Constructor: mxCellRenderer\n * \n * Constructs a new cell renderer with the following built-in shapes:\n * arrow, rectangle, ellipse, rhombus, image, line, label, cylinder,\n * swimlane, connector, actor and cloud.\n */\nfunction mxCellRenderer() { };\n\n/**\n * Variable: defaultShapes\n * \n * Static array that contains the globally registered shapes which are\n * known to all instances of this class. For adding new shapes you should\n * use the static <mxCellRenderer.registerShape> function.\n */\nmxCellRenderer.defaultShapes = new Object();\n\n/**\n * Variable: defaultEdgeShape\n * \n * Defines the default shape for edges. Default is <mxConnector>.\n */\nmxCellRenderer.prototype.defaultEdgeShape = mxConnector;\n\n/**\n * Variable: defaultVertexShape\n * \n * Defines the default shape for vertices. Default is <mxRectangleShape>.\n */\nmxCellRenderer.prototype.defaultVertexShape = mxRectangleShape;\n\n/**\n * Variable: defaultTextShape\n * \n * Defines the default shape for labels. Default is <mxText>.\n */\nmxCellRenderer.prototype.defaultTextShape = mxText;\n\n/**\n * Variable: legacyControlPosition\n * \n * Specifies if the folding icon should ignore the horizontal\n * orientation of a swimlane. Default is true.\n */\nmxCellRenderer.prototype.legacyControlPosition = true;\n\n/**\n * Variable: legacySpacing\n * \n * Specifies if spacing and label position should be ignored if overflow is\n * fill or width. Default is true for backwards compatiblity.\n */\nmxCellRenderer.prototype.legacySpacing = true;\n\n/**\n * Variable: antiAlias\n * \n * Anti-aliasing option for new shapes. Default is true.\n */\nmxCellRenderer.prototype.antiAlias = true;\n\n/**\n * Variable: minSvgStrokeWidth\n * \n * Minimum stroke width for SVG output.\n */\nmxCellRenderer.prototype.minSvgStrokeWidth = 1;\n\n/**\n * Variable: forceControlClickHandler\n * \n * Specifies if the enabled state of the graph should be ignored in the control\n * click handler (to allow folding in disabled graphs). Default is false.\n */\nmxCellRenderer.prototype.forceControlClickHandler = false;\n\n/**\n * Function: registerShape\n * \n * Registers the given constructor under the specified key in this instance\n * of the renderer.\n * \n * Example:\n * \n * (code)\n * mxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\n * (end)\n * \n * Parameters:\n * \n * key - String representing the shape name.\n * shape - Constructor of the <mxShape> subclass.\n */\nmxCellRenderer.registerShape = function(key, shape)\n{\n\tmxCellRenderer.defaultShapes[key] = shape;\n};\n\n// Adds default shapes into the default shapes array\nmxCellRenderer.registerShape(mxConstants.SHAPE_RECTANGLE, mxRectangleShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ELLIPSE, mxEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_RHOMBUS, mxRhombus);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CYLINDER, mxCylinder);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CONNECTOR, mxConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ACTOR, mxActor);\nmxCellRenderer.registerShape(mxConstants.SHAPE_TRIANGLE, mxTriangle);\nmxCellRenderer.registerShape(mxConstants.SHAPE_HEXAGON, mxHexagon);\nmxCellRenderer.registerShape(mxConstants.SHAPE_CLOUD, mxCloud);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LINE, mxLine);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW, mxArrow);\nmxCellRenderer.registerShape(mxConstants.SHAPE_ARROW_CONNECTOR, mxArrowConnector);\nmxCellRenderer.registerShape(mxConstants.SHAPE_DOUBLE_ELLIPSE, mxDoubleEllipse);\nmxCellRenderer.registerShape(mxConstants.SHAPE_SWIMLANE, mxSwimlane);\nmxCellRenderer.registerShape(mxConstants.SHAPE_IMAGE, mxImageShape);\nmxCellRenderer.registerShape(mxConstants.SHAPE_LABEL, mxLabel);\n\n/**\n * Function: initializeShape\n * \n * Initializes the shape in the given state by calling its init method with\n * the correct container after configuring it using <configureShape>.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be initialized.\n */\nmxCellRenderer.prototype.initializeShape = function(state)\n{\n\tstate.shape.dialect = state.view.graph.dialect;\n\tthis.configureShape(state);\n\tstate.shape.init(state.view.getDrawPane());\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be created.\n */\nmxCellRenderer.prototype.createShape = function(state)\n{\n\tvar shape = null;\n\t\n\tif (state.style != null)\n\t{\n\t\t// Checks if there is a stencil for the name and creates\n\t\t// a shape instance for the stencil if one exists\n\t\tvar stencil = mxStencilRegistry.getStencil(state.style[mxConstants.STYLE_SHAPE]);\n\t\t\n\t\tif (stencil != null)\n\t\t{\n\t\t\tshape = new mxShape(stencil);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar ctor = this.getShapeConstructor(state);\n\t\t\tshape = new ctor();\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: createIndicatorShape\n * \n * Creates the indicator shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the indicator shape should be created.\n */\nmxCellRenderer.prototype.createIndicatorShape = function(state)\n{\n\tstate.shape.indicatorShape = this.getShape(state.view.graph.getIndicatorShape(state));\n};\n\n/**\n * Function: getShape\n * \n * Returns the shape for the given name from <defaultShapes>.\n */\nmxCellRenderer.prototype.getShape = function(name)\n{\n\treturn (name != null) ? mxCellRenderer.defaultShapes[name] : null;\n};\n\n/**\n * Function: getShapeConstructor\n * \n * Returns the constructor to be used for creating the shape.\n */\nmxCellRenderer.prototype.getShapeConstructor = function(state)\n{\n\tvar ctor = this.getShape(state.style[mxConstants.STYLE_SHAPE]);\n\t\n\tif (ctor == null)\n\t{\n\t\tctor = (state.view.graph.getModel().isEdge(state.cell)) ?\n\t\t\tthis.defaultEdgeShape : this.defaultVertexShape;\n\t}\n\t\n\treturn ctor;\n};\n\n/**\n * Function: configureShape\n * \n * Configures the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shape should be configured.\n */\nmxCellRenderer.prototype.configureShape = function(state)\n{\n\tstate.shape.apply(state);\n\tstate.shape.image = state.view.graph.getImage(state);\n\tstate.shape.indicatorColor = state.view.graph.getIndicatorColor(state);\n\tstate.shape.indicatorStrokeColor = state.style[mxConstants.STYLE_INDICATOR_STROKECOLOR];\n\tstate.shape.indicatorGradientColor = state.view.graph.getIndicatorGradientColor(state);\n\tstate.shape.indicatorDirection = state.style[mxConstants.STYLE_INDICATOR_DIRECTION];\n\tstate.shape.indicatorImage = state.view.graph.getIndicatorImage(state);\n\n\tthis.postConfigureShape(state);\n};\n\n/**\n * Function: postConfigureShape\n * \n * Replaces any reserved words used for attributes, eg. inherit,\n * indicated or swimlane for colors in the shape for the given state.\n * This implementation resolves these keywords on the fill, stroke\n * and gradient color keys.\n */\nmxCellRenderer.prototype.postConfigureShape = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tthis.resolveColor(state, 'indicatorColor', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'indicatorGradientColor', mxConstants.STYLE_GRADIENTCOLOR);\n\t\tthis.resolveColor(state, 'fill', mxConstants.STYLE_FILLCOLOR);\n\t\tthis.resolveColor(state, 'stroke', mxConstants.STYLE_STROKECOLOR);\n\t\tthis.resolveColor(state, 'gradient', mxConstants.STYLE_GRADIENTCOLOR);\n\t}\n};\n\n/**\n * Function: checkPlaceholderStyles\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.checkPlaceholderStyles = function(state)\n{\n\t// LATER: Check if the color has actually changed\n\tif (state.style != null)\n\t{\n\t\tvar values = ['inherit', 'swimlane', 'indicated'];\n\t\tvar styles = [mxConstants.STYLE_FILLCOLOR, mxConstants.STYLE_STROKECOLOR, mxConstants.STYLE_GRADIENTCOLOR];\n\t\t\n\t\tfor (var i = 0; i < styles.length; i++)\n\t\t{\n\t\t\tif (mxUtils.indexOf(values, state.style[styles[i]]) >= 0)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: resolveColor\n * \n * Resolves special keywords 'inherit', 'indicated' and 'swimlane' and sets\n * the respective color on the shape.\n */\nmxCellRenderer.prototype.resolveColor = function(state, field, key)\n{\n\tvar value = state.shape[field];\n\tvar graph = state.view.graph;\n\tvar referenced = null;\n\t\n\tif (value == 'inherit')\n\t{\n\t\treferenced = graph.model.getParent(state.cell);\n\t}\n\telse if (value == 'swimlane')\n\t{\n\t\tstate.shape[field] = (key == mxConstants.STYLE_STROKECOLOR) ? '#000000' : '#ffffff';\n\t\t\n\t\tif (graph.model.getTerminal(state.cell, false) != null)\n\t\t{\n\t\t\treferenced = graph.model.getTerminal(state.cell, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treferenced = state.cell;\n\t\t}\n\t\t\n\t\treferenced = graph.getSwimlane(referenced);\n\t\tkey = graph.swimlaneIndicatorColorAttribute;\n\t}\n\telse if (value == 'indicated')\n\t{\n\t\tstate.shape[field] = state.shape.indicatorColor;\n\t}\n\t\n\tif (referenced != null)\n\t{\n\t\tvar rstate = graph.getView().getState(referenced);\n\t\tstate.shape[field] = null;\n\n\t\tif (rstate != null)\n\t\t{\n\t\t\tif (rstate.shape != null && field != 'indicatorColor')\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.shape[field];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape[field] = rstate.style[key];\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getLabelValue\n * \n * Returns the value to be used for the label.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.getLabelValue = function(state)\n{\n\treturn state.view.graph.getLabel(state.cell);\n};\n\n/**\n * Function: createLabel\n * \n * Creates the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the label should be created.\n */\nmxCellRenderer.prototype.createLabel = function(state, value)\n{\n\tvar graph = state.view.graph;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\t\n\tif (state.style[mxConstants.STYLE_FONTSIZE] > 0 || state.style[mxConstants.STYLE_FONTSIZE] == null)\n\t{\n\t\t// Avoids using DOM node for empty labels\n\t\tvar isForceHtml = (graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\n\t\tstate.text = new this.defaultTextShape(value, new mxRectangle(),\n\t\t\t\t(state.style[mxConstants.STYLE_ALIGN] || mxConstants.ALIGN_CENTER),\n\t\t\t\tgraph.getVerticalAlign(state),\n\t\t\t\tstate.style[mxConstants.STYLE_FONTCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTFAMILY],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSIZE],\n\t\t\t\tstate.style[mxConstants.STYLE_FONTSTYLE],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_TOP],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_RIGHT],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_BOTTOM],\n\t\t\t\tstate.style[mxConstants.STYLE_SPACING_LEFT],\n\t\t\t\tstate.style[mxConstants.STYLE_HORIZONTAL],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BACKGROUNDCOLOR],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_BORDERCOLOR],\n\t\t\t\tgraph.isWrapping(state.cell) && graph.isHtmlLabel(state.cell),\n\t\t\t\tgraph.isLabelClipped(state.cell),\n\t\t\t\tstate.style[mxConstants.STYLE_OVERFLOW],\n\t\t\t\tstate.style[mxConstants.STYLE_LABEL_PADDING],\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION));\n\t\tstate.text.opacity = mxUtils.getValue(state.style, mxConstants.STYLE_TEXT_OPACITY, 100);\n\t\tstate.text.dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\t\tstate.text.style = state.style;\n\t\tstate.text.state = state;\n\t\tthis.initializeLabel(state, state.text);\n\t\t\n\t\t// Workaround for touch devices routing all events for a mouse gesture\n\t\t// (down, move, up) via the initial DOM node. IE additionally redirects\n\t\t// the event via the initial DOM node but the event source is the node\n\t\t// under the mouse, so we need to check if this is the case and force\n\t\t// getCellAt for the subsequent mouseMoves and the final mouseUp.\n\t\tvar forceGetCell = false;\n\t\t\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar result = state;\n\n\t\t\tif (mxClient.IS_TOUCH || forceGetCell)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t};\n\t\t\n\t\t// TODO: Add handling for special touch device gestures\n\t\tmxEvent.addGestureListeners(state.text.node,\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\t\tforceGetCell = graph.dialect != mxConstants.DIALECT_SVG &&\n\t\t\t\t\t\tmxEvent.getSource(evt).nodeName == 'IMG';\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t}\n\t\t\t}),\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t\t\tforceGetCell = false;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\t// Uses double click timeout in mxGraph for quirks mode\n\t\tif (graph.nativeDblClickEnabled)\n\t\t{\n\t\t\tmxEvent.addListener(state.text.node, 'dblclick',\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isLabelEvent(state, evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Function: initializeLabel\n * \n * Initiailzes the label with a suitable container.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be initialized.\n */\nmxCellRenderer.prototype.initializeLabel = function(state, shape)\n{\n\tif (mxClient.IS_SVG && mxClient.NO_FO && shape.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.init(state.view.graph.container);\n\t}\n\telse\n\t{\n\t\tshape.init(state.view.getDrawPane());\n\t}\n};\n\n/**\n * Function: createCellOverlays\n * \n * Creates the actual shape for showing the overlay for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n */\nmxCellRenderer.prototype.createCellOverlays = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar overlays = graph.getCellOverlays(state.cell);\n\tvar dict = null;\n\t\n\tif (overlays != null)\n\t{\n\t\tdict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tvar shape = (state.overlays != null) ? state.overlays.remove(overlays[i]) : null;\n\t\t\t\n\t\t\tif (shape == null)\n\t\t\t{\n\t\t\t\tvar tmp = new mxImageShape(new mxRectangle(), overlays[i].image.src);\n\t\t\t\ttmp.dialect = state.view.graph.dialect;\n\t\t\t\ttmp.preserveImageAspect = false;\n\t\t\t\ttmp.overlay = overlays[i];\n\t\t\t\tthis.initializeOverlay(state, tmp);\n\t\t\t\tthis.installCellOverlayListeners(state, overlays[i], tmp);\n\t\n\t\t\t\tif (overlays[i].cursor != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.node.style.cursor = overlays[i].cursor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdict.put(overlays[i], tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdict.put(overlays[i], shape);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Removes unused\n\tif (state.overlays != null)\n\t{\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tshape.destroy();\n\t\t});\n\t}\n\t\n\tstate.overlays = dict;\n};\n\n/**\n * Function: initializeOverlay\n * \n * Initializes the given overlay.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the overlay should be created.\n * overlay - <mxImageShape> that represents the overlay.\n */\nmxCellRenderer.prototype.initializeOverlay = function(state, overlay)\n{\n\toverlay.init(state.view.getOverlayPane());\n};\n\n/**\n * Function: installOverlayListeners\n * \n * Installs the listeners for the given <mxCellState>, <mxCellOverlay> and\n * <mxShape> that represents the overlay.\n */\nmxCellRenderer.prototype.installCellOverlayListeners = function(state, overlay, shape)\n{\n\tvar graph  = state.view.graph;\n\t\n\tmxEvent.addListener(shape.node, 'click', function (evt)\n\t{\n\t\tif (graph.isEditing())\n\t\t{\n\t\t\tgraph.stopEditing(!graph.isInvokesStopCellEditing());\n\t\t}\n\t\t\n\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t'event', evt, 'cell', state.cell));\n\t});\n\t\n\tmxEvent.addGestureListeners(shape.node,\n\t\tfunction (evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t},\n\t\tfunction (evt)\n\t\t{\n\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE,\n\t\t\t\tnew mxMouseEvent(evt, state));\n\t\t});\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tmxEvent.addListener(shape.node, 'touchend', function (evt)\n\t\t{\n\t\t\toverlay.fireEvent(new mxEventObject(mxEvent.CLICK,\n\t\t\t\t\t'event', evt, 'cell', state.cell));\n\t\t});\n\t}\n};\n\n/**\n * Function: createControl\n * \n * Creates the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be created.\n */\nmxCellRenderer.prototype.createControl = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar image = graph.getFoldingImage(state);\n\t\n\tif (graph.foldingEnabled && image != null)\n\t{\n\t\tif (state.control == null)\n\t\t{\n\t\t\tvar b = new mxRectangle(0, 0, image.width, image.height);\n\t\t\tstate.control = new mxImageShape(b, image.src);\n\t\t\tstate.control.preserveImageAspect = false;\n\t\t\tstate.control.dialect = graph.dialect;\n\n\t\t\tthis.initControl(state, state.control, true, this.createControlClickHandler(state));\n\t\t}\n\t}\n\telse if (state.control != null)\n\t{\n\t\tstate.control.destroy();\n\t\tstate.control = null;\n\t}\n};\n\n/**\n * Function: createControlClickHandler\n * \n * Hook for creating the click handler for the folding icon.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control click handler should be returned.\n */\nmxCellRenderer.prototype.createControlClickHandler = function(state)\n{\n\tvar graph = state.view.graph;\n\t\n\treturn mxUtils.bind(this, function (evt)\n\t{\n\t\tif (this.forceControlClickHandler || graph.isEnabled())\n\t\t{\n\t\t\tvar collapse = !graph.isCellCollapsed(state.cell);\n\t\t\tgraph.foldCells(collapse, false, [state.cell], null, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t});\n};\n\n/**\n * Function: initControl\n * \n * Initializes the given control and returns the corresponding DOM node.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the control should be initialized.\n * control - <mxShape> to be initialized.\n * handleEvents - Boolean indicating if mousedown and mousemove should fire events via the graph.\n * clickHandler - Optional function to implement clicks on the control.\n */\nmxCellRenderer.prototype.initControl = function(state, control, handleEvents, clickHandler)\n{\n\tvar graph = state.view.graph;\n\t\n\t// In the special case where the label is in HTML and the display is SVG the image\n\t// should go into the graph container directly in order to be clickable. Otherwise\n\t// it is obscured by the HTML label that overlaps the cell.\n\tvar isForceHtml = graph.isHtmlLabel(state.cell) && mxClient.NO_FO &&\n\t\tgraph.dialect == mxConstants.DIALECT_SVG;\n\n\tif (isForceHtml)\n\t{\n\t\tcontrol.dialect = mxConstants.DIALECT_PREFERHTML;\n\t\tcontrol.init(graph.container);\n\t\tcontrol.node.style.zIndex = 1;\n\t}\n\telse\n\t{\n\t\tcontrol.init(state.view.getOverlayPane());\n\t}\n\n\tvar node = control.innerNode || control.node;\n\t\n\t// Workaround for missing click event on iOS is to check tolerance below\n\tif (clickHandler != null && !mxClient.IS_IOS)\n\t{\n\t\tif (graph.isEnabled())\n\t\t{\n\t\t\tnode.style.cursor = 'pointer';\n\t\t}\n\t\t\n\t\tmxEvent.addListener(node, 'click', clickHandler);\n\t}\n\t\n\tif (handleEvents)\n\t{\n\t\tvar first = null;\n\n\t\tmxEvent.addGestureListeners(node,\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tfirst = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, state));\n\t\t\t},\n\t\t\tfunction (evt)\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, state));\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t});\n\t\t\n\t\t// Uses capture phase for event interception to stop bubble phase\n\t\tif (clickHandler != null && mxClient.IS_IOS)\n\t\t{\n\t\t\tnode.addEventListener('touchend', function(evt)\n\t\t\t{\n\t\t\t\tif (first != null)\n\t\t\t\t{\n\t\t\t\t\tvar tol = graph.tolerance;\n\t\t\t\t\t\n\t\t\t\t\tif (Math.abs(first.x - mxEvent.getClientX(evt)) < tol &&\n\t\t\t\t\t\tMath.abs(first.y - mxEvent.getClientY(evt)) < tol)\n\t\t\t\t\t{\n\t\t\t\t\t\tclickHandler.call(clickHandler, evt);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, true);\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: isShapeEvent\n * \n * Returns true if the event is for the shape of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shape fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isShapeEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: isLabelEvent\n * \n * Returns true if the event is for the label of the given state. This\n * implementation always returns true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label fired the event.\n * evt - Mouse event which was fired.\n */\nmxCellRenderer.prototype.isLabelEvent = function(state, evt)\n{\n\treturn true;\n};\n\n/**\n * Function: installListeners\n * \n * Installs the event listeners for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the event listeners should be isntalled.\n */\nmxCellRenderer.prototype.installListeners = function(state)\n{\n\tvar graph = state.view.graph;\n\n\t// Workaround for touch devices routing all events for a mouse\n\t// gesture (down, move, up) via the initial DOM node. Same for\n\t// HTML images in all IE versions (VML images are working).\n\tvar getState = function(evt)\n\t{\n\t\tvar result = state;\n\t\t\n\t\tif ((graph.dialect != mxConstants.DIALECT_SVG && mxEvent.getSource(evt).nodeName == 'IMG') || mxClient.IS_TOUCH)\n\t\t{\n\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\n\t\t\t// Dispatches the drop event to the graph which\n\t\t\t// consumes and executes the source function\n\t\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\tresult = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\tmxEvent.addGestureListeners(state.shape.node,\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt, state));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t})\n\t);\n\t\n\t// Uses double click timeout in mxGraph for quirks mode\n\tif (graph.nativeDblClickEnabled)\n\t{\n\t\tmxEvent.addListener(state.shape.node, 'dblclick',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tif (this.isShapeEvent(state, evt))\n\t\t\t\t{\n\t\t\t\t\tgraph.dblClick(evt, state.cell);\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n};\n\n/**\n * Function: redrawLabel\n * \n * Redraws the label for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawLabel = function(state, forced)\n{\n\tvar graph = state.view.graph;\n\tvar value = this.getLabelValue(state);\n\tvar wrapping = graph.isWrapping(state.cell);\n\tvar clipping = graph.isLabelClipped(state.cell);\n\tvar isForceHtml = (state.view.graph.isHtmlLabel(state.cell) || (value != null && mxUtils.isNode(value)));\n\tvar dialect = (isForceHtml) ? mxConstants.DIALECT_STRICTHTML : state.view.graph.dialect;\n\tvar overflow = state.style[mxConstants.STYLE_OVERFLOW] || 'visible';\n\n\tif (state.text != null && (state.text.wrap != wrapping || state.text.clipped != clipping ||\n\t\tstate.text.overflow != overflow || state.text.dialect != dialect))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\t\n\tif (state.text == null && value != null && (mxUtils.isNode(value) || value.length > 0))\n\t{\n\t\tthis.createLabel(state, value);\n\t}\n\telse if (state.text != null && (value == null || value.length == 0))\n\t{\n\t\tstate.text.destroy();\n\t\tstate.text = null;\n\t}\n\n\tif (state.text != null)\n\t{\n\t\t// Forced is true if the style has changed, so to get the updated\n\t\t// result in getLabelBounds we apply the new style to the shape\n\t\tif (forced)\n\t\t{\n\t\t\t// Checks if a full repaint is needed\n\t\t\tif (state.text.lastValue != null && this.isTextShapeInvalid(state, state.text))\n\t\t\t{\n\t\t\t\t// Forces a full repaint\n\t\t\t\tstate.text.lastValue = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.resetStyles();\n\t\t\tstate.text.apply(state);\n\t\t\t\n\t\t\t// Special case where value is obtained via hook in graph\n\t\t\tstate.text.valign = graph.getVerticalAlign(state);\n\t\t}\n\t\t\n\t\tvar bounds = this.getLabelBounds(state);\n\t\tvar nextScale = this.getTextScale(state);\n\t\t\n\t\tif (forced || state.text.value != value || state.text.isWrapping != wrapping ||\n\t\t\tstate.text.overflow != overflow || state.text.isClipping != clipping ||\n\t\t\tstate.text.scale != nextScale || state.text.dialect != dialect ||\n\t\t\t!state.text.bounds.equals(bounds))\n\t\t{\n\t\t\t// Forces an update of the text bounding box\n\t\t\tif (state.text.bounds.width != 0 && state.unscaledWidth != null &&\n\t\t\t\tMath.round((state.text.bounds.width /\n\t\t\t\tstate.text.scale * nextScale) - bounds.width) != 0)\n\t\t\t{\n\t\t\t\tstate.unscaledWidth = null;\n\t\t\t}\n\t\t\t\n\t\t\tstate.text.dialect = dialect;\n\t\t\tstate.text.value = value;\n\t\t\tstate.text.bounds = bounds;\n\t\t\tstate.text.scale = nextScale;\n\t\t\tstate.text.wrap = wrapping;\n\t\t\tstate.text.clipped = clipping;\n\t\t\tstate.text.overflow = overflow;\n\t\t\t\n\t\t\t// Preserves visible state\n\t\t\tvar vis = state.text.node.style.visibility;\n\t\t\tthis.redrawLabelShape(state.text);\n\t\t\tstate.text.node.style.visibility = vis;\n\t\t}\n\t}\n};\n\n/**\n * Function: isTextShapeInvalid\n * \n * Returns true if the style for the text shape has changed.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be checked.\n * shape - <mxText> shape to be checked.\n */\nmxCellRenderer.prototype.isTextShapeInvalid = function(state, shape)\n{\n\tfunction check(property, stylename, defaultValue)\n\t{\n\t\t// Workaround for spacing added to directional spacing\n\t\tif (stylename == 'spacingTop' || stylename == 'spacingRight' ||\n\t\t\tstylename == 'spacingBottom' || stylename == 'spacingLeft')\n\t\t{\n\t\t\tresult = parseFloat(shape[property]) - parseFloat(shape.spacing) !=\n\t\t\t\t(state.style[stylename] || defaultValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = shape[property] != (state.style[stylename] || defaultValue);\n\t\t}\n\t\t\n\t\treturn result;\n\t};\n\n\treturn check('fontStyle', mxConstants.STYLE_FONTSTYLE, mxConstants.DEFAULT_FONTSTYLE) ||\n\t\tcheck('family', mxConstants.STYLE_FONTFAMILY, mxConstants.DEFAULT_FONTFAMILY) ||\n\t\tcheck('size', mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE) ||\n\t\tcheck('color', mxConstants.STYLE_FONTCOLOR, 'black') ||\n\t\tcheck('align', mxConstants.STYLE_ALIGN, '') ||\n\t\tcheck('valign', mxConstants.STYLE_VERTICAL_ALIGN, '') ||\n\t\tcheck('spacing', mxConstants.STYLE_SPACING, 2) ||\n\t\tcheck('spacingTop', mxConstants.STYLE_SPACING_TOP, 0) ||\n\t\tcheck('spacingRight', mxConstants.STYLE_SPACING_RIGHT, 0) ||\n\t\tcheck('spacingBottom', mxConstants.STYLE_SPACING_BOTTOM, 0) ||\n\t\tcheck('spacingLeft', mxConstants.STYLE_SPACING_LEFT, 0) ||\n\t\tcheck('horizontal', mxConstants.STYLE_HORIZONTAL, true) ||\n\t\tcheck('background', mxConstants.STYLE_LABEL_BACKGROUNDCOLOR) ||\n\t\tcheck('border', mxConstants.STYLE_LABEL_BORDERCOLOR) ||\n\t\tcheck('opacity', mxConstants.STYLE_TEXT_OPACITY, 100) ||\n\t\tcheck('textDirection', mxConstants.STYLE_TEXT_DIRECTION, mxConstants.DEFAULT_TEXT_DIRECTION);\n};\n\n/**\n * Function: redrawLabelShape\n * \n * Called to invoked redraw on the given text shape.\n * \n * Parameters:\n * \n * shape - <mxText> shape to be redrawn.\n */\nmxCellRenderer.prototype.redrawLabelShape = function(shape)\n{\n\tshape.redraw();\n};\n\n/**\n * Function: getTextScale\n * \n * Returns the scaling used for the label of the given state\n * \n * Parameters:\n * \n * state - <mxCellState> whose label scale should be returned.\n */\nmxCellRenderer.prototype.getTextScale = function(state)\n{\n\treturn state.view.scale;\n};\n\n/**\n * Function: getLabelBounds\n * \n * Returns the bounds to be used to draw the label of the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be returned.\n */\nmxCellRenderer.prototype.getLabelBounds = function(state)\n{\n\tvar graph = state.view.graph;\n\tvar scale = state.view.scale;\n\tvar isEdge = graph.getModel().isEdge(state.cell);\n\tvar bounds = new mxRectangle(state.absoluteOffset.x, state.absoluteOffset.y);\n\n\tif (isEdge)\n\t{\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * scale;\n\t\tbounds.y += spacing.y * scale;\n\t\t\n\t\tvar geo = graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tbounds.width = Math.max(0, geo.width * scale);\n\t\t\tbounds.height = Math.max(0, geo.height * scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\t// Inverts label position\n\t\tif (state.text.isPaintBoundsInverted())\n\t\t{\n\t\t\tvar tmp = bounds.x;\n\t\t\tbounds.x = bounds.y;\n\t\t\tbounds.y = tmp;\n\t\t}\n\t\t\n\t\tbounds.x += state.x;\n\t\tbounds.y += state.y;\n\t\t\n\t\t// Minimum of 1 fixes alignment bug in HTML labels\n\t\tbounds.width = Math.max(1, state.width);\n\t\tbounds.height = Math.max(1, state.height);\n\n\t\tvar sc = mxUtils.getValue(state.style, mxConstants.STYLE_STROKECOLOR, mxConstants.NONE);\n\t\t\n\t\tif (sc != mxConstants.NONE && sc != '')\n\t\t{\n\t\t\tvar s = parseFloat(mxUtils.getValue(state.style, mxConstants.STYLE_STROKEWIDTH, 1)) * scale;\n\t\t\tvar dx = 1 + Math.floor((s - 1) / 2);\n\t\t\tvar dh = Math.floor(s + 1);\n\t\t\t\n\t\t\tbounds.x += dx;\n\t\t\tbounds.y += dx;\n\t\t\tbounds.width -= dh;\n\t\t\tbounds.height -= dh;\n\t\t}\n\t}\n\n\tif (state.text.isPaintBoundsInverted())\n\t{\n\t\t// Rotates around center of state\n\t\tvar t = (state.width - state.height) / 2;\n\t\tbounds.x += t;\n\t\tbounds.y -= t;\n\t\tvar tmp = bounds.width;\n\t\tbounds.width = bounds.height;\n\t\tbounds.height = tmp;\n\t}\n\t\n\t// Shape can modify its label bounds\n\tif (state.shape != null)\n\t{\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\t\n\t\tif (hpos == mxConstants.ALIGN_CENTER && vpos == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tbounds = state.shape.getLabelBounds(bounds);\n\t\t}\n\t}\n\t\n\t// Label width style overrides actual label width\n\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\n\tif (lw != null)\n\t{\n\t\tbounds.width = parseFloat(lw) * scale;\n\t}\n\t\n\tif (!isEdge)\n\t{\n\t\tthis.rotateLabelBounds(state, bounds);\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: rotateLabelBounds\n * \n * Adds the shape rotation to the given label bounds and\n * applies the alignment and offsets.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label bounds should be rotated.\n * bounds - <mxRectangle> the rectangle to be rotated.\n */\nmxCellRenderer.prototype.rotateLabelBounds = function(state, bounds)\n{\n\tbounds.y -= state.text.margin.y * bounds.height;\n\tbounds.x -= state.text.margin.x * bounds.width;\n\t\n\tif (!this.legacySpacing || (state.style[mxConstants.STYLE_OVERFLOW] != 'fill' && state.style[mxConstants.STYLE_OVERFLOW] != 'width'))\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar spacing = state.text.getSpacing();\n\t\tbounds.x += spacing.x * s;\n\t\tbounds.y += spacing.y * s;\n\t\t\n\t\tvar hpos = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\t\tvar vpos = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tbounds.width = Math.max(0, bounds.width - ((hpos == mxConstants.ALIGN_CENTER && lw == null) ? (state.text.spacingLeft * s + state.text.spacingRight * s) : 0));\n\t\tbounds.height = Math.max(0, bounds.height - ((vpos == mxConstants.ALIGN_MIDDLE) ? (state.text.spacingTop * s + state.text.spacingBottom * s) : 0));\n\t}\n\n\tvar theta = state.text.getTextRotation();\n\n\t// Only needed if rotated around another center\n\tif (theta != 0 && state != null && state.view.graph.model.isVertex(state.cell))\n\t{\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\t\n\t\tif (bounds.x != cx || bounds.y != cy)\n\t\t{\n\t\t\tvar rad = theta * (Math.PI / 180);\n\t\t\tpt = mxUtils.getRotatedPoint(new mxPoint(bounds.x, bounds.y),\n\t\t\t\t\tMath.cos(rad), Math.sin(rad), new mxPoint(cx, cy));\n\t\t\t\n\t\t\tbounds.x = pt.x;\n\t\t\tbounds.y = pt.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawCellOverlays\n * \n * Redraws the overlays for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose overlays should be redrawn.\n */\nmxCellRenderer.prototype.redrawCellOverlays = function(state, forced)\n{\n\tthis.createCellOverlays(state);\n\n\tif (state.overlays != null)\n\t{\n\t\tvar rot = mxUtils.mod(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0), 90);\n        var rad = mxUtils.toRadians(rot);\n        var cos = Math.cos(rad);\n        var sin = Math.sin(rad);\n\t\t\n\t\tstate.overlays.visit(function(id, shape)\n\t\t{\n\t\t\tvar bounds = shape.overlay.getBounds(state);\n\t\t\n\t\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t\t{\n\t\t\t\tif (state.shape != null && rot != 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = bounds.getCenterX();\n\t\t\t\t\tvar cy = bounds.getCenterY();\n\n\t\t\t\t\tvar point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t        bounds.x = Math.round(cx - bounds.width / 2);\n\t\t\t        bounds.y = Math.round(cy - bounds.height / 2);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (forced || shape.bounds == null || shape.scale != state.view.scale ||\n\t\t\t\t!shape.bounds.equals(bounds))\n\t\t\t{\n\t\t\t\tshape.bounds = bounds;\n\t\t\t\tshape.scale = state.view.scale;\n\t\t\t\tshape.redraw();\n\t\t\t}\n\t\t});\n\t}\n};\n\n/**\n * Function: redrawControl\n * \n * Redraws the control for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose control should be redrawn.\n */\nmxCellRenderer.prototype.redrawControl = function(state, forced)\n{\n\tvar image = state.view.graph.getFoldingImage(state);\n\t\n\tif (state.control != null && image != null)\n\t{\n\t\tvar bounds = this.getControlBounds(state, image.width, image.height);\n\t\tvar r = (this.legacyControlPosition) ?\n\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0) :\n\t\t\t\tstate.shape.getTextRotation();\n\t\tvar s = state.view.scale;\n\t\t\n\t\tif (forced || state.control.scale != s || !state.control.bounds.equals(bounds) ||\n\t\t\tstate.control.rotation != r)\n\t\t{\n\t\t\tstate.control.rotation = r;\n\t\t\tstate.control.bounds = bounds;\n\t\t\tstate.control.scale = s;\n\t\t\t\n\t\t\tstate.control.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getControlBounds\n * \n * Returns the bounds to be used to draw the control (folding icon) of the\n * given state.\n */\nmxCellRenderer.prototype.getControlBounds = function(state, w, h)\n{\n\tif (state.control != null)\n\t{\n\t\tvar s = state.view.scale;\n\t\tvar cx = state.getCenterX();\n\t\tvar cy = state.getCenterY();\n\t\n\t\tif (!state.view.graph.getModel().isEdge(state.cell))\n\t\t{\n\t\t\tcx = state.x + w * s;\n\t\t\tcy = state.y + h * s;\n\t\t\t\n\t\t\tif (state.shape != null)\n\t\t\t{\n\t\t\t\t// TODO: Factor out common code\n\t\t\t\tvar rot = state.shape.getShapeRotation();\n\t\t\t\t\n\t\t\t\tif (this.legacyControlPosition)\n\t\t\t\t{\n\t\t\t\t\trot = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (state.shape.isPaintBoundsInverted())\n\t\t\t\t\t{\n\t\t\t\t\t\tvar t = (state.width - state.height) / 2;\n\t\t\t\t\t\tcx += t;\n\t\t\t\t\t\tcy -= t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (rot != 0)\n\t\t\t\t{\n\t\t\t        var rad = mxUtils.toRadians(rot);\n\t\t\t        var cos = Math.cos(rad);\n\t\t\t        var sin = Math.sin(rad);\n\t\t\t        \n\t\t\t        var point = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin,\n\t\t\t        \t\tnew mxPoint(state.getCenterX(), state.getCenterY()));\n\t\t\t        cx = point.x;\n\t\t\t        cy = point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn (state.view.graph.getModel().isEdge(state.cell)) ? \n\t\t\tnew mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s))\n\t\t\t: new mxRectangle(Math.round(cx - w / 2 * s), Math.round(cy - h / 2 * s), Math.round(w * s), Math.round(h * s));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: insertStateAfter\n * \n * Inserts the given array of <mxShapes> after the given nodes in the DOM.\n * \n * Parameters:\n * \n * shapes - Array of <mxShapes> to be inserted.\n * node - Node in <drawPane> after which the shapes should be inserted.\n * htmlNode - Node in the graph container after which the shapes should be inserted that\n * will not go into the <drawPane> (eg. HTML labels without foreignObjects).\n */\nmxCellRenderer.prototype.insertStateAfter = function(state, node, htmlNode)\n{\n\tvar shapes = this.getShapesForState(state);\n\t\n\tfor (var i = 0; i < shapes.length; i++)\n\t{\n\t\tif (shapes[i] != null && shapes[i].node != null)\n\t\t{\n\t\t\tvar html = shapes[i].node.parentNode != state.view.getDrawPane() &&\n\t\t\t\tshapes[i].node.parentNode != state.view.getOverlayPane();\n\t\t\tvar temp = (html) ? htmlNode : node;\n\t\t\t\n\t\t\tif (temp != null && temp.nextSibling != shapes[i].node)\n\t\t\t{\n\t\t\t\tif (temp.nextSibling == null)\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.appendChild(shapes[i].node);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttemp.parentNode.insertBefore(shapes[i].node, temp.nextSibling);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (temp == null)\n\t\t\t{\n\t\t\t\t// Special case: First HTML node should be first sibling after canvas\n\t\t\t\tif (shapes[i].node.parentNode == state.view.graph.container)\n\t\t\t\t{\n\t\t\t\t\tvar canvas = state.view.canvas;\n\t\t\t\t\t\n\t\t\t\t\twhile (canvas != null && canvas.parentNode != state.view.graph.container)\n\t\t\t\t\t{\n\t\t\t\t\t\tcanvas = canvas.parentNode;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (canvas != null && canvas.nextSibling != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (canvas.nextSibling != shapes[i].node)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, canvas.nextSibling);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tshapes[i].node.parentNode.appendChild(shapes[i].node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (shapes[i].node.parentNode.firstChild != null && shapes[i].node.parentNode.firstChild != shapes[i].node)\n\t\t\t\t{\n\t\t\t\t\t// Inserts the node as the first child of the parent to implement the order\n\t\t\t\t\tshapes[i].node.parentNode.insertBefore(shapes[i].node, shapes[i].node.parentNode.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (html)\n\t\t\t{\n\t\t\t\thtmlNode = shapes[i].node;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tnode = shapes[i].node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [node, htmlNode];\n};\n\n/**\n * Function: getShapesForState\n * \n * Returns the <mxShapes> for the given cell state in the order in which they should\n * appear in the DOM.\n * \n * Parameters:\n * \n * state - <mxCellState> whose shapes should be returned.\n */\nmxCellRenderer.prototype.getShapesForState = function(state)\n{\n\treturn [state.shape, state.text, state.control];\n};\n\n/**\n * Function: redraw\n * \n * Updates the bounds or points and scale of the shapes for the given cell\n * state. This is called in mxGraphView.validatePoints as the last step of\n * updating all cells.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be updated.\n * force - Optional boolean that specifies if the cell should be reconfiured\n * and redrawn without any additional checks.\n * rendering - Optional boolean that specifies if the cell should actually\n * be drawn into the DOM. If this is false then redraw and/or reconfigure\n * will not be called on the shape.\n */\nmxCellRenderer.prototype.redraw = function(state, force, rendering)\n{\n\tvar shapeChanged = this.redrawShape(state, force, rendering);\n\t\n\tif (state.shape != null && (rendering == null || rendering))\n\t{\n\t\tthis.redrawLabel(state, shapeChanged);\n\t\tthis.redrawCellOverlays(state, shapeChanged);\n\t\tthis.redrawControl(state, shapeChanged);\n\t}\n};\n\n/**\n * Function: redrawShape\n * \n * Redraws the shape for the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose label should be redrawn.\n */\nmxCellRenderer.prototype.redrawShape = function(state, force, rendering)\n{\n\tvar model = state.view.graph.model;\n\tvar shapeChanged = false;\n\n\t// Forces creation of new shape if shape style has changed\n\tif (state.shape != null && state.shape.style != null && state.style != null &&\n\t\tstate.shape.style[mxConstants.STYLE_SHAPE] != state.style[mxConstants.STYLE_SHAPE])\n\t{\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n\t\n\tif (state.shape == null && state.view.graph.container != null &&\n\t\tstate.cell != state.view.currentRoot &&\n\t\t(model.isVertex(state.cell) || model.isEdge(state.cell)))\n\t{\n\t\tstate.shape = this.createShape(state);\n\t\t\n\t\tif (state.shape != null)\n\t\t{\n\t\t\tstate.shape.minSvgStrokeWidth = this.minSvgStrokeWidth;\n\t\t\tstate.shape.antiAlias = this.antiAlias;\n\t\n\t\t\tthis.createIndicatorShape(state);\n\t\t\tthis.initializeShape(state);\n\t\t\tthis.createCellOverlays(state);\n\t\t\tthis.installListeners(state);\n\t\t\t\n\t\t\t// Forces a refresh of the handler if one exists\n\t\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\t}\n\t}\n\telse if (!force && state.shape != null && (!mxUtils.equalEntries(state.shape.style,\n\t\tstate.style) || this.checkPlaceholderStyles(state)))\n\t{\n\t\tstate.shape.resetStyles();\n\t\tthis.configureShape(state);\n\t\t// LATER: Ignore update for realtime to fix reset of current gesture\n\t\tstate.view.graph.selectionCellsHandler.updateHandler(state);\n\t\tforce = true;\n\t}\n\n\tif (state.shape != null)\n\t{\n\t\t// Handles changes of the collapse icon\n\t\tthis.createControl(state);\n\t\t\n\t\t// Redraws the cell if required, ignores changes to bounds if points are\n\t\t// defined as the bounds are updated for the given points inside the shape\n\t\tif (force || this.isShapeInvalid(state, state.shape))\n\t\t{\n\t\t\tif (state.absolutePoints != null)\n\t\t\t{\n\t\t\t\tstate.shape.points = state.absolutePoints.slice();\n\t\t\t\tstate.shape.bounds = null;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.points = null;\n\t\t\t\tstate.shape.bounds = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\t}\n\n\t\t\tstate.shape.scale = state.view.scale;\n\t\t\t\n\t\t\tif (rendering == null || rendering)\n\t\t\t{\n\t\t\t\tthis.doRedrawShape(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.shape.updateBoundingBox();\n\t\t\t}\n\t\t\t\n\t\t\tshapeChanged = true;\n\t\t}\n\t}\n\n\treturn shapeChanged;\n};\n\n/**\n * Function: doRedrawShape\n * \n * Invokes redraw on the shape of the given state.\n */\nmxCellRenderer.prototype.doRedrawShape = function(state)\n{\n\tstate.shape.redraw();\n};\n\n/**\n * Function: isShapeInvalid\n * \n * Returns true if the given shape must be repainted.\n */\nmxCellRenderer.prototype.isShapeInvalid = function(state, shape)\n{\n\treturn shape.bounds == null || shape.scale != state.view.scale ||\n\t\t(state.absolutePoints == null && !shape.bounds.equals(state)) ||\n\t\t(state.absolutePoints != null && !mxUtils.equalPoints(shape.points, state.absolutePoints))\n};\n\n/**\n * Function: destroy\n * \n * Destroys the shapes associated with the given cell state.\n * \n * Parameters:\n * \n * state - <mxCellState> for which the shapes should be destroyed.\n */\nmxCellRenderer.prototype.destroy = function(state)\n{\n\tif (state.shape != null)\n\t{\n\t\tif (state.text != null)\n\t\t{\t\t\n\t\t\tstate.text.destroy();\n\t\t\tstate.text = null;\n\t\t}\n\t\t\n\t\tif (state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\tshape.destroy();\n\t\t\t});\n\t\t\t\n\t\t\tstate.overlays = null;\n\t\t}\n\n\t\tif (state.control != null)\n\t\t{\n\t\t\tstate.control.destroy();\n\t\t\tstate.control = null;\n\t\t}\n\t\t\n\t\tstate.shape.destroy();\n\t\tstate.shape = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxEdgeStyle =\n{\n\t/**\n\t * Class: mxEdgeStyle\n\t * \n\t * Provides various edge styles to be used as the values for\n\t * <mxConstants.STYLE_EDGE> in a cell style.\n\t *\n\t * Example:\n\t * \n\t * (code)\n\t * var style = stylesheet.getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.ElbowConnector;\n\t * (end)\n\t * \n\t * Sets the default edge style to <ElbowConnector>.\n\t * \n\t * Custom edge style:\n\t * \n\t * To write a custom edge style, a function must be added to the mxEdgeStyle\n\t * object as follows:\n\t * \n\t * (code)\n\t * mxEdgeStyle.MyStyle = function(state, source, target, points, result)\n\t * {\n\t *   if (source != null && target != null)\n\t *   {\n\t *     var pt = new mxPoint(target.getCenterX(), source.getCenterY());\n\t * \n\t *     if (mxUtils.contains(source, pt.x, pt.y))\n\t *     {\n\t *       pt.y = source.y + source.height;\n\t *     }\n\t * \n\t *     result.push(pt);\n\t *   }\n\t * };\n\t * (end)\n\t * \n\t * In the above example, a right angle is created using a point on the\n\t * horizontal center of the target vertex and the vertical center of the source\n\t * vertex. The code checks if that point intersects the source vertex and makes\n\t * the edge straight if it does. The point is then added into the result array,\n\t * which acts as the return value of the function.\n\t *\n\t * The new edge style should then be registered in the <mxStyleRegistry> as follows:\n\t * (code)\n\t * mxStyleRegistry.putValue('myEdgeStyle', mxEdgeStyle.MyStyle);\n\t * (end)\n\t * \n\t * The custom edge style above can now be used in a specific edge as follows:\n\t * \n\t * (code)\n\t * model.setStyle(edge, 'edgeStyle=myEdgeStyle');\n\t * (end)\n\t * \n\t * Note that the key of the <mxStyleRegistry> entry for the function should\n\t * be used in string values, unless <mxGraphView.allowEval> is true, in\n\t * which case you can also use mxEdgeStyle.MyStyle for the value in the\n\t * cell style above.\n\t * \n\t * Or it can be used for all edges in the graph as follows:\n\t * \n\t * (code)\n\t * var style = graph.getStylesheet().getDefaultEdgeStyle();\n\t * style[mxConstants.STYLE_EDGE] = mxEdgeStyle.MyStyle;\n\t * (end)\n\t * \n\t * Note that the object can be used directly when programmatically setting\n\t * the value, but the key in the <mxStyleRegistry> should be used when\n\t * setting the value via a key, value pair in a cell style.\n\t * \n\t * Function: EntityRelation\n\t * \n\t * Implements an entity relation style for edges (as used in database\n\t * schema diagrams). At the time the function is called, the result\n\t * array contains a placeholder (null) for the first absolute point,\n\t * that is, the point where the edge and source terminal are connected.\n\t * The implementation of the style then adds all intermediate waypoints\n\t * except for the last point, that is, the connection point between the\n\t * edge and the target terminal. The first ant the last point in the\n\t * result array are then replaced with mxPoints that take into account\n\t * the terminal's perimeter and next point on the edge.\n\t *\n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t */\n\t EntityRelation: function (state, source, target, points, result)\n\t {\n\t\tvar view = state.view;\n\t \tvar graph = view.graph;\n\t \tvar segment = mxUtils.getValue(state.style,\n\t \t\t\tmxConstants.STYLE_SEGMENT,\n\t \t\t\tmxConstants.ENTITY_SEGMENT) * view.scale;\n\t \t\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t \tvar isSourceLeft = false;\n\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\telse if (source != null)\n\t\t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(source, state, true, mxConstants.DIRECTION_MASK_NONE);\n\t\t\t\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisSourceLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar sourceGeometry = graph.getCellGeometry(source.cell);\n\t\t\n\t\t\t \tif (sourceGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = sourceGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (target != null)\n\t\t\t \t{\n\t\t\t \t\tisSourceLeft = target.x + target.width < source.x;\n\t\t\t \t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn;\n\t\t}\n\t \t\n\t \tvar isTargetLeft = true;\n\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\telse if (target != null)\n\t \t{\n\t\t\tvar constraint = mxUtils.getPortConstraints(target, state, false, mxConstants.DIRECTION_MASK_NONE);\n\n\t\t\tif (constraint != mxConstants.DIRECTION_MASK_NONE && constraint != mxConstants.DIRECTION_MASK_WEST +\n\t\t\t\tmxConstants.DIRECTION_MASK_EAST)\n\t\t\t{\n\t\t\t\tisTargetLeft = constraint == mxConstants.DIRECTION_MASK_WEST;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t \tvar targetGeometry = graph.getCellGeometry(target.cell);\n\t\n\t\t\t \tif (targetGeometry.relative)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = targetGeometry.x <= 0.5;\n\t\t\t \t}\n\t\t\t \telse if (source != null)\n\t\t\t \t{\n\t\t\t \t\tisTargetLeft = source.x + source.width < target.x;\n\t\t\t \t}\n\t\t\t}\n\t \t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar x0 = (isSourceLeft) ? source.x : source.x + source.width;\n\t\t\tvar y0 = view.getRoutingCenterY(source);\n\t\t\t\n\t\t\tvar xe = (isTargetLeft) ? target.x : target.x + target.width;\n\t\t\tvar ye = view.getRoutingCenterY(target);\n\t\n\t\t\tvar seg = segment;\n\t\n\t\t\tvar dx = (isSourceLeft) ? -seg : seg;\n\t\t\tvar dep = new mxPoint(x0 + dx, y0);\n\t\t\t\t\t\n\t\t\tdx = (isTargetLeft) ? -seg : seg;\n\t\t\tvar arr = new mxPoint(xe + dx, ye);\n\t\n\t\t\t// Adds intermediate points if both go out on same side\n\t\t\tif (isSourceLeft == isTargetLeft)\n\t\t\t{\n\t\t\t\tvar x = (isSourceLeft) ?\n\t\t\t\t\tMath.min(x0, xe)-segment :\n\t\t\t\t\tMath.max(x0, xe)+segment;\n\t\n\t\t\t\tresult.push(new mxPoint(x, y0));\n\t\t\t\tresult.push(new mxPoint(x, ye));\n\t\t\t}\n\t\t\telse if ((dep.x < arr.x) == isSourceLeft)\n\t\t\t{\n\t\t\t\tvar midY = y0 + (ye - y0) / 2;\n\t\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(new mxPoint(dep.x, midY));\n\t\t\t\tresult.push(new mxPoint(arr.x, midY));\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.push(dep);\n\t\t\t\tresult.push(arr);\n\t\t\t}\n\t\t}\n\t },\n\n\t /**\n\t * Function: Loop\n\t * \n\t * Implements a self-reference, aka. loop.\n\t */\n\tLoop: function (state, source, target, points, result)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tif (points != null && points.length > 0)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar pt = points[i];\n\t\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\tresult.push(new mxPoint(pt.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tvar view = state.view;\n\t\t\tvar graph = view.graph;\n\t\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tif (mxUtils.contains(source, pt.x, pt.y))\n\t\t\t\t{\n\t\t\t\t\tpt = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar x = 0;\n\t\t\tvar dx = 0;\n\t\t\tvar y = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t \tvar seg = mxUtils.getValue(state.style, mxConstants.STYLE_SEGMENT,\n\t\t \t\tgraph.gridSize) * view.scale;\n\t\t\tvar dir = mxUtils.getValue(state.style, mxConstants.STYLE_DIRECTION,\n\t\t\t\tmxConstants.DIRECTION_WEST);\n\t\t\t\n\t\t\tif (dir == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdir == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = seg;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ty = view.getRoutingCenterY(source);\n\t\t\t\tdy = seg;\n\t\t\t}\n\t\t\t\n\t\t\tif (pt == null ||\n\t\t\t\tpt.x < source.x ||\n\t\t\t\tpt.x > source.x + source.width)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tx = pt.x;\n\t\t\t\t\tdy = Math.max(Math.abs(y - pt.y), dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y - 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_SOUTH)\n\t\t\t\t\t{\n\t\t\t\t\t\ty = source.y + source.height + 2 * dx;\n\t\t\t\t\t}\n\t\t\t\t\telse if (dir == mxConstants.DIRECTION_EAST)\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x - 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tx = source.x + source.width + 2 * dy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (pt != null)\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(source);\n\t\t\t\tdx = Math.max(Math.abs(x - pt.x), dy);\n\t\t\t\ty = pt.y;\n\t\t\t\tdy = 0;\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(x - dx, y - dy));\n\t\t\tresult.push(new mxPoint(x + dx, y + dy));\n\t\t}\n\t},\n\t\n\t/**\n\t * Function: ElbowConnector\n\t * \n\t * Uses either <SideToSide> or <TopToBottom> depending on the horizontal\n\t * flag in the cell style. <SideToSide> is used if horizontal is true or\n\t * unspecified. See <EntityRelation> for a description of the\n\t * parameters.\n\t */\n\tElbowConnector: function (state, source, target, points, result)\n\t{\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\n\t\tvar vertical = false;\n\t\tvar horizontal = false;\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar left = Math.min(source.x, target.x);\n\t\t\t\tvar right = Math.max(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\n\t\t\t\tvar top = Math.min(source.y, target.y);\n\t\t\t\tvar bottom = Math.max(source.y + source.height,\n\t\t\t\t\ttarget.y + target.height);\n\n\t\t\t\tpt = state.view.transformControlPoint(state, pt);\n\t\t\t\t\t\n\t\t\t\tvertical = pt.y < top || pt.y > bottom;\n\t\t\t\thorizontal = pt.x < left || pt.x > right;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar left = Math.max(source.x, target.x);\n\t\t\t\tvar right = Math.min(source.x + source.width,\n\t\t\t\t\ttarget.x + target.width);\n\t\t\t\t\t\n\t\t\t\tvertical = left == right;\n\t\t\t\t\n\t\t\t\tif (!vertical)\n\t\t\t\t{\n\t\t\t\t\tvar top = Math.max(source.y, target.y);\n\t\t\t\t\tvar bottom = Math.min(source.y + source.height,\n\t\t\t\t\t\ttarget.y + target.height);\n\t\t\t\t\t\t\n\t\t\t\t\thorizontal = top == bottom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!horizontal && (vertical ||\n\t\t\tstate.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL))\n\t\t{\n\t\t\tmxEdgeStyle.TopToBottom(state, source, target, points, result);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxEdgeStyle.SideToSide(state, source, target, points, result);\n\t\t}\n\t},\n\n\t/**\n\t * Function: SideToSide\n\t * \n\t * Implements a vertical elbow edge. See <EntityRelation> for a description\n\t * of the parameters.\n\t */\n\tSideToSide: function (state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\t\t\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\n\t\t\tvar x = (pt != null) ? pt.x : Math.round(r + (l - r) / 2);\n\t\n\t\t\tvar y1 = view.getRoutingCenterY(source);\n\t\t\tvar y2 = view.getRoutingCenterY(target);\n\t\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tif (pt.y >= source.y && pt.y <= source.y + source.height)\n\t\t\t\t{\n\t\t\t\t\ty1 = pt.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (pt.y >= target.y && pt.y <= target.y + target.height)\n\t\t\t\t{\n\t\t\t\t\ty2 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y1) &&\n\t\t\t\t!mxUtils.contains(source, x, y1))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x,  y1));\n\t\t\t}\n\t\n\t\t\tif (!mxUtils.contains(target, x, y2) &&\n\t\t\t\t!mxUtils.contains(source, x, y2))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y2));\n\t\t\t}\n\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, x, pt.y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, x, pt.y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(x, pt.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\t\n\t\t\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(x, t + (b - t) / 2));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: TopToBottom\n\t * \n\t * Implements a horizontal elbow edge. See <EntityRelation> for a\n\t * description of the parameters.\n\t */\n\tTopToBottom: function(state, source, target, points, result)\n\t{\n\t\tvar view = state.view;\n\t\tvar pt = (points != null && points.length > 0) ? points[0] : null;\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = view.transformControlPoint(state, pt);\n\t\t}\n\t\t\n\t\tif (p0 != null)\n\t\t{\n\t\t\tsource = new mxCellState();\n\t\t\tsource.x = p0.x;\n\t\t\tsource.y = p0.y;\n\t\t}\n\t\t\n\t\tif (pe != null)\n\t\t{\n\t\t\ttarget = new mxCellState();\n\t\t\ttarget.x = pe.x;\n\t\t\ttarget.y = pe.y;\n\t\t}\n\n\t\tif (source != null && target != null)\n\t\t{\n\t\t\tvar t = Math.max(source.y, target.y);\n\t\t\tvar b = Math.min(source.y + source.height,\n\t\t\t\t\t\t\t target.y + target.height);\n\t\n\t\t\tvar x = view.getRoutingCenterX(source);\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= source.x &&\n\t\t\t\tpt.x <= source.x + source.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\t\n\t\t\tvar y = (pt != null) ? pt.y : Math.round(b + (t - b) / 2);\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (pt != null &&\n\t\t\t\tpt.x >= target.x &&\n\t\t\t\tpt.x <= target.x + target.width)\n\t\t\t{\n\t\t\t\tx = pt.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tx = view.getRoutingCenterX(target);\n\t\t\t}\n\t\t\t\n\t\t\tif (!mxUtils.contains(target, x, y) &&\n\t\t\t\t!mxUtils.contains(source, x, y))\n\t\t\t{\n\t\t\t\tresult.push(new mxPoint(x, y));\t\t\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tif (result.length == 1)\n\t\t\t{\n\t\t\t\tif (pt != null && result.length == 1)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.contains(target, pt.x, y) &&\n\t\t\t\t\t\t!mxUtils.contains(source, pt.x, y))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(new mxPoint(pt.x, y));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar l = Math.max(source.x, target.x);\n\t\t\t\t\tvar r = Math.min(source.x + source.width,\n\t\t\t\t\t\t\t target.x + target.width);\n\t\t\t\t\t\t \n\t\t\t\t\tresult.push(new mxPoint(l + (r - l) / 2, y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Function: SegmentConnector\n\t * \n\t * Implements an orthogonal edge style. Use <mxEdgeSegmentHandler>\n\t * as an interactive handler for this style.\n\t */\n\tSegmentConnector: function(state, source, target, hints, result)\n\t{\n\t\t// Creates array of all way- and terminalpoints\n\t\tvar pts = state.absolutePoints;\n\t\tvar tol = Math.max(1, state.view.scale);\n\t\t\n\t\t// Whether the first segment outgoing from the source end is horizontal\n\t\tvar lastPushed = (result.length > 0) ? result[0] : null;\n\t\tvar horizontal = true;\n\t\tvar hint = null;\n\t\t\n\t\t// Adds waypoints only if outside of tolerance\n\t\tfunction pushPoint(pt)\n\t\t{\n\t\t\tif (lastPushed == null || Math.abs(lastPushed.x - pt.x) >= tol || Math.abs(lastPushed.y - pt.y) >= tol)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t\tlastPushed = pt;\n\t\t\t}\n\t\t\t\n\t\t\treturn lastPushed;\n\t\t};\n\n\t\t// Adds the first point\n\t\tvar pt = pts[0];\n\t\t\n\t\tif (pt == null && source != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(source), state.view.getRoutingCenterY(source));\n\t\t}\n\t\telse if (pt != null)\n\t\t{\n\t\t\tpt = pt.clone();\n\t\t}\n\t\t\n\t\tpt.x = Math.round(pt.x);\n\t\tpt.y = Math.round(pt.y);\n\t\t\n\t\tvar lastInx = pts.length - 1;\n\n\t\t// Adds the waypoints\n\t\tif (hints != null && hints.length > 0)\n\t\t{\n\t\t\t// Converts all hints and removes nulls\n\t\t\tvar newHints = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\tvar tmp = state.view.transformControlPoint(state, hints[i]);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\ttmp.x = Math.round(tmp.x);\n\t\t\t\t\ttmp.y = Math.round(tmp.y);\n\t\t\t\t\tnewHints.push(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (newHints.length == 0)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\thints = newHints;\n\t\t\t\n\t\t\t// Aligns source and target hint to fixed points\n\t\t\tif (pt != null && hints[0] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[0].x - pt.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].x = pt.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[0].y - pt.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[0].y = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pe = pts[lastInx];\n\t\t\t\n\t\t\tif (pe != null && hints[hints.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(hints[hints.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(hints[hints.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\thints[hints.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\thint = hints[0];\n\n\t\t\tvar currentTerm = source;\n\t\t\tvar currentPt = pts[0];\n\t\t\tvar hozChan = false;\n\t\t\tvar vertChan = false;\n\t\t\tvar currentHint = hint;\n\t\t\t\n\t\t\tif (currentPt != null)\n\t\t\t{\n\t\t\t\tcurrentPt.x = Math.round(currentPt.x);\n\t\t\t\tcurrentPt.y = Math.round(currentPt.y);\n\t\t\t\tcurrentTerm = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Check for alignment with fixed points and with channels\n\t\t\t// at source and target segments only\n\t\t\tfor (var i = 0; i < 2; i++)\n\t\t\t{\n\t\t\t\tvar fixedVertAlign = currentPt != null && currentPt.x == currentHint.x;\n\t\t\t\tvar fixedHozAlign = currentPt != null && currentPt.y == currentHint.y;\n\t\t\t\t\n\t\t\t\tvar inHozChan = currentTerm != null && (currentHint.y >= currentTerm.y &&\n\t\t\t\t\t\tcurrentHint.y <= currentTerm.y + currentTerm.height);\n\t\t\t\tvar inVertChan = currentTerm != null && (currentHint.x >= currentTerm.x &&\n\t\t\t\t\t\tcurrentHint.x <= currentTerm.x + currentTerm.width);\n\n\t\t\t\thozChan = fixedHozAlign || (currentPt == null && inHozChan);\n\t\t\t\tvertChan = fixedVertAlign || (currentPt == null && inVertChan);\n\t\t\t\t\n\t\t\t\t// If the current hint falls in both the hor and vert channels in the case\n\t\t\t\t// of a floating port, or if the hint is exactly co-incident with a \n\t\t\t\t// fixed point, ignore the source and try to work out the orientation\n\t\t\t\t// from the target end\n\t\t\t\tif (i==0 && ((hozChan && vertChan) || (fixedVertAlign && fixedHozAlign)))\n\t\t\t\t{\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (currentPt != null && (!fixedHozAlign && !fixedVertAlign) && (inHozChan || inVertChan)) \n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = inHozChan ? false : true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\n\t\t\t\t\tif (vertChan || hozChan)\n\t\t\t\t\t{\n\t\t\t\t\t\thorizontal = hozChan;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (i == 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Work back from target end\n\t\t\t\t\t\t\thorizontal = hints.length % 2 == 0 ? hozChan : vertChan;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentTerm = target;\n\t\t\t\tcurrentPt = pts[lastInx];\n\t\t\t\t\n\t\t\t\tif (currentPt != null)\n\t\t\t\t{\n\t\t\t\t\tcurrentPt.x = Math.round(currentPt.x);\n\t\t\t\t\tcurrentPt.y = Math.round(currentPt.y);\n\t\t\t\t\tcurrentTerm = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tcurrentHint = hints[hints.length - 1];\n\t\t\t\t\n\t\t\t\tif (fixedVertAlign && fixedHozAlign)\n\t\t\t\t{\n\t\t\t\t\thints = hints.slice(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (horizontal && ((pts[0] != null && pts[0].y != hint.y) ||\n\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t(hint.y < source.y || hint.y > source.y + source.height))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t}\n\t\t\telse if (!horizontal && ((pts[0] != null && pts[0].x != hint.x) ||\n\t\t\t\t\t(pts[0] == null && source != null &&\n\t\t\t\t\t(hint.x < source.x || hint.x > source.x + source.width))))\n\t\t\t{\n\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\tif (horizontal)\n\t\t\t{\n\t\t\t\tpt.y = hint.y;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpt.x = hint.x;\n\t\t\t}\n\t\t\n\t\t\tfor (var i = 0; i < hints.length; i++)\n\t\t\t{\n\t\t\t\thorizontal = !horizontal;\n\t\t\t\thint = hints[i];\n\t\t\t\t\n//\t\t\t\tmxLog.show();\n//\t\t\t\tmxLog.debug('hint', i, hint.x, hint.y);\n\t\t\t\t\n\t\t\t\tif (horizontal)\n\t\t\t\t{\n\t\t\t\t\tpt.y = hint.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpt.x = hint.x;\n\t\t\t\t}\n\t\t\n\t\t\t\tpushPoint(pt.clone());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\thint = pt;\n\t\t\t// FIXME: First click in connect preview toggles orientation\n\t\t\thorizontal = true;\n\t\t}\n\n\t\t// Adds the last point\n\t\tpt = pts[lastInx];\n\n\t\tif (pt == null && target != null)\n\t\t{\n\t\t\tpt = new mxPoint(state.view.getRoutingCenterX(target), state.view.getRoutingCenterY(target));\n\t\t}\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt.x = Math.round(pt.x);\n\t\t\tpt.y = Math.round(pt.y);\n\t\t\t\n\t\t\tif (hint != null)\n\t\t\t{\n\t\t\t\tif (horizontal && ((pts[lastInx] != null && pts[lastInx].y != hint.y) ||\n\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t(hint.y < target.y || hint.y > target.y + target.height))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(pt.x, hint.y));\n\t\t\t\t}\n\t\t\t\telse if (!horizontal && ((pts[lastInx] != null && pts[lastInx].x != hint.x) ||\n\t\t\t\t\t\t(pts[lastInx] == null && target != null &&\n\t\t\t\t\t\t(hint.x < target.x || hint.x > target.x + target.width))))\n\t\t\t\t{\n\t\t\t\t\tpushPoint(new mxPoint(hint.x, pt.y));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the source terminal for floating ports\n\t\tif (pts[0] == null && source != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[1] != null &&\n\t\t\t\tmxUtils.contains(source, result[1].x, result[1].y))\n\t\t\t{\n\t\t\t\tresult.splice(1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes bends inside the target terminal\n\t\tif (pts[lastInx] == null && target != null)\n\t\t{\n\t\t\twhile (result.length > 1 && result[result.length - 1] != null &&\n\t\t\t\tmxUtils.contains(target, result[result.length - 1].x, result[result.length - 1].y))\n\t\t\t{\n\t\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Removes last point if inside tolerance with end point\n\t\tif (pe != null && result[result.length - 1] != null &&\n\t\t\tMath.abs(pe.x - result[result.length - 1].x) < tol &&\n\t\t\tMath.abs(pe.y - result[result.length - 1].y) < tol)\n\t\t{\n\t\t\tresult.splice(result.length - 1, 1);\n\t\t\t\n\t\t\t// Lines up second last point in result with end point\n\t\t\tif (result[result.length - 1] != null)\n\t\t\t{\n\t\t\t\tif (Math.abs(result[result.length - 1].x - pe.x) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].x = pe.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(result[result.length - 1].y - pe.y) < tol)\n\t\t\t\t{\n\t\t\t\t\tresult[result.length - 1].y = pe.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\n\torthBuffer: 10,\n\t\n\torthPointsFallback: true,\n\n\tdirVectors: [ [ -1, 0 ],\n\t\t\t[ 0, -1 ], [ 1, 0 ], [ 0, 1 ], [ -1, 0 ], [ 0, -1 ], [ 1, 0 ] ],\n\n\twayPoints1: [ [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0], [ 0, 0],  [ 0, 0],\n\t              [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0], [ 0, 0],  [ 0, 0] ],\n\n\troutePatterns: [\n\t\t[ [ 513, 2308, 2081, 2562 ], [ 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 513, 1090, 514, 2564, 2184, 2562 ],\n\t\t\t[ 513, 2308, 2561, 1090, 514, 2568, 2308 ] ],\n\t[ [ 514, 1057, 513, 2308, 2081, 2562 ], [ 514, 2184, 2114, 2561 ],\n\t\t\t[ 514, 2184, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 514, 1057, 513, 2568, 2308, 2561 ] ],\n\t[ [ 1090, 514, 1057, 513, 2308, 2081, 2562 ], [ 2114, 2561 ],\n\t\t\t[ 1090, 2562, 1057, 513, 2564, 2184 ],\n\t\t\t[ 1090, 514, 1057, 513, 2308, 2561, 2568 ] ],\n\t[ [ 2081, 2562 ], [ 1057, 513, 1090, 514, 2184, 2114, 2561 ],\n\t\t\t[ 1057, 513, 1090, 514, 2184, 2562, 2564 ],\n\t\t\t[ 1057, 2561, 1090, 514, 2568, 2308 ] ] ],\n\t\n\tinlineRoutePatterns: [\n\t\t\t[ null, [ 2114, 2568 ], null, null ],\n\t\t\t[ null, [ 514, 2081, 2114, 2568 ] , null, null ],\n\t\t\t[ null, [ 2114, 2561 ], null, null ],\n\t\t\t[ [ 2081, 2562 ], [ 1057, 2114, 2568 ],\n\t\t\t\t\t[ 2184, 2562 ],\n\t\t\t\t\tnull ] ],\n\tvertexSeperations: [],\n\n\tlimits: [\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n\t       [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ],\n\n\tLEFT_MASK: 32,\n\n\tTOP_MASK: 64,\n\n\tRIGHT_MASK: 128,\n\n\tBOTTOM_MASK: 256,\n\n\tLEFT: 1,\n\n\tTOP: 2,\n\n\tRIGHT: 4,\n\n\tBOTTOM: 8,\n\n\t// TODO remove magic numbers\n\tSIDE_MASK: 480,\n\t//mxEdgeStyle.LEFT_MASK | mxEdgeStyle.TOP_MASK | mxEdgeStyle.RIGHT_MASK\n\t//| mxEdgeStyle.BOTTOM_MASK,\n\n\tCENTER_MASK: 512,\n\n\tSOURCE_MASK: 1024,\n\n\tTARGET_MASK: 2048,\n\n\tVERTEX_MASK: 3072,\n\t// mxEdgeStyle.SOURCE_MASK | mxEdgeStyle.TARGET_MASK,\n\t\n\tgetJettySize: function(state, source, target, points, isSource)\n\t{\n\t\tvar value = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_SOURCE_JETTY_SIZE :\n\t\t\tmxConstants.STYLE_TARGET_JETTY_SIZE, mxUtils.getValue(state.style,\n\t\t\t\t\tmxConstants.STYLE_JETTY_SIZE, mxEdgeStyle.orthBuffer));\n\t\t\n\t\tif (value == 'auto')\n\t\t{\n\t\t\t// Computes the automatic jetty size\n\t\t\tvar type = mxUtils.getValue(state.style, (isSource) ? mxConstants.STYLE_STARTARROW : mxConstants.STYLE_ENDARROW, mxConstants.NONE);\n\t\t\t\n\t\t\tif (type != mxConstants.NONE)\n\t\t\t{\n\t\t\t\tvar size = mxUtils.getNumber(state.style, (isSource) ? mxConstants.STYLE_STARTSIZE : mxConstants.STYLE_ENDSIZE, mxConstants.DEFAULT_MARKERSIZE);\n\t\t\t\tvalue = Math.max(2, Math.ceil((size + mxEdgeStyle.orthBuffer) / mxEdgeStyle.orthBuffer)) * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = 2 * mxEdgeStyle.orthBuffer;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn value;\n\t},\n\n\t/**\n\t * Function: OrthConnector\n\t * \n\t * Implements a local orthogonal router between the given\n\t * cells.\n\t * \n\t * Parameters:\n\t * \n\t * state - <mxCellState> that represents the edge to be updated.\n\t * source - <mxCellState> that represents the source terminal.\n\t * target - <mxCellState> that represents the target terminal.\n\t * points - List of relative control points.\n\t * result - Array of <mxPoints> that represent the actual points of the\n\t * edge.\n\t * \n\t */\n\tOrthConnector: function(state, source, target, points, result)\n\t{\n\t\tvar graph = state.view.graph;\n\t\tvar sourceEdge = source == null ? false : graph.getModel().isEdge(source.cell);\n\t\tvar targetEdge = target == null ? false : graph.getModel().isEdge(target.cell);\n\n\t\tvar pts = state.absolutePoints;\n\t\tvar p0 = pts[0];\n\t\tvar pe = pts[pts.length-1];\n\n\t\tvar sourceX = source != null ? source.x : p0.x;\n\t\tvar sourceY = source != null ? source.y : p0.y;\n\t\tvar sourceWidth = source != null ? source.width : 0;\n\t\tvar sourceHeight = source != null ? source.height : 0;\n\t\t\n\t\tvar targetX = target != null ? target.x : pe.x;\n\t\tvar targetY = target != null ? target.y : pe.y;\n\t\tvar targetWidth = target != null ? target.width : 0;\n\t\tvar targetHeight = target != null ? target.height : 0;\n\n\t\tvar scaledSourceBuffer = state.view.scale * mxEdgeStyle.getJettySize(state, source, target, points, true);\n\t\tvar scaledTargetBuffer = state.view.scale * mxEdgeStyle.getJettySize(state, source, target, points, false);\n\t\t\n\t\t// Workaround for loop routing within buffer zone\n\t\tif (source != null && target == source)\n\t\t{\n\t\t\tscaledTargetBuffer = Math.max(scaledSourceBuffer, scaledTargetBuffer);\n\t\t\tscaledSourceBuffer = scaledTargetBuffer;\n\t\t}\n\t\t\n\t\tvar totalBuffer = scaledTargetBuffer + scaledSourceBuffer;\n\t\tvar tooShort = false;\n\t\t\n\t\t// Checks minimum distance for fixed points and falls back to segment connector\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\n\t\t\ttooShort = dx * dx + dy * dy < totalBuffer * totalBuffer;\n\t\t}\n\n\t\tif (tooShort || (mxEdgeStyle.orthPointsFallback && (points != null &&\n\t\t\tpoints.length > 0)) || sourceEdge || targetEdge)\n\t\t{\n\t\t\tmxEdgeStyle.SegmentConnector(state, source, target, points, result);\n\t\t\t\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine the side(s) of the source and target vertices\n\t\t// that the edge may connect to\n\t\t// portConstraint [source, target]\n\t\tvar portConstraint = [mxConstants.DIRECTION_MASK_ALL, mxConstants.DIRECTION_MASK_ALL];\n\t\tvar rotation = 0;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tportConstraint[0] = mxUtils.getPortConstraints(source, state, true, \n\t\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(source.style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(sourceX, sourceY, sourceWidth, sourceHeight), rotation);\n\t\t\t\tsourceX = newRect.x; \n\t\t\t\tsourceY = newRect.y;\n\t\t\t\tsourceWidth = newRect.width;\n\t\t\t\tsourceHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\tif (target != null)\n\t\t{\n\t\t\tportConstraint[1] = mxUtils.getPortConstraints(target, state, false,\n\t\t\t\tmxConstants.DIRECTION_MASK_ALL);\n\t\t\trotation = mxUtils.getValue(target.style, mxConstants.STYLE_ROTATION, 0);\n\n\t\t\tif (rotation != 0)\n\t\t\t{\n\t\t\t\tvar newRect = mxUtils.getBoundingBox(new mxRectangle(targetX, targetY, targetWidth, targetHeight), rotation);\n\t\t\t\ttargetX = newRect.x;\n\t\t\t\ttargetY = newRect.y;\n\t\t\t\ttargetWidth = newRect.width;\n\t\t\t\ttargetHeight = newRect.height;\n\t\t\t}\n\t\t}\n\n\t\t// Avoids floating point number errors\n\t\tsourceX = Math.round(sourceX * 10) / 10;\n\t\tsourceY = Math.round(sourceY * 10) / 10;\n\t\tsourceWidth = Math.round(sourceWidth * 10) / 10;\n\t\tsourceHeight = Math.round(sourceHeight * 10) / 10;\n\t\t\n\t\ttargetX = Math.round(targetX * 10) / 10;\n\t\ttargetY = Math.round(targetY * 10) / 10;\n\t\ttargetWidth = Math.round(targetWidth * 10) / 10;\n\t\ttargetHeight = Math.round(targetHeight * 10) / 10;\n\t\t\n\t\tvar dir = [0, 0];\n\n\t\t// Work out which faces of the vertices present against each other\n\t\t// in a way that would allow a 3-segment connection if port constraints\n\t\t// permitted.\n\t\t// geo -> [source, target] [x, y, width, height]\n\t\tvar geo = [ [sourceX, sourceY, sourceWidth, sourceHeight] ,\n\t\t            [targetX, targetY, targetWidth, targetHeight] ];\n\t\tvar buffer = [scaledSourceBuffer, scaledTargetBuffer];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tmxEdgeStyle.limits[i][1] = geo[i][0] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][2] = geo[i][1] - buffer[i];\n\t\t\tmxEdgeStyle.limits[i][4] = geo[i][0] + geo[i][2] + buffer[i];\n\t\t\tmxEdgeStyle.limits[i][8] = geo[i][1] + geo[i][3] + buffer[i];\n\t\t}\n\t\t\n\t\t// Work out which quad the target is in\n\t\tvar sourceCenX = geo[0][0] + geo[0][2] / 2.0;\n\t\tvar sourceCenY = geo[0][1] + geo[0][3] / 2.0;\n\t\tvar targetCenX = geo[1][0] + geo[1][2] / 2.0;\n\t\tvar targetCenY = geo[1][1] + geo[1][3] / 2.0;\n\t\t\n\t\tvar dx = sourceCenX - targetCenX;\n\t\tvar dy = sourceCenY - targetCenY;\n\n\t\tvar quad = 0;\n\n\t\tif (dx < 0)\n\t\t{\n\t\t\tif (dy < 0)\n\t\t\t{\n\t\t\t\tquad = 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tquad = 1;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dy <= 0)\n\t\t\t{\n\t\t\t\tquad = 3;\n\t\t\t\t\n\t\t\t\t// Special case on x = 0 and negative y\n\t\t\t\tif (dx == 0)\n\t\t\t\t{\n\t\t\t\t\tquad = 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Check for connection constraints\n\t\tvar currentTerm = null;\n\t\t\n\t\tif (source != null)\n\t\t{\n\t\t\tcurrentTerm = p0;\n\t\t}\n\n\t\tvar constraint = [ [0.5, 0.5] , [0.5, 0.5] ];\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (currentTerm != null)\n\t\t\t{\n\t\t\t\tconstraint[i][0] = (currentTerm.x - geo[i][0]) / geo[i][2];\n\t\t\t\t\n\t\t\t\tif (Math.abs(currentTerm.x - geo[i][0]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_WEST;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.x - geo[i][0] - geo[i][2]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_EAST;\n\t\t\t\t}\n\n\t\t\t\tconstraint[i][1] = (currentTerm.y - geo[i][1]) / geo[i][3];\n\n\t\t\t\tif (Math.abs(currentTerm.y - geo[i][1]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_NORTH;\n\t\t\t\t}\n\t\t\t\telse if (Math.abs(currentTerm.y - geo[i][1] - geo[i][3]) <= 1)\n\t\t\t\t{\n\t\t\t\t\tdir[i] = mxConstants.DIRECTION_MASK_SOUTH;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentTerm = null;\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tcurrentTerm = pe;\n\t\t\t}\n\t\t}\n\n\t\tvar sourceTopDist = geo[0][1] - (geo[1][1] + geo[1][3]);\n\t\tvar sourceLeftDist = geo[0][0] - (geo[1][0] + geo[1][2]);\n\t\tvar sourceBottomDist = geo[1][1] - (geo[0][1] + geo[0][3]);\n\t\tvar sourceRightDist = geo[1][0] - (geo[0][0] + geo[0][2]);\n\n\t\tmxEdgeStyle.vertexSeperations[1] = Math.max(sourceLeftDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[2] = Math.max(sourceTopDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[4] = Math.max(sourceBottomDist - totalBuffer, 0);\n\t\tmxEdgeStyle.vertexSeperations[3] = Math.max(sourceRightDist - totalBuffer, 0);\n\t\t\t\t\n\t\t//==============================================================\n\t\t// Start of source and target direction determination\n\n\t\t// Work through the preferred orientations by relative positioning\n\t\t// of the vertices and list them in preferred and available order\n\t\t\n\t\tvar dirPref = [];\n\t\tvar horPref = [];\n\t\tvar vertPref = [];\n\n\t\thorPref[0] = (sourceLeftDist >= sourceRightDist) ? mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t: mxConstants.DIRECTION_MASK_EAST;\n\t\tvertPref[0] = (sourceTopDist >= sourceBottomDist) ? mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t: mxConstants.DIRECTION_MASK_SOUTH;\n\n\t\thorPref[1] = mxUtils.reversePortConstraints(horPref[0]);\n\t\tvertPref[1] = mxUtils.reversePortConstraints(vertPref[0]);\n\t\t\n\t\tvar preferredHorizDist = sourceLeftDist >= sourceRightDist ? sourceLeftDist\n\t\t\t\t: sourceRightDist;\n\t\tvar preferredVertDist = sourceTopDist >= sourceBottomDist ? sourceTopDist\n\t\t\t\t: sourceBottomDist;\n\n\t\tvar prefOrdering = [ [0, 0] , [0, 0] ];\n\t\tvar preferredOrderSet = false;\n\n\t\t// If the preferred port isn't available, switch it\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((horPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\thorPref[i] = mxUtils.reversePortConstraints(horPref[i]);\n\t\t\t}\n\n\t\t\tif ((vertPref[i] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tvertPref[i] = mxUtils\n\t\t\t\t\t\t.reversePortConstraints(vertPref[i]);\n\t\t\t}\n\n\t\t\tprefOrdering[i][0] = vertPref[i];\n\t\t\tprefOrdering[i][1] = horPref[i];\n\t\t}\n\n\t\tif (preferredVertDist > 0\n\t\t\t\t&& preferredHorizDist > 0)\n\t\t{\n\t\t\t// Possibility of two segment edge connection\n\t\t\tif (((horPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((vertPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t\telse if (((vertPref[0] & portConstraint[0]) > 0)\n\t\t\t\t\t&& ((horPref[1] & portConstraint[1]) > 0))\n\t\t\t{\n\t\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\t\tpreferredOrderSet = true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (preferredVertDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = vertPref[0];\n\t\t\tprefOrdering[0][1] = horPref[0];\n\t\t\tprefOrdering[1][0] = vertPref[1];\n\t\t\tprefOrdering[1][1] = horPref[1];\n\t\t\tpreferredOrderSet = true;\n\n\t\t}\n\t\t\n\t\tif (preferredHorizDist > 0 && !preferredOrderSet)\n\t\t{\n\t\t\tprefOrdering[0][0] = horPref[0];\n\t\t\tprefOrdering[0][1] = vertPref[0];\n\t\t\tprefOrdering[1][0] = horPref[1];\n\t\t\tprefOrdering[1][1] = vertPref[1];\n\t\t\tpreferredOrderSet = true;\n\t\t}\n\n\t\t// The source and target prefs are now an ordered list of\n\t\t// the preferred port selections\n\t\t// It the list can contain gaps, compact it\n\n\t\tfor (var i = 0; i < 2; i++)\n\t\t{\n\t\t\tif (dir[i] != 0x0)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ((prefOrdering[i][0] & portConstraint[i]) == 0)\n\t\t\t{\n\t\t\t\tprefOrdering[i][0] = prefOrdering[i][1];\n\t\t\t}\n\n\t\t\tdirPref[i] = prefOrdering[i][0] & portConstraint[i];\n\t\t\tdirPref[i] |= (prefOrdering[i][1] & portConstraint[i]) << 8;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][i] & portConstraint[i]) << 16;\n\t\t\tdirPref[i] |= (prefOrdering[1 - i][1 - i] & portConstraint[i]) << 24;\n\n\t\t\tif ((dirPref[i] & 0xF) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = dirPref[i] << 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF00) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xF) | dirPref[i] >> 8;\n\t\t\t}\n\t\t\t\n\t\t\tif ((dirPref[i] & 0xF0000) == 0)\n\t\t\t{\n\t\t\t\tdirPref[i] = (dirPref[i] & 0xFFFF)\n\t\t\t\t\t\t| ((dirPref[i] & 0xF000000) >> 8);\n\t\t\t}\n\n\t\t\tdir[i] = dirPref[i] & 0xF;\n\n\t\t\tif (portConstraint[i] == mxConstants.DIRECTION_MASK_WEST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_NORTH\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_EAST\n\t\t\t\t\t|| portConstraint[i] == mxConstants.DIRECTION_MASK_SOUTH)\n\t\t\t{\n\t\t\t\tdir[i] = portConstraint[i];\n\t\t\t}\n\t\t}\n\n\t\t//==============================================================\n\t\t// End of source and target direction determination\n\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\t\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar routePattern = mxEdgeStyle.routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tmxEdgeStyle.wayPoints1[0][0] = geo[0][0];\n\t\tmxEdgeStyle.wayPoints1[0][1] = geo[0][1];\n\n\t\tswitch (dir[0])\n\t\t{\n\t\t\tcase mxConstants.DIRECTION_MASK_WEST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] -= scaledSourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_SOUTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += geo[0][3] + scaledSourceBuffer;\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_EAST:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += geo[0][2] + scaledSourceBuffer;\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] += constraint[0][1] * geo[0][3];\n\t\t\t\tbreak;\n\t\t\tcase mxConstants.DIRECTION_MASK_NORTH:\n\t\t\t\tmxEdgeStyle.wayPoints1[0][0] += constraint[0][0] * geo[0][2];\n\t\t\t\tmxEdgeStyle.wayPoints1[0][1] -= scaledSourceBuffer;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tvar currentIndex = 0;\n\n\t\t// Orientation, 0 horizontal, 1 vertical\n\t\tvar lastOrientation = (dir[0] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t: 1;\n\t\tvar initialOrientation = lastOrientation;\n\t\tvar currentOrientation = 0;\n\n\t\tfor (var i = 0; i < routePattern.length; i++)\n\t\t{\n\t\t\tvar nextDirection = routePattern[i] & 0xF;\n\n\t\t\t// Rotate the index of this direction by the quad\n\t\t\t// to get the real direction\n\t\t\tvar directionIndex = nextDirection == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t\t: nextDirection;\n\n\t\t\tdirectionIndex += quad;\n\n\t\t\tif (directionIndex > 4)\n\t\t\t{\n\t\t\t\tdirectionIndex -= 4;\n\t\t\t}\n\n\t\t\tvar direction = mxEdgeStyle.dirVectors[directionIndex - 1];\n\n\t\t\tcurrentOrientation = (directionIndex % 2 > 0) ? 0 : 1;\n\t\t\t// Only update the current index if the point moved\n\t\t\t// in the direction of the current segment move,\n\t\t\t// otherwise the same point is moved until there is \n\t\t\t// a segment direction change\n\t\t\tif (currentOrientation != lastOrientation)\n\t\t\t{\n\t\t\t\tcurrentIndex++;\n\t\t\t\t// Copy the previous way point into the new one\n\t\t\t\t// We can't base the new position on index - 1\n\t\t\t\t// because sometime elbows turn out not to exist,\n\t\t\t\t// then we'd have to rewind.\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] = mxEdgeStyle.wayPoints1[currentIndex - 1][0];\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] = mxEdgeStyle.wayPoints1[currentIndex - 1][1];\n\t\t\t}\n\n\t\t\tvar tar = (routePattern[i] & mxEdgeStyle.TARGET_MASK) > 0;\n\t\t\tvar sou = (routePattern[i] & mxEdgeStyle.SOURCE_MASK) > 0;\n\t\t\tvar side = (routePattern[i] & mxEdgeStyle.SIDE_MASK) >> 5;\n\t\t\tside = side << quad;\n\n\t\t\tif (side > 0xF)\n\t\t\t{\n\t\t\t\tside = side >> 4;\n\t\t\t}\n\n\t\t\tvar center = (routePattern[i] & mxEdgeStyle.CENTER_MASK) > 0;\n\n\t\t\tif ((sou || tar) && side < 9)\n\t\t\t{\n\t\t\t\tvar limit = 0;\n\t\t\t\tvar souTar = sou ? 0 : 1;\n\n\t\t\t\tif (center && currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][0] + constraint[souTar][0] * geo[souTar][2];\n\t\t\t\t}\n\t\t\t\telse if (center)\n\t\t\t\t{\n\t\t\t\t\tlimit = geo[souTar][1] + constraint[souTar][1] * geo[souTar][3];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tlimit = mxEdgeStyle.limits[souTar][side];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (currentOrientation == 0)\n\t\t\t\t{\n\t\t\t\t\tvar lastX = mxEdgeStyle.wayPoints1[currentIndex][0];\n\t\t\t\t\tvar deltaX = (limit - lastX) * direction[0];\n\n\t\t\t\t\tif (deltaX > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t\t\t* deltaX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar lastY = mxEdgeStyle.wayPoints1[currentIndex][1];\n\t\t\t\t\tvar deltaY = (limit - lastY) * direction[1];\n\n\t\t\t\t\tif (deltaY > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t\t\t* deltaY;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (center)\n\t\t\t{\n\t\t\t\t// Which center we're travelling to depend on the current direction\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][0] += direction[0]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t\tmxEdgeStyle.wayPoints1[currentIndex][1] += direction[1]\n\t\t\t\t\t\t* Math.abs(mxEdgeStyle.vertexSeperations[directionIndex] / 2);\n\t\t\t}\n\n\t\t\tif (currentIndex > 0\n\t\t\t\t\t&& mxEdgeStyle.wayPoints1[currentIndex][currentOrientation] == mxEdgeStyle.wayPoints1[currentIndex - 1][currentOrientation])\n\t\t\t{\n\t\t\t\tcurrentIndex--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlastOrientation = currentOrientation;\n\t\t\t}\n\t\t}\n\n\t\tfor (var i = 0; i <= currentIndex; i++)\n\t\t{\n\t\t\tif (i == currentIndex)\n\t\t\t{\n\t\t\t\t// Last point can cause last segment to be in\n\t\t\t\t// same direction as jetty/approach. If so,\n\t\t\t\t// check the number of points is consistent\n\t\t\t\t// with the relative orientation of source and target\n\t\t\t\t// jx. Same orientation requires an even\n\t\t\t\t// number of turns (points), different requires\n\t\t\t\t// odd.\n\t\t\t\tvar targetOrientation = (dir[1] & (mxConstants.DIRECTION_MASK_EAST | mxConstants.DIRECTION_MASK_WEST)) > 0 ? 0\n\t\t\t\t\t\t: 1;\n\t\t\t\tvar sameOrient = targetOrientation == initialOrientation ? 0 : 1;\n\n\t\t\t\t// (currentIndex + 1) % 2 is 0 for even number of points,\n\t\t\t\t// 1 for odd\n\t\t\t\tif (sameOrient != (currentIndex + 1) % 2)\n\t\t\t\t{\n\t\t\t\t\t// The last point isn't required\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult.push(new mxPoint(Math.round(mxEdgeStyle.wayPoints1[i][0]), Math.round(mxEdgeStyle.wayPoints1[i][1])));\n\t\t}\n\t\t\n\t\t// Removes duplicates\n\t\tvar index = 1;\n\t\t\n\t\twhile (index < result.length)\n\t\t{\n\t\t\tif (result[index - 1] == null || result[index] == null ||\n\t\t\t\tresult[index - 1].x != result[index].x ||\n\t\t\t\tresult[index - 1].y != result[index].y)\n\t\t\t{\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\t\n\tgetRoutePattern: function(dir, quad, dx, dy)\n\t{\n\t\tvar sourceIndex = dir[0] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[0];\n\t\tvar targetIndex = dir[1] == mxConstants.DIRECTION_MASK_EAST ? 3\n\t\t\t\t: dir[1];\n\n\t\tsourceIndex -= quad;\n\t\ttargetIndex -= quad;\n\n\t\tif (sourceIndex < 1)\n\t\t{\n\t\t\tsourceIndex += 4;\n\t\t}\n\t\tif (targetIndex < 1)\n\t\t{\n\t\t\ttargetIndex += 4;\n\t\t}\n\n\t\tvar result = routePatterns[sourceIndex - 1][targetIndex - 1];\n\n\t\tif (dx == 0 || dy == 0)\n\t\t{\n\t\t\tif (inlineRoutePatterns[sourceIndex - 1][targetIndex - 1] != null)\n\t\t\t{\n\t\t\t\tresult = inlineRoutePatterns[sourceIndex - 1][targetIndex - 1];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxStyleRegistry =\n{\n\t/**\n\t * Class: mxStyleRegistry\n\t *\n\t * Singleton class that acts as a global converter from string to object values\n\t * in a style. This is currently only used to perimeters and edge styles.\n\t * \n\t * Variable: values\n\t *\n\t * Maps from strings to objects.\n\t */\n\tvalues: [],\n\n\t/**\n\t * Function: putValue\n\t *\n\t * Puts the given object into the registry under the given name.\n\t */\n\tputValue: function(name, obj)\n\t{\n\t\tmxStyleRegistry.values[name] = obj;\n\t},\n\n\t/**\n\t * Function: getValue\n\t *\n\t * Returns the value associated with the given name.\n\t */\n\tgetValue: function(name)\n\t{\n\t\treturn mxStyleRegistry.values[name];\n\t},\n\t\n\t/**\n\t * Function: getName\n\t * \n\t * Returns the name for the given value.\n\t */\n\tgetName: function(value)\n\t{\n\t\tfor (var key in mxStyleRegistry.values)\n\t\t{\n\t\t\tif (mxStyleRegistry.values[key] == value)\n\t\t\t{\n\t\t\t\treturn key;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n};\n\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ELBOW, mxEdgeStyle.ElbowConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ENTITY_RELATION, mxEdgeStyle.EntityRelation);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_LOOP, mxEdgeStyle.Loop);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SIDETOSIDE, mxEdgeStyle.SideToSide);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_TOPTOBOTTOM, mxEdgeStyle.TopToBottom);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_ORTHOGONAL, mxEdgeStyle.OrthConnector);\nmxStyleRegistry.putValue(mxConstants.EDGESTYLE_SEGMENT, mxEdgeStyle.SegmentConnector);\n\nmxStyleRegistry.putValue(mxConstants.PERIMETER_ELLIPSE, mxPerimeter.EllipsePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RECTANGLE, mxPerimeter.RectanglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_RHOMBUS, mxPerimeter.RhombusPerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_TRIANGLE, mxPerimeter.TrianglePerimeter);\nmxStyleRegistry.putValue(mxConstants.PERIMETER_HEXAGON, mxPerimeter.HexagonPerimeter);\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphView\n *\n * Extends <mxEventSource> to implement a view for a graph. This class is in\n * charge of computing the absolute coordinates for the relative child\n * geometries, the points for perimeters and edge styles and keeping them\n * cached in <mxCellStates> for faster retrieval. The states are updated\n * whenever the model or the view state (translate, scale) changes. The scale\n * and translate are honoured in the bounds.\n * \n * Event: mxEvent.UNDO\n * \n * Fires after the root was changed in <setCurrentRoot>. The <code>edit</code>\n * property contains the <mxUndoableEdit> which contains the\n * <mxCurrentRootChange>.\n * \n * Event: mxEvent.SCALE_AND_TRANSLATE\n * \n * Fires after the scale and translate have been changed in <scaleAndTranslate>.\n * The <code>scale</code>, <code>previousScale</code>, <code>translate</code>\n * and <code>previousTranslate</code> properties contain the new and previous\n * scale and translate, respectively.\n * \n * Event: mxEvent.SCALE\n * \n * Fires after the scale was changed in <setScale>. The <code>scale</code> and\n * <code>previousScale</code> properties contain the new and previous scale.\n * \n * Event: mxEvent.TRANSLATE\n * \n * Fires after the translate was changed in <setTranslate>. The\n * <code>translate</code> and <code>previousTranslate</code> properties contain\n * the new and previous value for translate.\n * \n * Event: mxEvent.DOWN and mxEvent.UP\n * \n * Fire if the current root is changed by executing an <mxCurrentRootChange>.\n * The event name depends on the location of the root in the cell hierarchy\n * with respect to the current root. The <code>root</code> and\n * <code>previous</code> properties contain the new and previous root,\n * respectively.\n * \n * Constructor: mxGraphView\n *\n * Constructs a new view for the given <mxGraph>.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphView(graph)\n{\n\tthis.graph = graph;\n\tthis.translate = new mxPoint();\n\tthis.graphBounds = new mxRectangle();\n\tthis.states = new mxDictionary();\n};\n\n/**\n * Extends mxEventSource.\n */\nmxGraphView.prototype = new mxEventSource();\nmxGraphView.prototype.constructor = mxGraphView;\n\n/**\n *\n */\nmxGraphView.prototype.EMPTY_POINT = new mxPoint();\n\n/**\n * Variable: doneResource\n * \n * Specifies the resource key for the status message after a long operation.\n * If the resource for this key does not exist then the value is used as\n * the status message. Default is 'done'.\n */\nmxGraphView.prototype.doneResource = (mxClient.language != 'none') ? 'done' : '';\n\n/**\n * Function: updatingDocumentResource\n *\n * Specifies the resource key for the status message while the document is\n * being updated. If the resource for this key does not exist then the\n * value is used as the status message. Default is 'updatingDocument'.\n */\nmxGraphView.prototype.updatingDocumentResource = (mxClient.language != 'none') ? 'updatingDocument' : '';\n\n/**\n * Variable: allowEval\n * \n * Specifies if string values in cell styles should be evaluated using\n * <mxUtils.eval>. This will only be used if the string values can't be mapped\n * to objects using <mxStyleRegistry>. Default is false. NOTE: Enabling this\n * switch carries a possible security risk.\n */\nmxGraphView.prototype.allowEval = false;\n\n/**\n * Variable: captureDocumentGesture\n * \n * Specifies if a gesture should be captured when it goes outside of the\n * graph container. Default is true.\n */\nmxGraphView.prototype.captureDocumentGesture = true;\n\n/**\n * Variable: optimizeVmlReflows\n * \n * Specifies if the <canvas> should be hidden while rendering in IE8 standards\n * mode and quirks mode. This will significantly improve rendering performance.\n * Default is true.\n */\nmxGraphView.prototype.optimizeVmlReflows = true;\n\n/**\n * Variable: rendering\n * \n * Specifies if shapes should be created, updated and destroyed using the\n * methods of <mxCellRenderer> in <graph>. Default is true.\n */\nmxGraphView.prototype.rendering = true;\n\n/**\n * Variable: graph\n *\n * Reference to the enclosing <mxGraph>.\n */\nmxGraphView.prototype.graph = null;\n\n/**\n * Variable: currentRoot\n *\n * <mxCell> that acts as the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.currentRoot = null;\n\n/**\n * Variable: graphBounds\n *\n * <mxRectangle> that caches the scales, translated bounds of the current view.\n */\nmxGraphView.prototype.graphBounds = null;\n\n/**\n * Variable: scale\n * \n * Specifies the scale. Default is 1 (100%).\n */\nmxGraphView.prototype.scale = 1;\n\t\n/**\n * Variable: translate\n *\n * <mxPoint> that specifies the current translation. Default is a new\n * empty <mxPoint>.\n */\nmxGraphView.prototype.translate = null;\n\n/**\n * Variable: states\n * \n * <mxDictionary> that maps from cell IDs to <mxCellStates>.\n */\nmxGraphView.prototype.states = null;\n\n/**\n * Variable: updateStyle\n * \n * Specifies if the style should be updated in each validation step. If this\n * is false then the style is only updated if the state is created or if the\n * style of the cell was changed. Default is false.\n */\nmxGraphView.prototype.updateStyle = false;\n\n/**\n * Variable: lastNode\n * \n * During validation, this contains the last DOM node that was processed.\n */\nmxGraphView.prototype.lastNode = null;\n\n/**\n * Variable: lastHtmlNode\n * \n * During validation, this contains the last HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastHtmlNode = null;\n\n/**\n * Variable: lastForegroundNode\n * \n * During validation, this contains the last edge's DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundNode = null;\n\n/**\n * Variable: lastForegroundHtmlNode\n * \n * During validation, this contains the last edge HTML DOM node that was processed.\n */\nmxGraphView.prototype.lastForegroundHtmlNode = null;\n\n/**\n * Function: getGraphBounds\n *\n * Returns <graphBounds>.\n */\nmxGraphView.prototype.getGraphBounds = function()\n{\n\treturn this.graphBounds;\n};\n\n/**\n * Function: setGraphBounds\n *\n * Sets <graphBounds>.\n */\nmxGraphView.prototype.setGraphBounds = function(value)\n{\n\tthis.graphBounds = value;\n};\n\n/**\n * Function: getBounds\n * \n * Returns the union of all <mxCellStates> for the given array of <mxCells>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounds should be returned.\n */\nmxGraphView.prototype.getBounds = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(state);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(state);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: setCurrentRoot\n *\n * Sets and returns the current root and fires an <undo> event before\n * calling <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * root - <mxCell> that specifies the root of the displayed cell hierarchy.\n */\nmxGraphView.prototype.setCurrentRoot = function(root)\n{\n\tif (this.currentRoot != root)\n\t{\n\t\tvar change = new mxCurrentRootChange(this, root);\n\t\tchange.execute();\n\t\tvar edit = new mxUndoableEdit(this, false);\n\t\tedit.add(change);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UNDO, 'edit', edit));\n\t\tthis.graph.sizeDidChange();\n\t}\n\t\n\treturn root;\n};\n\n/**\n * Function: scaleAndTranslate\n *\n * Sets the scale and translation and fires a <scale> and <translate> event\n * before calling <revalidate> followed by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * scale - Decimal value that specifies the new scale (1 is 100%).\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.scaleAndTranslate = function(scale, dx, dy)\n{\n\tvar previousScale = this.scale;\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.scale != scale || this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.scale = scale;\n\t\t\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE_AND_TRANSLATE,\n\t\t'scale', scale, 'previousScale', previousScale,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: getScale\n * \n * Returns the <scale>.\n */\nmxGraphView.prototype.getScale = function()\n{\n\treturn this.scale;\n};\n\n/**\n * Function: setScale\n *\n * Sets the scale and fires a <scale> event before calling <revalidate> followed\n * by <mxGraph.sizeDidChange>.\n *\n * Parameters:\n *\n * value - Decimal value that specifies the new scale (1 is 100%).\n */\nmxGraphView.prototype.setScale = function(value)\n{\n\tvar previousScale = this.scale;\n\t\n\tif (this.scale != value)\n\t{\n\t\tthis.scale = value;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.SCALE,\n\t\t'scale', value, 'previousScale', previousScale));\n};\n\n/**\n * Function: getTranslate\n * \n * Returns the <translate>.\n */\nmxGraphView.prototype.getTranslate = function()\n{\n\treturn this.translate;\n};\n\n/**\n * Function: setTranslate\n *\n * Sets the translation and fires a <translate> event before calling\n * <revalidate> followed by <mxGraph.sizeDidChange>. The translation is the\n * negative of the origin.\n *\n * Parameters:\n *\n * dx - X-coordinate of the translation.\n * dy - Y-coordinate of the translation.\n */\nmxGraphView.prototype.setTranslate = function(dx, dy)\n{\n\tvar previousTranslate = new mxPoint(this.translate.x, this.translate.y);\n\t\n\tif (this.translate.x != dx || this.translate.y != dy)\n\t{\n\t\tthis.translate.x = dx;\n\t\tthis.translate.y = dy;\n\n\t\tif (this.isEventsEnabled())\n\t\t{\n\t\t\tthis.viewStateChanged();\n\t\t}\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.TRANSLATE,\n\t\t'translate', this.translate, 'previousTranslate', previousTranslate));\n};\n\n/**\n * Function: viewStateChanged\n * \n * Invoked after <scale> and/or <translate> has changed.\n */\nmxGraphView.prototype.viewStateChanged = function()\n{\n\tthis.revalidate();\n\tthis.graph.sizeDidChange();\n};\n\n/**\n * Function: refresh\n *\n * Clears the view if <currentRoot> is not null and revalidates.\n */\nmxGraphView.prototype.refresh = function()\n{\n\tif (this.currentRoot != null)\n\t{\n\t\tthis.clear();\n\t}\n\t\n\tthis.revalidate();\n};\n\n/**\n * Function: revalidate\n *\n * Revalidates the complete view with all cell states.\n */\nmxGraphView.prototype.revalidate = function()\n{\n\tthis.invalidate();\n\tthis.validate();\n};\n\n/**\n * Function: clear\n *\n * Removes the state of the given cell and all descendants if the given\n * cell is not the current root.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the state should be removed. Default\n * is the root of the model.\n * force - Boolean indicating if the current root should be ignored for\n * recursion.\n */\nmxGraphView.prototype.clear = function(cell, force, recurse)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\tforce = (force != null) ? force : false;\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tthis.removeState(cell);\n\t\n\tif (recurse && (force || cell != this.currentRoot))\n\t{\n\t\tvar childCount = model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.clear(model.getChildAt(cell, i), force);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.invalidate(cell);\n\t}\n};\n\n/**\n * Function: invalidate\n * \n * Invalidates the state of the given cell, all its descendants and\n * connected edges.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be invalidated. Default is the root of the\n * model.\n */\nmxGraphView.prototype.invalidate = function(cell, recurse, includeEdges)\n{\n\tvar model = this.graph.getModel();\n\tcell = cell || model.getRoot();\n\trecurse = (recurse != null) ? recurse : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar state = this.getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tstate.invalid = true;\n\t}\n\t\n\t// Avoids infinite loops for invalid graphs\n\tif (!cell.invalidating)\n\t{\n\t\tcell.invalidating = true;\n\t\t\n\t\t// Recursively invalidates all descendants\n\t\tif (recurse)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = model.getChildAt(cell, i);\n\t\t\t\tthis.invalidate(child, recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Propagates invalidation to all connected edges\n\t\tif (includeEdges)\n\t\t{\n\t\t\tvar edgeCount = model.getEdgeCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t{\n\t\t\t\tthis.invalidate(model.getEdgeAt(cell, i), recurse, includeEdges);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdelete cell.invalidating;\n\t}\n};\n\n/**\n * Function: validate\n * \n * Calls <validateCell> and <validateCellState> and updates the <graphBounds>\n * using <getBoundingBox>. Finally the background is validated using\n * <validateBackground>.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the root of the validation.\n * Default is <currentRoot> or the root of the model.\n */\nmxGraphView.prototype.validate = function(cell)\n{\n\tvar t0 = mxLog.enter('mxGraphView.validate');\n\twindow.status = mxResources.get(this.updatingDocumentResource) ||\n\t\tthis.updatingDocumentResource;\n\t\n\tthis.resetValidationState();\n\t\n\t// Improves IE rendering speed by minimizing reflows\n\tvar prevDisplay = null;\n\t\n\tif (this.optimizeVmlReflows && this.canvas != null && this.textDiv == null &&\n\t\t((document.documentMode == 8 && !mxClient.IS_EM) || mxClient.IS_QUIRKS))\n\t{\n\t\t// Placeholder keeps scrollbar positions when canvas is hidden\n\t\tthis.placeholder = document.createElement('div');\n\t\tthis.placeholder.style.position = 'absolute';\n\t\tthis.placeholder.style.width = this.canvas.clientWidth + 'px';\n\t\tthis.placeholder.style.height = this.canvas.clientHeight + 'px';\n\t\tthis.canvas.parentNode.appendChild(this.placeholder);\n\n\t\tprevDisplay = this.drawPane.style.display;\n\t\tthis.canvas.style.display = 'none';\n\t\t\n\t\t// Creates temporary DIV used for text measuring in mxText.updateBoundingBox\n\t\tthis.textDiv = document.createElement('div');\n\t\tthis.textDiv.style.position = 'absolute';\n\t\tthis.textDiv.style.whiteSpace = 'nowrap';\n\t\tthis.textDiv.style.visibility = 'hidden';\n\t\tthis.textDiv.style.display = (mxClient.IS_QUIRKS) ? 'inline' : 'inline-block';\n\t\tthis.textDiv.style.zoom = '1';\n\t\t\n\t\tdocument.body.appendChild(this.textDiv);\n\t}\n\t\n\tvar graphBounds = this.getBoundingBox(this.validateCellState(\n\t\tthis.validateCell(cell || ((this.currentRoot != null) ?\n\t\t\tthis.currentRoot : this.graph.getModel().getRoot()))));\n\tthis.setGraphBounds((graphBounds != null) ? graphBounds : this.getEmptyBounds());\n\tthis.validateBackground();\n\t\n\tif (prevDisplay != null)\n\t{\n\t\tthis.canvas.style.display = prevDisplay;\n\t\tthis.textDiv.parentNode.removeChild(this.textDiv);\n\t\t\n\t\tif (this.placeholder != null)\n\t\t{\n\t\t\tthis.placeholder.parentNode.removeChild(this.placeholder);\n\t\t}\n\t\t\t\t\n\t\t// Textdiv cannot be reused\n\t\tthis.textDiv = null;\n\t}\n\t\n\tthis.resetValidationState();\n\t\n\twindow.status = mxResources.get(this.doneResource) ||\n\t\tthis.doneResource;\n\tmxLog.leave('mxGraphView.validate', t0);\n};\n\n/**\n * Function: getEmptyBounds\n * \n * Returns the bounds for an empty graph. This returns a rectangle at\n * <translate> with the size of 0 x 0.\n */\nmxGraphView.prototype.getEmptyBounds = function()\n{\n\treturn new mxRectangle(this.translate.x * this.scale, this.translate.y * this.scale);\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box of the shape and the label for the given\n * <mxCellState> and its children if recurse is true.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounding box should be returned.\n * recurse - Optional boolean indicating if the children should be included.\n * Default is true.\n */\nmxGraphView.prototype.getBoundingBox = function(state, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar bbox = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (state.shape != null && state.shape.boundingBox != null)\n\t\t{\n\t\t\tbbox = state.shape.boundingBox.clone();\n\t\t}\n\t\t\n\t\t// Adds label bounding box to graph bounds\n\t\tif (state.text != null && state.text.boundingBox != null)\n\t\t{\n\t\t\tif (bbox != null)\n\t\t\t{\n\t\t\t\tbbox.add(state.text.boundingBox);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox = state.text.boundingBox.clone();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (recurse)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(state.cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar bounds = this.getBoundingBox(this.getState(model.getChildAt(state.cell, i)));\n\t\t\t\t\n\t\t\t\tif (bounds != null)\n\t\t\t\t{\n\t\t\t\t\tif (bbox == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = bounds;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox.add(bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn bbox;\n};\n\n/**\n * Function: createBackgroundPageShape\n *\n * Creates and returns the shape used as the background page.\n * \n * Parameters:\n * \n * bounds - <mxRectangle> that represents the bounds of the shape.\n */\nmxGraphView.prototype.createBackgroundPageShape = function(bounds)\n{\n\treturn new mxRectangleShape(bounds, 'white', 'black');\n};\n\n/**\n * Function: validateBackground\n *\n * Calls <validateBackgroundImage> and <validateBackgroundPage>.\n */\nmxGraphView.prototype.validateBackground = function()\n{\n\tthis.validateBackgroundImage();\n\tthis.validateBackgroundPage();\n};\n\n/**\n * Function: validateBackgroundImage\n * \n * Validates the background image.\n */\nmxGraphView.prototype.validateBackgroundImage = function()\n{\n\tvar bg = this.graph.getBackgroundImage();\n\t\n\tif (bg != null)\n\t{\n\t\tif (this.backgroundImage == null || this.backgroundImage.image != bg.src)\n\t\t{\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tthis.backgroundImage.destroy();\n\t\t\t}\n\t\t\t\n\t\t\tvar bounds = new mxRectangle(0, 0, 1, 1);\n\t\t\t\n\t\t\tthis.backgroundImage = new mxImageShape(bounds, bg.src);\n\t\t\tthis.backgroundImage.dialect = this.graph.dialect;\n\t\t\tthis.backgroundImage.init(this.backgroundPane);\n\t\t\tthis.backgroundImage.redraw();\n\n\t\t\t// Workaround for ignored event on background in IE8 standards mode\n\t\t\tif (document.documentMode == 8 && !mxClient.IS_EM)\n\t\t\t{\n\t\t\t\tmxEvent.addGestureListeners(this.backgroundImage.node,\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}),\n\t\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.redrawBackgroundImage(this.backgroundImage, bg);\n\t}\n\telse if (this.backgroundImage != null)\n\t{\n\t\tthis.backgroundImage.destroy();\n\t\tthis.backgroundImage = null;\n\t}\n};\n\n/**\n * Function: validateBackgroundPage\n * \n * Validates the background page.\n */\nmxGraphView.prototype.validateBackgroundPage = function()\n{\n\tif (this.graph.pageVisible)\n\t{\n\t\tvar bounds = this.getBackgroundPageBounds();\n\t\t\n\t\tif (this.backgroundPageShape == null)\n\t\t{\n\t\t\tthis.backgroundPageShape = this.createBackgroundPageShape(bounds);\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.isShadow = true;\n\t\t\tthis.backgroundPageShape.dialect = this.graph.dialect;\n\t\t\tthis.backgroundPageShape.init(this.backgroundPane);\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t\t\n\t\t\t// Adds listener for double click handling on background\n\t\t\tif (this.graph.nativeDblClickEnabled)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(this.backgroundPageShape.node, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.dblClick(evt);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t\t// container and finishing the handling of a single gesture\n\t\t\tmxEvent.addGestureListeners(this.backgroundPageShape.node,\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\t\t\tif (this.graph.tooltipHandler != null && this.graph.tooltipHandler.isHideOnHover())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.tooltipHandler.hide();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.graph.isMouseDown && !mxEvent.isConsumed(evt))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.backgroundPageShape.scale = this.scale;\n\t\t\tthis.backgroundPageShape.bounds = bounds;\n\t\t\tthis.backgroundPageShape.redraw();\n\t\t}\n\t}\n\telse if (this.backgroundPageShape != null)\n\t{\n\t\tthis.backgroundPageShape.destroy();\n\t\tthis.backgroundPageShape = null;\n\t}\n};\n\n/**\n * Function: getBackgroundPageBounds\n * \n * Returns the bounds for the background page.\n */\nmxGraphView.prototype.getBackgroundPageBounds = function()\n{\n\tvar fmt = this.graph.pageFormat;\n\tvar ps = this.scale * this.graph.pageScale;\n\tvar bounds = new mxRectangle(this.scale * this.translate.x, this.scale * this.translate.y,\n\t\t\tfmt.width * ps, fmt.height * ps);\n\t\n\treturn bounds;\n};\n\n/**\n * Function: redrawBackgroundImage\n *\n * Updates the bounds and redraws the background image.\n * \n * Example:\n * \n * If the background image should not be scaled, this can be replaced with\n * the following.\n * \n * (code)\n * mxGraphView.prototype.redrawBackground = function(backgroundImage, bg)\n * {\n *   backgroundImage.bounds.x = this.translate.x;\n *   backgroundImage.bounds.y = this.translate.y;\n *   backgroundImage.bounds.width = bg.width;\n *   backgroundImage.bounds.height = bg.height;\n *\n *   backgroundImage.redraw();\n * };\n * (end)\n * \n * Parameters:\n * \n * backgroundImage - <mxImageShape> that represents the background image.\n * bg - <mxImage> that specifies the image and its dimensions.\n */\nmxGraphView.prototype.redrawBackgroundImage = function(backgroundImage, bg)\n{\n\tbackgroundImage.scale = this.scale;\n\tbackgroundImage.bounds.x = this.scale * this.translate.x;\n\tbackgroundImage.bounds.y = this.scale * this.translate.y;\n\tbackgroundImage.bounds.width = this.scale * bg.width;\n\tbackgroundImage.bounds.height = this.scale * bg.height;\n\n\tbackgroundImage.redraw();\n};\n\n/**\n * Function: validateCell\n * \n * Recursively creates the cell state for the given cell if visible is true and\n * the given cell is visible. If the cell is not visible but the state exists\n * then it is removed using <removeState>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be created.\n * visible - Optional boolean indicating if the cell should be visible. Default\n * is true.\n */\nmxGraphView.prototype.validateCell = function(cell, visible)\n{\n\tvisible = (visible != null) ? visible : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvisible = visible && this.graph.isCellVisible(cell);\n\t\tvar state = this.getState(cell, visible);\n\t\t\n\t\tif (state != null && !visible)\n\t\t{\n\t\t\tthis.removeState(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tthis.validateCell(model.getChildAt(cell, i), visible &&\n\t\t\t\t\t(!this.isCellCollapsed(cell) || cell == this.currentRoot));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: validateCellState\n * \n * Validates and repaints the <mxCellState> for the given <mxCell>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose <mxCellState> should be validated.\n * recurse - Optional boolean indicating if the children of the cell should be\n * validated. Default is true.\n */\nmxGraphView.prototype.validateCellState = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tvar model = this.graph.getModel();\n\t\t\t\n\t\t\tif (state.invalid)\n\t\t\t{\n\t\t\t\tstate.invalid = false;\n\t\t\t\t\n\t\t\t\tif (state.style == null)\n\t\t\t\t{\n\t\t\t\t\tstate.style = this.graph.getCellStyle(state.cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (cell != this.currentRoot)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getParent(cell), false);\n\t\t\t\t}\n\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, true), false), true);\n\t\t\t\tstate.setVisibleTerminalState(this.validateCellState(this.getVisibleTerminal(cell, false), false), false);\n\t\t\t\t\n\t\t\t\tthis.updateCellState(state);\n\t\t\t\t\n\t\t\t\t// Repaint happens immediately after the cell is validated\n\t\t\t\tif (cell != this.currentRoot && !state.invalid)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.cellRenderer.redraw(state, false, this.isRendering());\n\n\t\t\t\t\t// Handles changes to invertex paintbounds after update of rendering shape\n\t\t\t\t\tstate.updateCachedBounds();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (recurse && !state.invalid)\n\t\t\t{\n\t\t\t\t// Updates order in DOM if recursively traversing\n\t\t\t\tif (state.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.stateValidated(state);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tthis.validateCellState(model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: updateCellState\n * \n * Updates the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to be updated.\n */\nmxGraphView.prototype.updateCellState = function(state)\n{\n\tstate.absoluteOffset.x = 0;\n\tstate.absoluteOffset.y = 0;\n\tstate.origin.x = 0;\n\tstate.origin.y = 0;\n\tstate.length = 0;\n\t\n\tif (state.cell != this.currentRoot)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\tvar pState = this.getState(model.getParent(state.cell)); \n\t\t\n\t\tif (pState != null && pState.cell != this.currentRoot)\n\t\t{\n\t\t\tstate.origin.x += pState.origin.x;\n\t\t\tstate.origin.y += pState.origin.y;\n\t\t}\n\t\t\n\t\tvar offset = this.graph.getChildOffsetForCell(state.cell);\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tstate.origin.x += offset.x;\n\t\t\tstate.origin.y += offset.y;\n\t\t}\n\t\t\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\t\t\t\t\n\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tif (!model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\toffset = geo.offset || this.EMPTY_POINT;\n\t\n\t\t\t\tif (geo.relative && pState != null)\n\t\t\t\t{\n\t\t\t\t\tif (model.isEdge(pState.cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar origin = this.getPoint(pState, geo);\n\n\t\t\t\t\t\tif (origin != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstate.origin.x += (origin.x / this.scale) - pState.origin.x - this.translate.x;\n\t\t\t\t\t\t\tstate.origin.y += (origin.y / this.scale) - pState.origin.y - this.translate.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstate.origin.x += geo.x * pState.width / this.scale + offset.x;\n\t\t\t\t\t\tstate.origin.y += geo.y * pState.height / this.scale + offset.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tstate.absoluteOffset.x = this.scale * offset.x;\n\t\t\t\t\tstate.absoluteOffset.y = this.scale * offset.y;\n\t\t\t\t\tstate.origin.x += geo.x;\n\t\t\t\t\tstate.origin.y += geo.y;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tstate.x = this.scale * (this.translate.x + state.origin.x);\n\t\t\tstate.y = this.scale * (this.translate.y + state.origin.y);\n\t\t\tstate.width = this.scale * geo.width;\n\t\t\tstate.unscaledWidth = geo.width;\n\t\t\tstate.height = this.scale * geo.height;\n\t\t\t\n\t\t\tif (model.isVertex(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateVertexState(state, geo);\n\t\t\t}\n\t\t\t\n\t\t\tif (model.isEdge(state.cell))\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(state, geo);\n\t\t\t}\n\t\t}\n\t}\n\n\tstate.updateCachedBounds();\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the children of the given cell should not be visible in the\n * view. This implementation uses <mxGraph.isCellVisible> but it can be\n * overidden to use a separate condition.\n */\nmxGraphView.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.graph.isCellCollapsed(cell);\n};\n\n/**\n * Function: updateVertexState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateVertexState = function(state, geo)\n{\n\tvar model = this.graph.getModel();\n\tvar pState = this.getState(model.getParent(state.cell));\n\t\n\tif (geo.relative && pState != null && !model.isEdge(pState.cell))\n\t{\n\t\tvar alpha = mxUtils.toRadians(pState.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(ct, cos, sin, cx);\n\t\t\tstate.x = pt.x - state.width / 2;\n\t\t\tstate.y = pt.y - state.height / 2;\n\t\t}\n\t}\n\t\n\tthis.updateVertexLabelOffset(state);\n};\n\n/**\n * Function: updateEdgeState\n * \n * Validates the given cell state.\n */\nmxGraphView.prototype.updateEdgeState = function(state, geo)\n{\n\tvar source = state.getVisibleTerminalState(true);\n\tvar target = state.getVisibleTerminalState(false);\n\t\n\t// This will remove edges with no terminals and no terminal points\n\t// as such edges are invalid and produce NPEs in the edge styles.\n\t// Also removes connected edges that have no visible terminals.\n\tif ((this.graph.model.getTerminal(state.cell, true) != null && source == null) ||\n\t\t(source == null && geo.getTerminalPoint(true) == null) ||\n\t\t(this.graph.model.getTerminal(state.cell, false) != null && target == null) ||\n\t\t(target == null && geo.getTerminalPoint(false) == null))\n\t{\n\t\tthis.clear(state.cell, true);\n\t}\n\telse\n\t{\n\t\tthis.updateFixedTerminalPoints(state, source, target);\n\t\tthis.updatePoints(state, geo.points, source, target);\n\t\tthis.updateFloatingTerminalPoints(state, source, target);\n\t\t\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (state.cell != this.currentRoot && (pts == null || pts.length < 2 ||\n\t\t\tpts[0] == null || pts[pts.length - 1] == null))\n\t\t{\n\t\t\t// This will remove edges with invalid points from the list of states in the view.\n\t\t\t// Happens if the one of the terminals and the corresponding terminal point is null.\n\t\t\tthis.clear(state.cell, true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.updateEdgeBounds(state);\n\t\t\tthis.updateEdgeLabelOffset(state);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateVertexLabelOffset\n * \n * Updates the absoluteOffset of the given vertex cell state. This takes\n * into account the label position styles.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateVertexLabelOffset = function(state)\n{\n\tvar h = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_POSITION, mxConstants.ALIGN_CENTER);\n\n\tif (h == mxConstants.ALIGN_LEFT)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\tlw *= this.scale;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tlw = state.width;\n\t\t}\n\t\t\n\t\tstate.absoluteOffset.x -= lw;\n\t}\n\telse if (h == mxConstants.ALIGN_RIGHT)\n\t{\n\t\tstate.absoluteOffset.x += state.width;\n\t}\n\telse if (h == mxConstants.ALIGN_CENTER)\n\t{\n\t\tvar lw = mxUtils.getValue(state.style, mxConstants.STYLE_LABEL_WIDTH, null);\n\t\t\n\t\tif (lw != null)\n\t\t{\n\t\t\t// Aligns text block with given width inside the vertex width\n\t\t\tvar align = mxUtils.getValue(state.style, mxConstants.STYLE_ALIGN, mxConstants.ALIGN_CENTER);\n\t\t\tvar dx = 0;\n\t\t\t\n\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t{\n\t\t\t\tdx = 0.5;\n\t\t\t}\n\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t{\n\t\t\t\tdx = 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (dx != 0)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset.x -= (lw * this.scale - state.width) * dx;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar v = mxUtils.getValue(state.style, mxConstants.STYLE_VERTICAL_LABEL_POSITION, mxConstants.ALIGN_MIDDLE);\n\t\n\tif (v == mxConstants.ALIGN_TOP)\n\t{\n\t\tstate.absoluteOffset.y -= state.height;\n\t}\n\telse if (v == mxConstants.ALIGN_BOTTOM)\n\t{\n\t\tstate.absoluteOffset.y += state.height;\n\t}\n};\n\n/**\n * Function: resetValidationState\n *\n * Resets the current validation state.\n */\nmxGraphView.prototype.resetValidationState = function()\n{\n\tthis.lastNode = null;\n\tthis.lastHtmlNode = null;\n\tthis.lastForegroundNode = null;\n\tthis.lastForegroundHtmlNode = null;\n};\n\n/**\n * Function: stateValidated\n * \n * Invoked when a state has been processed in <validatePoints>. This is used\n * to update the order of the DOM nodes of the shape.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n */\nmxGraphView.prototype.stateValidated = function(state)\n{\n\tvar fg = (this.graph.getModel().isEdge(state.cell) && this.graph.keepEdgesInForeground) ||\n\t\t(this.graph.getModel().isVertex(state.cell) && this.graph.keepEdgesInBackground);\n\tvar htmlNode = (fg) ? this.lastForegroundHtmlNode || this.lastHtmlNode : this.lastHtmlNode;\n\tvar node = (fg) ? this.lastForegroundNode || this.lastNode : this.lastNode;\n\tvar result = this.graph.cellRenderer.insertStateAfter(state, node, htmlNode);\n\n\tif (fg)\n\t{\n\t\tthis.lastForegroundHtmlNode = result[1];\n\t\tthis.lastForegroundNode = result[0];\n\t}\n\telse\n\t{\n\t\tthis.lastHtmlNode = result[1];\n\t\tthis.lastNode = result[0];\n\t}\n};\n\n/**\n * Function: updateFixedTerminalPoints\n *\n * Sets the initial absolute terminal points in the given state before the edge\n * style is computed.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose initial terminal points should be updated.\n * source - <mxCellState> which represents the source terminal.\n * target - <mxCellState> which represents the target terminal.\n */\nmxGraphView.prototype.updateFixedTerminalPoints = function(edge, source, target)\n{\n\tthis.updateFixedTerminalPoint(edge, source, true,\n\t\tthis.graph.getConnectionConstraint(edge, source, true));\n\tthis.updateFixedTerminalPoint(edge, target, false,\n\t\tthis.graph.getConnectionConstraint(edge, target, false));\n};\n\n/**\n * Function: updateFixedTerminalPoint\n *\n * Sets the fixed source or target terminal point on the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.updateFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFixedTerminalPoint(edge, terminal, source, constraint), source);\n};\n\n/**\n * Function: getFixedTerminalPoint\n *\n * Returns the fixed source or target terminal point for the given edge.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * terminal - <mxCellState> which represents the actual terminal.\n * source - Boolean that specifies if the terminal is the source.\n * constraint - <mxConnectionConstraint> that specifies the connection.\n */\nmxGraphView.prototype.getFixedTerminalPoint = function(edge, terminal, source, constraint)\n{\n\tvar pt = null;\n\t\n\tif (constraint != null)\n\t{\n\t\tpt = this.graph.getConnectionPoint(terminal, constraint);\n\t}\n\t\n\tif (pt == null && terminal == null)\n\t{\n\t\tvar s = this.scale;\n\t\tvar tr = this.translate;\n\t\tvar orig = edge.origin;\n\t\tvar geo = this.graph.getCellGeometry(edge.cell);\n\t\tpt = geo.getTerminalPoint(source);\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tpt = new mxPoint(s * (tr.x + pt.x + orig.x),\n\t\t\t\t\t\t\t s * (tr.y + pt.y + orig.y));\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: updateBoundsFromStencil\n * \n * Updates the bounds of the given cell state to reflect the bounds of the stencil\n * if it has a fixed aspect and returns the previous bounds as an <mxRectangle> if\n * the bounds have been modified or null otherwise.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateBoundsFromStencil = function(state)\n{\n\tvar previous = null;\n\t\n\tif (state != null && state.shape != null && state.shape.stencil != null && state.shape.stencil.aspect == 'fixed')\n\t{\n\t\tprevious = mxRectangle.fromRectangle(state);\n\t\tvar asp = state.shape.stencil.computeAspect(state.style, state.x, state.y, state.width, state.height);\n\t\tstate.setRect(asp.x, asp.y, state.shape.stencil.w0 * asp.width, state.shape.stencil.h0 * asp.height);\n\t}\n\t\n\treturn previous;\n};\n\n/**\n * Function: updatePoints\n *\n * Updates the absolute points in the given state using the specified array\n * of <mxPoints> as the relative points.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose absolute points should be updated.\n * points - Array of <mxPoints> that constitute the relative points.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updatePoints = function(edge, points, source, target)\n{\n\tif (edge != null)\n\t{\n\t\tvar pts = [];\n\t\tpts.push(edge.absolutePoints[0]);\n\t\tvar edgeStyle = this.getEdgeStyle(edge, points, source, target);\n\t\t\n\t\tif (edgeStyle != null)\n\t\t{\n\t\t\tvar src = this.getTerminalPort(edge, source, true);\n\t\t\tvar trg = this.getTerminalPort(edge, target, false);\n\t\t\t\n\t\t\t// Uses the stencil bounds for routing and restores after routing\n\t\t\tvar srcBounds = this.updateBoundsFromStencil(src);\n\t\t\tvar trgBounds = this.updateBoundsFromStencil(trg);\n\n\t\t\tedgeStyle(edge, src, trg, points, pts);\n\t\t\t\n\t\t\t// Restores previous bounds\n\t\t\tif (srcBounds != null)\n\t\t\t{\n\t\t\t\tsrc.setRect(srcBounds.x, srcBounds.y, srcBounds.width, srcBounds.height);\n\t\t\t}\n\t\t\t\n\t\t\tif (trgBounds != null)\n\t\t\t{\n\t\t\t\ttrg.setRect(trgBounds.x, trgBounds.y, trgBounds.width, trgBounds.height);\n\t\t\t}\n\t\t}\n\t\telse if (points != null)\n\t\t{\n\t\t\tfor (var i = 0; i < points.length; i++)\n\t\t\t{\n\t\t\t\tif (points[i] != null)\n\t\t\t\t{\n\t\t\t\t\tvar pt = mxUtils.clone(points[i]);\n\t\t\t\t\tpts.push(this.transformControlPoint(edge, pt));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar tmp = edge.absolutePoints;\n\t\tpts.push(tmp[tmp.length-1]);\n\n\t\tedge.absolutePoints = pts;\n\t}\n};\n\n/**\n * Function: transformControlPoint\n *\n * Transforms the given control point to an absolute point.\n */\nmxGraphView.prototype.transformControlPoint = function(state, pt)\n{\n\tif (state != null && pt != null)\n\t{\n\t\tvar orig = state.origin;\n\t\t\n\t    return new mxPoint(this.scale * (pt.x + this.translate.x + orig.x),\n\t    \tthis.scale * (pt.y + this.translate.y + orig.y));\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: isLoopStyleEnabled\n * \n * Returns true if the given edge should be routed with <mxGraph.defaultLoopStyle>\n * or the <mxConstants.STYLE_LOOP> defined for the given edge. This implementation\n * returns true if the given edge is a loop and does not \n */\nmxGraphView.prototype.isLoopStyleEnabled = function(edge, points, source, target)\n{\n\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\n\tif ((points == null || points.length < 2) &&\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_ORTHOGONAL_LOOP, false) ||\n\t\t((sc == null || sc.point == null) && (tc == null || tc.point == null))))\n\t{\n\t\treturn source != null && source == target;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns the edge style function to be used to render the given edge state.\n */\nmxGraphView.prototype.getEdgeStyle = function(edge, points, source, target)\n{\n\tvar edgeStyle = this.isLoopStyleEnabled(edge, points, source, target) ?\n\t\tmxUtils.getValue(edge.style, mxConstants.STYLE_LOOP, this.graph.defaultLoopStyle) :\n\t\t(!mxUtils.getValue(edge.style, mxConstants.STYLE_NOEDGESTYLE, false) ?\n\t\tedge.style[mxConstants.STYLE_EDGE] : null);\n\n\t// Converts string values to objects\n\tif (typeof(edgeStyle) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(edgeStyle);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(edgeStyle);\n\t\t}\n\t\t\n\t\tedgeStyle = tmp;\n\t}\n\t\n\tif (typeof(edgeStyle) == \"function\")\n\t{\n\t\treturn edgeStyle;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: updateFloatingTerminalPoints\n *\n * Updates the terminal points in the given state after the edge style was\n * computed for the edge.\n * \n * Parameters:\n * \n * state - <mxCellState> whose terminal points should be updated.\n * source - <mxCellState> that represents the source terminal.\n * target - <mxCellState> that represents the target terminal.\n */\nmxGraphView.prototype.updateFloatingTerminalPoints = function(state, source, target)\n{\n\tvar pts = state.absolutePoints;\n\tvar p0 = pts[0];\n\tvar pe = pts[pts.length - 1];\n\n\tif (pe == null && target != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, target, source, false);\n\t}\n\t\n\tif (p0 == null && source != null)\n\t{\n\t\tthis.updateFloatingTerminalPoint(state, source, target, true);\n\t}\n};\n\n/**\n * Function: updateFloatingTerminalPoint\n *\n * Updates the absolute terminal point in the given state for the given\n * start and end state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be updated.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.updateFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tedge.setAbsoluteTerminalPoint(this.getFloatingTerminalPoint(edge, start, end, source), source);\n};\n\n/**\n * Function: getFloatingTerminalPoint\n * \n * Returns the floating terminal point for the given edge, start and end\n * state, where start is the source if source is true.\n * \n * Parameters:\n * \n * edge - <mxCellState> whose terminal point should be returned.\n * start - <mxCellState> for the terminal on \"this\" side of the edge.\n * end - <mxCellState> for the terminal on the other side of the edge.\n * source - Boolean indicating if start is the source terminal state.\n */\nmxGraphView.prototype.getFloatingTerminalPoint = function(edge, start, end, source)\n{\n\tstart = this.getTerminalPort(edge, start, source);\n\tvar next = this.getNextPoint(edge, end, source);\n\t\n\tvar orth = this.graph.isOrthogonal(edge);\n\tvar alpha = mxUtils.toRadians(Number(start.style[mxConstants.STYLE_ROTATION] || '0'));\n\tvar center = new mxPoint(start.getCenterX(), start.getCenterY());\n\t\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(-alpha);\n\t\tvar sin = Math.sin(-alpha);\n\t\tnext = mxUtils.getRotatedPoint(next, cos, sin, center);\n\t}\n\t\n\tvar border = parseFloat(edge.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\tborder += parseFloat(edge.style[(source) ?\n\t\tmxConstants.STYLE_SOURCE_PERIMETER_SPACING :\n\t\tmxConstants.STYLE_TARGET_PERIMETER_SPACING] || 0);\n\tvar pt = this.getPerimeterPoint(start, next, alpha == 0 && orth, border);\n\n\tif (alpha != 0)\n\t{\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, center);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: getTerminalPort\n * \n * Returns an <mxCellState> that represents the source or target terminal or\n * port for the given edge.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the given terminal is the source terminal.\n */\nmxGraphView.prototype.getTerminalPort = function(state, terminal, source)\n{\n\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\tmxConstants.STYLE_TARGET_PORT;\n\tvar id = mxUtils.getValue(state.style, key);\n\t\n\tif (id != null)\n\t{\n\t\tvar tmp = this.getState(this.graph.getModel().getCell(id));\n\t\t\n\t\t// Only uses ports where a cell state exists\n\t\tif (tmp != null)\n\t\t{\n\t\t\tterminal = tmp;\n\t\t}\n\t}\n\t\n\treturn terminal;\n};\n\n/**\n * Function: getPerimeterPoint\n *\n * Returns an <mxPoint> that defines the location of the intersection point between\n * the perimeter and the line between the center of the shape and the given point.\n * \n * Parameters:\n * \n * terminal - <mxCellState> for the source or target terminal.\n * next - <mxPoint> that lies outside of the given terminal.\n * orthogonal - Boolean that specifies if the orthogonal projection onto\n * the perimeter should be returned. If this is false then the intersection\n * of the perimeter and the line between the next and the center point is\n * returned.\n * border - Optional border between the perimeter and the shape.\n */\nmxGraphView.prototype.getPerimeterPoint = function(terminal, next, orthogonal, border)\n{\n\tvar point = null;\n\t\n\tif (terminal != null)\n\t{\n\t\tvar perimeter = this.getPerimeterFunction(terminal);\n\t\t\n\t\tif (perimeter != null && next != null)\n\t\t{\n\t\t\tvar bounds = this.getPerimeterBounds(terminal, border);\n\n\t\t\tif (bounds.width > 0 || bounds.height > 0)\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(next.x, next.y);\n\t\t\t\tvar flipH = false;\n\t\t\t\tvar flipV = false;\t\n\t\t\t\t\n\t\t\t\tif (this.graph.model.isVertex(terminal.cell))\n\t\t\t\t{\n\t\t\t\t\tflipH = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tflipV = mxUtils.getValue(terminal.style, mxConstants.STYLE_FLIPV, 0) == 1;\t\n\t\n\t\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\t\tif (terminal.shape != null && terminal.shape.stencil != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tflipH = (mxUtils.getValue(terminal.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\t\tflipV = (mxUtils.getValue(terminal.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpoint = perimeter(bounds, terminal, point, orthogonal);\n\n\t\t\t\tif (point != null)\n\t\t\t\t{\n\t\t\t\t\tif (flipH)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (flipV)\n\t\t\t\t\t{\n\t\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (point == null)\n\t\t{\n\t\t\tpoint = this.getPoint(terminal);\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getRoutingCenterX\n * \n * Returns the x-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterX = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_X]) || 0 : 0;\n\n\treturn state.getCenterX() + f * state.width;\n};\n\n/**\n * Function: getRoutingCenterY\n * \n * Returns the y-coordinate of the center point for automatic routing.\n */\nmxGraphView.prototype.getRoutingCenterY = function (state)\n{\n\tvar f = (state.style != null) ? parseFloat(state.style\n\t\t[mxConstants.STYLE_ROUTING_CENTER_Y]) || 0 : 0;\n\n\treturn state.getCenterY() + f * state.height;\n};\n\n/**\n * Function: getPerimeterBounds\n *\n * Returns the perimeter bounds for the given terminal, edge pair as an\n * <mxRectangle>.\n * \n * If you have a model where each terminal has a relative child that should\n * act as the graphical endpoint for a connection from/to the terminal, then\n * this method can be replaced as follows:\n * \n * (code)\n * var oldGetPerimeterBounds = mxGraphView.prototype.getPerimeterBounds;\n * mxGraphView.prototype.getPerimeterBounds = function(terminal, edge, isSource)\n * {\n *   var model = this.graph.getModel();\n *   var childCount = model.getChildCount(terminal.cell);\n * \n *   if (childCount > 0)\n *   {\n *     var child = model.getChildAt(terminal.cell, 0);\n *     var geo = model.getGeometry(child);\n *\n *     if (geo != null &&\n *         geo.relative)\n *     {\n *       var state = this.getState(child);\n *       \n *       if (state != null)\n *       {\n *         terminal = state;\n *       }\n *     }\n *   }\n *   \n *   return oldGetPerimeterBounds.apply(this, arguments);\n * };\n * (end)\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * border - Number that adds a border between the shape and the perimeter.\n */\nmxGraphView.prototype.getPerimeterBounds = function(terminal, border)\n{\n\tborder = (border != null) ? border : 0;\n\n\tif (terminal != null)\n\t{\n\t\tborder += parseFloat(terminal.style[mxConstants.STYLE_PERIMETER_SPACING] || 0);\n\t}\n\n\treturn terminal.getPerimeterBounds(border * this.scale);\n};\n\n/**\n * Function: getPerimeterFunction\n *\n * Returns the perimeter function for the given state.\n */\nmxGraphView.prototype.getPerimeterFunction = function(state)\n{\n\tvar perimeter = state.style[mxConstants.STYLE_PERIMETER];\n\n\t// Converts string values to objects\n\tif (typeof(perimeter) == \"string\")\n\t{\n\t\tvar tmp = mxStyleRegistry.getValue(perimeter);\n\t\t\n\t\tif (tmp == null && this.isAllowEval())\n\t\t{\n \t\t\ttmp = mxUtils.eval(perimeter);\n\t\t}\n\n\t\tperimeter = tmp;\n\t}\n\t\n\tif (typeof(perimeter) == \"function\")\n\t{\n\t\treturn perimeter;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getNextPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * opposite - <mxCellState> that represents the opposite terminal.\n * source - Boolean indicating if the next point for the source or target\n * should be returned.\n */\nmxGraphView.prototype.getNextPoint = function(edge, opposite, source)\n{\n\tvar pts = edge.absolutePoints;\n\tvar point = null;\n\t\n\tif (pts != null && pts.length >= 2)\n\t{\n\t\tvar count = pts.length;\n\t\tpoint = pts[(source) ? Math.min(1, count - 1) : Math.max(0, count - 2)];\n\t}\n\t\n\tif (point == null && opposite != null)\n\t{\n\t\tpoint = new mxPoint(opposite.getCenterX(), opposite.getCenterY());\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getVisibleTerminal\n *\n * Returns the nearest ancestor terminal that is visible. The edge appears\n * to be connected to this terminal on the display. The result of this method\n * is cached in <mxCellState.getVisibleTerminalState>.\n * \n * Parameters:\n * \n * edge - <mxCell> whose visible terminal should be returned.\n * source - Boolean that specifies if the source or target terminal\n * should be returned.\n */\nmxGraphView.prototype.getVisibleTerminal = function(edge, source)\n{\n\tvar model = this.graph.getModel();\n\tvar result = model.getTerminal(edge, source);\n\tvar best = result;\n\t\n\twhile (result != null && result != this.currentRoot)\n\t{\n\t\tif (!this.graph.isCellVisible(best) || this.isCellCollapsed(result))\n\t\t{\n\t\t\tbest = result;\n\t\t}\n\t\t\n\t\tresult = model.getParent(result);\n\t}\n\n\t// Checks if the result is not a layer\n\tif (model.getParent(best) == model.getRoot())\n\t{\n\t\tbest = null;\n\t}\n\t\n\treturn best;\n};\n\n/**\n * Function: updateEdgeBounds\n *\n * Updates the given state using the bounding box of t\n * he absolute points.\n * Also updates <mxCellState.terminalDistance>, <mxCellState.length> and\n * <mxCellState.segments>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose bounds should be updated.\n */\nmxGraphView.prototype.updateEdgeBounds = function(state)\n{\n\tvar points = state.absolutePoints;\n\tvar p0 = points[0];\n\tvar pe = points[points.length - 1];\n\t\n\tif (p0.x != pe.x || p0.y != pe.y)\n\t{\n\t\tvar dx = pe.x - p0.x;\n\t\tvar dy = pe.y - p0.y;\n\t\tstate.terminalDistance = Math.sqrt(dx * dx + dy * dy);\n\t}\n\telse\n\t{\n\t\tstate.terminalDistance = 0;\n\t}\n\t\n\tvar length = 0;\n\tvar segments = [];\n\tvar pt = p0;\n\t\n\tif (pt != null)\n\t{\n\t\tvar minX = pt.x;\n\t\tvar minY = pt.y;\n\t\tvar maxX = minX;\n\t\tvar maxY = minY;\n\t\t\n\t\tfor (var i = 1; i < points.length; i++)\n\t\t{\n\t\t\tvar tmp = points[i];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar dx = pt.x - tmp.x;\n\t\t\t\tvar dy = pt.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar segment = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\tsegments.push(segment);\n\t\t\t\tlength += segment;\n\t\t\t\t\n\t\t\t\tpt = tmp;\n\t\t\t\t\n\t\t\t\tminX = Math.min(pt.x, minX);\n\t\t\t\tminY = Math.min(pt.y, minY);\n\t\t\t\tmaxX = Math.max(pt.x, maxX);\n\t\t\t\tmaxY = Math.max(pt.y, maxY);\n\t\t\t}\n\t\t}\n\t\t\n\t\tstate.length = length;\n\t\tstate.segments = segments;\n\t\t\n\t\tvar markerSize = 1; // TODO: include marker size\n\t\t\n\t\tstate.x = minX;\n\t\tstate.y = minY;\n\t\tstate.width = Math.max(markerSize, maxX - minX);\n\t\tstate.height = Math.max(markerSize, maxY - minY);\n\t}\n};\n\n/**\n * Function: getPoint\n *\n * Returns the absolute point on the edge for the given relative\n * <mxGeometry> as an <mxPoint>. The edge is represented by the given\n * <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * geometry - <mxGeometry> that represents the relative location.\n */\nmxGraphView.prototype.getPoint = function(state, geometry)\n{\n\tvar x = state.getCenterX();\n\tvar y = state.getCenterY();\n\t\n\tif (state.segments != null && (geometry == null || geometry.relative))\n\t{\n\t\tvar gx = (geometry != null) ? geometry.x / 2 : 0;\n\t\tvar pointCount = state.absolutePoints.length;\n\t\tvar dist = Math.round((gx + 0.5) * state.length);\n\t\tvar segment = state.segments[0];\n\t\tvar length = 0;\t\t\t\t\n\t\tvar index = 1;\n\n\t\twhile (dist >= Math.round(length + segment) && index < pointCount - 1)\n\t\t{\n\t\t\tlength += segment;\n\t\t\tsegment = state.segments[index++];\n\t\t}\n\n\t\tvar factor = (segment == 0) ? 0 : (dist - length) / segment;\n\t\tvar p0 = state.absolutePoints[index-1];\n\t\tvar pe = state.absolutePoints[index];\n\n\t\tif (p0 != null && pe != null)\n\t\t{\n\t\t\tvar gy = 0;\n\t\t\tvar offsetX = 0;\n\t\t\tvar offsetY = 0;\n\n\t\t\tif (geometry != null)\n\t\t\t{\n\t\t\t\tgy = geometry.y;\n\t\t\t\tvar offset = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (offset != null)\n\t\t\t\t{\n\t\t\t\t\toffsetX = offset.x;\n\t\t\t\t\toffsetY = offset.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dx = pe.x - p0.x;\n\t\t\tvar dy = pe.y - p0.y;\n\t\t\tvar nx = (segment == 0) ? 0 : dy / segment;\n\t\t\tvar ny = (segment == 0) ? 0 : dx / segment;\n\t\t\t\n\t\t\tx = p0.x + dx * factor + (nx * gy + offsetX) * this.scale;\n\t\t\ty = p0.y + dy * factor - (ny * gy - offsetY) * this.scale;\n\t\t}\n\t}\n\telse if (geometry != null)\n\t{\n\t\tvar offset = geometry.offset;\n\t\t\n\t\tif (offset != null)\n\t\t{\n\t\t\tx += offset.x;\n\t\t\ty += offset.y;\n\t\t}\n\t}\n\t\n\treturn new mxPoint(x, y);\t\t\n};\n\n/**\n * Function: getRelativePoint\n *\n * Gets the relative point that describes the given, absolute label\n * position for the given edge state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the state of the parent edge.\n * x - Specifies the x-coordinate of the absolute label location.\n * y - Specifies the y-coordinate of the absolute label location.\n */\nmxGraphView.prototype.getRelativePoint = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar pointCount = edgeState.absolutePoints.length;\n\t\t\n\t\tif (geometry.relative && pointCount > 1)\n\t\t{\n\t\t\tvar totalLength = edgeState.length;\n\t\t\tvar segments = edgeState.segments;\n\n\t\t\t// Works which line segment the point of the label is closest to\n\t\t\tvar p0 = edgeState.absolutePoints[0];\n\t\t\tvar pe = edgeState.absolutePoints[1];\n\t\t\tvar minDist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tvar index = 0;\n\t\t\tvar tmp = 0;\n\t\t\tvar length = 0;\n\t\t\t\n\t\t\tfor (var i = 2; i < pointCount; i++)\n\t\t\t{\n\t\t\t\ttmp += segments[i - 2];\n\t\t\t\tpe = edgeState.absolutePoints[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\t\tif (dist <= minDist)\n\t\t\t\t{\n\t\t\t\t\tminDist = dist;\n\t\t\t\t\tindex = i - 1;\n\t\t\t\t\tlength = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tp0 = pe;\n\t\t\t}\n\t\t\t\n\t\t\tvar seg = segments[index];\n\t\t\tp0 = edgeState.absolutePoints[index];\n\t\t\tpe = edgeState.absolutePoints[index + 1];\n\t\t\t\n\t\t\tvar x2 = p0.x;\n\t\t\tvar y2 = p0.y;\n\t\t\t\n\t\t\tvar x1 = pe.x;\n\t\t\tvar y1 = pe.y;\n\t\t\t\n\t\t\tvar px = x;\n\t\t\tvar py = y;\n\t\t\t\n\t\t\tvar xSegment = x2 - x1;\n\t\t\tvar ySegment = y2 - y1;\n\t\t\t\n\t\t\tpx -= x1;\n\t\t\tpy -= y1;\n\t\t\tvar projlenSq = 0;\n\t\t\t\n\t\t\tpx = xSegment - px;\n\t\t\tpy = ySegment - py;\n\t\t\tvar dotprod = px * xSegment + py * ySegment;\n\n\t\t\tif (dotprod <= 0.0)\n\t\t\t{\n\t\t\t\tprojlenSq = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprojlenSq = dotprod * dotprod\n\t\t\t\t\t\t/ (xSegment * xSegment + ySegment * ySegment);\n\t\t\t}\n\n\t\t\tvar projlen = Math.sqrt(projlenSq);\n\n\t\t\tif (projlen > seg)\n\t\t\t{\n\t\t\t\tprojlen = seg;\n\t\t\t}\n\n\t\t\tvar yDistance = Math.sqrt(mxUtils.ptSegDistSq(p0.x, p0.y, pe\n\t\t\t\t\t.x, pe.y, x, y));\n\t\t\tvar direction = mxUtils.relativeCcw(p0.x, p0.y, pe.x, pe.y, x, y);\n\n\t\t\tif (direction == -1)\n\t\t\t{\n\t\t\t\tyDistance = -yDistance;\n\t\t\t}\n\n\t\t\t// Constructs the relative point for the label\n\t\t\treturn new mxPoint(((totalLength / 2 - length - projlen) / totalLength) * -2,\n\t\t\t\t\t\tyDistance / this.scale);\n\t\t}\n\t}\n\t\n\treturn new mxPoint();\n};\n\n/**\n * Function: updateEdgeLabelOffset\n *\n * Updates <mxCellState.absoluteOffset> for the given state. The absolute\n * offset is normally used for the position of the edge label. Is is\n * calculated from the geometry as an absolute offset from the center\n * between the two endpoints if the geometry is absolute, or as the\n * relative distance between the center along the line and the absolute\n * orthogonal distance if the geometry is relative.\n * \n * Parameters:\n * \n * state - <mxCellState> whose absolute offset should be updated.\n */\nmxGraphView.prototype.updateEdgeLabelOffset = function(state)\n{\n\tvar points = state.absolutePoints;\n\t\n\tstate.absoluteOffset.x = state.getCenterX();\n\tstate.absoluteOffset.y = state.getCenterY();\n\n\tif (points != null && points.length > 0 && state.segments != null)\n\t{\n\t\tvar geometry = this.graph.getCellGeometry(state.cell);\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\tvar offset = this.getPoint(state, geometry);\n\t\t\t\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\tstate.absoluteOffset = offset;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar dx = pe.x - p0.x;\n\t\t\t\tvar dy = pe.y - p0.y;\n\t\t\t\tvar x0 = 0;\n\t\t\t\tvar y0 = 0;\n\n\t\t\t\tvar off = geometry.offset;\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tx0 = off.x;\n\t\t\t\t\ty0 = off.y;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar x = p0.x + dx / 2 + x0 * this.scale;\n\t\t\t\tvar y = p0.y + dy / 2 + y0 * this.scale;\n\t\t\t\t\n\t\t\t\tstate.absoluteOffset.x = x;\n\t\t\t\tstate.absoluteOffset.y = y;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getState\n *\n * Returns the <mxCellState> for the given cell. If create is true, then\n * the state is created if it does not yet exist.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be returned.\n * create - Optional boolean indicating if a new state should be created\n * if it does not yet exist. Default is false.\n */\nmxGraphView.prototype.getState = function(cell, create)\n{\n\tcreate = create || false;\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.get(cell);\n\t\t\n\t\tif (create && (state == null || this.updateStyle) && this.graph.isCellVisible(cell))\n\t\t{\n\t\t\tif (state == null)\n\t\t\t{\n\t\t\t\tstate = this.createState(cell);\n\t\t\t\tthis.states.put(cell, state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstate.style = this.graph.getCellStyle(cell);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn state;\n};\n\n/**\n * Function: isRendering\n *\n * Returns <rendering>.\n */\nmxGraphView.prototype.isRendering = function()\n{\n\treturn this.rendering;\n};\n\n/**\n * Function: setRendering\n *\n * Sets <rendering>.\n */\nmxGraphView.prototype.setRendering = function(value)\n{\n\tthis.rendering = value;\n};\n\n/**\n * Function: isAllowEval\n *\n * Returns <allowEval>.\n */\nmxGraphView.prototype.isAllowEval = function()\n{\n\treturn this.allowEval;\n};\n\n/**\n * Function: setAllowEval\n *\n * Sets <allowEval>.\n */\nmxGraphView.prototype.setAllowEval = function(value)\n{\n\tthis.allowEval = value;\n};\n\n/**\n * Function: getStates\n *\n * Returns <states>.\n */\nmxGraphView.prototype.getStates = function()\n{\n\treturn this.states;\n};\n\n/**\n * Function: setStates\n *\n * Sets <states>.\n */\nmxGraphView.prototype.setStates = function(value)\n{\n\tthis.states = value;\n};\n\n/**\n * Function: getCellStates\n *\n * Returns the <mxCellStates> for the given array of <mxCells>. The array\n * contains all states that are not null, that is, the returned array may\n * have less elements than the given array. If no argument is given, then\n * this returns <states>.\n */\nmxGraphView.prototype.getCellStates = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\treturn this.states;\n\t}\n\telse\n\t{\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar state = this.getState(cells[i]);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tresult.push(state);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: removeState\n *\n * Removes and returns the <mxCellState> for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the <mxCellState> should be removed.\n */\nmxGraphView.prototype.removeState = function(cell)\n{\n\tvar state = null;\n\t\n\tif (cell != null)\n\t{\n\t\tstate = this.states.remove(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.graph.cellRenderer.destroy(state);\n\t\t\tstate.invalid = true;\n\t\t\tstate.destroy();\n\t\t}\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: createState\n *\n * Creates and returns an <mxCellState> for the given cell and initializes\n * it using <mxCellRenderer.initialize>.\n * \n * Parameters:\n * \n * cell - <mxCell> for which a new <mxCellState> should be created.\n */\nmxGraphView.prototype.createState = function(cell)\n{\n\treturn new mxCellState(this, cell, this.graph.getCellStyle(cell));\n};\n\n/**\n * Function: getCanvas\n *\n * Returns the DOM node that contains the background-, draw- and\n * overlay- and decoratorpanes.\n */\nmxGraphView.prototype.getCanvas = function()\n{\n\treturn this.canvas;\n};\n\n/**\n * Function: getBackgroundPane\n *\n * Returns the DOM node that represents the background layer.\n */\nmxGraphView.prototype.getBackgroundPane = function()\n{\n\treturn this.backgroundPane;\n};\n\n/**\n * Function: getDrawPane\n *\n * Returns the DOM node that represents the main drawing layer.\n */\nmxGraphView.prototype.getDrawPane = function()\n{\n\treturn this.drawPane;\n};\n\n/**\n * Function: getOverlayPane\n *\n * Returns the DOM node that represents the layer above the drawing layer.\n */\nmxGraphView.prototype.getOverlayPane = function()\n{\n\treturn this.overlayPane;\n};\n\n/**\n * Function: getDecoratorPane\n *\n * Returns the DOM node that represents the topmost drawing layer.\n */\nmxGraphView.prototype.getDecoratorPane = function()\n{\n\treturn this.decoratorPane;\n};\n\n/**\n * Function: isContainerEvent\n * \n * Returns true if the event origin is one of the drawing panes or\n * containers of the view.\n */\nmxGraphView.prototype.isContainerEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\n\treturn (source == this.graph.container ||\n\t\tsource.parentNode == this.backgroundPane ||\n\t\t(source.parentNode != null &&\n\t\tsource.parentNode.parentNode == this.backgroundPane) ||\n\t\tsource == this.canvas.parentNode ||\n\t\tsource == this.canvas ||\n\t\tsource == this.backgroundPane ||\n\t\tsource == this.drawPane ||\n\t\tsource == this.overlayPane ||\n\t\tsource == this.decoratorPane);\n};\n\n/**\n * Function: isScrollEvent\n * \n * Returns true if the event origin is one of the scrollbars of the\n * container in IE. Such events are ignored.\n */\n mxGraphView.prototype.isScrollEvent = function(evt)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar pt = new mxPoint(evt.clientX - offset.x, evt.clientY - offset.y);\n\n\tvar outWidth = this.graph.container.offsetWidth;\n\tvar inWidth = this.graph.container.clientWidth;\n\n\tif (outWidth > inWidth && pt.x > inWidth + 2 && pt.x <= outWidth)\n\t{\n\t\treturn true;\n\t}\n\n\tvar outHeight = this.graph.container.offsetHeight;\n\tvar inHeight = this.graph.container.clientHeight;\n\t\n\tif (outHeight > inHeight && pt.y > inHeight + 2 && pt.y <= outHeight)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: init\n *\n * Initializes the graph event dispatch loop for the specified container\n * and invokes <create> to create the required DOM nodes for the display.\n */\nmxGraphView.prototype.init = function()\n{\n\tthis.installListeners();\n\t\n\t// Creates the DOM nodes for the respective display dialect\n\tvar graph = this.graph;\n\t\n\tif (graph.dialect == mxConstants.DIALECT_SVG)\n\t{\n\t\tthis.createSvg();\n\t}\n\telse if (graph.dialect == mxConstants.DIALECT_VML)\n\t{\n\t\tthis.createVml();\n\t}\n\telse\n\t{\n\t\tthis.createHtml();\n\t}\n};\n\n/**\n * Function: installListeners\n *\n * Installs the required listeners in the container.\n */\nmxGraphView.prototype.installListeners = function()\n{\n\tvar graph = this.graph;\n\tvar container = graph.container;\n\t\n\tif (container != null)\n\t{\n\t\t// Support for touch device gestures (eg. pinch to zoom)\n\t\t// Double-tap handling is implemented in mxGraph.fireMouseEvent\n\t\tif (mxClient.IS_TOUCH)\n\t\t{\n\t\t\tmxEvent.addListener(container, 'gesturestart', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t\t\n\t\t\tmxEvent.addListener(container, 'gesturechange', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\n\t\t\tmxEvent.addListener(container, 'gestureend', mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tgraph.fireGestureEvent(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}));\n\t\t}\n\t\t\n\t\t// Adds basic listeners for graph event dispatching\n\t\tmxEvent.addGestureListeners(container, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Condition to avoid scrollbar events starting a rubberband selection\n\t\t\tif (this.isContainerEvent(evt) && ((!mxClient.IS_IE && !mxClient.IS_IE11 && !mxClient.IS_GC &&\n\t\t\t\t!mxClient.IS_OP && !mxClient.IS_SF) || !this.isScrollEvent(evt)))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}),\n\t\tmxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Adds listener for double click handling on background, this does always\n\t\t// use native event handler, we assume that the DOM of the background\n\t\t// does not change during the double click\n\t\tmxEvent.addListener(container, 'dblclick', mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.isContainerEvent(evt))\n\t\t\t{\n\t\t\t\tgraph.dblClick(evt);\n\t\t\t}\n\t\t}));\n\n\t\t// Workaround for touch events which started on some DOM node\n\t\t// on top of the container, in which case the cells under the\n\t\t// mouse for the move and up events are not detected.\n\t\tvar getState = function(evt)\n\t\t{\n\t\t\tvar state = null;\n\t\t\t\n\t\t\t// Workaround for touch events which started on some DOM node\n\t\t\t// on top of the container, in which case the cells under the\n\t\t\t// mouse for the move and up events are not detected.\n\t\t\tif (mxClient.IS_TOUCH)\n\t\t\t{\n\t\t\t\tvar x = mxEvent.getClientX(evt);\n\t\t\t\tvar y = mxEvent.getClientY(evt);\n\t\t\t\t\n\t\t\t\t// Dispatches the drop event to the graph which\n\t\t\t\t// consumes and executes the source function\n\t\t\t\tvar pt = mxUtils.convertPoint(container, x, y);\n\t\t\t\tstate = graph.view.getState(graph.getCellAt(pt.x, pt.y));\n\t\t\t}\n\t\t\t\n\t\t\treturn state;\n\t\t};\n\t\t\n\t\t// Adds basic listeners for graph event dispatching outside of the\n\t\t// container and finishing the handling of a single gesture\n\t\t// Implemented via graph event dispatch loop to avoid duplicate events\n\t\t// in Firefox and Chrome\n\t\tgraph.addMouseListener(\n\t\t{\n\t\t\tmouseDown: function(sender, me)\n\t\t\t{\n\t\t\t\tgraph.popupMenuHandler.hideMenu();\n\t\t\t},\n\t\t\tmouseMove: function() { },\n\t\t\tmouseUp: function() { }\n\t\t});\n\t\t\n\t\tthis.moveHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\t// Hides the tooltip if mouse is outside container\n\t\t\tif (graph.tooltipHandler != null && graph.tooltipHandler.isHideOnHover())\n\t\t\t{\n\t\t\t\tgraph.tooltipHandler.hide();\n\t\t\t}\n\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden' && !mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, getState(evt)));\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.endHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (this.captureDocumentGesture && graph.isMouseDown && graph.container != null &&\n\t\t\t\t!this.isContainerEvent(evt) && graph.container.style.display != 'none' &&\n\t\t\t\tgraph.container.style.visibility != 'hidden')\n\t\t\t{\n\t\t\t\tgraph.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t\t}\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t}\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the HTML display.\n */\nmxGraphView.prototype.createHtml = function()\n{\n\tvar container = this.graph.container;\n\t\n\tif (container != null)\n\t{\n\t\tthis.canvas = this.createHtmlPane('100%', '100%');\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\n\t\t// Uses minimal size for inner DIVs on Canvas. This is required\n\t\t// for correct event processing in IE. If we have an overlapping\n\t\t// DIV then the events on the cells are only fired for labels.\n\t\tthis.backgroundPane = this.createHtmlPane('1px', '1px');\n\t\tthis.drawPane = this.createHtmlPane('1px', '1px');\n\t\tthis.overlayPane = this.createHtmlPane('1px', '1px');\n\t\tthis.decoratorPane = this.createHtmlPane('1px', '1px');\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\n\t\tcontainer.appendChild(this.canvas);\n\t\tthis.updateContainerStyle(container);\n\t\t\n\t\t// Implements minWidth/minHeight in quirks mode\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tvar onResize = mxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\tvar bounds = this.getGraphBounds();\n\t\t\t\tvar width = bounds.x + bounds.width + this.graph.border;\n\t\t\t\tvar height = bounds.y + bounds.height + this.graph.border;\n\t\t\t\t\n\t\t\t\tthis.updateHtmlCanvasSize(width, height);\n\t\t\t});\n\t\t\t\n\t\t\tmxEvent.addListener(window, 'resize', onResize);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHtmlCanvasSize\n * \n * Updates the size of the HTML canvas.\n */\nmxGraphView.prototype.updateHtmlCanvasSize = function(width, height)\n{\n\tif (this.graph.container != null)\n\t{\n\t\tvar ow = this.graph.container.offsetWidth;\n\t\tvar oh = this.graph.container.offsetHeight;\n\n\t\tif (ow < width)\n\t\t{\n\t\t\tthis.canvas.style.width = width + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.width = '100%';\n\t\t}\n\n\t\tif (oh < height)\n\t\t{\n\t\t\tthis.canvas.style.height = height + 'px';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.canvas.style.height = '100%';\n\t\t}\n\t}\n};\n\n/**\n * Function: createHtmlPane\n * \n * Creates and returns a drawing pane in HTML (DIV).\n */\nmxGraphView.prototype.createHtmlPane = function(width, height)\n{\n\tvar pane = document.createElement('DIV');\n\t\n\tif (width != null && height != null)\n\t{\n\t\tpane.style.position = 'absolute';\n\t\tpane.style.left = '0px';\n\t\tpane.style.top = '0px';\n\n\t\tpane.style.width = width;\n\t\tpane.style.height = height;\n\t}\n\telse\n\t{\n\t\tpane.style.position = 'relative';\n\t}\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates the DOM nodes for the VML display.\n */\nmxGraphView.prototype.createVml = function()\n{\n\tvar container = this.graph.container;\n\n\tif (container != null)\n\t{\n\t\tvar width = container.offsetWidth;\n\t\tvar height = container.offsetHeight;\n\t\tthis.canvas = this.createVmlPane(width, height);\n\t\tthis.canvas.style.overflow = 'hidden';\n\t\t\n\t\tthis.backgroundPane = this.createVmlPane(width, height);\n\t\tthis.drawPane = this.createVmlPane(width, height);\n\t\tthis.overlayPane = this.createVmlPane(width, height);\n\t\tthis.decoratorPane = this.createVmlPane(width, height);\n\t\t\n\t\tthis.canvas.appendChild(this.backgroundPane);\n\t\tthis.canvas.appendChild(this.drawPane);\n\t\tthis.canvas.appendChild(this.overlayPane);\n\t\tthis.canvas.appendChild(this.decoratorPane);\n\t\t\n\t\tcontainer.appendChild(this.canvas);\n\t}\n};\n\n/**\n * Function: createVmlPane\n * \n * Creates a drawing pane in VML (group).\n */\nmxGraphView.prototype.createVmlPane = function(width, height)\n{\n\tvar pane = document.createElement(mxClient.VML_PREFIX + ':group');\n\t\n\t// At this point the width and height are potentially\n\t// uninitialized. That's OK.\n\tpane.style.position = 'absolute';\n\tpane.style.left = '0px';\n\tpane.style.top = '0px';\n\n\tpane.style.width = width + 'px';\n\tpane.style.height = height + 'px';\n\n\tpane.setAttribute('coordsize', width + ',' + height);\n\tpane.setAttribute('coordorigin', '0,0');\n\t\n\treturn pane;\n};\n\n/**\n * Function: create\n *\n * Creates and returns the DOM nodes for the SVG display.\n */\nmxGraphView.prototype.createSvg = function()\n{\n\tvar container = this.graph.container;\n\tthis.canvas = document.createElementNS(mxConstants.NS_SVG, 'g');\n\t\n\t// For background image\n\tthis.backgroundPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.backgroundPane);\n\n\t// Adds two layers (background is early feature)\n\tthis.drawPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.drawPane);\n\n\tthis.overlayPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.overlayPane);\n\t\n\tthis.decoratorPane = document.createElementNS(mxConstants.NS_SVG, 'g');\n\tthis.canvas.appendChild(this.decoratorPane);\n\t\n\tvar root = document.createElementNS(mxConstants.NS_SVG, 'svg');\n\troot.style.left = '0px';\n\troot.style.top = '0px';\n\troot.style.width = '100%';\n\troot.style.height = '100%';\n\t\n\t// NOTE: In standards mode, the SVG must have block layout\n\t// in order for the container DIV to not show scrollbars.\n\troot.style.display = 'block';\n\troot.appendChild(this.canvas);\n\t\n\t// Workaround for scrollbars in IE11 and below\n\tif (mxClient.IS_IE || mxClient.IS_IE11)\n\t{\n\t\troot.style.overflow = 'hidden';\n\t}\n\n\tif (container != null)\n\t{\n\t\tcontainer.appendChild(root);\n\t\tthis.updateContainerStyle(container);\n\t}\n};\n\n/**\n * Function: updateContainerStyle\n * \n * Updates the style of the container after installing the SVG DOM elements.\n */\nmxGraphView.prototype.updateContainerStyle = function(container)\n{\n\t// Workaround for offset of container\n\tvar style = mxUtils.getCurrentStyle(container);\n\t\n\tif (style != null && style.position == 'static')\n\t{\n\t\tcontainer.style.position = 'relative';\n\t}\n\t\n\t// Disables built-in pan and zoom in IE10 and later\n\tif (mxClient.IS_POINTER)\n\t{\n\t\tcontainer.style.touchAction = 'none';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the view and all its resources.\n */\nmxGraphView.prototype.destroy = function()\n{\n\tvar root = (this.canvas != null) ? this.canvas.ownerSVGElement : null;\n\t\n\tif (root == null)\n\t{\n\t\troot = this.canvas;\n\t}\n\t\n\tif (root != null && root.parentNode != null)\n\t{\n\t\tthis.clear(this.currentRoot, true);\n\t\tmxEvent.removeGestureListeners(document, null, this.moveHandler, this.endHandler);\n\t\tmxEvent.release(this.graph.container);\n\t\troot.parentNode.removeChild(root);\n\t\t\n\t\tthis.moveHandler = null;\n\t\tthis.endHandler = null;\n\t\tthis.canvas = null;\n\t\tthis.backgroundPane = null;\n\t\tthis.drawPane = null;\n\t\tthis.overlayPane = null;\n\t\tthis.decoratorPane = null;\n\t}\n};\n\n/**\n * Class: mxCurrentRootChange\n *\n * Action to change the current root in a view.\n *\n * Constructor: mxCurrentRootChange\n *\n * Constructs a change of the current root in the given view.\n */\nfunction mxCurrentRootChange(view, root)\n{\n\tthis.view = view;\n\tthis.root = root;\n\tthis.previous = root;\n\tthis.isUp = root == null;\n\t\n\tif (!this.isUp)\n\t{\n\t\tvar tmp = this.view.currentRoot;\n\t\tvar model = this.view.graph.getModel();\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp == root)\n\t\t\t{\n\t\t\t\tthis.isUp = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = model.getParent(tmp);\n\t\t}\n\t}\n};\n\n/**\n * Function: execute\n *\n * Changes the current root of the view.\n */\nmxCurrentRootChange.prototype.execute = function()\n{\n\tvar tmp = this.view.currentRoot;\n\tthis.view.currentRoot = this.previous;\n\tthis.previous = tmp;\n\n\tvar translate = this.view.graph.getTranslateForRoot(this.view.currentRoot);\n\t\n\tif (translate != null)\n\t{\n\t\tthis.view.translate = new mxPoint(-translate.x, -translate.y);\n\t}\n\n\tif (this.isUp)\n\t{\n\t\tthis.view.clear(this.view.currentRoot, true);\n\t\tthis.view.validate();\n\t}\n\telse\n\t{\n\t\tthis.view.refresh();\n\t}\n\t\n\tvar name = (this.isUp) ? mxEvent.UP : mxEvent.DOWN;\n\tthis.view.fireEvent(new mxEventObject(name,\n\t\t'root', this.view.currentRoot, 'previous', this.previous));\n\tthis.isUp = !this.isUp;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraph\n *\n * Extends <mxEventSource> to implement a graph component for\n * the browser. This is the main class of the package. To activate\n * panning and connections use <setPanning> and <setConnectable>.\n * For rubberband selection you must create a new instance of\n * <mxRubberband>. The following listeners are added to\n * <mouseListeners> by default:\n * \n * - <tooltipHandler>: <mxTooltipHandler> that displays tooltips\n * - <panningHandler>: <mxPanningHandler> for panning and popup menus\n * - <connectionHandler>: <mxConnectionHandler> for creating connections\n * - <graphHandler>: <mxGraphHandler> for moving and cloning cells\n * \n * These listeners will be called in the above order if they are enabled.\n *\n * Background Images:\n * \n * To display a background image, set the image, image width and\n * image height using <setBackgroundImage>. If one of the\n * above values has changed then the <view>'s <mxGraphView.validate>\n * should be invoked.\n * \n * Cell Images:\n * \n * To use images in cells, a shape must be specified in the default\n * vertex style (or any named style). Possible shapes are\n * <mxConstants.SHAPE_IMAGE> and <mxConstants.SHAPE_LABEL>.\n * The code to change the shape used in the default vertex style,\n * the following code is used:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_IMAGE;\n * (end)\n * \n * For the default vertex style, the image to be displayed can be\n * specified in a cell's style using the <mxConstants.STYLE_IMAGE>\n * key and the image URL as a value, for example:\n * \n * (code)\n * image=http://www.example.com/image.gif\n * (end)\n * \n * For a named style, the the stylename must be the first element\n * of the cell style:\n * \n * (code)\n * stylename;image=http://www.example.com/image.gif\n * (end)\n * \n * A cell style can have any number of key=value pairs added, divided\n * by a semicolon as follows:\n * \n * (code)\n * [stylename;|key=value;]\n * (end)\n *\n * Labels:\n * \n * The cell labels are defined by <getLabel> which uses <convertValueToString>\n * if <labelsVisible> is true. If a label must be rendered as HTML markup, then\n * <isHtmlLabel> should return true for the respective cell. If all labels\n * contain HTML markup, <htmlLabels> can be set to true. NOTE: Enabling HTML\n * labels carries a possible security risk (see the section on security in\n * the manual).\n * \n * If wrapping is needed for a label, then <isHtmlLabel> and <isWrapping> must\n * return true for the cell whose label should be wrapped. See <isWrapping> for\n * an example.\n * \n * If clipping is needed to keep the rendering of a HTML label inside the\n * bounds of its vertex, then <isClipping> should return true for the\n * respective cell.\n * \n * By default, edge labels are movable and vertex labels are fixed. This can be\n * changed by setting <edgeLabelsMovable> and <vertexLabelsMovable>, or by\n * overriding <isLabelMovable>.\n *\n * In-place Editing:\n * \n * In-place editing is started with a doubleclick or by typing F2.\n * Programmatically, <edit> is used to check if the cell is editable\n * (<isCellEditable>) and call <startEditingAtCell>, which invokes\n * <mxCellEditor.startEditing>. The editor uses the value returned\n * by <getEditingValue> as the editing value.\n * \n * After in-place editing, <labelChanged> is called, which invokes\n * <mxGraphModel.setValue>, which in turn calls\n * <mxGraphModel.valueForCellChanged> via <mxValueChange>.\n * \n * The event that triggers in-place editing is passed through to the\n * <cellEditor>, which may take special actions depending on the type of the\n * event or mouse location, and is also passed to <getEditingValue>. The event\n * is then passed back to the event processing functions which can perform\n * specific actions based on the trigger event.\n * \n * Tooltips:\n * \n * Tooltips are implemented by <getTooltip>, which calls <getTooltipForCell>\n * if a cell is under the mousepointer. The default implementation checks if\n * the cell has a getTooltip function and calls it if it exists. Hence, in order\n * to provide custom tooltips, the cell must provide a getTooltip function, or \n * one of the two above functions must be overridden.\n * \n * Typically, for custom cell tooltips, the latter function is overridden as\n * follows:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * When using a config file, the function is overridden in the mxGraph section\n * using the following entry:\n * \n * (code)\n * <add as=\"getTooltipForCell\"><![CDATA[\n *   function(cell)\n *   {\n *     var label = this.convertValueToString(cell);\n *     return 'Tooltip for '+label;\n *   }\n * ]]></add>\n * (end)\n * \n * \"this\" refers to the graph in the implementation, so for example to check if \n * a cell is an edge, you use this.getModel().isEdge(cell)\n *\n * For replacing the default implementation of <getTooltipForCell> (rather than \n * replacing the function on a specific instance), the following code should be \n * used after loading the JavaScript files, but before creating a new mxGraph \n * instance using <mxGraph>:\n * \n * (code)\n * mxGraph.prototype.getTooltipForCell = function(cell)\n * {\n *   var label = this.convertValueToString(cell);\n *   return 'Tooltip for '+label;\n * }\n * (end)\n * \n * Shapes & Styles:\n * \n * The implementation of new shapes is demonstrated in the examples. We'll assume\n * that we have implemented a custom shape with the name BoxShape which we want\n * to use for drawing vertices. To use this shape, it must first be registered in\n * the cell renderer as follows:\n * \n * (code)\n * mxCellRenderer.registerShape('box', BoxShape);\n * (end)\n * \n * The code registers the BoxShape constructor under the name box in the cell\n * renderer of the graph. The shape can now be referenced using the shape-key in\n * a style definition. (The cell renderer contains a set of additional shapes,\n * namely one for each constant with a SHAPE-prefix in <mxConstants>.)\n *\n * Styles are a collection of key, value pairs and a stylesheet is a collection\n * of named styles. The names are referenced by the cellstyle, which is stored\n * in <mxCell.style> with the following format: [stylename;|key=value;]. The\n * string is resolved to a collection of key, value pairs, where the keys are\n * overridden with the values in the string.\n *\n * When introducing a new shape, the name under which the shape is registered\n * must be used in the stylesheet. There are three ways of doing this:\n * \n *   - By changing the default style, so that all vertices will use the new\n * \t\tshape\n *   - By defining a new style, so that only vertices with the respective\n * \t\tcellstyle will use the new shape\n *   - By using shape=box in the cellstyle's optional list of key, value pairs\n * \t\tto be overridden\n *\n * In the first case, the code to fetch and modify the default style for\n * vertices is as follows:\n * \n * (code)\n * var style = graph.getStylesheet().getDefaultVertexStyle();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * (end)\n * \n * The code takes the default vertex style, which is used for all vertices that\n * do not have a specific cellstyle, and modifies the value for the shape-key\n * in-place to use the new BoxShape for drawing vertices. This is done by\n * assigning the box value in the second line, which refers to the name of the\n * BoxShape in the cell renderer.\n * \n * In the second case, a collection of key, value pairs is created and then\n * added to the stylesheet under a new name. In order to distinguish the\n * shapename and the stylename we'll use boxstyle for the stylename:\n * \n * (code)\n * var style = new Object();\n * style[mxConstants.STYLE_SHAPE] = 'box';\n * style[mxConstants.STYLE_STROKECOLOR] = '#000000';\n * style[mxConstants.STYLE_FONTCOLOR] = '#000000';\n * graph.getStylesheet().putCellStyle('boxstyle', style);\n * (end)\n * \n * The code adds a new style with the name boxstyle to the stylesheet. To use\n * this style with a cell, it must be referenced from the cellstyle as follows:\n * \n * (code)\n * var vertex = graph.insertVertex(parent, null, 'Hello, World!', 20, 20, 80, 20,\n * \t\t\t\t'boxstyle');\n * (end)\n * \n * To summarize, each new shape must be registered in the <mxCellRenderer> with\n * a unique name. That name is then used as the value of the shape-key in a\n * default or custom style. If there are multiple custom shapes, then there\n * should be a separate style for each shape.\n * \n * Inheriting Styles:\n * \n * For fill-, stroke-, gradient- and indicatorColors special keywords can be\n * used. The inherit keyword for one of these colors will inherit the color\n * for the same key from the parent cell. The swimlane keyword does the same,\n * but inherits from the nearest swimlane in the ancestor hierarchy. Finally,\n * the indicated keyword will use the color of the indicator as the color for\n * the given key.\n * \n * Scrollbars:\n * \n * The <containers> overflow CSS property defines if scrollbars are used to\n * display the graph. For values of 'auto' or 'scroll', the scrollbars will\n * be shown. Note that the <resizeContainer> flag is normally not used\n * together with scrollbars, as it will resize the container to match the\n * size of the graph after each change.\n * \n * Multiplicities and Validation:\n * \n * To control the possible connections in mxGraph, <getEdgeValidationError> is\n * used. The default implementation of the function uses <multiplicities>,\n * which is an array of <mxMultiplicity>. Using this class allows to establish\n * simple multiplicities, which are enforced by the graph.\n * \n * The <mxMultiplicity> uses <mxCell.is> to determine for which terminals it\n * applies. The default implementation of <mxCell.is> works with DOM nodes (XML\n * nodes) and checks if the given type parameter matches the nodeName of the\n * node (case insensitive). Optionally, an attributename and value can be\n * specified which are also checked.\n * \n * <getEdgeValidationError> is called whenever the connectivity of an edge\n * changes. It returns an empty string or an error message if the edge is\n * invalid or null if the edge is valid. If the returned string is not empty\n * then it is displayed as an error message.\n * \n * <mxMultiplicity> allows to specify the multiplicity between a terminal and\n * its possible neighbors. For example, if any rectangle may only be connected\n * to, say, a maximum of two circles you can add the following rule to\n * <multiplicities>:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only shape targets allowed'));\n * (end)\n * \n * This will display the first error message whenever a rectangle is connected\n * to more than two circles and the second error message if a rectangle is\n * connected to anything but a circle.\n * \n * For certain multiplicities, such as a minimum of 1 connection, which cannot\n * be enforced at cell creation time (unless the cell is created together with\n * the connection), mxGraph offers <validate> which checks all multiplicities\n * for all cells and displays the respective error messages in an overlay icon\n * on the cells.\n * \n * If a cell is collapsed and contains validation errors, a respective warning\n * icon is attached to the collapsed cell.\n * \n * Auto-Layout:\n * \n * For automatic layout, the <getLayout> hook is provided in <mxLayoutManager>.\n * It can be overridden to return a layout algorithm for the children of a\n * given cell.\n * \n * Unconnected edges:\n * \n * The default values for all switches are designed to meet the requirements of\n * general diagram drawing applications. A very typical set of settings to\n * avoid edges that are not connected is the following:\n * \n * (code)\n * graph.setAllowDanglingEdges(false);\n * graph.setDisconnectOnMove(false);\n * (end)\n * \n * Setting the <cloneInvalidEdges> switch to true is optional. This switch\n * controls if edges are inserted after a copy, paste or clone-drag if they are\n * invalid. For example, edges are invalid if copied or control-dragged without \n * having selected the corresponding terminals and allowDanglingEdges is\n * false, in which case the edges will not be cloned if the switch is false.\n * \n * Output:\n * \n * To produce an XML representation for a diagram, the following code can be\n * used.\n * \n * (code)\n * var enc = new mxCodec(mxUtils.createXmlDocument());\n * var node = enc.encode(graph.getModel());\n * (end)\n * \n * This will produce an XML node than can be handled using the DOM API or\n * turned into a string representation using the following code:\n * \n * (code)\n * var xml = mxUtils.getXml(node);\n * (end)\n * \n * To obtain a formatted string, mxUtils.getPrettyXml can be used instead.\n * \n * This string can now be stored in a local persistent storage (for example\n * using Google Gears) or it can be passed to a backend using mxUtils.post as\n * follows. The url variable is the URL of the Java servlet, PHP page or HTTP\n * handler, depending on the server.\n * \n * (code)\n * var xmlString = encodeURIComponent(mxUtils.getXml(node));\n * mxUtils.post(url, 'xml='+xmlString, function(req)\n * {\n *   // Process server response using req of type mxXmlRequest\n * });\n * (end)\n * \n * Input:\n * \n * To load an XML representation of a diagram into an existing graph object\n * mxUtils.load can be used as follows. The url variable is the URL of the Java\n * servlet, PHP page or HTTP handler that produces the XML string.\n * \n * (code)\n * var xmlDoc = mxUtils.load(url).getXml();\n * var node = xmlDoc.documentElement;\n * var dec = new mxCodec(node.ownerDocument);\n * dec.decode(node, graph.getModel());\n * (end)\n * \n * For creating a page that loads the client and a diagram using a single\n * request please refer to the deployment examples in the backends.\n * \n * Functional dependencies:\n * \n * (see images/callgraph.png)\n * \n * Resources:\n *\n * resources/graph - Language resources for mxGraph\n *\n * Group: Events\n * \n * Event: mxEvent.ROOT\n * \n * Fires if the root in the model has changed. This event has no properties.\n * \n * Event: mxEvent.ALIGN_CELLS\n * \n * Fires between begin- and endUpdate in <alignCells>. The <code>cells</code>\n * and <code>align</code> properties contain the respective arguments that were\n * passed to <alignCells>.\n *\n * Event: mxEvent.FLIP_EDGE\n *\n * Fires between begin- and endUpdate in <flipEdge>. The <code>edge</code>\n * property contains the edge passed to <flipEdge>.\n * \n * Event: mxEvent.ORDER_CELLS\n * \n * Fires between begin- and endUpdate in <orderCells>. The <code>cells</code>\n * and <code>back</code> properties contain the respective arguments that were\n * passed to <orderCells>.\n *\n * Event: mxEvent.CELLS_ORDERED\n *\n * Fires between begin- and endUpdate in <cellsOrdered>. The <code>cells</code>\n * and <code>back</code> arguments contain the respective arguments that were\n * passed to <cellsOrdered>.\n * \n * Event: mxEvent.GROUP_CELLS\n * \n * Fires between begin- and endUpdate in <groupCells>. The <code>group</code>,\n * <code>cells</code> and <code>border</code> arguments contain the respective\n * arguments that were passed to <groupCells>.\n * \n * Event: mxEvent.UNGROUP_CELLS\n * \n * Fires between begin- and endUpdate in <ungroupCells>. The <code>cells</code>\n * property contains the array of cells that was passed to <ungroupCells>.\n * \n * Event: mxEvent.REMOVE_CELLS_FROM_PARENT\n * \n * Fires between begin- and endUpdate in <removeCellsFromParent>. The\n * <code>cells</code> property contains the array of cells that was passed to\n * <removeCellsFromParent>.\n * \n * Event: mxEvent.ADD_CELLS\n * \n * Fires between begin- and endUpdate in <addCells>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code> and\n * <code>target</code> properties contain the respective arguments that were\n * passed to <addCells>.\n * \n * Event: mxEvent.CELLS_ADDED\n * \n * Fires between begin- and endUpdate in <cellsAdded>. The <code>cells</code>,\n * <code>parent</code>, <code>index</code>, <code>source</code>,\n * <code>target</code> and <code>absolute</code> properties contain the\n * respective arguments that were passed to <cellsAdded>.\n * \n * Event: mxEvent.REMOVE_CELLS\n * \n * Fires between begin- and endUpdate in <removeCells>. The <code>cells</code>\n * and <code>includeEdges</code> arguments contain the respective arguments\n * that were passed to <removeCells>.\n * \n * Event: mxEvent.CELLS_REMOVED\n * \n * Fires between begin- and endUpdate in <cellsRemoved>. The <code>cells</code>\n * argument contains the array of cells that was removed.\n * \n * Event: mxEvent.SPLIT_EDGE\n * \n * Fires between begin- and endUpdate in <splitEdge>. The <code>edge</code>\n * property contains the edge to be splitted, the <code>cells</code>,\n * <code>newEdge</code>, <code>dx</code> and <code>dy</code> properties contain\n * the respective arguments that were passed to <splitEdge>.\n * \n * Event: mxEvent.TOGGLE_CELLS\n * \n * Fires between begin- and endUpdate in <toggleCells>. The <code>show</code>,\n * <code>cells</code> and <code>includeEdges</code> properties contain the\n * respective arguments that were passed to <toggleCells>.\n * \n * Event: mxEvent.FOLD_CELLS\n * \n * Fires between begin- and endUpdate in <foldCells>. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to <foldCells>.\n * \n * Event: mxEvent.CELLS_FOLDED\n * \n * Fires between begin- and endUpdate in cellsFolded. The\n * <code>collapse</code>, <code>cells</code> and <code>recurse</code>\n * properties contain the respective arguments that were passed to\n * <cellsFolded>.\n * \n * Event: mxEvent.UPDATE_CELL_SIZE\n * \n * Fires between begin- and endUpdate in <updateCellSize>. The\n * <code>cell</code> and <code>ignoreChildren</code> properties contain the\n * respective arguments that were passed to <updateCellSize>.\n * \n * Event: mxEvent.RESIZE_CELLS\n * \n * Fires between begin- and endUpdate in <resizeCells>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <resizeCells>.\n * \n * Event: mxEvent.CELLS_RESIZED\n * \n * Fires between begin- and endUpdate in <cellsResized>. The <code>cells</code>\n * and <code>bounds</code> properties contain the respective arguments that\n * were passed to <cellsResized>.\n * \n * Event: mxEvent.MOVE_CELLS\n * \n * Fires between begin- and endUpdate in <moveCells>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code>, <code>clone</code>, <code>target</code>\n * and <code>event</code> properties contain the respective arguments that\n * were passed to <moveCells>.\n * \n * Event: mxEvent.CELLS_MOVED\n * \n * Fires between begin- and endUpdate in <cellsMoved>. The <code>cells</code>,\n * <code>dx</code>, <code>dy</code> and <code>disconnect</code> properties\n * contain the respective arguments that were passed to <cellsMoved>.\n * \n * Event: mxEvent.CONNECT_CELL\n * \n * Fires between begin- and endUpdate in <connectCell>. The <code>edge</code>,\n * <code>terminal</code> and <code>source</code> properties contain the\n * respective arguments that were passed to <connectCell>.\n * \n * Event: mxEvent.CELL_CONNECTED\n * \n * Fires between begin- and endUpdate in <cellConnected>. The\n * <code>edge</code>, <code>terminal</code> and <code>source</code> properties\n * contain the respective arguments that were passed to <cellConnected>.\n * \n * Event: mxEvent.REFRESH\n * \n * Fires after <refresh> was executed. This event has no properties.\n *\n * Event: mxEvent.CLICK\n * \n * Fires in <click> after a click event. The <code>event</code> property\n * contains the original mouse event and <code>cell</code> property contains\n * the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.DOUBLE_CLICK\n *\n * Fires in <dblClick> after a double click. The <code>event</code> property\n * contains the original mouse event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n * \n * Event: mxEvent.GESTURE\n *\n * Fires in <fireGestureEvent> after a touch gesture. The <code>event</code>\n * property contains the original gesture end event and the <code>cell</code>\n * property contains the optional cell associated with the gesture.\n *\n * Event: mxEvent.TAP_AND_HOLD\n *\n * Fires in <tapAndHold> if a tap and hold event was detected. The <code>event</code>\n * property contains the initial touch event and the <code>cell</code> property\n * contains the cell under the mouse or null if the background was clicked.\n *\n * Event: mxEvent.FIRE_MOUSE_EVENT\n *\n * Fires in <fireMouseEvent> before the mouse listeners are invoked. The\n * <code>eventName</code> property contains the event name and the\n * <code>event</code> property contains the <mxMouseEvent>.\n *\n * Event: mxEvent.SIZE\n *\n * Fires after <sizeDidChange> was executed. The <code>bounds</code> property\n * contains the new graph bounds.\n *\n * Event: mxEvent.START_EDITING\n *\n * Fires before the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STARTED\n *\n * Fires after the in-place editor starts in <startEditingAtCell>. The\n * <code>cell</code> property contains the cell that is being edited and the\n * <code>event</code> property contains the optional event argument that was\n * passed to <startEditingAtCell>.\n * \n * Event: mxEvent.EDITING_STOPPED\n *\n * Fires after the in-place editor stops in <stopEditing>.\n *\n * Event: mxEvent.LABEL_CHANGED\n *\n * Fires between begin- and endUpdate in <cellLabelChanged>. The\n * <code>cell</code> property contains the cell, the <code>value</code>\n * property contains the new value for the cell, the <code>old</code> property\n * contains the old value and the optional <code>event</code> property contains\n * the mouse event that started the edit.\n * \n * Event: mxEvent.ADD_OVERLAY\n *\n * Fires after an overlay is added in <addCellOverlay>. The <code>cell</code>\n * property contains the cell and the <code>overlay</code> property contains\n * the <mxCellOverlay> that was added.\n *\n * Event: mxEvent.REMOVE_OVERLAY\n *\n * Fires after an overlay is removed in <removeCellOverlay> and\n * <removeCellOverlays>. The <code>cell</code> property contains the cell and\n * the <code>overlay</code> property contains the <mxCellOverlay> that was\n * removed.\n * \n * Constructor: mxGraph\n * \n * Constructs a new mxGraph in the specified container. Model is an optional\n * mxGraphModel. If no model is provided, a new mxGraphModel instance is \n * used as the model. The container must have a valid owner document prior \n * to calling this function in Internet Explorer. RenderHint is a string to\n * affect the display performance and rendering in IE, but not in SVG-based \n * browsers. The parameter is mapped to <dialect>, which may \n * be one of <mxConstants.DIALECT_SVG> for SVG-based browsers, \n * <mxConstants.DIALECT_STRICTHTML> for fastest display mode,\n * <mxConstants.DIALECT_PREFERHTML> for faster display mode,\n * <mxConstants.DIALECT_MIXEDHTML> for fast and <mxConstants.DIALECT_VML> \n * for exact display mode (slowest). The dialects are defined in mxConstants.\n * The default values are DIALECT_SVG for SVG-based browsers and\n * DIALECT_MIXED for IE.\n *\n * The possible values for the renderingHint parameter are explained below:\n * \n * fast - The parameter is based on the fact that the display performance is \n * highly improved in IE if the VML is not contained within a VML group \n * element. The lack of a group element only slightly affects the display while \n * panning, but improves the performance by almost a factor of 2, while keeping \n * the display sufficiently accurate. This also allows to render certain shapes as HTML \n * if the display accuracy is not affected, which is implemented by \n * <mxShape.isMixedModeHtml>. This is the default setting and is mapped to\n * DIALECT_MIXEDHTML.\n * faster - Same as fast, but more expensive shapes are avoided. This is \n * controlled by <mxShape.preferModeHtml>. The default implementation will \n * avoid gradients and rounded rectangles, but more significant shapes, such \n * as rhombus, ellipse, actor and cylinder will be rendered accurately. This \n * setting is mapped to DIALECT_PREFERHTML.\n * fastest - Almost anything will be rendered in Html. This allows for \n * rectangles, labels and images. This setting is mapped to\n * DIALECT_STRICTHTML.\n * exact - If accurate panning is required and if the diagram is small (up\n * to 100 cells), then this value should be used. In this mode, a group is \n * created that contains the VML. This allows for accurate panning and is \n * mapped to DIALECT_VML.\n *\n * Example:\n * \n * To create a graph inside a DOM node with an id of graph:\n * (code)\n * var container = document.getElementById('graph');\n * var graph = new mxGraph(container);\n * (end)\n * \n * Parameters:\n * \n * container - Optional DOM node that acts as a container for the graph.\n * If this is null then the container can be initialized later using\n * <init>.\n * model - Optional <mxGraphModel> that constitutes the graph data.\n * renderHint - Optional string that specifies the display accuracy and\n * performance. Default is mxConstants.DIALECT_MIXEDHTML (for IE).\n * stylesheet - Optional <mxStylesheet> to be used in the graph.\n */\nfunction mxGraph(container, model, renderHint, stylesheet)\n{\n\t// Initializes the variable in case the prototype has been\n\t// modified to hold some listeners (which is possible because\n\t// the createHandlers call is executed regardless of the\n\t// arguments passed into the ctor).\n\tthis.mouseListeners = null;\n\t\n\t// Converts the renderHint into a dialect\n\tthis.renderHint = renderHint;\n\n\tif (mxClient.IS_SVG)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_SVG;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_EXACT && mxClient.IS_VML)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_VML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTEST)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_STRICTHTML;\n\t}\n\telse if (renderHint == mxConstants.RENDERING_HINT_FASTER)\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_PREFERHTML;\n\t}\n\telse // default for VML\n\t{\n\t\tthis.dialect = mxConstants.DIALECT_MIXEDHTML;\n\t}\n\t\n\t// Initializes the main members that do not require a container\n\tthis.model = (model != null) ? model : new mxGraphModel();\n\tthis.multiplicities = [];\n\tthis.imageBundles = [];\n\tthis.cellRenderer = this.createCellRenderer();\n\tthis.setSelectionModel(this.createSelectionModel());\n\tthis.setStylesheet((stylesheet != null) ? stylesheet : this.createStylesheet());\n\tthis.view = this.createGraphView();\n\t\n\t// Adds a graph model listener to update the view\n\tthis.graphModelChangeListener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.graphModelChanged(evt.getProperty('edit').changes);\n\t});\n\t\n\tthis.model.addListener(mxEvent.CHANGE, this.graphModelChangeListener);\n\n\t// Installs basic event handlers with disabled default settings.\n\tthis.createHandlers();\n\t\n\t// Initializes the display if a container was specified\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n\t\n\tthis.view.revalidate();\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/graph');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/graph');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxGraph.prototype = new mxEventSource();\nmxGraph.prototype.constructor = mxGraph;\n\n/**\n * Variable: EMPTY_ARRAY\n *\n * Immutable empty array instance.\n */\nmxGraph.prototype.EMPTY_ARRAY = [];\n\n/**\n * Group: Variables\n */\n\n/**\n * Variable: mouseListeners\n * \n * Holds the mouse event listeners. See <fireMouseEvent>.\n */\nmxGraph.prototype.mouseListeners = null;\n\n/**\n * Variable: isMouseDown\n * \n * Holds the state of the mouse button.\n */\nmxGraph.prototype.isMouseDown = false;\n\n/**\n * Variable: model\n * \n * Holds the <mxGraphModel> that contains the cells to be displayed.\n */\nmxGraph.prototype.model = null;\n\n/**\n * Variable: view\n * \n * Holds the <mxGraphView> that caches the <mxCellStates> for the cells.\n */\nmxGraph.prototype.view = null;\n\n/**\n * Variable: stylesheet\n * \n * Holds the <mxStylesheet> that defines the appearance of the cells.\n * \n * \n * Example:\n * \n * Use the following code to read a stylesheet into an existing graph.\n * \n * (code)\n * var req = mxUtils.load('stylesheet.xml');\n * var root = req.getDocumentElement();\n * var dec = new mxCodec(root.ownerDocument);\n * dec.decode(root, graph.stylesheet);\n * (end)\n */\nmxGraph.prototype.stylesheet = null;\n\t\n/**\n * Variable: selectionModel\n * \n * Holds the <mxGraphSelectionModel> that models the current selection.\n */\nmxGraph.prototype.selectionModel = null;\n\n/**\n * Variable: cellEditor\n * \n * Holds the <mxCellEditor> that is used as the in-place editing.\n */\nmxGraph.prototype.cellEditor = null;\n\n/**\n * Variable: cellRenderer\n * \n * Holds the <mxCellRenderer> for rendering the cells in the graph.\n */\nmxGraph.prototype.cellRenderer = null;\n\n/**\n * Variable: multiplicities\n * \n * An array of <mxMultiplicities> describing the allowed\n * connections in a graph.\n */\nmxGraph.prototype.multiplicities = null;\n\n/**\n * Variable: renderHint\n * \n * RenderHint as it was passed to the constructor.\n */\nmxGraph.prototype.renderHint = null;\n\n/**\n * Variable: dialect\n * \n * Dialect to be used for drawing the graph. Possible values are all\n * constants in <mxConstants> with a DIALECT-prefix.\n */\nmxGraph.prototype.dialect = null;\n\n/**\n * Variable: gridSize\n * \n * Specifies the grid size. Default is 10.\n */\nmxGraph.prototype.gridSize = 10;\n\t\n/**\n * Variable: gridEnabled\n * \n * Specifies if the grid is enabled. This is used in <snap>. Default is\n * true.\n */\nmxGraph.prototype.gridEnabled = true;\n\n/**\n * Variable: portsEnabled\n * \n * Specifies if ports are enabled. This is used in <cellConnected> to update\n * the respective style. Default is true.\n */\nmxGraph.prototype.portsEnabled = true;\n\n/**\n * Variable: nativeDoubleClickEnabled\n * \n * Specifies if native double click events should be detected. Default is true.\n */\nmxGraph.prototype.nativeDblClickEnabled = true;\n\n/**\n * Variable: doubleTapEnabled\n * \n * Specifies if double taps on touch-based devices should be handled as a\n * double click. Default is true.\n */\nmxGraph.prototype.doubleTapEnabled = true;\n\n/**\n * Variable: doubleTapTimeout\n * \n * Specifies the timeout for double taps and non-native double clicks. Default\n * is 500 ms.\n */\nmxGraph.prototype.doubleTapTimeout = 500;\n\n/**\n * Variable: doubleTapTolerance\n * \n * Specifies the tolerance for double taps and double clicks in quirks mode.\n * Default is 25 pixels.\n */\nmxGraph.prototype.doubleTapTolerance = 25;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the x-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchX\n * \n * Holds the y-coordinate of the last touch event for double tap detection.\n */\nmxGraph.prototype.lastTouchY = 0;\n\n/**\n * Variable: lastTouchTime\n * \n * Holds the time of the last touch event for double click detection.\n */\nmxGraph.prototype.lastTouchTime = 0;\n\n/**\n * Variable: tapAndHoldEnabled\n * \n * Specifies if tap and hold should be used for starting connections on touch-based\n * devices. Default is true.\n */\nmxGraph.prototype.tapAndHoldEnabled = true;\n\n/**\n * Variable: tapAndHoldDelay\n * \n * Specifies the time for a tap and hold. Default is 500 ms.\n */\nmxGraph.prototype.tapAndHoldDelay = 500;\n\n/**\n * Variable: tapAndHoldInProgress\n * \n * True if the timer for tap and hold events is running.\n */\nmxGraph.prototype.tapAndHoldInProgress = false;\n\n/**\n * Variable: tapAndHoldValid\n * \n * True as long as the timer is running and the touch events\n * stay within the given <tapAndHoldTolerance>.\n */\nmxGraph.prototype.tapAndHoldValid = false;\n\n/**\n * Variable: initialTouchX\n * \n * Holds the x-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchX = 0;\n\n/**\n * Variable: initialTouchY\n * \n * Holds the y-coordinate of the intial touch event for tap and hold.\n */\nmxGraph.prototype.initialTouchY = 0;\n\n/**\n * Variable: tolerance\n * \n * Tolerance for a move to be handled as a single click.\n * Default is 4 pixels.\n */\nmxGraph.prototype.tolerance = 4;\n\n/**\n * Variable: defaultOverlap\n * \n * Value returned by <getOverlap> if <isAllowOverlapParent> returns\n * true for the given cell. <getOverlap> is used in <constrainChild> if\n * <isConstrainChild> returns true. The value specifies the\n * portion of the child which is allowed to overlap the parent.\n */\nmxGraph.prototype.defaultOverlap = 0.5;\n\n/**\n * Variable: defaultParent\n * \n * Specifies the default parent to be used to insert new cells.\n * This is used in <getDefaultParent>. Default is null.\n */\nmxGraph.prototype.defaultParent = null;\n\n/**\n * Variable: alternateEdgeStyle\n * \n * Specifies the alternate edge style to be used if the main control point\n * on an edge is being doubleclicked. Default is null.\n */\nmxGraph.prototype.alternateEdgeStyle = null;\n\n/**\n * Variable: backgroundImage\n *\n * Specifies the <mxImage> to be returned by <getBackgroundImage>. Default\n * is null.\n * \n * Example:\n *\n * (code)\n * var img = new mxImage('http://www.example.com/maps/examplemap.jpg', 1024, 768);\n * graph.setBackgroundImage(img);\n * graph.view.validate();\n * (end)\n */\nmxGraph.prototype.backgroundImage = null;\n\n/**\n * Variable: pageVisible\n *\n * Specifies if the background page should be visible. Default is false.\n * Not yet implemented.\n */\nmxGraph.prototype.pageVisible = false;\n\n/**\n * Variable: pageBreaksVisible\n * \n * Specifies if a dashed line should be drawn between multiple pages. Default\n * is false. If you change this value while a graph is being displayed then you\n * should call <sizeDidChange> to force an update of the display.\n */\nmxGraph.prototype.pageBreaksVisible = false;\n\n/**\n * Variable: pageBreakColor\n * \n * Specifies the color for page breaks. Default is 'gray'.\n */\nmxGraph.prototype.pageBreakColor = 'gray';\n\n/**\n * Variable: pageBreakDashed\n * \n * Specifies the page breaks should be dashed. Default is true.\n */\nmxGraph.prototype.pageBreakDashed = true;\n\n/**\n * Variable: minPageBreakDist\n * \n * Specifies the minimum distance for page breaks to be visible. Default is\n * 20 (in pixels).\n */\nmxGraph.prototype.minPageBreakDist = 20;\n\n/**\n * Variable: preferPageSize\n * \n * Specifies if the graph size should be rounded to the next page number in\n * <sizeDidChange>. This is only used if the graph container has scrollbars.\n * Default is false.\n */\nmxGraph.prototype.preferPageSize = false;\n\n/**\n * Variable: pageFormat\n *\n * Specifies the page format for the background page. Default is\n * <mxConstants.PAGE_FORMAT_A4_PORTRAIT>. This is used as the default in\n * <mxPrintPreview> and for painting the background page if <pageVisible> is\n * true and the pagebreaks if <pageBreaksVisible> is true.\n */\nmxGraph.prototype.pageFormat = mxConstants.PAGE_FORMAT_A4_PORTRAIT;\n\n/**\n * Variable: pageScale\n *\n * Specifies the scale of the background page. Default is 1.5.\n * Not yet implemented.\n */\nmxGraph.prototype.pageScale = 1.5;\n\n/**\n * Variable: enabled\n * \n * Specifies the return value for <isEnabled>. Default is true.\n */\nmxGraph.prototype.enabled = true;\n\n/**\n * Variable: escapeEnabled\n * \n * Specifies if <mxKeyHandler> should invoke <escape> when the escape key\n * is pressed. Default is true.\n */\nmxGraph.prototype.escapeEnabled = true;\n\n/**\n * Variable: invokesStopCellEditing\n * \n * If true, when editing is to be stopped by way of selection changing,\n * data in diagram changing or other means stopCellEditing is invoked, and\n * changes are saved. This is implemented in a focus handler in\n * <mxCellEditor>. Default is true.\n */\nmxGraph.prototype.invokesStopCellEditing = true;\n\n/**\n * Variable: enterStopsCellEditing\n * \n * If true, pressing the enter key without pressing control or shift will stop\n * editing and accept the new value. This is used in <mxCellEditor> to stop\n * cell editing. Note: You can always use F2 and escape to stop editing.\n * Default is false.\n */\nmxGraph.prototype.enterStopsCellEditing = false;\n\n/**\n * Variable: useScrollbarsForPanning\n * \n * Specifies if scrollbars should be used for panning in <panGraph> if\n * any scrollbars are available. If scrollbars are enabled in CSS, but no\n * scrollbars appear because the graph is smaller than the container size,\n * then no panning occurs if this is true. Default is true.\n */\nmxGraph.prototype.useScrollbarsForPanning = true;\n\n/**\n * Variable: exportEnabled\n * \n * Specifies the return value for <canExportCell>. Default is true.\n */\nmxGraph.prototype.exportEnabled = true;\n\n/**\n * Variable: importEnabled\n * \n * Specifies the return value for <canImportCell>. Default is true.\n */\nmxGraph.prototype.importEnabled = true;\n\n/**\n * Variable: cellsLocked\n * \n * Specifies the return value for <isCellLocked>. Default is false.\n */\nmxGraph.prototype.cellsLocked = false;\n\n/**\n * Variable: cellsCloneable\n * \n * Specifies the return value for <isCellCloneable>. Default is true.\n */\nmxGraph.prototype.cellsCloneable = true;\n\n/**\n * Variable: foldingEnabled\n * \n * Specifies if folding (collapse and expand via an image icon in the graph\n * should be enabled). Default is true.\n */\nmxGraph.prototype.foldingEnabled = true;\n\n/**\n * Variable: cellsEditable\n * \n * Specifies the return value for <isCellEditable>. Default is true.\n */\nmxGraph.prototype.cellsEditable = true;\n\t\t\n/**\n * Variable: cellsDeletable\n * \n * Specifies the return value for <isCellDeletable>. Default is true.\n */\nmxGraph.prototype.cellsDeletable = true;\n\n/**\n * Variable: cellsMovable\n * \n * Specifies the return value for <isCellMovable>. Default is true.\n */\nmxGraph.prototype.cellsMovable = true;\n\t\n/**\n * Variable: edgeLabelsMovable\n * \n * Specifies the return value for edges in <isLabelMovable>. Default is true.\n */\nmxGraph.prototype.edgeLabelsMovable = true;\n\t\n/**\n * Variable: vertexLabelsMovable\n * \n * Specifies the return value for vertices in <isLabelMovable>. Default is false.\n */\nmxGraph.prototype.vertexLabelsMovable = false;\n\n/**\n * Variable: dropEnabled\n * \n * Specifies the return value for <isDropEnabled>. Default is false.\n */\nmxGraph.prototype.dropEnabled = false;\n\n/**\n * Variable: splitEnabled\n * \n * Specifies if dropping onto edges should be enabled. This is ignored if\n * <dropEnabled> is false. If enabled, it will call <splitEdge> to carry\n * out the drop operation. Default is true.\n */\nmxGraph.prototype.splitEnabled = true;\n\n/**\n * Variable: cellsResizable\n * \n * Specifies the return value for <isCellResizable>. Default is true.\n */\nmxGraph.prototype.cellsResizable = true;\n\n/**\n * Variable: cellsBendable\n * \n * Specifies the return value for <isCellsBendable>. Default is true.\n */\nmxGraph.prototype.cellsBendable = true;\n\n/**\n * Variable: cellsSelectable\n * \n * Specifies the return value for <isCellSelectable>. Default is true.\n */\nmxGraph.prototype.cellsSelectable = true;\n\n/**\n * Variable: cellsDisconnectable\n * \n * Specifies the return value for <isCellDisconntable>. Default is true.\n */\nmxGraph.prototype.cellsDisconnectable = true;\n\n/**\n * Variable: autoSizeCells\n * \n * Specifies if the graph should automatically update the cell size after an\n * edit. This is used in <isAutoSizeCell>. Default is false.\n */\nmxGraph.prototype.autoSizeCells = false;\n\n/**\n * Variable: autoSizeCellsOnAdd\n * \n * Specifies if autoSize style should be applied when cells are added. Default is false.\n */\nmxGraph.prototype.autoSizeCellsOnAdd = false;\n\n/**\n * Variable: autoScroll\n * \n * Specifies if the graph should automatically scroll if the mouse goes near\n * the container edge while dragging. This is only taken into account if the\n * container has scrollbars. Default is true.\n * \n * If you need this to work without scrollbars then set <ignoreScrollbars> to\n * true. Please consult the <ignoreScrollbars> for details. In general, with\n * no scrollbars, the use of <allowAutoPanning> is recommended.\n */\nmxGraph.prototype.autoScroll = true;\n\n/**\n * Variable: ignoreScrollbars\n * \n * Specifies if the graph should automatically scroll regardless of the\n * scrollbars. This will scroll the container using positive values for\n * scroll positions (ie usually only rightwards and downwards). To avoid\n * possible conflicts with panning, set <translateToScrollPosition> to true.\n */\nmxGraph.prototype.ignoreScrollbars = false;\n\n/**\n * Variable: translateToScrollPosition\n * \n * Specifies if the graph should automatically convert the current scroll\n * position to a translate in the graph view when a mouseUp event is received.\n * This can be used to avoid conflicts when using <autoScroll> and\n * <ignoreScrollbars> with no scrollbars in the container.\n */\nmxGraph.prototype.translateToScrollPosition = false;\n\n/**\n * Variable: timerAutoScroll\n * \n * Specifies if autoscrolling should be carried out via mxPanningManager even\n * if the container has scrollbars. This disables <scrollPointToVisible> and\n * uses <mxPanningManager> instead. If this is true then <autoExtend> is\n * disabled. It should only be used with a scroll buffer or when scollbars\n * are visible and scrollable in all directions. Default is false.\n */\nmxGraph.prototype.timerAutoScroll = false;\n\n/**\n * Variable: allowAutoPanning\n * \n * Specifies if panning via <panGraph> should be allowed to implement autoscroll\n * if no scrollbars are available in <scrollPointToVisible>. To enable panning\n * inside the container, near the edge, set <mxPanningManager.border> to a\n * positive value. Default is false.\n */\nmxGraph.prototype.allowAutoPanning = false;\n\n/**\n * Variable: autoExtend\n * \n * Specifies if the size of the graph should be automatically extended if the\n * mouse goes near the container edge while dragging. This is only taken into\n * account if the container has scrollbars. Default is true. See <autoScroll>.\n */\nmxGraph.prototype.autoExtend = true;\n\n/**\n * Variable: maximumGraphBounds\n * \n * <mxRectangle> that specifies the area in which all cells in the diagram\n * should be placed. Uses in <getMaximumGraphBounds>. Use a width or height of\n * 0 if you only want to give a upper, left corner.\n */\nmxGraph.prototype.maximumGraphBounds = null;\n\n/**\n * Variable: minimumGraphSize\n * \n * <mxRectangle> that specifies the minimum size of the graph. This is ignored\n * if the graph container has no scrollbars. Default is null.\n */\nmxGraph.prototype.minimumGraphSize = null;\n\n/**\n * Variable: minimumContainerSize\n * \n * <mxRectangle> that specifies the minimum size of the <container> if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.minimumContainerSize = null;\n\t\t\n/**\n * Variable: maximumContainerSize\n * \n * <mxRectangle> that specifies the maximum size of the container if\n * <resizeContainer> is true.\n */\nmxGraph.prototype.maximumContainerSize = null;\n\n/**\n * Variable: resizeContainer\n * \n * Specifies if the container should be resized to the graph size when\n * the graph size has changed. Default is false.\n */\nmxGraph.prototype.resizeContainer = false;\n\n/**\n * Variable: border\n * \n * Border to be added to the bottom and right side when the container is\n * being resized after the graph has been changed. Default is 0.\n */\nmxGraph.prototype.border = 0;\n\t\t\n/**\n * Variable: keepEdgesInForeground\n * \n * Specifies if edges should appear in the foreground regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInForeground = false;\n\n/**\n * Variable: keepEdgesInBackground\n * \n * Specifies if edges should appear in the background regardless of their order\n * in the model. If <keepEdgesInForeground> and <keepEdgesInBackground> are\n * both true then the normal order is applied. Default is false.\n */\nmxGraph.prototype.keepEdgesInBackground = false;\n\n/**\n * Variable: allowNegativeCoordinates\n * \n * Specifies if negative coordinates for vertices are allowed. Default is true.\n */\nmxGraph.prototype.allowNegativeCoordinates = true;\n\n/**\n * Variable: constrainChildren\n * \n * Specifies if a child should be constrained inside the parent bounds after a\n * move or resize of the child. Default is true.\n */\nmxGraph.prototype.constrainChildren = true;\n\n/**\n * Variable: constrainRelativeChildren\n * \n * Specifies if child cells with relative geometries should be constrained\n * inside the parent bounds, if <constrainChildren> is true, and/or the\n * <maximumGraphBounds>. Default is false.\n */\nmxGraph.prototype.constrainRelativeChildren = false;\n\n/**\n * Variable: extendParents\n * \n * Specifies if a parent should contain the child bounds after a resize of\n * the child. Default is true. This has precedence over <constrainChildren>.\n */\nmxGraph.prototype.extendParents = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is true.\n */\nmxGraph.prototype.extendParentsOnAdd = true;\n\n/**\n * Variable: extendParentsOnAdd\n * \n * Specifies if parents should be extended according to the <extendParents>\n * switch if cells are added. Default is false for backwards compatiblity.\n */\nmxGraph.prototype.extendParentsOnMove = false;\n\n/**\n * Variable: recursiveResize\n * \n * Specifies the return value for <isRecursiveResize>. Default is\n * false for backwards compatiblity.\n */\nmxGraph.prototype.recursiveResize = false;\n\n/**\n * Variable: collapseToPreferredSize\n * \n * Specifies if the cell size should be changed to the preferred size when\n * a cell is first collapsed. Default is true.\n */\nmxGraph.prototype.collapseToPreferredSize = true;\n\n/**\n * Variable: zoomFactor\n * \n * Specifies the factor used for <zoomIn> and <zoomOut>. Default is 1.2\n * (120%).\n */\nmxGraph.prototype.zoomFactor = 1.2;\n\n/**\n * Variable: keepSelectionVisibleOnZoom\n * \n * Specifies if the viewport should automatically contain the selection cells\n * after a zoom operation. Default is false.\n */\nmxGraph.prototype.keepSelectionVisibleOnZoom = false;\n\n/**\n * Variable: centerZoom\n * \n * Specifies if the zoom operations should go into the center of the actual\n * diagram rather than going from top, left. Default is true.\n */\nmxGraph.prototype.centerZoom = true;\n\n/**\n * Variable: resetViewOnRootChange\n * \n * Specifies if the scale and translate should be reset if the root changes in\n * the model. Default is true.\n */\nmxGraph.prototype.resetViewOnRootChange = true;\n\n/**\n * Variable: resetEdgesOnResize\n * \n * Specifies if edge control points should be reset after the resize of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnResize = false;\n\n/**\n * Variable: resetEdgesOnMove\n * \n * Specifies if edge control points should be reset after the move of a\n * connected cell. Default is false.\n */\nmxGraph.prototype.resetEdgesOnMove = false;\n\n/**\n * Variable: resetEdgesOnConnect\n * \n * Specifies if edge control points should be reset after the the edge has been\n * reconnected. Default is true.\n */\nmxGraph.prototype.resetEdgesOnConnect = true;\n\n/**\n * Variable: allowLoops\n * \n * Specifies if loops (aka self-references) are allowed. Default is false.\n */\nmxGraph.prototype.allowLoops = false;\n\t\n/**\n * Variable: defaultLoopStyle\n * \n * <mxEdgeStyle> to be used for loops. This is a fallback for loops if the\n * <mxConstants.STYLE_LOOP> is undefined. Default is <mxEdgeStyle.Loop>.\n */\nmxGraph.prototype.defaultLoopStyle = mxEdgeStyle.Loop;\n\n/**\n * Variable: multigraph\n * \n * Specifies if multiple edges in the same direction between the same pair of\n * vertices are allowed. Default is true.\n */\nmxGraph.prototype.multigraph = true;\n\n/**\n * Variable: connectableEdges\n * \n * Specifies if edges are connectable. Default is false. This overrides the\n * connectable field in edges.\n */\nmxGraph.prototype.connectableEdges = false;\n\n/**\n * Variable: allowDanglingEdges\n * \n * Specifies if edges with disconnected terminals are allowed in the graph.\n * Default is true.\n */\nmxGraph.prototype.allowDanglingEdges = true;\n\n/**\n * Variable: cloneInvalidEdges\n * \n * Specifies if edges that are cloned should be validated and only inserted\n * if they are valid. Default is true.\n */\nmxGraph.prototype.cloneInvalidEdges = false;\n\n/**\n * Variable: disconnectOnMove\n * \n * Specifies if edges should be disconnected from their terminals when they\n * are moved. Default is true.\n */\nmxGraph.prototype.disconnectOnMove = true;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible. This is used in <getLabel>. Default\n * is true.\n */\nmxGraph.prototype.labelsVisible = true;\n\t\n/**\n * Variable: htmlLabels\n * \n * Specifies the return value for <isHtmlLabel>. Default is false.\n */\nmxGraph.prototype.htmlLabels = false;\n\n/**\n * Variable: swimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selectable via the content if the\n * mouse is released. Default is true.\n */\nmxGraph.prototype.swimlaneSelectionEnabled = true;\n\n/**\n * Variable: swimlaneNesting\n * \n * Specifies if nesting of swimlanes is allowed. Default is true.\n */\nmxGraph.prototype.swimlaneNesting = true;\n\t\n/**\n * Variable: swimlaneIndicatorColorAttribute\n * \n * The attribute used to find the color for the indicator if the indicator\n * color is set to 'swimlane'. Default is <mxConstants.STYLE_FILLCOLOR>.\n */\nmxGraph.prototype.swimlaneIndicatorColorAttribute = mxConstants.STYLE_FILLCOLOR;\n\n/**\n * Variable: imageBundles\n * \n * Holds the list of image bundles.\n */\nmxGraph.prototype.imageBundles = null;\n\n/**\n * Variable: minFitScale\n * \n * Specifies the minimum scale to be applied in <fit>. Default is 0.1. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.minFitScale = 0.1;\n\n/**\n * Variable: maxFitScale\n * \n * Specifies the maximum scale to be applied in <fit>. Default is 8. Set this\n * to null to allow any value.\n */\nmxGraph.prototype.maxFitScale = 8;\n\n/**\n * Variable: panDx\n * \n * Current horizontal panning value. Default is 0.\n */\nmxGraph.prototype.panDx = 0;\n\n/**\n * Variable: panDy\n * \n * Current vertical panning value. Default is 0.\n */\nmxGraph.prototype.panDy = 0;\n\n/**\n * Variable: collapsedImage\n * \n * Specifies the <mxImage> to indicate a collapsed state.\n * Default value is mxClient.imageBasePath + '/collapsed.gif'\n */\nmxGraph.prototype.collapsedImage = new mxImage(mxClient.imageBasePath + '/collapsed.gif', 9, 9);\n\n/**\n * Variable: expandedImage\n * \n * Specifies the <mxImage> to indicate a expanded state.\n * Default value is mxClient.imageBasePath + '/expanded.gif'\n */\nmxGraph.prototype.expandedImage = new mxImage(mxClient.imageBasePath + '/expanded.gif', 9, 9);\n\n/**\n * Variable: warningImage\n * \n * Specifies the <mxImage> for the image to be used to display a warning\n * overlay. See <setCellWarning>. Default value is mxClient.imageBasePath +\n * '/warning'.  The extension for the image depends on the platform. It is\n * '.png' on the Mac and '.gif' on all other platforms.\n */\nmxGraph.prototype.warningImage = new mxImage(mxClient.imageBasePath + '/warning'+\n\t((mxClient.IS_MAC) ? '.png' : '.gif'), 16, 16);\n\n/**\n * Variable: alreadyConnectedResource\n * \n * Specifies the resource key for the error message to be displayed in\n * non-multigraphs when two vertices are already connected. If the resource\n * for this key does not exist then the value is used as the error message.\n * Default is 'alreadyConnected'.\n */\nmxGraph.prototype.alreadyConnectedResource = (mxClient.language != 'none') ? 'alreadyConnected' : '';\n\n/**\n * Variable: containsValidationErrorsResource\n * \n * Specifies the resource key for the warning message to be displayed when\n * a collapsed cell contains validation errors. If the resource for this\n * key does not exist then the value is used as the warning message.\n * Default is 'containsValidationErrors'.\n */\nmxGraph.prototype.containsValidationErrorsResource = (mxClient.language != 'none') ? 'containsValidationErrors' : '';\n\n/**\n * Variable: collapseExpandResource\n * \n * Specifies the resource key for the tooltip on the collapse/expand icon.\n * If the resource for this key does not exist then the value is used as\n * the tooltip. Default is 'collapse-expand'.\n */\nmxGraph.prototype.collapseExpandResource = (mxClient.language != 'none') ? 'collapse-expand' : '';\n\n/**\n * Function: init\n * \n * Initializes the <container> and creates the respective datastructures.\n * \n * Parameters:\n * \n * container - DOM node that will contain the graph display.\n */\nmxGraph.prototype.init = function(container)\n{\n\tthis.container = container;\n\t\n\t// Initializes the in-place editor\n\tthis.cellEditor = this.createCellEditor();\t\n\n\t// Initializes the container using the view\n\tthis.view.init();\n\t\n\t// Updates the size of the container for the current graph\n\tthis.sizeDidChange();\n\t\n\t// Hides tooltips and resets tooltip timer if mouse leaves container\n\tmxEvent.addListener(container, 'mouseleave', mxUtils.bind(this, function()\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t}));\n\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t\t\n\t\t// Disable shift-click for text\n\t\tmxEvent.addListener(container, 'selectstart',\n\t\t\tmxUtils.bind(this, function(evt)\n\t\t\t{\n\t\t\t\treturn this.isEditing() || (!this.isMouseDown && !mxEvent.isShiftDown(evt));\n\t\t\t})\n\t\t);\n\t}\n\t\n\t// Workaround for missing last shape and connect preview in IE8 standards\n\t// mode if no initial graph displayed or no label for shape defined\n\tif (document.documentMode == 8)\n\t{\n\t\tcontainer.insertAdjacentHTML('beforeend', '<' + mxClient.VML_PREFIX + ':group' +\n\t\t\t' style=\"DISPLAY: none;\"></' + mxClient.VML_PREFIX + ':group>');\n\t}\n};\n\n/**\n * Function: createHandlers\n * \n * Creates the tooltip-, panning-, connection- and graph-handler (in this\n * order). This is called in the constructor before <init> is called.\n */\nmxGraph.prototype.createHandlers = function()\n{\n\tthis.tooltipHandler = this.createTooltipHandler();\n\tthis.tooltipHandler.setEnabled(false);\n\tthis.selectionCellsHandler = this.createSelectionCellsHandler();\n\tthis.connectionHandler = this.createConnectionHandler();\n\tthis.connectionHandler.setEnabled(false);\n\tthis.graphHandler = this.createGraphHandler();\n\tthis.panningHandler = this.createPanningHandler();\n\tthis.panningHandler.panningEnabled = false;\n\tthis.popupMenuHandler = this.createPopupMenuHandler();\n};\n\n/**\n * Function: createTooltipHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createTooltipHandler = function()\n{\n\treturn new mxTooltipHandler(this);\n};\n\n/**\n * Function: createSelectionCellsHandler\n * \n * Creates and returns a new <mxTooltipHandler> to be used in this graph.\n */\nmxGraph.prototype.createSelectionCellsHandler = function()\n{\n\treturn new mxSelectionCellsHandler(this);\n};\n\n/**\n * Function: createConnectionHandler\n * \n * Creates and returns a new <mxConnectionHandler> to be used in this graph.\n */\nmxGraph.prototype.createConnectionHandler = function()\n{\n\treturn new mxConnectionHandler(this);\n};\n\n/**\n * Function: createGraphHandler\n * \n * Creates and returns a new <mxGraphHandler> to be used in this graph.\n */\nmxGraph.prototype.createGraphHandler = function()\n{\n\treturn new mxGraphHandler(this);\n};\n\n/**\n * Function: createPanningHandler\n * \n * Creates and returns a new <mxPanningHandler> to be used in this graph.\n */\nmxGraph.prototype.createPanningHandler = function()\n{\n\treturn new mxPanningHandler(this);\n};\n\n/**\n * Function: createPopupMenuHandler\n * \n * Creates and returns a new <mxPopupMenuHandler> to be used in this graph.\n */\nmxGraph.prototype.createPopupMenuHandler = function()\n{\n\treturn new mxPopupMenuHandler(this);\n};\n\n/**\n * Function: createSelectionModel\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createSelectionModel = function()\n{\n\treturn new mxGraphSelectionModel(this);\n};\n\n/**\n * Function: createStylesheet\n * \n * Creates a new <mxGraphSelectionModel> to be used in this graph.\n */\nmxGraph.prototype.createStylesheet = function()\n{\n\treturn new mxStylesheet();\n};\n\n/**\n * Function: createGraphView\n * \n * Creates a new <mxGraphView> to be used in this graph.\n */\nmxGraph.prototype.createGraphView = function()\n{\n\treturn new mxGraphView(this);\n};\n \n/**\n * Function: createCellRenderer\n * \n * Creates a new <mxCellRenderer> to be used in this graph.\n */\nmxGraph.prototype.createCellRenderer = function()\n{\n\treturn new mxCellRenderer();\n};\n\n/**\n * Function: createCellEditor\n * \n * Creates a new <mxCellEditor> to be used in this graph.\n */\nmxGraph.prototype.createCellEditor = function()\n{\n\treturn new mxCellEditor(this);\n};\n\n/**\n * Function: getModel\n * \n * Returns the <mxGraphModel> that contains the cells.\n */\nmxGraph.prototype.getModel = function()\n{\n\treturn this.model;\n};\n\n/**\n * Function: getView\n * \n * Returns the <mxGraphView> that contains the <mxCellStates>.\n */\nmxGraph.prototype.getView = function()\n{\n\treturn this.view;\n};\n\n/**\n * Function: getStylesheet\n * \n * Returns the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.getStylesheet = function()\n{\n\treturn this.stylesheet;\n};\n\n/**\n * Function: setStylesheet\n * \n * Sets the <mxStylesheet> that defines the style.\n */\nmxGraph.prototype.setStylesheet = function(stylesheet)\n{\n\tthis.stylesheet = stylesheet;\n};\n\n/**\n * Function: getSelectionModel\n * \n * Returns the <mxGraphSelectionModel> that contains the selection.\n */\nmxGraph.prototype.getSelectionModel = function()\n{\n\treturn this.selectionModel;\n};\n\n/**\n * Function: setSelectionModel\n * \n * Sets the <mxSelectionModel> that contains the selection.\n */\nmxGraph.prototype.setSelectionModel = function(selectionModel)\n{\n\tthis.selectionModel = selectionModel;\n};\n\n/**\n * Function: getSelectionCellsForChanges\n * \n * Returns the cells to be selected for the given array of changes.\n */\nmxGraph.prototype.getSelectionCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar cells = [];\n\t\n\tvar addCell = mxUtils.bind(this, function(cell)\n\t{\n\t\tif (!dict.get(cell) && this.model.contains(cell))\n\t\t{\n\t\t\tif (this.model.isEdge(cell) || this.model.isVertex(cell))\n\t\t\t{\n\t\t\t\tdict.put(cell, true);\n\t\t\t\tcells.push(cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\taddCell(this.model.getChildAt(cell, i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change.constructor != mxRootChange)\n\t\t{\n\t\t\tvar cell = null;\n\n\t\t\tif (change instanceof mxChildChange)\n\t\t\t{\n\t\t\t\tcell = change.child;\n\t\t\t}\n\t\t\telse if (change.cell != null && change.cell instanceof mxCell)\n\t\t\t{\n\t\t\t\tcell = change.cell;\n\t\t\t}\n\t\t\t\n\t\t\tif (cell != null)\n\t\t\t{\n\t\t\t\taddCell(cell);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: graphModelChanged\n * \n * Called when the graph model changes. Invokes <processChange> on each\n * item of the given array to update the view accordingly.\n * \n * Parameters:\n * \n * changes - Array that contains the individual changes.\n */\nmxGraph.prototype.graphModelChanged = function(changes)\n{\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tthis.processChange(changes[i]);\n\t}\n\t\n\tthis.removeSelectionCells(this.getRemovedCellsForChanges(changes));\n\tthis.view.validate();\n\tthis.sizeDidChange();\n};\n\n/**\n * Function: getRemovedCellsForChanges\n * \n * Returns the cells that have been removed from the model.\n */\nmxGraph.prototype.getRemovedCellsForChanges = function(changes)\n{\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\t// Resets the view settings, removes all cells and clears\n\t\t// the selection if the root changes.\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\telse if (change instanceof mxChildChange)\n\t\t{\n\t\t\tif (this.model.contains(change.previous) && !this.model.contains(change.parent))\n\t\t\t{\n\t\t\t\tresult = result.concat(this.model.getDescendants(change.child));\n\t\t\t}\n\t\t}\n\t\telse if (change instanceof mxVisibleChange)\n\t\t{\n\t\t\tresult = result.concat(this.model.getDescendants(change.cell));\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: processChange\n * \n * Processes the given change and invalidates the respective cached data\n * in <view>. This fires a <root> event if the root has changed in the\n * model.\n * \n * Parameters:\n * \n * change - Object that represents the change on the model.\n */\nmxGraph.prototype.processChange = function(change)\n{\n\t// Resets the view settings, removes all cells and clears\n\t// the selection if the root changes.\n\tif (change instanceof mxRootChange)\n\t{\n\t\tthis.clearSelection();\n\t\tthis.setDefaultParent(null);\n\t\tthis.removeStateForCell(change.previous);\n\t\t\n\t\tif (this.resetViewOnRootChange)\n\t\t{\n\t\t\tthis.view.scale = 1;\n\t\t\tthis.view.translate.x = 0;\n\t\t\tthis.view.translate.y = 0;\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t}\n\t\n\t// Adds or removes a child to the view by online invaliding\n\t// the minimal required portions of the cache, namely, the\n\t// old and new parent and the child.\n\telse if (change instanceof mxChildChange)\n\t{\n\t\tvar newParent = this.model.getParent(change.child);\n\t\tthis.view.invalidate(change.child, true, true);\n\t\t\n\t\tif (!this.model.contains(newParent) || this.isCellCollapsed(newParent))\n\t\t{\n\t\t\tthis.view.invalidate(change.child, true, true);\n\t\t\tthis.removeStateForCell(change.child);\n\t\t\t\n\t\t\t// Handles special case of current root of view being removed\n\t\t\tif (this.view.currentRoot == change.child)\n\t\t\t{\n\t\t\t\tthis.home();\n\t\t\t}\n\t\t}\n \n\t\tif (newParent != change.previous)\n\t\t{\n\t\t\t// Refreshes the collapse/expand icons on the parents\n\t\t\tif (newParent != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(newParent, false, false);\n\t\t\t}\n\t\t\t\n\t\t\tif (change.previous != null)\n\t\t\t{\n\t\t\t\tthis.view.invalidate(change.previous, false, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handles two special cases where the shape does not need to be\n\t// recreated from scratch, it only needs to be invalidated.\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\t// Checks if the geometry has changed to avoid unnessecary revalidation\n\t\tif (change instanceof mxTerminalChange || ((change.previous == null && change.geometry != null) ||\n\t\t\t(change.previous != null && !change.previous.equals(change.geometry))))\n\t\t{\n\t\t\tthis.view.invalidate(change.cell);\n\t\t}\n\t}\n\n\t// Handles two special cases where only the shape, but no\n\t// descendants need to be recreated\n\telse if (change instanceof mxValueChange)\n\t{\n\t\tthis.view.invalidate(change.cell, false, false);\n\t}\n\t\n\t// Requires a new mxShape in JavaScript\n\telse if (change instanceof mxStyleChange)\n\t{\n\t\tthis.view.invalidate(change.cell, true, true);\n\t\tvar state = this.view.getState(change.cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tstate.style = null;\n\t\t}\n\t}\n\t\n\t// Removes the state from the cache by default\n\telse if (change.cell != null && change.cell instanceof mxCell)\n\t{\n\t\tthis.removeStateForCell(change.cell);\n\t}\n};\n\n/**\n * Function: removeStateForCell\n * \n * Removes all cached information for the given cell and its descendants.\n * This is called when a cell was removed from the model.\n * \n * Paramters:\n * \n * cell - <mxCell> that was removed from the model.\n */\nmxGraph.prototype.removeStateForCell = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.removeStateForCell(this.model.getChildAt(cell, i));\n\t}\n\n\tthis.view.invalidate(cell, false, true);\n\tthis.view.removeState(cell);\n};\n\n/**\n * Group: Overlays\n */\n\n/**\n * Function: addCellOverlay\n * \n * Adds an <mxCellOverlay> for the specified cell. This method fires an\n * <addoverlay> event and returns the new <mxCellOverlay>.\n * \n * Parameters:\n * \n * cell - <mxCell> to add the overlay for.\n * overlay - <mxCellOverlay> to be added for the cell.\n */\nmxGraph.prototype.addCellOverlay = function(cell, overlay)\n{\n\tif (cell.overlays == null)\n\t{\n\t\tcell.overlays = [];\n\t}\n\t\n\tcell.overlays.push(overlay);\n\n\tvar state = this.view.getState(cell);\n\n\t// Immediately updates the cell display if the state exists\n\tif (state != null)\n\t{\n\t\tthis.cellRenderer.redraw(state);\n\t}\n\t\n\tthis.fireEvent(new mxEventObject(mxEvent.ADD_OVERLAY,\n\t\t\t'cell', cell, 'overlay', overlay));\n\t\n\treturn overlay;\n};\n\n/**\n * Function: getCellOverlays\n * \n * Returns the array of <mxCellOverlays> for the given cell or null, if\n * no overlays are defined.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be returned.\n */\nmxGraph.prototype.getCellOverlays = function(cell)\n{\n\treturn cell.overlays;\n};\n\n/**\n * Function: removeCellOverlay\n * \n * Removes and returns the given <mxCellOverlay> from the given cell. This\n * method fires a <removeoverlay> event. If no overlay is given, then all\n * overlays are removed using <removeOverlays>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlay should be removed.\n * overlay - Optional <mxCellOverlay> to be removed.\n */\nmxGraph.prototype.removeCellOverlay = function(cell, overlay)\n{\n\tif (overlay == null)\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\telse\n\t{\n\t\tvar index = mxUtils.indexOf(cell.overlays, overlay);\n\t\t\n\t\tif (index >= 0)\n\t\t{\n\t\t\tcell.overlays.splice(index, 1);\n\t\t\t\n\t\t\tif (cell.overlays.length == 0)\n\t\t\t{\n\t\t\t\tcell.overlays = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Immediately updates the cell display if the state exists\n\t\t\tvar state = this.view.getState(cell);\n\t\t\t\n\t\t\tif (state != null)\n\t\t\t{\n\t\t\t\tthis.cellRenderer.redraw(state);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlay));\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\toverlay = null;\n\t\t}\n\t}\n\t\n\treturn overlay;\n};\n\n/**\n * Function: removeCellOverlays\n * \n * Removes all <mxCellOverlays> from the given cell. This method\n * fires a <removeoverlay> event for each <mxCellOverlay> and returns\n * the array of <mxCellOverlays> that was removed from the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose overlays should be removed\n */\nmxGraph.prototype.removeCellOverlays = function(cell)\n{\n\tvar overlays = cell.overlays;\n\t\n\tif (overlays != null)\n\t{\n\t\tcell.overlays = null;\n\t\t\n\t\t// Immediately updates the cell display if the state exists\n\t\tvar state = this.view.getState(cell);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.cellRenderer.redraw(state);\n\t\t}\n\t\t\n\t\tfor (var i = 0; i < overlays.length; i++)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_OVERLAY,\n\t\t\t\t\t'cell', cell, 'overlay', overlays[i]));\n\t\t}\n\t}\n\t\n\treturn overlays;\n};\n\n/**\n * Function: clearCellOverlays\n * \n * Removes all <mxCellOverlays> in the graph for the given cell and all its\n * descendants. If no cell is specified then all overlays are removed from\n * the graph. This implementation uses <removeCellOverlays> to remove the\n * overlays from the individual cells.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> that represents the root of the subtree to\n * remove the overlays from. Default is the root in the model.\n */\nmxGraph.prototype.clearCellOverlays = function(cell)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tthis.removeCellOverlays(cell);\n\t\n\t// Recursively removes all overlays from the children\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\t\tthis.clearCellOverlays(child); // recurse\n\t}\n};\n\n/**\n * Function: setCellWarning\n * \n * Creates an overlay for the given cell using the warning and image or\n * <warningImage> and returns the new <mxCellOverlay>. The warning is\n * displayed as a tooltip in a red font and may contain HTML markup. If\n * the warning is null or a zero length string, then all overlays are\n * removed from the cell.\n * \n * Example:\n * \n * (code)\n * graph.setCellWarning(cell, '<b>Warning:</b>: Hello, World!');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose warning should be set.\n * warning - String that represents the warning to be displayed.\n * img - Optional <mxImage> to be used for the overlay. Default is\n * <warningImage>.\n * isSelect - Optional boolean indicating if a click on the overlay\n * should select the corresponding cell. Default is false.\n */\nmxGraph.prototype.setCellWarning = function(cell, warning, img, isSelect)\n{\n\tif (warning != null && warning.length > 0)\n\t{\n\t\timg = (img != null) ? img : this.warningImage;\n\t\t\n\t\t// Creates the overlay with the image and warning\n\t\tvar overlay = new mxCellOverlay(img,\n\t\t\t'<font color=red>'+warning+'</font>');\n\t\t\n\t\t// Adds a handler for single mouseclicks to select the cell\n\t\tif (isSelect)\n\t\t{\n\t\t\toverlay.addListener(mxEvent.CLICK,\n\t\t\t\tmxUtils.bind(this, function(sender, evt)\n\t\t\t\t{\n\t\t\t\t\tif (this.isEnabled())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.setSelectionCell(cell);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Sets and returns the overlay in the graph\n\t\treturn this.addCellOverlay(cell, overlay);\n\t}\n\telse\n\t{\n\t\tthis.removeCellOverlays(cell);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: In-place editing\n */\n\n/**\n * Function: startEditing\n * \n * Calls <startEditingAtCell> using the given cell or the first selection\n * cell.\n * \n * Parameters:\n * \n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditing = function(evt)\n{\n\tthis.startEditingAtCell(null, evt);\n};\n\n/**\n * Function: startEditingAtCell\n * \n * Fires a <startEditing> event and invokes <mxCellEditor.startEditing>\n * on <editor>. After editing was started, a <editingStarted> event is\n * fired.\n * \n * Parameters:\n * \n * cell - <mxCell> to start the in-place editor for.\n * evt - Optional mouse event that triggered the editing.\n */\nmxGraph.prototype.startEditingAtCell = function(cell, evt)\n{\n\tif (evt == null || !mxEvent.isMultiTouchEvent(evt))\n\t{\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.getSelectionCell();\n\t\t\t\n\t\t\tif (cell != null && !this.isCellEditable(cell))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.START_EDITING,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t\tthis.cellEditor.startEditing(cell, evt);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STARTED,\n\t\t\t\t\t'cell', cell, 'event', evt));\n\t\t}\n\t}\n};\n\n/**\n * Function: getEditingValue\n * \n * Returns the initial value for in-place editing. This implementation\n * returns <convertValueToString> for the given cell. If this function is\n * overridden, then <mxGraphModel.valueForCellChanged> should take care\n * of correctly storing the actual new value inside the user object.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the initial editing value should be returned.\n * evt - Optional mouse event that triggered the editor.\n */\nmxGraph.prototype.getEditingValue = function(cell, evt)\n{\n\treturn this.convertValueToString(cell);\n};\n\n/**\n * Function: stopEditing\n * \n * Stops the current editing  and fires a <editingStopped> event.\n * \n * Parameters:\n * \n * cancel - Boolean that specifies if the current editing value\n * should be stored.\n */\nmxGraph.prototype.stopEditing = function(cancel)\n{\n\tthis.cellEditor.stopEditing(cancel);\n\tthis.fireEvent(new mxEventObject(mxEvent.EDITING_STOPPED, 'cancel', cancel));\n};\n\n/**\n * Function: labelChanged\n * \n * Sets the label of the specified cell to the given value using\n * <cellLabelChanged> and fires <mxEvent.LABEL_CHANGED> while the\n * transaction is in progress. Returns the cell whose label was changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * evt - Optional event that triggered the change.\n */\nmxGraph.prototype.labelChanged = function(cell, value, evt)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar old = cell.value;\n\t\tthis.cellLabelChanged(cell, value, this.isAutoSizeCell(cell));\n\t\tthis.fireEvent(new mxEventObject(mxEvent.LABEL_CHANGED,\n\t\t\t'cell', cell, 'value', value, 'old', old, 'event', evt));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellLabelChanged\n * \n * Sets the new label for a cell. If autoSize is true then\n * <cellSizeUpdated> will be called.\n * \n * In the following example, the function is extended to map changes to\n * attributes in an XML node, as shown in <convertValueToString>.\n * Alternatively, the handling of this can be implemented as shown in\n * <mxGraphModel.valueForCellChanged> without the need to clone the\n * user object.\n * \n * (code)\n * var graphCellLabelChanged = graph.cellLabelChanged;\n * graph.cellLabelChanged = function(cell, newValue, autoSize)\n * {\n * \t// Cloned for correct undo/redo\n * \tvar elt = cell.value.cloneNode(true);\n *  elt.setAttribute('label', newValue);\n *  \n *  newValue = elt;\n *  graphCellLabelChanged.apply(this, arguments);\n * };\n * (end) \n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be changed.\n * value - New label to be assigned.\n * autoSize - Boolean that specifies if <cellSizeUpdated> should be called.\n */\nmxGraph.prototype.cellLabelChanged = function(cell, value, autoSize)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.model.setValue(cell, value);\n\t\t\n\t\tif (autoSize)\n\t\t{\n\t\t\tthis.cellSizeUpdated(cell, false);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n};\n\n/**\n * Group: Event processing\n */\n\n/**\n * Function: escape\n * \n * Processes an escape keystroke.\n * \n * Parameters:\n * \n * evt - Mouseevent that represents the keystroke.\n */\nmxGraph.prototype.escape = function(evt)\n{\n\tthis.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n};\n\n/**\n * Function: click\n * \n * Processes a singleclick on an optional cell and fires a <click> event.\n * The click event is fired initially. If the graph is enabled and the\n * event has not been consumed, then the cell is selected using\n * <selectCellForEvent> or the selection is cleared using\n * <clearSelection>. The events consumed state is set to true if the\n * corresponding <mxMouseEvent> has been consumed.\n *\n * To handle a click event, use the following code.\n * \n * (code)\n * graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event'); // mouse event\n *   var cell = evt.getProperty('cell'); // cell may be null\n *   \n *   if (cell != null)\n *   {\n *     // Do something useful with cell and consume the event\n *     evt.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the single click.\n */\nmxGraph.prototype.click = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar cell = me.getCell();\n\tvar mxe = new mxEventObject(mxEvent.CLICK, 'event', evt, 'cell', cell);\n\t\n\tif (me.isConsumed())\n\t{\n\t\tmxe.consume();\n\t}\n\t\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n\t{\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isTransparentClickEvent(evt))\n\t\t\t{\n\t\t\t\tvar active = false;\n\t\t\t\t\n\t\t\t\tvar tmp = this.getCellAt(me.graphX, me.graphY, null, null, null, mxUtils.bind(this, function(state)\n\t\t\t\t{\n\t\t\t\t\tvar selected = this.isCellSelected(state.cell);\n\t\t\t\t\tactive = active || selected;\n\t\t\t\t\t\n\t\t\t\t\treturn !active || selected;\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tcell = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.selectCellForEvent(cell, evt);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar swimlane = null;\n\t\t\t\n\t\t\tif (this.isSwimlaneSelectionEnabled())\n\t\t\t{\n\t\t\t\t// Gets the swimlane at the location (includes\n\t\t\t\t// content area of swimlanes)\n\t\t\t\tswimlane = this.getSwimlaneAt(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\n\t\t\t// Selects the swimlane and consumes the event\n\t\t\tif (swimlane != null)\n\t\t\t{\n\t\t\t\tthis.selectCellForEvent(swimlane, evt);\n\t\t\t}\n\t\t\t\n\t\t\t// Ignores the event if the control key is pressed\n\t\t\telse if (!this.isToggleEvent(evt))\n\t\t\t{\n\t\t\t\tthis.clearSelection();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: dblClick\n * \n * Processes a doubleclick on an optional cell and fires a <dblclick>\n * event. The event is fired initially. If the graph is enabled and the\n * event has not been consumed, then <edit> is called with the given\n * cell. The event is ignored if no cell was specified.\n *\n * Example for overriding this method.\n *\n * (code)\n * graph.dblClick = function(evt, cell)\n * {\n *   var mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n *   this.fireEvent(mxe);\n *   \n *   if (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed())\n *   {\n * \t   mxUtils.alert('Hello, World!');\n *     mxe.consume();\n *   }\n * }\n * (end)\n * \n * Example listener for this event.\n * \n * (code)\n * graph.addListener(mxEvent.DOUBLE_CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   // do something with the cell and consume the\n *   // event to prevent in-place editing from start\n * });\n * (end) \n * \n * Parameters:\n * \n * evt - Mouseevent that represents the doubleclick.\n * cell - Optional <mxCell> under the mousepointer.\n */\nmxGraph.prototype.dblClick = function(evt, cell)\n{\n\tvar mxe = new mxEventObject(mxEvent.DOUBLE_CLICK, 'event', evt, 'cell', cell);\n\tthis.fireEvent(mxe);\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() &&\n\t\tcell != null && this.isCellEditable(cell) && !this.isEditing(cell))\n\t{\n\t\tthis.startEditingAtCell(cell, evt);\n\t\tmxEvent.consume(evt);\n\t}\n};\n\n/**\n * Function: tapAndHold\n * \n * Handles the <mxMouseEvent> by highlighting the <mxCellState>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> that represents the touch event.\n * state - Optional <mxCellState> that is associated with the event.\n */\nmxGraph.prototype.tapAndHold = function(me)\n{\n\tvar evt = me.getEvent();\n\tvar mxe = new mxEventObject(mxEvent.TAP_AND_HOLD, 'event', evt, 'cell', me.getCell());\n\n\t// LATER: Check if event should be consumed if me is consumed\n\tthis.fireEvent(mxe);\n\n\tif (mxe.isConsumed())\n\t{\n\t\t// Resets the state of the panning handler\n\t\tthis.panningHandler.panningTrigger = false;\n\t}\n\t\n\t// Handles the event if it has not been consumed\n\tif (this.isEnabled() && !mxEvent.isConsumed(evt) && !mxe.isConsumed() && this.connectionHandler.isEnabled())\n\t{\n\t\tvar state = this.view.getState(this.connectionHandler.marker.getCell(me));\n\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.connectionHandler.marker.currentColor = this.connectionHandler.marker.validColor;\n\t\t\tthis.connectionHandler.marker.markedState = state;\n\t\t\tthis.connectionHandler.marker.mark();\n\t\t\t\n\t\t\tthis.connectionHandler.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\tthis.connectionHandler.edgeState = this.connectionHandler.createEdgeState(me);\n\t\t\tthis.connectionHandler.previous = state;\n\t\t\tthis.connectionHandler.fireEvent(new mxEventObject(mxEvent.START, 'state', this.connectionHandler.previous));\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollPointToVisible\n * \n * Scrolls the graph to the given point, extending the graph container if\n * specified.\n */\nmxGraph.prototype.scrollPointToVisible = function(x, y, extend, border)\n{\n\tif (!this.timerAutoScroll && (this.ignoreScrollbars || mxUtils.hasScrollbars(this.container)))\n\t{\n\t\tvar c = this.container;\n\t\tborder = (border != null) ? border : 20;\n\t\t\n\t\tif (x >= c.scrollLeft && y >= c.scrollTop && x <= c.scrollLeft + c.clientWidth &&\n\t\t\ty <= c.scrollTop + c.clientHeight)\n\t\t{\n\t\t\tvar dx = c.scrollLeft + c.clientWidth - x;\n\t\t\t\n\t\t\tif (dx < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollLeft;\n\t\t\t\tc.scrollLeft += border - dx;\n\n\t\t\t\t// Automatically extends the canvas size to the bottom, right\n\t\t\t\t// if the event is outside of the canvas and the edge of the\n\t\t\t\t// canvas has been reached. Notes: Needs fix for IE.\n\t\t\t\tif (extend && old == c.scrollLeft)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar width = this.container.scrollWidth + border - dx;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar width = Math.max(c.clientWidth, c.scrollWidth) + border - dx;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollLeft += border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = x - c.scrollLeft;\n\t\t\t\t\n\t\t\t\tif (dx < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft -= border - dx;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar dy = c.scrollTop + c.clientHeight - y;\n\t\t\t\n\t\t\tif (dy < border)\n\t\t\t{\n\t\t\t\tvar old = c.scrollTop;\n\t\t\t\tc.scrollTop += border - dy;\n\n\t\t\t\tif (old == c.scrollTop && extend)\n\t\t\t\t{\n\t\t\t\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\t\t\tvar height = this.container.scrollHeight + border - dy;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Updates the clipping region. This is an expensive\n\t\t\t\t\t\t// operation that should not be executed too often.\n\t\t\t\t\t\troot.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar height = Math.max(c.clientHeight, c.scrollHeight) + border - dy;\n\t\t\t\t\t\tvar canvas = this.view.getCanvas();\n\t\t\t\t\t\tcanvas.style.height = height + 'px';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tc.scrollTop += border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = y - c.scrollTop;\n\t\t\t\t\n\t\t\t\tif (dy < border)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop -= border - dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.allowAutoPanning && !this.panningHandler.isActive())\n\t{\n\t\tif (this.panningManager == null)\n\t\t{\n\t\t\tthis.panningManager = this.createPanningManager();\n\t\t}\n\n\t\tthis.panningManager.panTo(x + this.panDx, y + this.panDy);\n\t}\n};\n\n\n/**\n * Function: createPanningManager\n * \n * Creates and returns an <mxPanningManager>.\n */\nmxGraph.prototype.createPanningManager = function()\n{\n\treturn new mxPanningManager(this);\n};\n\n/**\n * Function: getBorderSizes\n * \n * Returns the size of the border and padding on all four sides of the\n * container. The left, top, right and bottom borders are stored in the x, y,\n * width and height of the returned <mxRectangle>, respectively.\n */\nmxGraph.prototype.getBorderSizes = function()\n{\n\tvar css = mxUtils.getCurrentStyle(this.container);\n\t\n\treturn new mxRectangle(mxUtils.parseCssNumber(css.paddingLeft) +\n\t\t\t((css.borderLeftStyle != 'none') ? mxUtils.parseCssNumber(css.borderLeftWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingTop) +\n\t\t\t((css.borderTopStyle != 'none') ? mxUtils.parseCssNumber(css.borderTopWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingRight) +\n\t\t\t((css.borderRightStyle != 'none') ? mxUtils.parseCssNumber(css.borderRightWidth) : 0),\n\t\tmxUtils.parseCssNumber(css.paddingBottom) +\n\t\t\t((css.borderBottomStyle != 'none') ? mxUtils.parseCssNumber(css.borderBottomWidth) : 0));\n};\n\n/**\n * Function: getPreferredPageSize\n * \n * Returns the preferred size of the background page if <preferPageSize> is true.\n */\nmxGraph.prototype.getPreferredPageSize = function(bounds, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = this.pageScale;\n\tvar page = new mxRectangle(0, 0, Math.ceil(fmt.width * ps), Math.ceil(fmt.height * ps));\n\t\n\tvar hCount = (this.pageBreaksVisible) ? Math.ceil(width / page.width) : 1;\n\tvar vCount = (this.pageBreaksVisible) ? Math.ceil(height / page.height) : 1;\n\t\n\treturn new mxRectangle(0, 0, hCount * page.width + 2 + tr.x, vCount * page.height + 2 + tr.y);\n};\n\n/**\n * Function: fit\n *\n * Scales the graph such that the complete diagram fits into <container> and\n * returns the current scale in the view. To fit an initial graph prior to\n * rendering, set <mxGraphView.rendering> to false prior to changing the model\n * and execute the following after changing the model.\n * \n * (code)\n * graph.fit();\n * graph.view.rendering = true;\n * graph.refresh();\n * (end)\n * \n * To fit and center the graph, the following code can be used.\n * \n * (code)\n * var margin = 2;\n * var max = 3;\n * \n * var bounds = graph.getGraphBounds();\n * var cw = graph.container.clientWidth - margin;\n * var ch = graph.container.clientHeight - margin;\n * var w = bounds.width / graph.view.scale;\n * var h = bounds.height / graph.view.scale;\n * var s = Math.min(max, Math.min(cw / w, ch / h));\n * \n * graph.view.scaleAndTranslate(s,\n *   (margin + cw - w * s) / (2 * s) - bounds.x / graph.view.scale,\n *   (margin + ch - h * s) / (2 * s) - bounds.y / graph.view.scale);\n * (end)\n * \n * Parameters:\n * \n * border - Optional number that specifies the border. Default is <border>.\n * keepOrigin - Optional boolean that specifies if the translate should be\n * changed. Default is false.\n * margin - Optional margin in pixels. Default is 0.\n * enabled - Optional boolean that specifies if the scale should be set or\n * just returned. Default is true.\n * ignoreWidth - Optional boolean that specifies if the width should be\n * ignored. Default is false.\n * ignoreHeight - Optional boolean that specifies if the height should be\n * ignored. Default is false.\n * maxHeight - Optional maximum height.\n */\nmxGraph.prototype.fit = function(border, keepOrigin, margin, enabled, ignoreWidth, ignoreHeight, maxHeight)\n{\n\tif (this.container != null)\n\t{\n\t\tborder = (border != null) ? border : this.getBorder();\n\t\tkeepOrigin = (keepOrigin != null) ? keepOrigin : false;\n\t\tmargin = (margin != null) ? margin : 0;\n\t\tenabled = (enabled != null) ? enabled : true;\n\t\tignoreWidth = (ignoreWidth != null) ? ignoreWidth : false;\n\t\tignoreHeight = (ignoreHeight != null) ? ignoreHeight : false;\n\t\t\n\t\t// Adds spacing and border from css\n\t\tvar cssBorder = this.getBorderSizes();\n\t\tvar w1 = this.container.offsetWidth - cssBorder.x - cssBorder.width - 1;\n\t\tvar h1 = (maxHeight != null) ? maxHeight : this.container.offsetHeight - cssBorder.y - cssBorder.height - 1;\n\t\tvar bounds = this.view.getGraphBounds();\n\t\t\n\t\tif (bounds.width > 0 && bounds.height > 0)\n\t\t{\n\t\t\tif (keepOrigin && bounds.x != null && bounds.y != null)\n\t\t\t{\n\t\t\t\tbounds = bounds.clone();\n\t\t\t\tbounds.width += bounds.x;\n\t\t\t\tbounds.height += bounds.y;\n\t\t\t\tbounds.x = 0;\n\t\t\t\tbounds.y = 0;\n\t\t\t}\n\t\t\t\n\t\t\t// LATER: Use unscaled bounding boxes to fix rounding errors\n\t\t\tvar s = this.view.scale;\n\t\t\tvar w2 = bounds.width / s;\n\t\t\tvar h2 = bounds.height / s;\n\t\t\t\n\t\t\t// Fits to the size of the background image if required\n\t\t\tif (this.backgroundImage != null)\n\t\t\t{\n\t\t\t\tw2 = Math.max(w2, this.backgroundImage.width - bounds.x / s);\n\t\t\t\th2 = Math.max(h2, this.backgroundImage.height - bounds.y / s);\n\t\t\t}\n\t\t\t\n\t\t\tvar b = ((keepOrigin) ? border : 2 * border) + margin + 1;\n\n\t\t\tw1 -= b;\n\t\t\th1 -= b;\n\t\t\t\n\t\t\tvar s2 = (((ignoreWidth) ? h1 / h2 : (ignoreHeight) ? w1 / w2 :\n\t\t\t\tMath.min(w1 / w2, h1 / h2)));\n\t\t\t\n\t\t\tif (this.minFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.max(s2, this.minFitScale);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.maxFitScale != null)\n\t\t\t{\n\t\t\t\ts2 = Math.min(s2, this.maxFitScale);\n\t\t\t}\n\t\n\t\t\tif (enabled)\n\t\t\t{\n\t\t\t\tif (!keepOrigin)\n\t\t\t\t{\n\t\t\t\t\tif (!mxUtils.hasScrollbars(this.container))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar x0 = (bounds.x != null) ? Math.floor(this.view.translate.x - bounds.x / s + border / s2 + margin / 2) : border;\n\t\t\t\t\t\tvar y0 = (bounds.y != null) ? Math.floor(this.view.translate.y - bounds.y / s + border / s2 + margin / 2) : border;\n\n\t\t\t\t\t\tthis.view.scaleAndTranslate(s2, x0, y0);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t\t\tvar b2 = this.getGraphBounds();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.x != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollLeft = b2.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (b2.y != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.container.scrollTop = b2.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.view.scale != s2)\n\t\t\t\t{\n\t\t\t\t\tthis.view.setScale(s2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn this.view.scale;\n};\n\n/**\n * Function: sizeDidChange\n * \n * Called when the size of the graph has changed. This implementation fires\n * a <size> event after updating the clipping region of the SVG element in\n * SVG-bases browsers.\n */\nmxGraph.prototype.sizeDidChange = function()\n{\n\tvar bounds = this.getGraphBounds();\n\t\n\tif (this.container != null)\n\t{\n\t\tvar border = this.getBorder();\n\t\t\n\t\tvar width = Math.max(0, bounds.x + bounds.width + 2 * border * this.view.scale);\n\t\tvar height = Math.max(0, bounds.y + bounds.height + 2 * border * this.view.scale);\n\t\t\n\t\tif (this.minimumContainerSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumContainerSize.width);\n\t\t\theight = Math.max(height, this.minimumContainerSize.height);\n\t\t}\n\n\t\tif (this.resizeContainer)\n\t\t{\n\t\t\tthis.doResizeContainer(width, height);\n\t\t}\n\n\t\tif (this.preferPageSize || (!mxClient.IS_IE && this.pageVisible))\n\t\t{\n\t\t\tvar size = this.getPreferredPageSize(bounds, Math.max(1, width), Math.max(1, height));\n\t\t\t\n\t\t\tif (size != null)\n\t\t\t{\n\t\t\t\twidth = size.width * this.view.scale;\n\t\t\t\theight = size.height * this.view.scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.minimumGraphSize != null)\n\t\t{\n\t\t\twidth = Math.max(width, this.minimumGraphSize.width * this.view.scale);\n\t\t\theight = Math.max(height, this.minimumGraphSize.height * this.view.scale);\n\t\t}\n\n\t\twidth = Math.ceil(width);\n\t\theight = Math.ceil(height);\n\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\tvar root = this.view.getDrawPane().ownerSVGElement;\n\t\t\t\n\t\t\troot.style.minWidth = Math.max(1, width) + 'px';\n\t\t\troot.style.minHeight = Math.max(1, height) + 'px';\n\t\t\troot.style.width = '100%';\n\t\t\troot.style.height = '100%';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t{\n\t\t\t\t// Quirks mode does not support minWidth/-Height\n\t\t\t\tthis.view.updateHtmlCanvasSize(Math.max(1, width), Math.max(1, height));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.view.canvas.style.minWidth = Math.max(1, width) + 'px';\n\t\t\t\tthis.view.canvas.style.minHeight = Math.max(1, height) + 'px';\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.updatePageBreaks(this.pageBreaksVisible, width, height);\n\t}\n\n\tthis.fireEvent(new mxEventObject(mxEvent.SIZE, 'bounds', bounds));\n};\n\n/**\n * Function: doResizeContainer\n * \n * Resizes the container for the given graph width and height.\n */\nmxGraph.prototype.doResizeContainer = function(width, height)\n{\n\tif (this.maximumContainerSize != null)\n\t{\n\t\twidth = Math.min(this.maximumContainerSize.width, width);\n\t\theight = Math.min(this.maximumContainerSize.height, height);\n\t}\n\n\tthis.container.style.width = Math.ceil(width) + 'px';\n\tthis.container.style.height = Math.ceil(height) + 'px';\n};\n\n/**\n * Function: updatePageBreaks\n * \n * Invokes from <sizeDidChange> to redraw the page breaks.\n * \n * Parameters:\n * \n * visible - Boolean that specifies if page breaks should be shown.\n * width - Specifies the width of the container in pixels.\n * height - Specifies the height of the container in pixels.\n */\nmxGraph.prototype.updatePageBreaks = function(visible, width, height)\n{\n\tvar scale = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar fmt = this.pageFormat;\n\tvar ps = scale * this.pageScale;\n\tvar bounds = new mxRectangle(0, 0, fmt.width * ps, fmt.height * ps);\n\n\tvar gb = mxRectangle.fromRectangle(this.getGraphBounds());\n\tgb.width = Math.max(1, gb.width);\n\tgb.height = Math.max(1, gb.height);\n\t\n\tbounds.x = Math.floor((gb.x - tr.x * scale) / bounds.width) * bounds.width + tr.x * scale;\n\tbounds.y = Math.floor((gb.y - tr.y * scale) / bounds.height) * bounds.height + tr.y * scale;\n\t\n\tgb.width = Math.ceil((gb.width + (gb.x - bounds.x)) / bounds.width) * bounds.width;\n\tgb.height = Math.ceil((gb.height + (gb.y - bounds.y)) / bounds.height) * bounds.height;\n\t\n\t// Does not show page breaks if the scale is too small\n\tvisible = visible && Math.min(bounds.width, bounds.height) > this.minPageBreakDist;\n\n\tvar horizontalCount = (visible) ? Math.ceil(gb.height / bounds.height) + 1 : 0;\n\tvar verticalCount = (visible) ? Math.ceil(gb.width / bounds.width) + 1 : 0;\n\tvar right = (verticalCount - 1) * bounds.width;\n\tvar bottom = (horizontalCount - 1) * bounds.height;\n\t\n\tif (this.horizontalPageBreaks == null && horizontalCount > 0)\n\t{\n\t\tthis.horizontalPageBreaks = [];\n\t}\n\n\tif (this.verticalPageBreaks == null && verticalCount > 0)\n\t{\n\t\tthis.verticalPageBreaks = [];\n\t}\n\t\n\tvar drawPageBreaks = mxUtils.bind(this, function(breaks)\n\t{\n\t\tif (breaks != null)\n\t\t{\n\t\t\tvar count = (breaks == this.horizontalPageBreaks) ? horizontalCount : verticalCount; \n\t\t\t\n\t\t\tfor (var i = 0; i <= count; i++)\n\t\t\t{\n\t\t\t\tvar pts = (breaks == this.horizontalPageBreaks) ?\n\t\t\t\t\t[new mxPoint(Math.round(bounds.x), Math.round(bounds.y + i * bounds.height)),\n\t\t\t         new mxPoint(Math.round(bounds.x + right), Math.round(bounds.y + i * bounds.height))] :\n\t\t\t        [new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y)),\n\t\t\t         new mxPoint(Math.round(bounds.x + i * bounds.width), Math.round(bounds.y + bottom))];\n\n\t\t\t\tif (breaks[i] != null)\n\t\t\t\t{\n\t\t\t\t\tbreaks[i].points = pts;\n\t\t\t\t\tbreaks[i].redraw();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pageBreak = new mxPolyline(pts, this.pageBreakColor);\n\t\t\t\t\tpageBreak.dialect = this.dialect;\n\t\t\t\t\tpageBreak.pointerEvents = false;\n\t\t\t\t\tpageBreak.isDashed = this.pageBreakDashed;\n\t\t\t\t\tpageBreak.init(this.view.backgroundPane);\n\t\t\t\t\tpageBreak.redraw();\n\t\t\t\t\t\n\t\t\t\t\tbreaks[i] = pageBreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = count; i < breaks.length; i++)\n\t\t\t{\n\t\t\t\tbreaks[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tbreaks.splice(count, breaks.length - count);\n\t\t}\n\t});\n\t\n\tdrawPageBreaks(this.horizontalPageBreaks);\n\tdrawPageBreaks(this.verticalPageBreaks);\n};\n\n/**\n * Group: Cell styles\n */\n\n/**\n * Function: getCellStyle\n * \n * Returns an array of key, value pairs representing the cell style for the\n * given cell. If no string is defined in the model that specifies the\n * style, then the default style for the cell is returned or <EMPTY_ARRAY>,\n * if not style can be found. Note: You should try and get the cell state\n * for the given cell and use the cached style in the state before using\n * this method.\n * \n * Parameters:\n * \n * cell - <mxCell> whose style should be returned as an array.\n */\nmxGraph.prototype.getCellStyle = function(cell)\n{\n\tvar stylename = this.model.getStyle(cell);\n\tvar style = null;\n\t\n\t// Gets the default style for the cell\n\tif (this.model.isEdge(cell))\n\t{\n\t\tstyle = this.stylesheet.getDefaultEdgeStyle();\n\t}\n\telse\n\t{\n\t\tstyle = this.stylesheet.getDefaultVertexStyle();\n\t}\n\t\n\t// Resolves the stylename using the above as the default\n\tif (stylename != null)\n\t{\n\t\tstyle = this.postProcessCellStyle(this.stylesheet.getCellStyle(stylename, style));\n\t}\n\t\n\t// Returns a non-null value if no style can be found\n\tif (style == null)\n\t{\n\t\tstyle = mxGraph.prototype.EMPTY_ARRAY;\n\t}\n\t\n\treturn style;\n};\n\n/**\n * Function: postProcessCellStyle\n * \n * Tries to resolve the value for the image style in the image bundles and\n * turns short data URIs as defined in mxImageBundle to data URIs as\n * defined in RFC 2397 of the IETF.\n */\nmxGraph.prototype.postProcessCellStyle = function(style)\n{\n\tif (style != null)\n\t{\n\t\tvar key = style[mxConstants.STYLE_IMAGE];\n\t\tvar image = this.getImageFromBundles(key);\n\n\t\tif (image != null)\n\t\t{\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t\telse\n\t\t{\n\t\t\timage = key;\n\t\t}\n\t\t\n\t\t// Converts short data uris to normal data uris\n\t\tif (image != null && image.substring(0, 11) == 'data:image/')\n\t\t{\n\t\t\tif (image.substring(0, 20) == 'data:image/svg+xml,<')\n\t\t\t{\n\t\t\t\t// Required for FF and IE11\n\t\t\t\timage = image.substring(0, 19) + encodeURIComponent(image.substring(19));\n\t\t\t}\n\t\t\telse if (image.substring(0, 22) != 'data:image/svg+xml,%3C')\n\t\t\t{\n\t\t\t\tvar comma = image.indexOf(',');\n\t\t\t\t\n\t\t\t\t// Adds base64 encoding prefix if needed\n\t\t\t\tif (comma > 0 && image.substring(comma - 7, comma + 1) != ';base64,')\n\t\t\t\t{\n\t\t\t\t\timage = image.substring(0, comma) + ';base64,'\n\t\t\t\t\t\t+ image.substring(comma + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tstyle[mxConstants.STYLE_IMAGE] = image;\n\t\t}\n\t}\n\n\treturn style;\n};\n\n/**\n * Function: setCellStyle\n * \n * Sets the style of the specified cells. If no cells are given, then the\n * selection cells are changed.\n * \n * Parameters:\n * \n * style - String representing the new style of the cells.\n * cells - Optional array of <mxCells> to set the style for. Default is the\n * selection cells.\n */\nmxGraph.prototype.setCellStyle = function(style, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(cells[i], style);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: toggleCellStyle\n * \n * Toggles the boolean value for the given key in the style of the given cell\n * and returns the new value as 0 or 1. If no cell is specified then the\n * selection cell is used.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cell - Optional <mxCell> whose style should be modified. Default is\n * the selection cell.\n */\nmxGraph.prototype.toggleCellStyle = function(key, defaultValue, cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\treturn this.toggleCellStyles(key, defaultValue, [cell]);\n};\n\n/**\n * Function: toggleCellStyles\n * \n * Toggles the boolean value for the given key in the style of the given cells\n * and returns the new value as 0 or 1. If no cells are specified, then the\n * selection cells are used. For example, this can be used to toggle\n * <mxConstants.STYLE_ROUNDED> or any other style with a boolean value.\n * \n * Parameter:\n * \n * key - String representing the key for the boolean value to be toggled.\n * defaultValue - Optional boolean default value if no value is defined.\n * Default is false.\n * cells - Optional array of <mxCells> whose styles should be modified.\n * Default is the selection cells.\n */\nmxGraph.prototype.toggleCellStyles = function(key, defaultValue, cells)\n{\n\tdefaultValue = (defaultValue != null) ? defaultValue : false;\n\tcells = cells || this.getSelectionCells();\n\tvar value = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar state = this.view.getState(cells[0]);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cells[0]);\n\t\t\n\t\tif (style != null)\n\t\t{\n\t\t\tvalue = (mxUtils.getValue(style, key, defaultValue)) ? 0 : 1;\n\t\t\tthis.setCellStyles(key, value, cells);\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: setCellStyles\n * \n * Sets the key to value in the styles of the given cells. This will modify\n * the existing cell styles in-place and override any existing assignment\n * for the given key. If no cells are specified, then the selection cells\n * are changed. If no value is specified, then the respective key is\n * removed from the styles.\n * \n * Parameters:\n * \n * key - String representing the key to be assigned.\n * value - String representing the new value for the key.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyles = function(key, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\tmxUtils.setCellStyles(this.model, cells, key, value);\n};\n\n/**\n * Function: toggleCellStyleFlags\n * \n * Toggles the given bit for the given key in the styles of the specified\n * cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.toggleCellStyleFlags = function(key, flag, cells)\n{\n\tthis.setCellStyleFlags(key, flag, null, cells);\n};\n\n/**\n * Function: setCellStyleFlags\n * \n * Sets or toggles the given bit for the given key in the styles of the\n * specified cells.\n * \n * Parameters:\n * \n * key - String representing the key to toggle the flag in.\n * flag - Integer that represents the bit to be toggled.\n * value - Boolean value to be used or null if the value should be toggled.\n * cells - Optional array of <mxCells> to change the style for. Default is\n * the selection cells.\n */\nmxGraph.prototype.setCellStyleFlags = function(key, flag, value, cells)\n{\n\tcells = cells || this.getSelectionCells();\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tif (value == null)\n\t\t{\n\t\t\tvar state = this.view.getState(cells[0]);\n\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cells[0]);\n\t\t\t\n\t\t\tif (style != null)\n\t\t\t{\n\t\t\t\tvar current = parseInt(style[key] || 0);\n\t\t\t\tvalue = !((current & flag) == flag);\n\t\t\t}\n\t\t}\n\n\t\tmxUtils.setCellStyleFlags(this.model, cells, key, flag, value);\n\t}\n};\n\n/**\n * Group: Cell alignment and orientation\n */\n\n/**\n * Function: alignCells\n * \n * Aligns the given cells vertically or horizontally according to the given\n * alignment using the optional parameter as the coordinate.\n * \n * Parameters:\n * \n * align - Specifies the alignment. Possible values are all constants in\n * mxConstants with an ALIGN prefix.\n * cells - Array of <mxCells> to be aligned.\n * param - Optional coordinate for the alignment.\n */\nmxGraph.prototype.alignCells = function(align, cells, param)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tif (cells != null && cells.length > 1)\n\t{\n\t\t// Finds the required coordinate for the alignment\n\t\tif (param == null)\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\n\t\t\t\tif (state != null && !this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tif (param == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x + state.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height / 2;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.y + state.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = state.x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.x + state.width);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.max(param, state.y + state.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparam = Math.min(param, state.x);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Aligns the cells to the coordinate\n\t\tif (param != null)\n\t\t{\n\t\t\tvar s = this.view.scale;\n\n\t\t\tthis.model.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo != null && !this.model.isEdge(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (align == mxConstants.ALIGN_CENTER)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_RIGHT)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x - state.width) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_TOP)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height / 2) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (align == mxConstants.ALIGN_BOTTOM)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.y += (param - state.y - state.height) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x += (param - state.x) / s;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.resizeCell(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ALIGN_CELLS,\n\t\t\t\t\t\t'align', align, 'cells', cells));\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tthis.model.endUpdate();\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: flipEdge\n * \n * Toggles the style of the given edge between null (or empty) and\n * <alternateEdgeStyle>. This method fires <mxEvent.FLIP_EDGE> while the\n * transaction is in progress. Returns the edge that was flipped.\n * \n * Here is an example that overrides this implementation to invert the\n * value of <mxConstants.STYLE_ELBOW> without removing any existing styles.\n * \n * (code)\n * graph.flipEdge = function(edge)\n * {\n *   if (edge != null)\n *   {\n *     var state = this.view.getState(edge);\n *     var style = (state != null) ? state.style : this.getCellStyle(edge);\n *     \n *     if (style != null)\n *     {\n *       var elbow = mxUtils.getValue(style, mxConstants.STYLE_ELBOW,\n *           mxConstants.ELBOW_HORIZONTAL);\n *       var value = (elbow == mxConstants.ELBOW_HORIZONTAL) ?\n *           mxConstants.ELBOW_VERTICAL : mxConstants.ELBOW_HORIZONTAL;\n *       this.setCellStyles(mxConstants.STYLE_ELBOW, value, [edge]);\n *     }\n *   }\n * };\n * (end)\n * \n * Parameters:\n * \n * edge - <mxCell> whose style should be changed.\n */\nmxGraph.prototype.flipEdge = function(edge)\n{\n\tif (edge != null &&\n\t\tthis.alternateEdgeStyle != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar style = this.model.getStyle(edge);\n\n\t\t\tif (style == null || style.length == 0)\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, this.alternateEdgeStyle);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.model.setStyle(edge, null);\n\t\t\t}\n\n\t\t\t// Removes all existing control points\n\t\t\tthis.resetEdge(edge);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.FLIP_EDGE, 'edge', edge));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: addImageBundle\n *\n * Adds the specified <mxImageBundle>.\n */\nmxGraph.prototype.addImageBundle = function(bundle)\n{\n\tthis.imageBundles.push(bundle);\n};\n\n/**\n * Function: removeImageBundle\n * \n * Removes the specified <mxImageBundle>.\n */\nmxGraph.prototype.removeImageBundle = function(bundle)\n{\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t{\n\t\tif (this.imageBundles[i] != bundle)\n\t\t{\n\t\t\ttmp.push(this.imageBundles[i]);\n\t\t}\n\t}\n\t\n\tthis.imageBundles = tmp;\n};\n\n/**\n * Function: getImageFromBundles\n *\n * Searches all <imageBundles> for the specified key and returns the value\n * for the first match or null if the key is not found.\n */\nmxGraph.prototype.getImageFromBundles = function(key)\n{\n\tif (key != null)\n\t{\n\t\tfor (var i = 0; i < this.imageBundles.length; i++)\n\t\t{\n\t\t\tvar image = this.imageBundles[i].getImage(key);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\treturn image;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Group: Order\n */\n\n/**\n * Function: orderCells\n * \n * Moves the given cells to the front or back. The change is carried out\n * using <cellsOrdered>. This method fires <mxEvent.ORDER_CELLS> while the\n * transaction is in progress.\n * \n * Parameters:\n * \n * back - Boolean that specifies if the cells should be moved to back.\n * cells - Array of <mxCells> to move to the background. If null is\n * specified then the selection cells are used.\n */\nmxGraph.prototype.orderCells = function(back, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsOrdered(cells, back);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ORDER_CELLS,\n\t\t\t\t'back', back, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsOrdered\n * \n * Moves the given cells to the front or back. This method fires\n * <mxEvent.CELLS_ORDERED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose order should be changed.\n * back - Boolean that specifies if the cells should be moved to back.\n */\nmxGraph.prototype.cellsOrdered = function(cells, back)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\n\t\t\t\tif (back)\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i], i);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.model.add(parent, cells[i],\n\t\t\t\t\t\t\tthis.model.getChildCount(parent) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ORDERED,\n\t\t\t\t\t'back', back, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Grouping\n */\n\n/**\n * Function: groupCells\n * \n * Adds the cells into the given group. The change is carried out using\n * <cellsAdded>, <cellsMoved> and <cellsResized>. This method fires\n * <mxEvent.GROUP_CELLS> while the transaction is in progress. Returns the\n * new group. A group is only created if there is at least one entry in the\n * given array of cells.\n * \n * Parameters:\n * \n * group - <mxCell> that represents the target group. If null is specified\n * then a new group is created using <createGroupCell>.\n * border - Optional integer that specifies the border between the child\n * area and the group bounds. Default is 0.\n * cells - Optional array of <mxCells> to be grouped. If null is specified\n * then the selection cells are used.\n */\nmxGraph.prototype.groupCells = function(group, border, cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = mxUtils.sortCells(this.getSelectionCells(), true);\n\t}\n\n\tcells = this.getCellsForGroup(cells);\n\n\tif (group == null)\n\t{\n\t\tgroup = this.createGroupCell(cells);\n\t}\n\n\tvar bounds = this.getBoundsForGroup(group, cells, border);\n\n\tif (cells.length > 0 && bounds != null)\n\t{\n\t\t// Uses parent of group or previous parent of first child\n\t\tvar parent = this.model.getParent(group);\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.model.getParent(cells[0]);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Checks if the group has a geometry and\n\t\t\t// creates one if one does not exist\n\t\t\tif (this.getCellGeometry(group) == null)\n\t\t\t{\n\t\t\t\tthis.model.setGeometry(group, new mxGeometry());\n\t\t\t}\n\n\t\t\t// Adds the group into the parent\n\t\t\tvar index = this.model.getChildCount(parent);\n\t\t\tthis.cellsAdded([group], parent, index, null, null, false, false, false);\n\n\t\t\t// Adds the children into the group and moves\n\t\t\tindex = this.model.getChildCount(group);\n\t\t\tthis.cellsAdded(cells, group, index, null, null, false, false, false);\n\t\t\tthis.cellsMoved(cells, -bounds.x, -bounds.y, false, false, false);\n\n\t\t\t// Resizes the group\n\t\t\tthis.cellsResized([group], [bounds], false);\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.GROUP_CELLS,\n\t\t\t\t\t'group', group, 'border', border, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn group;\n};\n\n/**\n * Function: getCellsForGroup\n * \n * Returns the cells with the same parent as the first cell\n * in the given array.\n */\nmxGraph.prototype.getCellsForGroup = function(cells)\n{\n\tvar result = [];\n\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar parent = this.model.getParent(cells[0]);\n\t\tresult.push(cells[0]);\n\n\t\t// Filters selection cells with the same parent\n\t\tfor (var i = 1; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getParent(cells[i]) == parent)\n\t\t\t{\n\t\t\t\tresult.push(cells[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getBoundsForGroup\n * \n * Returns the bounds to be used for the given group and children.\n */\nmxGraph.prototype.getBoundsForGroup = function(group, children, border)\n{\n\tvar result = this.getBoundingBoxFromGeometry(children, true);\n\t\n\tif (result != null)\n\t{\n\t\tif (this.isSwimlane(group))\n\t\t{\n\t\t\tvar size = this.getStartSize(group);\n\t\t\t\n\t\t\tresult.x -= size.width;\n\t\t\tresult.y -= size.height;\n\t\t\tresult.width += size.width;\n\t\t\tresult.height += size.height;\n\t\t}\n\t\t\n\t\t// Adds the border\n\t\tif (border != null)\n\t\t{\n\t\t\tresult.x -= border;\n\t\t\tresult.y -= border;\n\t\t\tresult.width += 2 * border;\n\t\t\tresult.height += 2 * border;\n\t\t}\n\t}\t\t\t\n\t\n\treturn result;\n};\n\n/**\n * Function: createGroupCell\n * \n * Hook for creating the group cell to hold the given array of <mxCells> if\n * no group cell was given to the <group> function.\n * \n * The following code can be used to set the style of new group cells.\n * \n * (code)\n * var graphCreateGroupCell = graph.createGroupCell;\n * graph.createGroupCell = function(cells)\n * {\n *   var group = graphCreateGroupCell.apply(this, arguments);\n *   group.setStyle('group');\n *   \n *   return group;\n * };\n */\nmxGraph.prototype.createGroupCell = function(cells)\n{\n\tvar group = new mxCell('');\n\tgroup.setVertex(true);\n\tgroup.setConnectable(false);\n\t\n\treturn group;\n};\n\n/**\n * Function: ungroupCells\n * \n * Ungroups the given cells by moving the children the children to their\n * parents parent and removing the empty groups. Returns the children that\n * have been removed from the groups.\n * \n * Parameters:\n * \n * cells - Array of cells to be ungrouped. If null is specified then the\n * selection cells are used.\n */\nmxGraph.prototype.ungroupCells = function(cells)\n{\n\tvar result = [];\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\n\t\t// Finds the cells with children\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.getChildCount(cells[i]) > 0)\n\t\t\t{\n\t\t\t\ttmp.push(cells[i]);\n\t\t\t}\n\t\t}\n\n\t\tcells = tmp;\n\t}\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tchildren = children.slice();\n\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\tvar index = this.model.getChildCount(parent);\n\n\t\t\t\t\tthis.cellsAdded(children, parent, index, null, null, true);\n\t\t\t\t\tresult = result.concat(children);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.removeCellsAfterUngroup(cells);\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.UNGROUP_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: removeCellsAfterUngroup\n * \n * Hook to remove the groups after <ungroupCells>.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> that were ungrouped.\n */\nmxGraph.prototype.removeCellsAfterUngroup = function(cells)\n{\n\tthis.cellsRemoved(this.addAllEdges(cells));\n};\n\n/**\n * Function: removeCellsFromParent\n * \n * Removes the specified cells from their parents and adds them to the\n * default parent. Returns the cells that were removed from their parents.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from their parents.\n */\nmxGraph.prototype.removeCellsFromParent = function(cells)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar parent = this.getDefaultParent();\n\t\tvar index = this.model.getChildCount(parent);\n\n\t\tthis.cellsAdded(cells, parent, index, null, null, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS_FROM_PARENT, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: updateGroupBounds\n * \n * Updates the bounds of the given groups to include all children and returns\n * the passed-in cells. Call this with the groups in parent to child order,\n * top-most group first, the cells are processed in reverse order and cells\n * with no children are ignored.\n * \n * Parameters:\n * \n * cells - The groups whose bounds should be updated. If this is null, then\n * the selection cells are used.\n * border - Optional border to be added in the group. Default is 0.\n * moveGroup - Optional boolean that allows the group to be moved. Default\n * is false.\n * topBorder - Optional top border to be added in the group. Default is 0.\n * rightBorder - Optional top border to be added in the group. Default is 0.\n * bottomBorder - Optional top border to be added in the group. Default is 0.\n * leftBorder - Optional top border to be added in the group. Default is 0.\n */\nmxGraph.prototype.updateGroupBounds = function(cells, border, moveGroup, topBorder, rightBorder, bottomBorder, leftBorder)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\t\n\tborder = (border != null) ? border : 0;\n\tmoveGroup = (moveGroup != null) ? moveGroup : false;\n\ttopBorder = (topBorder != null) ? topBorder : 0;\n\trightBorder = (rightBorder != null) ? rightBorder : 0;\n\tbottomBorder = (bottomBorder != null) ? bottomBorder : 0;\n\tleftBorder = (leftBorder != null) ? leftBorder : 0;\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tfor (var i = cells.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar children = this.getChildCells(cells[i]);\n\t\t\t\t\n\t\t\t\tif (children != null && children.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.getBoundingBoxFromGeometry(children, true);\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null && bounds.width > 0 && bounds.height > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar left = 0;\n\t\t\t\t\t\tvar top = 0;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Adds the size of the title area for swimlanes\n\t\t\t\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar size = this.getStartSize(cells[i]);\n\t\t\t\t\t\t\tleft = size.width;\n\t\t\t\t\t\t\ttop = size.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (moveGroup)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x = Math.round(geo.x + bounds.x - border - left - leftBorder);\n\t\t\t\t\t\t\tgeo.y = Math.round(geo.y + bounds.y - border - top - topBorder);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tgeo.width = Math.round(bounds.width + 2 * border + left + leftBorder + rightBorder);\n\t\t\t\t\t\tgeo.height = Math.round(bounds.height + 2 * border + top + topBorder + bottomBorder);\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\tthis.moveCells(children, border + left - bounds.x + leftBorder,\n\t\t\t\t\t\t\t\tborder + top - bounds.y + topBorder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the bounding box for the given array of <mxCells>. The bounding box for\n * each cell and its descendants is computed using <mxGraphView.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraph.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.model.isVertex(cells[i]) || this.model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar bbox = this.view.getBoundingBox(this.view.getState(cells[i]), true);\n\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Group: Cell cloning, insertion and removal\n */\n\n/**\n * Function: cloneCell\n * \n * Returns the clone for the given cell. Uses <cloneCells>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCell = function(cell, allowInvalidEdges, mapping, keepPosition)\n{\n\treturn this.cloneCells([cell], allowInvalidEdges, mapping, keepPosition)[0];\n};\n\n/**\n * Function: cloneCells\n * \n * Returns the clones for the given cells. The clones are created recursively\n * using <mxGraphModel.cloneCells>. If the terminal of an edge is not in the\n * given array, then the respective end is assigned a terminal point and the\n * terminal is removed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be cloned.\n * allowInvalidEdges - Optional boolean that specifies if invalid edges\n * should be cloned. Default is true.\n * mapping - Optional mapping for existing clones.\n * keepPosition - Optional boolean indicating if the position of the cells should\n * be updated to reflect the lost parent cell. Default is false.\n */\nmxGraph.prototype.cloneCells = function(cells, allowInvalidEdges, mapping, keepPosition)\n{\n\tallowInvalidEdges = (allowInvalidEdges != null) ? allowInvalidEdges : true;\n\tvar clones = null;\n\t\n\tif (cells != null)\n\t{\n\t\t// Creates a dictionary for fast lookups\n\t\tvar dict = new mxDictionary();\n\t\tvar tmp = [];\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t\ttmp.push(cells[i]);\n\t\t}\n\t\t\n\t\tif (tmp.length > 0)\n\t\t{\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar trans = this.view.translate;\n\t\t\tclones = this.model.cloneCells(cells, true, mapping);\n\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!allowInvalidEdges && this.model.isEdge(clones[i]) &&\n\t\t\t\t\tthis.getEdgeValidationError(clones[i],\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], true),\n\t\t\t\t\t\tthis.model.getTerminal(clones[i], false)) != null)\n\t\t\t\t{\n\t\t\t\t\tclones[i] = null;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar g = this.model.getGeometry(clones[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (g != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(this.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null && pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = (keepPosition) ? 0 : pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = (keepPosition) ? 0 : pstate.origin.y;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isEdge(clones[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Checks if the source is cloned or sets the terminal point\n\t\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - trans.y), true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Checks if the target is cloned or sets the terminal point\n\t\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tg.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - trans.x,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - trans.y), false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Translates the control points\n\t\t\t\t\t\t\t\tvar points = g.points;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (points != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfor (var j = 0; j < points.length; j++)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tpoints[j].x += dx;\n\t\t\t\t\t\t\t\t\t\tpoints[j].y += dy;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tg.translate(dx, dy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tclones = [];\n\t\t}\n\t}\n\t\n\treturn clones;\n};\n\n/**\n * Function: insertVertex\n * \n * Adds a new vertex into the given parent <mxCell> using value as the user\n * object and the given coordinates as the <mxGeometry> of the new vertex.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * When adding new vertices from a mouse event, one should take into\n * account the offset of the graph container and the scale and translation\n * of the view in order to find the correct unscaled, untranslated\n * coordinates using <mxGraph.getPointForEvent> as follows:\n * \n * (code)\n * var pt = graph.getPointForEvent(evt);\n * var parent = graph.getDefaultParent();\n * graph.insertVertex(parent, null,\n * \t\t\t'Hello, World!', x, y, 220, 30);\n * (end)\n * \n * For adding image cells, the style parameter can be assigned as\n * \n * (code)\n * stylename;image=imageUrl\n * (end)\n * \n * See <mxGraph> for more information on using images.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new vertex.\n * id - Optional string that defines the Id of the new vertex.\n * value - Object to be used as the user object.\n * x - Integer that defines the x coordinate of the vertex.\n * y - Integer that defines the y coordinate of the vertex.\n * width - Integer that defines the width of the vertex.\n * height - Integer that defines the height of the vertex.\n * style - Optional string that defines the cell style.\n * relative - Optional boolean that specifies if the geometry is relative.\n * Default is false.\n */\nmxGraph.prototype.insertVertex = function(parent, id, value,\n\tx, y, width, height, style, relative)\n{\n\tvar vertex = this.createVertex(parent, id, value, x, y, width, height, style, relative);\n\n\treturn this.addCell(vertex, parent);\n};\n\n/**\n * Function: createVertex\n * \n * Hook method that creates the new vertex for <insertVertex>.\n */\nmxGraph.prototype.createVertex = function(parent, id, value,\n\t\tx, y, width, height, style, relative)\n{\n\t// Creates the geometry for the vertex\n\tvar geometry = new mxGeometry(x, y, width, height);\n\tgeometry.relative = (relative != null) ? relative : false;\n\t\n\t// Creates the vertex\n\tvar vertex = new mxCell(value, geometry, style);\n\tvertex.setId(id);\n\tvertex.setVertex(true);\n\tvertex.setConnectable(true);\n\t\n\treturn vertex;\n};\n\t\n/**\n * Function: insertEdge\n * \n * Adds a new edge into the given parent <mxCell> using value as the user\n * object and the given source and target as the terminals of the new edge.\n * The id and style are used for the respective properties of the new\n * <mxCell>, which is returned.\n *\n * Parameters:\n * \n * parent - <mxCell> that specifies the parent of the new edge.\n * id - Optional string that defines the Id of the new edge.\n * value - JavaScript object to be used as the user object.\n * source - <mxCell> that defines the source of the edge.\n * target - <mxCell> that defines the target of the edge.\n * style - Optional string that defines the cell style.\n */\nmxGraph.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tvar edge = this.createEdge(parent, id, value, source, target, style);\n\t\n\treturn this.addEdge(edge, parent, source, target);\n};\n\n/**\n * Function: createEdge\n * \n * Hook method that creates the new edge for <insertEdge>. This\n * implementation does not set the source and target of the edge, these\n * are set when the edge is added to the model.\n * \n */\nmxGraph.prototype.createEdge = function(parent, id, value, source, target, style)\n{\n\t// Creates the edge\n\tvar edge = new mxCell(value, new mxGeometry(), style);\n\tedge.setId(id);\n\tedge.setEdge(true);\n\tedge.geometry.relative = true;\n\t\n\treturn edge;\n};\n\n/**\n * Function: addEdge\n * \n * Adds the edge to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the edge that was\n * added.\n * \n * Parameters:\n * \n * edge - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n * index - Optional index to insert the cells at. Default is to append.\n */\nmxGraph.prototype.addEdge = function(edge, parent, source, target, index)\n{\n\treturn this.addCell(edge, parent, index, source, target);\n};\n\n/**\n * Function: addCell\n * \n * Adds the cell to the parent and connects it to the given source and\n * target terminals. This is a shortcut method. Returns the cell that was\n * added.\n * \n * Parameters:\n * \n * cell - <mxCell> to be inserted into the given parent.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional <mxCell> that represents the source terminal.\n * target - Optional <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.addCell = function(cell, parent, index, source, target)\n{\n\treturn this.addCells([cell], parent, index, source, target)[0];\n};\n\n/**\n * Function: addCells\n * \n * Adds the cells to the parent at the given index, connecting each cell to\n * the optional source and target terminal. The change is carried out using\n * <cellsAdded>. This method fires <mxEvent.ADD_CELLS> while the\n * transaction is in progress. Returns the cells that were added.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be inserted.\n * parent - <mxCell> that represents the new parent. If no parent is\n * given then the default parent is used.\n * index - Optional index to insert the cells at. Default is to append.\n * source - Optional source <mxCell> for all inserted cells.\n * target - Optional target <mxCell> for all inserted cells.\n */\nmxGraph.prototype.addCells = function(cells, parent, index, source, target)\n{\n\tif (parent == null)\n\t{\n\t\tparent = this.getDefaultParent();\n\t}\n\t\n\tif (index == null)\n\t{\n\t\tindex = this.model.getChildCount(parent);\n\t}\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsAdded(cells, parent, index, source, target, false, true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_CELLS, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsAdded\n * \n * Adds the specified cells to the given parent. This method fires\n * <mxEvent.CELLS_ADDED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsAdded = function(cells, parent, index, source, target, absolute, constrain, extend)\n{\n\tif (cells != null && parent != null && index != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar parentState = (absolute) ? this.view.getState(parent) : null;\n\t\t\tvar o1 = (parentState != null) ? parentState.origin : null;\n\t\t\tvar zero = new mxPoint(0, 0);\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] == null)\n\t\t\t\t{\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar previous = this.model.getParent(cells[i]);\n\t\n\t\t\t\t\t// Keeps the cell at its absolute location\n\t\t\t\t\tif (o1 != null && cells[i] != parent && parent != previous)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar oldState = this.view.getState(previous);\n\t\t\t\t\t\tvar o2 = (oldState != null) ? oldState.origin : zero;\n\t\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\n\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar dx = o2.x - o1.x;\n\t\t\t\t\t\t\tvar dy = o2.y - o1.y;\n\t\n\t\t\t\t\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t\t\t\t\t// to avoid forward references in sessions.\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\tgeo.translate(dx, dy);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (!geo.relative && this.model.isVertex(cells[i]) &&\n\t\t\t\t\t\t\t\t!this.isAllowNegativeCoordinates())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\t\t\t\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Decrements all following indices\n\t\t\t\t\t// if cell is already in parent\n\t\t\t\t\tif (parent == previous && index + i > this.model.getChildCount(parent))\n\t\t\t\t\t{\n\t\t\t\t\t\tindex--;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.add(parent, cells[i], index + i);\n\t\t\t\t\t\n\t\t\t\t\tif (this.autoSizeCellsOnAdd)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.autoSizeCell(cells[i], true);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Extends the parent or constrains the child\n\t\t\t\t\tif ((extend == null || extend) &&\n\t\t\t\t\t\tthis.isExtendParentsOnAdd(cells[i]) && this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Additionally constrains the child after extending the parent\n\t\t\t\t\tif (constrain == null || constrain)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the source terminal\n\t\t\t\t\tif (source != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], source, true);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Sets the target terminal\n\t\t\t\t\tif (target != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.cellConnected(cells[i], target, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_ADDED, 'cells', cells,\n\t\t\t\t'parent', parent, 'index', index, 'source', source, 'target', target,\n\t\t\t\t'absolute', absolute));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: autoSizeCell\n * \n * Resizes the specified cell to just fit around the its label and/or children\n * \n * Parameters:\n * \n * cell - <mxCells> to be resized.\n * recurse - Optional boolean which specifies if all descendants should be\n * autosized. Default is true.\n */\nmxGraph.prototype.autoSizeCell = function(cell, recurse)\n{\n\trecurse = (recurse != null) ? recurse : true;\n\t\n\tif (recurse)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.autoSizeCell(this.model.getChildAt(cell, i));\n\t\t}\n\t}\n\n\tif (this.getModel().isVertex(cell) && this.isAutoSizeCell(cell))\n\t{\n\t\tthis.updateCellSize(cell);\n\t}\n};\n\n/**\n * Function: removeCells\n * \n * Removes the given cells from the graph including all connected edges if\n * includeEdges is true. The change is carried out using <cellsRemoved>.\n * This method fires <mxEvent.REMOVE_CELLS> while the transaction is in\n * progress. The removed cells are returned as an array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove. If null is specified then the\n * selection cells which are deletable are used.\n * includeEdges - Optional boolean which specifies if all connected edges\n * should be removed as well. Default is true.\n */\nmxGraph.prototype.removeCells = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getDeletableCells(this.getSelectionCells());\n\t}\n\n\t// Adds all edges to the cells\n\tif (includeEdges)\n\t{\n\t\t// FIXME: Remove duplicate cells in result or do not add if\n\t\t// in cells or descendant of cells\n\t\tcells = this.getDeletableCells(this.addAllEdges(cells));\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsRemoved(cells);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE_CELLS, \n\t\t\t\t'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cells;\n};\n\n/**\n * Function: cellsRemoved\n * \n * Removes the given cells from the model. This method fires\n * <mxEvent.CELLS_REMOVED> while the transaction is in progress.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to remove.\n */\nmxGraph.prototype.cellsRemoved = function(cells)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar scale = this.view.scale;\n\t\tvar tr = this.view.translate;\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Creates hashtable for faster lookup\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\t// Disconnects edges which are not in cells\n\t\t\t\tvar edges = this.getAllEdges([cells[i]]);\n\t\t\t\t\n\t\t\t\tvar disconnectTerminal = mxUtils.bind(this, function(edge, source)\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(edge);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edge);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Checks which side of the edge is being disconnected\n\t\t\t\t\t\t\tvar tmp = state.getVisibleTerminal(source);\n\t\t\t\t\t\t\tvar connected = false;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\twhile (tmp != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (cells[i] == tmp)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconnected = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\ttmp = this.model.getParent(tmp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (connected)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar dx = tr.x;\n\t\t\t\t\t\t\t\tvar dy = tr.y;\n\t\t\t\t\t\t\t\tvar parentState = this.view.getState(this.model.getParent(edge));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (parentState != null && this.model.isVertex(parentState.cell))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdx = parentState.x / scale;\n\t\t\t\t\t\t\t\t\tdy = parentState.y / scale;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\t\t\t\t\t\t\t\tvar n = (source) ? 0 : pts.length - 1;\n\t\t\t\t\t\t\t\tgeo.setTerminalPoint(new mxPoint(pts[n].x / scale - dx, pts[n].y / scale - dy), source);\n\t\t\t\t\t\t\t\tthis.model.setTerminal(edges[j], null, source);\n\t\t\t\t\t\t\t\tthis.model.setGeometry(edges[j], geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t{\n\t\t\t\t\tif (!dict.get(edges[j]))\n\t\t\t\t\t{\n\t\t\t\t\t\tdisconnectTerminal(edges[j], true);\n\t\t\t\t\t\tdisconnectTerminal(edges[j], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.model.remove(cells[i]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_REMOVED, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: splitEdge\n * \n * Splits the given edge by adding the newEdge between the previous source\n * and the given cell and reconnecting the source of the given edge to the\n * given cell. This method fires <mxEvent.SPLIT_EDGE> while the transaction\n * is in progress. Returns the new edge that was inserted.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that represents the cells to insert into the edge.\n * newEdge - <mxCell> that represents the edge to be inserted.\n * dx - Optional integer that specifies the vector to move the cells.\n * dy - Optional integer that specifies the vector to move the cells.\n */\nmxGraph.prototype.splitEdge = function(edge, cells, newEdge, dx, dy)\n{\n\tdx = dx || 0;\n\tdy = dy || 0;\n\n\tvar parent = this.model.getParent(edge);\n\tvar source = this.model.getTerminal(edge, true);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tif (newEdge == null)\n\t\t{\n\t\t\tnewEdge = this.cloneCell(edge);\n\t\t\t\n\t\t\t// Removes waypoints before/after new cell\n\t\t\tvar state = this.view.getState(edge);\n\t\t\tvar geo = this.getCellGeometry(newEdge);\n\t\t\t\n\t\t\tif (geo != null && geo.points != null && state != null)\n\t\t\t{\n\t\t\t\tvar t = this.view.translate;\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar idx = mxUtils.findNearestSegment(state, (dx + t.x) * s, (dy + t.y) * s);\n\t\t\t\tgeo.points = geo.points.slice(0, idx);\n\t\t\t\t\t\t\t\t\n\t\t\t\tgeo = this.getCellGeometry(edge);\n\t\t\t\t\n\t\t\t\tif (geo != null && geo.points != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.points = geo.points.slice(idx);\n\t\t\t\t\tthis.model.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.cellsMoved(cells, dx, dy, false, false);\n\t\tthis.cellsAdded(cells, parent, this.model.getChildCount(parent), null, null,\n\t\t\t\ttrue);\n\t\tthis.cellsAdded([newEdge], parent, this.model.getChildCount(parent),\n\t\t\t\tsource, cells[0], false);\n\t\tthis.cellConnected(edge, cells[0], true);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.SPLIT_EDGE, 'edge', edge,\n\t\t\t\t'cells', cells, 'newEdge', newEdge, 'dx', dx, 'dy', dy));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn newEdge;\n};\n\n/**\n * Group: Cell visibility\n */\n\n/**\n * Function: toggleCells\n * \n * Sets the visible state of the specified cells and all connected edges\n * if includeEdges is true. The change is carried out using <cellsToggled>.\n * This method fires <mxEvent.TOGGLE_CELLS> while the transaction is in\n * progress. Returns the cells whose visible state was changed.\n * \n * Parameters:\n * \n * show - Boolean that specifies the visible state to be assigned.\n * cells - Array of <mxCells> whose visible state should be changed. If\n * null is specified then the selection cells are used.\n * includeEdges - Optional boolean indicating if the visible state of all\n * connected edges should be changed as well. Default is true.\n */\nmxGraph.prototype.toggleCells = function(show, cells, includeEdges)\n{\n\tif (cells == null)\n\t{\n\t\tcells = this.getSelectionCells();\n\t}\n\n\t// Adds all connected edges recursively\n\tif (includeEdges)\n\t{\n\t\tcells = this.addAllEdges(cells);\n\t}\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsToggled(cells, show);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.TOGGLE_CELLS,\n\t\t\t'show', show, 'cells', cells, 'includeEdges', includeEdges));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsToggled\n * \n * Sets the visible state of the specified cells.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose visible state should be changed.\n * show - Boolean that specifies the visible state to be assigned.\n */\nmxGraph.prototype.cellsToggled = function(cells, show)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.model.setVisible(cells[i], show);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Folding\n */\n\n/**\n * Function: foldCells\n * \n * Sets the collapsed state of the specified cells and all descendants\n * if recurse is true. The change is carried out using <cellsFolded>.\n * This method fires <mxEvent.FOLD_CELLS> while the transaction is in\n * progress. Returns the cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Optional boolean indicating if the collapsed state of all\n * descendants should be set. Default is false.\n * cells - Array of <mxCells> whose collapsed state should be set. If\n * null is specified then the foldable selection cells are used.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n * evt - Optional native event that triggered the invocation.\n */\nmxGraph.prototype.foldCells = function(collapse, recurse, cells, checkFoldable, evt)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells == null)\n\t{\n\t\tcells = this.getFoldableCells(this.getSelectionCells(), collapse);\n\t}\n\n\tthis.stopEditing(false);\n\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsFolded(cells, collapse, recurse, checkFoldable);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FOLD_CELLS,\n\t\t\t'collapse', collapse, 'recurse', recurse, 'cells', cells));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsFolded\n * \n * Sets the collapsed state of the specified cells. This method fires\n * <mxEvent.CELLS_FOLDED> while the transaction is in progress. Returns the\n * cells whose collapsed state was changed.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose collapsed state should be set.\n * collapsed - Boolean indicating the collapsed state to be assigned.\n * recurse - Boolean indicating if the collapsed state of all descendants\n * should be set.\n * checkFoldable - Optional boolean indicating of isCellFoldable should be\n * checked. Default is false.\n */\nmxGraph.prototype.cellsFolded = function(cells, collapse, recurse, checkFoldable)\n{\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif ((!checkFoldable || this.isCellFoldable(cells[i], collapse)) &&\n\t\t\t\t\tcollapse != this.isCellCollapsed(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.model.setCollapsed(cells[i], collapse);\n\t\t\t\t\tthis.swapBounds(cells[i], collapse);\n\n\t\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (recurse)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\t\t\t\tthis.cellsFolded(children, collapse, recurse);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_FOLDED,\n\t\t\t\t'cells', cells, 'collapse', collapse, 'recurse', recurse));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swapBounds\n * \n * Swaps the alternate and the actual bounds in the geometry of the given\n * cell invoking <updateAlternateBounds> before carrying out the swap.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the bounds should be swapped.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.swapBounds = function(cell, willCollapse)\n{\n\tif (cell != null)\n\t{\n\t\tvar geo = this.model.getGeometry(cell);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tthis.updateAlternateBounds(cell, geo, willCollapse);\n\t\t\tgeo.swap();\n\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: updateAlternateBounds\n * \n * Updates or sets the alternate bounds in the given geometry for the given\n * cell depending on whether the cell is going to be collapsed. If no\n * alternate bounds are defined in the geometry and\n * <collapseToPreferredSize> is true, then the preferred size is used for\n * the alternate bounds. The top, left corner is always kept at the same\n * location.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the geometry is being udpated.\n * g - <mxGeometry> for which the alternate bounds should be updated.\n * willCollapse - Boolean indicating if the cell is going to be collapsed.\n */\nmxGraph.prototype.updateAlternateBounds = function(cell, geo, willCollapse)\n{\n\tif (cell != null && geo != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\tif (geo.alternateBounds == null)\n\t\t{\n\t\t\tvar bounds = geo;\n\t\t\t\n\t\t\tif (this.collapseToPreferredSize)\n\t\t\t{\n\t\t\t\tvar tmp = this.getPreferredSizeForCell(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tbounds = tmp;\n\n\t\t\t\t\tvar startSize = mxUtils.getValue(style, mxConstants.STYLE_STARTSIZE);\n\n\t\t\t\t\tif (startSize > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbounds.height = Math.max(bounds.height, startSize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tgeo.alternateBounds = new mxRectangle(0, 0, bounds.width, bounds.height);\n\t\t}\n\t\t\n\t\tif (geo.alternateBounds != null)\n\t\t{\n\t\t\tgeo.alternateBounds.x = geo.x;\n\t\t\tgeo.alternateBounds.y = geo.y;\n\t\t\t\n\t\t\tvar alpha = mxUtils.toRadians(style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar dx = geo.alternateBounds.getCenterX() - geo.getCenterX();\n\t\t\t\tvar dy = geo.alternateBounds.getCenterY() - geo.getCenterY();\n\t\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\n\t\t\t\tvar dx2 = cos * dx - sin * dy;\n\t\t\t\tvar dy2 = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tgeo.alternateBounds.x += dx2 - dx;\n\t\t\t\tgeo.alternateBounds.y += dy2 - dy;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: addAllEdges\n * \n * Returns an array with the given cells and all edges that are connected\n * to a cell or one of its descendants.\n */\nmxGraph.prototype.addAllEdges = function(cells)\n{\n\tvar allCells = cells.slice();\n\t\n\treturn mxUtils.removeDuplicates(allCells.concat(this.getAllEdges(cells)));\n};\n\n/**\n * Function: getAllEdges\n * \n * Returns all edges connected to the given cells or its descendants.\n */\nmxGraph.prototype.getAllEdges = function(cells)\n{\n\tvar edges = [];\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar edgeCount = this.model.getEdgeCount(cells[i]);\n\t\t\t\n\t\t\tfor (var j = 0; j < edgeCount; j++)\n\t\t\t{\n\t\t\t\tedges.push(this.model.getEdgeAt(cells[i], j));\n\t\t\t}\n\n\t\t\t// Recurses\n\t\t\tvar children = this.model.getChildren(cells[i]);\n\t\t\tedges = edges.concat(this.getAllEdges(children));\n\t\t}\n\t}\n\t\n\treturn edges;\n};\n\n/**\n * Group: Cell sizing\n */\n\n/**\n * Function: updateCellSize\n * \n * Updates the size of the given cell in the model using <cellSizeUpdated>.\n * This method fires <mxEvent.UPDATE_CELL_SIZE> while the transaction is in\n * progress. Returns the cell whose size was updated.\n * \n * Parameters:\n * \n * cell - <mxCell> whose size should be updated.\n */\nmxGraph.prototype.updateCellSize = function(cell, ignoreChildren)\n{\n\tignoreChildren = (ignoreChildren != null) ? ignoreChildren : false;\n\t\n\tthis.model.beginUpdate();\t\t\t\t\n\ttry\n\t{\n\t\tthis.cellSizeUpdated(cell, ignoreChildren);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.UPDATE_CELL_SIZE,\n\t\t\t\t'cell', cell, 'ignoreChildren', ignoreChildren));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: cellSizeUpdated\n * \n * Updates the size of the given cell in the model using\n * <getPreferredSizeForCell> to get the new size.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the size should be changed.\n */\nmxGraph.prototype.cellSizeUpdated = function(cell, ignoreChildren)\n{\n\tif (cell != null)\n\t{\n\t\tthis.model.beginUpdate();\t\t\t\t\n\t\ttry\n\t\t{\n\t\t\tvar size = this.getPreferredSizeForCell(cell);\n\t\t\tvar geo = this.model.getGeometry(cell);\n\t\t\t\n\t\t\tif (size != null && geo != null)\n\t\t\t{\n\t\t\t\tvar collapsed = this.isCellCollapsed(cell);\n\t\t\t\tgeo = geo.clone();\n\n\t\t\t\tif (this.isSwimlane(cell))\n\t\t\t\t{\n\t\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\t\t\tvar cellStyle = this.model.getStyle(cell);\n\n\t\t\t\t\tif (cellStyle == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = '';\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.height + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.height = size.height + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tcellStyle = mxUtils.setStyle(cellStyle,\n\t\t\t\t\t\t\t\tmxConstants.STYLE_STARTSIZE, size.width + 8);\n\n\t\t\t\t\t\tif (collapsed)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.width = size.width + 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.model.setStyle(cell, cellStyle);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tgeo.width = size.width;\n\t\t\t\t\tgeo.height = size.height;\n\t\t\t\t}\n\n\t\t\t\tif (!ignoreChildren && !collapsed)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = this.view.getBounds(this.model.getChildren(cell));\n\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tr = this.view.translate;\n\t\t\t\t\t\tvar scale = this.view.scale;\n\n\t\t\t\t\t\tvar width = (bounds.x + bounds.width) / scale - geo.x - tr.x;\n\t\t\t\t\t\tvar height = (bounds.y + bounds.height) / scale - geo.y - tr.y;\n\n\t\t\t\t\t\tgeo.width = Math.max(geo.width, width);\n\t\t\t\t\t\tgeo.height = Math.max(geo.height, height);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.cellsResized([cell], [geo], false);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getPreferredSizeForCell\n * \n * Returns the preferred width and height of the given <mxCell> as an\n * <mxRectangle>. To implement a minimum width, add a new style eg.\n * minWidth in the vertex and override this method as follows.\n * \n * (code)\n * var graphGetPreferredSizeForCell = graph.getPreferredSizeForCell;\n * graph.getPreferredSizeForCell = function(cell)\n * {\n *   var result = graphGetPreferredSizeForCell.apply(this, arguments);\n *   var style = this.getCellStyle(cell);\n *   \n *   if (style['minWidth'] > 0)\n *   {\n *     result.width = Math.max(style['minWidth'], result.width);\n *   }\n * \n *   return result;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> for which the preferred size should be returned.\n */\nmxGraph.prototype.getPreferredSizeForCell = function(cell)\n{\n\tvar result = null;\n\t\n\tif (cell != null)\n\t{\n\t\tvar state = this.view.getState(cell) || this.view.createState(cell);\n\t\tvar style = state.style;\n\n\t\tif (!this.model.isEdge(cell))\n\t\t{\n\t\t\tvar fontSize = style[mxConstants.STYLE_FONTSIZE] || mxConstants.DEFAULT_FONTSIZE;\n\t\t\tvar dx = 0;\n\t\t\tvar dy = 0;\n\t\t\t\n\t\t\t// Adds dimension of image if shape is a label\n\t\t\tif (this.getImage(state) != null || style[mxConstants.STYLE_IMAGE] != null)\n\t\t\t{\n\t\t\t\tif (style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_LABEL)\n\t\t\t\t{\n\t\t\t\t\tif (style[mxConstants.STYLE_VERTICAL_ALIGN] == mxConstants.ALIGN_MIDDLE)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx += parseFloat(style[mxConstants.STYLE_IMAGE_WIDTH]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (style[mxConstants.STYLE_ALIGN] != mxConstants.ALIGN_CENTER)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy += parseFloat(style[mxConstants.STYLE_IMAGE_HEIGHT]) || mxLabel.prototype.imageSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Adds spacings\n\t\t\tdx += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdx += style[mxConstants.STYLE_SPACING_LEFT] || 0;\n\t\t\tdx += style[mxConstants.STYLE_SPACING_RIGHT] || 0;\n\n\t\t\tdy += 2 * (style[mxConstants.STYLE_SPACING] || 0);\n\t\t\tdy += style[mxConstants.STYLE_SPACING_TOP] || 0;\n\t\t\tdy += style[mxConstants.STYLE_SPACING_BOTTOM] || 0;\n\t\t\t\n\t\t\t// Add spacing for collapse/expand icon\n\t\t\t// LATER: Check alignment and use constants\n\t\t\t// for image spacing\n\t\t\tvar image = this.getFoldingImage(state);\n\t\t\t\n\t\t\tif (image != null)\n\t\t\t{\n\t\t\t\tdx += image.width + 8;\n\t\t\t}\n\n\t\t\t// Adds space for label\n\t\t\tvar value = this.cellRenderer.getLabelValue(state);\n\n\t\t\tif (value != null && value.length > 0)\n\t\t\t{\n\t\t\t\tif (!this.isHtmlLabel(state.cell))\n\t\t\t\t{\n\t\t\t\t\tvalue = mxUtils.htmlEntities(value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvalue = value.replace(/\\n/g, '<br>');\n\t\t\t\t\n\t\t\t\tvar size = mxUtils.getSizeForString(value, fontSize, style[mxConstants.STYLE_FONTFAMILY]);\n\t\t\t\tvar width = size.width + dx;\n\t\t\t\tvar height = size.height + dy;\n\t\t\t\t\n\t\t\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t\t\t{\n\t\t\t\t\tvar tmp = height;\n\t\t\t\t\t\n\t\t\t\t\theight = width;\n\t\t\t\t\twidth = tmp;\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif (this.gridEnabled)\n\t\t\t\t{\n\t\t\t\t\twidth = this.snap(width + this.gridSize / 2);\n\t\t\t\t\theight = this.snap(height + this.gridSize / 2);\n\t\t\t\t}\n\n\t\t\t\tresult = new mxRectangle(0, 0, width, height);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gs2 = 4 * this.gridSize;\n\t\t\t\tresult = new mxRectangle(0, 0, gs2, gs2);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: resizeCell\n * \n * Sets the bounds of the given cell using <resizeCells>. Returns the\n * cell which was passed to the function.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangle> that represents the new bounds.\n */\nmxGraph.prototype.resizeCell = function(cell, bounds, recurse)\n{\n\treturn this.resizeCells([cell], [bounds], recurse)[0];\n};\n\n/**\n * Function: resizeCells\n * \n * Sets the bounds of the given cells and fires a <mxEvent.RESIZE_CELLS>\n * event while the transaction is in progress. Returns the cells which\n * have been passed to the function.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n */\nmxGraph.prototype.resizeCells = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : this.isRecursiveResize();\n\t\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tthis.cellsResized(cells, bounds, recurse);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.RESIZE_CELLS,\n\t\t\t\t'cells', cells, 'bounds', bounds));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsResized\n * \n * Sets the bounds of the given cells and fires a <mxEvent.CELLS_RESIZED>\n * event. If <extendParents> is true, then the parent is extended if a\n * child size is changed so that it overlaps with the parent.\n * \n * The following example shows how to control group resizes to make sure\n * that all child cells stay within the group.\n * \n * (code)\n * graph.addListener(mxEvent.CELLS_RESIZED, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n *   \n *   if (cells != null)\n *   {\n *     for (var i = 0; i < cells.length; i++)\n *     {\n *       if (graph.getModel().getChildCount(cells[i]) > 0)\n *       {\n *         var geo = graph.getCellGeometry(cells[i]);\n *         \n *         if (geo != null)\n *         {\n *           var children = graph.getChildCells(cells[i], true, true);\n *           var bounds = graph.getBoundingBoxFromGeometry(children, true);\n *           \n *           geo = geo.clone();\n *           geo.width = Math.max(geo.width, bounds.width);\n *           geo.height = Math.max(geo.height, bounds.height);\n *           \n *           graph.getModel().setGeometry(cells[i], geo);\n *         }\n *       }\n *     }\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be changed.\n * bounds - Array of <mxRectangles> that represent the new bounds.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellsResized = function(cells, bounds, recurse)\n{\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tif (cells != null && bounds != null && cells.length == bounds.length)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.cellResized(cells[i], bounds[i], false, recurse);\n\n\t\t\t\tif (this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnResize)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_RESIZED,\n\t\t\t\t\t'cells', cells, 'bounds', bounds));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: cellResized\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be changed.\n * bounds - <mxRectangles> that represent the new bounds.\n * ignoreRelative - Boolean that indicates if relative cells should be ignored.\n * recurse - Optional boolean that specifies if the children should be resized.\n */\nmxGraph.prototype.cellResized = function(cell, bounds, ignoreRelative, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null && (geo.x != bounds.x || geo.y != bounds.y ||\n\t\tgeo.width != bounds.width || geo.height != bounds.height))\n\t{\n\t\tgeo = geo.clone();\n\n\t\tif (!ignoreRelative && geo.relative)\n\t\t{\n\t\t\tvar offset = geo.offset;\n\n\t\t\tif (offset != null)\n\t\t\t{\n\t\t\t\toffset.x += bounds.x - geo.x;\n\t\t\t\toffset.y += bounds.y - geo.y;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.x = bounds.x;\n\t\t\tgeo.y = bounds.y;\n\t\t}\n\n\t\tgeo.width = bounds.width;\n\t\tgeo.height = bounds.height;\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, geo.x);\n\t\t\tgeo.y = Math.max(0, geo.y);\n\t\t}\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (recurse)\n\t\t\t{\n\t\t\t\tthis.resizeChildCells(cell, geo);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\tthis.constrainChildCells(cell);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeChildCells\n * \n * Resizes the child cells of the given cell for the given new geometry with\n * respect to the current geometry of the cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n * newGeo - <mxGeometry> that represents the new bounds.\n */\nmxGraph.prototype.resizeChildCells = function(cell, newGeo)\n{\n\tvar geo = this.model.getGeometry(cell);\n\tvar dx = newGeo.width / geo.width;\n\tvar dy = newGeo.height / geo.height;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.scaleCell(this.model.getChildAt(cell, i), dx, dy, true);\n\t}\n};\n\n/**\n * Function: constrainChildCells\n * \n * Constrains the children of the given cell using <constrainChild>.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.constrainChildCells = function(cell)\n{\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tthis.constrainChild(this.model.getChildAt(cell, i));\n\t}\n};\n\n/**\n * Function: scaleCell\n * \n * Scales the points, position and size of the given cell according to the\n * given vertical and horizontal scaling factors.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be scaled.\n * dx - Horizontal scaling factor.\n * dy - Vertical scaling factor.\n * recurse - Boolean indicating if the child cells should be scaled.\n */\nmxGraph.prototype.scaleCell = function(cell, dx, dy, recurse)\n{\n\tvar geo = this.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\n\t\tgeo = geo.clone();\n\t\t\n\t\t// Stores values for restoring based on style\n\t\tvar x = geo.x;\n\t\tvar y = geo.y\n\t\tvar w = geo.width;\n\t\tvar h = geo.height;\n\t\t\n\t\tgeo.scale(dx, dy, style[mxConstants.STYLE_ASPECT] == 'fixed');\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_WIDTH] == '1')\n\t\t{\n\t\t\tgeo.width = w * dx;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_WIDTH] == '0')\n\t\t{\n\t\t\tgeo.width = w;\n\t\t}\n\t\t\n\t\tif (style[mxConstants.STYLE_RESIZE_HEIGHT] == '1')\n\t\t{\n\t\t\tgeo.height = h * dy;\n\t\t}\n\t\telse if (style[mxConstants.STYLE_RESIZE_HEIGHT] == '0')\n\t\t{\n\t\t\tgeo.height = h;\n\t\t}\n\t\t\n\t\tif (!this.isCellMovable(cell))\n\t\t{\n\t\t\tgeo.x = x;\n\t\t\tgeo.y = y;\n\t\t}\n\t\t\n\t\tif (!this.isCellResizable(cell))\n\t\t{\n\t\t\tgeo.width = w;\n\t\t\tgeo.height = h;\n\t\t}\n\n\t\tif (this.model.isVertex(cell))\n\t\t{\n\t\t\tthis.cellResized(cell, geo, true, recurse);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.model.setGeometry(cell, geo);\n\t\t}\n\t}\n};\n\n/**\n * Function: extendParent\n * \n * Resizes the parents recursively so that they contain the complete area\n * of the resized child cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.extendParent = function(cell)\n{\n\tif (cell != null)\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\tvar p = this.getCellGeometry(parent);\n\t\t\n\t\tif (parent != null && p != null && !this.isCellCollapsed(parent))\n\t\t{\n\t\t\tvar geo = this.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative &&\n\t\t\t\t(p.width < geo.x + geo.width ||\n\t\t\t\tp.height < geo.y + geo.height))\n\t\t\t{\n\t\t\t\tp = p.clone();\n\t\t\t\t\n\t\t\t\tp.width = Math.max(p.width, geo.x + geo.width);\n\t\t\t\tp.height = Math.max(p.height, geo.y + geo.height);\n\t\t\t\t\n\t\t\t\tthis.cellsResized([parent], [p], false);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Cell moving\n */\n\n/**\n * Function: importCells\n * \n * Clones and inserts the given cells into the graph using the move\n * method and returns the inserted cells. This shortcut is used if\n * cells are inserted via datatransfer.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be imported.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.importCells = function(cells, dx, dy, target, evt, mapping)\n{\t\n\treturn this.moveCells(cells, dx, dy, true, target, evt, mapping);\n};\n\n/**\n * Function: moveCells\n * \n * Moves or clones the specified cells and moves the cells or clones by the\n * given amount, adding them to the optional target cell. The evt is the\n * mouse event as the mouse was released. The change is carried out using\n * <cellsMoved>. This method fires <mxEvent.MOVE_CELLS> while the\n * transaction is in progress. Returns the cells that were moved.\n * \n * Use the following code to move all cells in the graph.\n * \n * (code)\n * graph.moveCells(graph.getChildCells(null, true, true), 10, 10);\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be moved, cloned or added to the target.\n * dx - Integer that specifies the x-coordinate of the vector. Default is 0.\n * dy - Integer that specifies the y-coordinate of the vector. Default is 0.\n * clone - Boolean indicating if the cells should be cloned. Default is false.\n * target - <mxCell> that represents the new parent of the cells.\n * evt - Mouseevent that triggered the invocation.\n * mapping - Optional mapping for existing clones.\n */\nmxGraph.prototype.moveCells = function(cells, dx, dy, clone, target, evt, mapping)\n{\n\tdx = (dx != null) ? dx : 0;\n\tdy = (dy != null) ? dy : 0;\n\tclone = (clone != null) ? clone : false;\n\t\n\tif (cells != null && (dx != 0 || dy != 0 || clone || target != null))\n\t{\n\t\t// Removes descendants with ancestors in cells to avoid multiple moving\n\t\tcells = this.model.getTopmostCells(cells);\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Faster cell lookups to remove relative edge labels with selected\n\t\t\t// terminals to avoid explicit and implicit move at same time\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tvar isSelected = mxUtils.bind(this, function(cell)\n\t\t\t{\n\t\t\t\twhile (cell != null)\n\t\t\t\t{\n\t\t\t\t\tif (dict.get(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcell = this.model.getParent(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\t\n\t\t\t// Removes relative edge labels with selected terminals\n\t\t\tvar checked = [];\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\n\t\t\t\tif ((geo == null || !geo.relative) || !this.model.isEdge(parent) ||\n\t\t\t\t\t(!isSelected(this.model.getTerminal(parent, true)) &&\n\t\t\t\t\t!isSelected(this.model.getTerminal(parent, false))))\n\t\t\t\t{\n\t\t\t\t\tchecked.push(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcells = checked;\n\t\t\t\n\t\t\tif (clone)\n\t\t\t{\n\t\t\t\tcells = this.cloneCells(cells, this.isCloneInvalidEdges(), mapping);\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\ttarget = this.getDefaultParent();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// FIXME: Cells should always be inserted first before any other edit\n\t\t\t// to avoid forward references in sessions.\n\t\t\t// Need to disable allowNegativeCoordinates if target not null to\n\t\t\t// allow for temporary negative numbers until cellsAdded is called.\n\t\t\tvar previous = this.isAllowNegativeCoordinates();\n\t\t\t\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tthis.setAllowNegativeCoordinates(true);\n\t\t\t}\n\t\t\t\n\t\t\tthis.cellsMoved(cells, dx, dy, !clone && this.isDisconnectOnMove()\n\t\t\t\t\t&& this.isAllowDanglingEdges(), target == null,\n\t\t\t\t\tthis.isExtendParentsOnMove() && target == null);\n\t\t\t\n\t\t\tthis.setAllowNegativeCoordinates(previous);\n\n\t\t\tif (target != null)\n\t\t\t{\n\t\t\t\tvar index = this.model.getChildCount(target);\n\t\t\t\tthis.cellsAdded(cells, target, index, null, null, true);\n\t\t\t}\n\n\t\t\t// Dispatches a move event\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.MOVE_CELLS, 'cells', cells,\n\t\t\t\t'dx', dx, 'dy', dy, 'clone', clone, 'target', target, 'event', evt));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n\n\treturn cells;\n};\n\n/**\n * Function: cellsMoved\n * \n * Moves the specified cells by the given vector, disconnecting the cells\n * using disconnectGraph is disconnect is true. This method fires\n * <mxEvent.CELLS_MOVED> while the transaction is in progress.\n */\nmxGraph.prototype.cellsMoved = function(cells, dx, dy, disconnect, constrain, extend)\n{\n\tif (cells != null && (dx != 0 || dy != 0))\n\t{\n\t\textend = (extend != null) ? extend : false;\n\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (disconnect)\n\t\t\t{\n\t\t\t\tthis.disconnectGraph(cells);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tthis.translateCell(cells[i], dx, dy);\n\t\t\t\t\n\t\t\t\tif (extend && this.isExtendParent(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.extendParent(cells[i]);\n\t\t\t\t}\n\t\t\t\telse if (constrain)\n\t\t\t\t{\n\t\t\t\t\tthis.constrainChild(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.resetEdgesOnMove)\n\t\t\t{\n\t\t\t\tthis.resetEdges(cells);\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELLS_MOVED,\n\t\t\t\t'cells', cells, 'dx', dx, 'dy', dy, 'disconnect', disconnect));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: translateCell\n * \n * Translates the geometry of the given cell and stores the new,\n * translated geometry in the model as an atomic change.\n */\nmxGraph.prototype.translateCell = function(cell, dx, dy)\n{\n\tvar geo = this.model.getGeometry(cell);\n\n\tif (geo != null)\n\t{\n\t\tdx = parseFloat(dx);\n\t\tdy = parseFloat(dy);\n\t\tgeo = geo.clone();\n\t\tgeo.translate(dx, dy);\n\n\t\tif (!geo.relative && this.model.isVertex(cell) && !this.isAllowNegativeCoordinates())\n\t\t{\n\t\t\tgeo.x = Math.max(0, parseFloat(geo.x));\n\t\t\tgeo.y = Math.max(0, parseFloat(geo.y));\n\t\t}\n\t\t\n\t\tif (geo.relative && !this.model.isEdge(cell))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar angle = 0;\n\t\t\t\n\t\t\tif (this.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(parent);\n\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(parent);\n\t\t\t\t\n\t\t\t\tangle = mxUtils.getValue(style, mxConstants.STYLE_ROTATION, 0);\n\t\t\t}\n\t\t\t\n\t\t\tif (angle != 0)\n\t\t\t{\n\t\t\t\tvar rad = mxUtils.toRadians(-angle);\n\t\t\t\tvar cos = Math.cos(rad);\n\t\t\t\tvar sin = Math.sin(rad);\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(dx, dy), cos, sin, new mxPoint(0, 0));\n\t\t\t\tdx = pt.x;\n\t\t\t\tdy = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x = parseFloat(geo.offset.x) + dx;\n\t\t\t\tgeo.offset.y = parseFloat(geo.offset.y) + dy;\n\t\t\t}\n\t\t}\n\n\t\tthis.model.setGeometry(cell, geo);\n\t}\n};\n\n/**\n * Function: getCellContainmentArea\n * \n * Returns the <mxRectangle> inside which a cell is to be kept.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the area should be returned.\n */\nmxGraph.prototype.getCellContainmentArea = function(cell)\n{\n\tif (cell != null && !this.model.isEdge(cell))\n\t{\n\t\tvar parent = this.model.getParent(cell);\n\t\t\n\t\tif (parent != null && parent != this.getDefaultParent())\n\t\t{\n\t\t\tvar g = this.model.getGeometry(parent);\n\t\t\t\n\t\t\tif (g != null)\n\t\t\t{\n\t\t\t\tvar x = 0;\n\t\t\t\tvar y = 0;\n\t\t\t\tvar w = g.width;\n\t\t\t\tvar h = g.height;\n\t\t\t\t\n\t\t\t\tif (this.isSwimlane(parent))\n\t\t\t\t{\n\t\t\t\t\tvar size = this.getStartSize(parent);\n\t\t\t\t\t\n\t\t\t\t\tvar state = this.view.getState(parent);\n\t\t\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(parent);\n\t\t\t\t\tvar dir = mxUtils.getValue(style, mxConstants.STYLE_DIRECTION, mxConstants.DIRECTION_EAST);\n\t\t\t\t\tvar flipH = mxUtils.getValue(style, mxConstants.STYLE_FLIPH, 0) == 1;\n\t\t\t\t\tvar flipV = mxUtils.getValue(style, mxConstants.STYLE_FLIPV, 0) == 1;\n\t\t\t\t\t\n\t\t\t\t\tif (dir == mxConstants.DIRECTION_SOUTH || dir == mxConstants.DIRECTION_NORTH)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = size.width;\n\t\t\t\t\t\tsize.width = size.height;\n\t\t\t\t\t\tsize.height = tmp;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((dir == mxConstants.DIRECTION_EAST && !flipV) || (dir == mxConstants.DIRECTION_NORTH && !flipH) ||\n\t\t\t\t\t\t(dir == mxConstants.DIRECTION_WEST && flipV) || (dir == mxConstants.DIRECTION_SOUTH && flipH))\n\t\t\t\t\t{\n\t\t\t\t\t\tx = size.width;\n\t\t\t\t\t\ty = size.height;\n\t\t\t\t\t}\n\n\t\t\t\t\tw -= size.width;\n\t\t\t\t\th -= size.height;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn new mxRectangle(x, y, w, h);\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getMaximumGraphBounds\n * \n * Returns the bounds inside which the diagram should be kept as an\n * <mxRectangle>.\n */\nmxGraph.prototype.getMaximumGraphBounds = function()\n{\n\treturn this.maximumGraphBounds;\n};\n\n/**\n * Function: constrainChild\n * \n * Keeps the given cell inside the bounds returned by\n * <getCellContainmentArea> for its parent, according to the rules defined by\n * <getOverlap> and <isConstrainChild>. This modifies the cell's geometry\n * in-place and does not clone it.\n * \n * Parameters:\n * \n * cells - <mxCell> which should be constrained.\n * sizeFirst - Specifies if the size should be changed first. Default is true.\n */\nmxGraph.prototype.constrainChild = function(cell, sizeFirst)\n{\n\tsizeFirst = (sizeFirst != null) ? sizeFirst : true;\n\t\n\tif (cell != null)\n\t{\n\t\tvar geo = this.getCellGeometry(cell);\n\t\t\n\t\tif (geo != null && (this.isConstrainRelativeChildren() || !geo.relative))\n\t\t{\n\t\t\tvar parent = this.model.getParent(cell);\n\t\t\tvar pgeo = this.getCellGeometry(parent);\n\t\t\tvar max = this.getMaximumGraphBounds();\n\t\t\t\n\t\t\t// Finds parent offset\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar off = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\n\t\t\t\tif (off != null)\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\n\t\t\t\t\tmax.x -= off.x;\n\t\t\t\t\tmax.y -= off.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (this.isConstrainChild(cell))\n\t\t\t{\n\t\t\t\tvar tmp = this.getCellContainmentArea(cell);\n\t\t\t\t\n\t\t\t\tif (tmp != null)\n\t\t\t\t{\n\t\t\t\t\tvar overlap = this.getOverlap(cell);\n\t\n\t\t\t\t\tif (overlap > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\t\n\t\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the intersection between max and tmp\n\t\t\t\t\tif (max == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (max != null)\n\t\t\t{\n\t\t\t\tvar cells = [cell];\n\t\t\t\t\n\t\t\t\tif (!this.isCellCollapsed(cell))\n\t\t\t\t{\n\t\t\t\t\tvar desc = this.model.getDescendants(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < desc.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.isCellVisible(desc[i]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcells.push(desc[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar bbox = this.getBoundingBoxFromGeometry(cells, false);\n\t\t\t\t\n\t\t\t\tif (bbox != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative horizontal movement\n\t\t\t\t\tvar dx = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.width > max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx = geo.width - max.width;\n\t\t\t\t\t\tgeo.width -= dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x + bbox.width > max.x + max.width)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x + bbox.width - max.x - max.width - dx;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Cumulative vertical movement\n\t\t\t\t\tvar dy = 0;\n\t\t\t\t\t\n\t\t\t\t\tif (geo.height > max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy = geo.height - max.height;\n\t\t\t\t\t\tgeo.height -= dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y + bbox.height > max.y + max.height)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y + bbox.height - max.y - max.height - dy;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.x < max.x)\n\t\t\t\t\t{\n\t\t\t\t\t\tdx -= bbox.x - max.x;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox.y < max.y)\n\t\t\t\t\t{\n\t\t\t\t\t\tdy -= bbox.y - max.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (dx != 0 || dy != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Relative geometries are moved via absolute offset\n\t\t\t\t\t\t\tif (geo.offset == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo.offset = new mxPoint();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tgeo.offset.x += dx;\n\t\t\t\t\t\t\tgeo.offset.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo.x += dx;\n\t\t\t\t\t\t\tgeo.y += dy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.model.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdges\n * \n * Resets the control points of the edges that are connected to the given\n * cells if not both ends of the edge are in the given cells array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> for which the connected edges should be\n * reset.\n */\nmxGraph.prototype.resetEdges = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\t// Prepares faster cells lookup\n\t\tvar dict = new mxDictionary();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tdict.put(cells[i], true);\n\t\t}\n\t\t\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tvar edges = this.model.getEdges(cells[i]);\n\t\t\t\t\n\t\t\t\tif (edges != null)\n\t\t\t\t{\n\t\t\t\t\tfor (var j = 0; j < edges.length; j++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(edges[j]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[j], true);\n\t\t\t\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[j], false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if one of the terminals is not in the given array\n\t\t\t\t\t\tif (!dict.get(source) || !dict.get(target))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetEdge(edges[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.resetEdges(this.model.getChildren(cells[i]));\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resetEdge\n * \n * Resets the control points of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose points should be reset.\n */\nmxGraph.prototype.resetEdge = function(edge)\n{\n\tvar geo = this.model.getGeometry(edge);\n\t\n\t// Resets the control points\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tgeo = geo.clone();\n\t\tgeo.points = [];\n\t\tthis.model.setGeometry(edge, geo);\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Group: Cell connecting and connection constraints\n */\n\n/**\n * Function: getOutlineConstraint\n * \n * Returns the constraint used to connect to the outline of the given state.\n */\nmxGraph.prototype.getOutlineConstraint = function(point, terminalState, me)\n{\n\tif (terminalState.shape != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(terminalState);\n\t\tvar direction = terminalState.style[mxConstants.STYLE_DIRECTION];\n\t\t\n\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t{\n\t\t\tbounds.x += bounds.width / 2 - bounds.height / 2;\n\t\t\tbounds.y += bounds.height / 2 - bounds.width / 2;\n\t\t\tvar tmp = bounds.width;\n\t\t\tbounds.width = bounds.height;\n\t\t\tbounds.height = tmp;\n\t\t}\n\t\n\t\tvar alpha = mxUtils.toRadians(terminalState.shape.getShapeRotation());\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(-alpha);\n\t\t\tvar sin = Math.sin(-alpha);\n\t\n\t\t\tvar ct = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\t\tpoint = mxUtils.getRotatedPoint(point, cos, sin, ct);\n\t\t}\n\n\t\tvar sx = 1;\n\t\tvar sy = 1;\n\t\tvar dx = 0;\n\t\tvar dy = 0;\n\t\t\n\t\t// LATER: Add flipping support for image shapes\n\t\tif (this.getModel().isVertex(terminalState.cell))\n\t\t{\n\t\t\tvar flipH = terminalState.style[mxConstants.STYLE_FLIPH];\n\t\t\tvar flipV = terminalState.style[mxConstants.STYLE_FLIPV];\n\t\t\t\n\t\t\t// Legacy support for stencilFlipH/V\n\t\t\tif (terminalState.shape != null && terminalState.shape.stencil != null)\n\t\t\t{\n\t\t\t\tflipH = mxUtils.getValue(terminalState.style, 'stencilFlipH', 0) == 1 || flipH;\n\t\t\t\tflipV = mxUtils.getValue(terminalState.style, 'stencilFlipV', 0) == 1 || flipV;\n\t\t\t}\n\t\t\t\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH || direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tvar tmp = flipH;\n\t\t\t\tflipH = flipV;\n\t\t\t\tflipV = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipH)\n\t\t\t{\n\t\t\t\tsx = -1;\n\t\t\t\tdx = -bounds.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (flipV)\n\t\t\t{\n\t\t\t\tsy = -1;\n\t\t\t\tdy = -bounds.height ;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpoint = new mxPoint((point.x - bounds.x) * sx - dx + bounds.x, (point.y - bounds.y) * sy - dy + bounds.y);\n\t\t\n\t\tvar x = (bounds.width == 0) ? 0 : Math.round((point.x - bounds.x) * 1000 / bounds.width) / 1000;\n\t\tvar y = (bounds.height == 0) ? 0 : Math.round((point.y - bounds.y) * 1000 / bounds.height) / 1000;\n\t\t\n\t\treturn new mxConnectionConstraint(new mxPoint(x, y), false);\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getAllConnectionConstraints\n * \n * Returns an array of all <mxConnectionConstraints> for the given terminal. If\n * the shape of the given terminal is a <mxStencilShape> then the constraints\n * of the corresponding <mxStencil> are returned.\n * \n * Parameters:\n * \n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean that specifies if the terminal is the source or target.\n */\nmxGraph.prototype.getAllConnectionConstraints = function(terminal, source)\n{\n\tif (terminal != null && terminal.shape != null && terminal.shape.stencil != null)\n\t{\n\t\treturn terminal.shape.stencil.constraints;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: getConnectionConstraint\n * \n * Returns an <mxConnectionConstraint> that describes the given connection\n * point. This result can then be passed to <getConnectionPoint>.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n * terminal - <mxCellState> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n */\nmxGraph.prototype.getConnectionConstraint = function(edge, terminal, source)\n{\n\tvar point = null;\n\tvar x = edge.style[(source) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\n\tif (x != null)\n\t{\n\t\tvar y = edge.style[(source) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t\n\t\tif (y != null)\n\t\t{\n\t\t\tpoint = new mxPoint(parseFloat(x), parseFloat(y));\n\t\t}\n\t}\n\t\n\tvar perimeter = false;\n\t\n\tif (point != null)\n\t{\n\t\tperimeter = mxUtils.getValue(edge.style, (source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, true);\n\t}\n\t\n\treturn new mxConnectionConstraint(point, perimeter);\n};\n\n/**\n * Function: setConnectionConstraint\n * \n * Sets the <mxConnectionConstraint> that describes the given connection point.\n * If no constraint is given then nothing is changed. To remove an existing\n * constraint from the given edge, use an empty constraint instead.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * terminal - <mxCell> that represents the terminal.\n * source - Boolean indicating if the terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.setConnectionConstraint = function(edge, terminal, source, constraint)\n{\n\tif (constraint != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\t\n\t\ttry\n\t\t{\n\t\t\tif (constraint == null || constraint.point == null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, null, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t}\n\t\t\telse if (constraint.point != null)\n\t\t\t{\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_X :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_X, constraint.point.x, [edge]);\n\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_Y :\n\t\t\t\t\tmxConstants.STYLE_ENTRY_Y, constraint.point.y, [edge]);\n\t\t\t\t\n\t\t\t\t// Only writes 0 since 1 is default\n\t\t\t\tif (!constraint.perimeter)\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, '0', [edge]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.setCellStyles((source) ? mxConstants.STYLE_EXIT_PERIMETER :\n\t\t\t\t\t\tmxConstants.STYLE_ENTRY_PERIMETER, null, [edge]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: getConnectionPoint\n *\n * Returns the nearest point in the list of absolute points or the center\n * of the opposite terminal.\n * \n * Parameters:\n * \n * vertex - <mxCellState> that represents the vertex.\n * constraint - <mxConnectionConstraint> that represents the connection point\n * constraint as returned by <getConnectionConstraint>.\n */\nmxGraph.prototype.getConnectionPoint = function(vertex, constraint)\n{\n\tvar point = null;\n\t\n\tif (vertex != null && constraint.point != null)\n\t{\n\t\tvar bounds = this.view.getPerimeterBounds(vertex);\n        var cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\t\tvar direction = vertex.style[mxConstants.STYLE_DIRECTION];\n\t\tvar r1 = 0;\n\t\t\n\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\tif (direction != null && mxUtils.getValue(vertex.style,\n\t\t\tmxConstants.STYLE_ANCHOR_POINT_DIRECTION, 1) == 1)\n\t\t{\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH)\n\t\t\t{\n\t\t\t\tr1 += 270;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_WEST)\n\t\t\t{\n\t\t\t\tr1 += 180;\n\t\t\t}\n\t\t\telse if (direction == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tr1 += 90;\n\t\t\t}\n\n\t\t\t// Bounds need to be rotated by 90 degrees for further computation\n\t\t\tif (direction == mxConstants.DIRECTION_NORTH ||\n\t\t\t\tdirection == mxConstants.DIRECTION_SOUTH)\n\t\t\t{\n\t\t\t\tbounds.rotate90();\n\t\t\t}\n\t\t}\n\n\t\tpoint = new mxPoint(bounds.x + constraint.point.x * bounds.width,\n\t\t\t\tbounds.y + constraint.point.y * bounds.height);\n\t\t\n\t\t// Rotation for direction before projection on perimeter\n\t\tvar r2 = vertex.style[mxConstants.STYLE_ROTATION] || 0;\n\t\t\n\t\tif (constraint.perimeter)\n\t\t{\n\t\t\tif (r1 != 0)\n\t\t\t{\n\t\t\t\t// Only 90 degrees steps possible here so no trig needed\n\t\t\t\tvar cos = 0;\n\t\t\t\tvar sin = 0;\n\t\t\t\t\n\t\t\t\tif (r1 == 90)\n\t\t\t\t{\n\t\t\t\t\tsin = 1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 180)\n\t\t\t\t{\n\t\t\t\t\tcos = -1;\n\t\t\t\t}\n\t\t\t\telse if (r1 == 270)\n\t\t\t\t{\n\t\t\t\t\tsin = -1;\n\t\t\t\t}\n\t\t\t\t\n\t\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t\t}\n\t\n\t\t\tpoint = this.view.getPerimeterPoint(vertex, point, false);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr2 += r1;\n\t\t\t\n\t\t\tif (this.getModel().isVertex(vertex.cell))\n\t\t\t{\n\t\t\t\tvar flipH = vertex.style[mxConstants.STYLE_FLIPH] == 1;\n\t\t\t\tvar flipV = vertex.style[mxConstants.STYLE_FLIPV] == 1;\n\t\t\t\t\n\t\t\t\t// Legacy support for stencilFlipH/V\n\t\t\t\tif (vertex.shape != null && vertex.shape.stencil != null)\n\t\t\t\t{\n\t\t\t\t\tflipH = (mxUtils.getValue(vertex.style, 'stencilFlipH', 0) == 1) || flipH;\n\t\t\t\t\tflipV = (mxUtils.getValue(vertex.style, 'stencilFlipV', 0) == 1) || flipV;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipH)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = 2 * bounds.getCenterX() - point.x;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (flipV)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = 2 * bounds.getCenterY() - point.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Generic rotation after projection on perimeter\n\t\tif (r2 != 0 && point != null)\n\t\t{\n\t        var rad = mxUtils.toRadians(r2);\n\t        var cos = Math.cos(rad);\n\t        var sin = Math.sin(rad);\n\t        \n\t        point = mxUtils.getRotatedPoint(point, cos, sin, cx);\n\t\t}\n\t}\n\t\n\tif (point != null)\n\t{\n\t\tpoint.x = Math.round(point.x);\n\t\tpoint.y = Math.round(point.y);\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: connectCell\n * \n * Connects the specified end of the given edge to the given terminal\n * using <cellConnected> and fires <mxEvent.CONNECT_CELL> while the\n * transaction is in progress. Returns the updated edge.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - Optional <mxConnectionConstraint> to be used for this\n * connection.\n */\nmxGraph.prototype.connectCell = function(edge, terminal, source, constraint)\n{\n\tthis.model.beginUpdate();\n\ttry\n\t{\n\t\tvar previous = this.model.getTerminal(edge, source);\n\t\tthis.cellConnected(edge, terminal, source, constraint);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT_CELL,\n\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t'previous', previous));\n\t}\n\tfinally\n\t{\n\t\tthis.model.endUpdate();\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: cellConnected\n * \n * Sets the new terminal for the given edge and resets the edge points if\n * <resetEdgesOnConnect> is true. This method fires\n * <mxEvent.CELL_CONNECTED> while the transaction is in progress.\n * \n * Parameters:\n * \n * edge - <mxCell> whose terminal should be updated.\n * terminal - <mxCell> that represents the new terminal to be used.\n * source - Boolean indicating if the new terminal is the source or target.\n * constraint - <mxConnectionConstraint> to be used for this connection.\n */\nmxGraph.prototype.cellConnected = function(edge, terminal, source, constraint)\n{\n\tif (edge != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar previous = this.model.getTerminal(edge, source);\n\n\t\t\t// Updates the constraint\n\t\t\tthis.setConnectionConstraint(edge, terminal, source, constraint);\n\t\t\t\n\t\t\t// Checks if the new terminal is a port, uses the ID of the port in the\n\t\t\t// style and the parent of the port as the actual terminal of the edge.\n\t\t\tif (this.isPortsEnabled())\n\t\t\t{\n\t\t\t\tvar id = null;\n\t\n\t\t\t\tif (this.isPort(terminal))\n\t\t\t\t{\n\t\t\t\t\tid = terminal.getId();\n\t\t\t\t\tterminal = this.getTerminalForPort(terminal, source);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Sets or resets all previous information for connecting to a child port\n\t\t\t\tvar key = (source) ? mxConstants.STYLE_SOURCE_PORT :\n\t\t\t\t\tmxConstants.STYLE_TARGET_PORT;\n\t\t\t\tthis.setCellStyles(key, id, [edge]);\n\t\t\t}\n\t\t\t\n\t\t\tthis.model.setTerminal(edge, terminal, source);\n\t\t\t\n\t\t\tif (this.resetEdgesOnConnect)\n\t\t\t{\n\t\t\t\tthis.resetEdge(edge);\n\t\t\t}\n\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CELL_CONNECTED,\n\t\t\t\t'edge', edge, 'terminal', terminal, 'source', source,\n\t\t\t\t'previous', previous));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: disconnectGraph\n * \n * Disconnects the given edges from the terminals which are not in the\n * given array.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be disconnected.\n */\nmxGraph.prototype.disconnectGraph = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tthis.model.beginUpdate();\n\t\ttry\n\t\t{\t\t\t\t\t\t\t\n\t\t\tvar scale = this.view.scale;\n\t\t\tvar tr = this.view.translate;\n\t\t\t\n\t\t\t// Fast lookup for finding cells in array\n\t\t\tvar dict = new mxDictionary();\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tdict.put(cells[i], true);\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = this.model.getGeometry(cells[i]);\n\t\t\t\t\t\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar state = this.view.getState(cells[i]);\n\t\t\t\t\t\tvar pstate = this.view.getState(\n\t\t\t\t\t\t\tthis.model.getParent(cells[i]));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (state != null &&\n\t\t\t\t\t\t\tpstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar dx = -pstate.origin.x;\n\t\t\t\t\t\t\tvar dy = -pstate.origin.y;\n\t\t\t\t\t\t\tvar pts = state.absolutePoints;\n\n\t\t\t\t\t\t\tvar src = this.model.getTerminal(cells[i], true);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (src != null && this.isCellDisconnectable(cells[i], src, true))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (src != null && !dict.get(src))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsrc = this.model.getParent(src);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (src == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[0].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[0].y / scale - tr.y + dy), true);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar trg = this.model.getTerminal(cells[i], false);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (trg != null && this.isCellDisconnectable(cells[i], trg, false))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twhile (trg != null && !dict.get(trg))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttrg = this.model.getParent(trg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (trg == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar n = pts.length - 1;\n\t\t\t\t\t\t\t\t\tgeo.setTerminalPoint(\n\t\t\t\t\t\t\t\t\t\tnew mxPoint(pts[n].x / scale - tr.x + dx,\n\t\t\t\t\t\t\t\t\t\t\tpts[n].y / scale - tr.y + dy), false);\n\t\t\t\t\t\t\t\t\tthis.model.setTerminal(cells[i], null, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.model.setGeometry(cells[i], geo);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.model.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Group: Drilldown\n */\n\n/**\n * Function: getCurrentRoot\n * \n * Returns the current root of the displayed cell hierarchy. This is a\n * shortcut to <mxGraphView.currentRoot> in <view>.\n */\nmxGraph.prototype.getCurrentRoot = function()\n{\n\treturn this.view.currentRoot;\n};\n \n/**\n * Function: getTranslateForRoot\n * \n * Returns the translation to be used if the given cell is the root cell as\n * an <mxPoint>. This implementation returns null.\n * \n * Example:\n * \n * To keep the children at their absolute position while stepping into groups,\n * this function can be overridden as follows.\n * \n * (code)\n * var offset = new mxPoint(0, 0);\n * \n * while (cell != null)\n * {\n *   var geo = this.model.getGeometry(cell);\n * \n *   if (geo != null)\n *   {\n *     offset.x -= geo.x;\n *     offset.y -= geo.y;\n *   }\n * \n *   cell = this.model.getParent(cell);\n * }\n * \n * return offset;\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the root.\n */\nmxGraph.prototype.getTranslateForRoot = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: isPort\n * \n * Returns true if the given cell is a \"port\", that is, when connecting to\n * it, the cell returned by getTerminalForPort should be used as the\n * terminal and the port should be referenced by the ID in either the\n * mxConstants.STYLE_SOURCE_PORT or the or the\n * mxConstants.STYLE_TARGET_PORT. Note that a port should not be movable.\n * This implementation always returns false.\n * \n * A typical implementation is the following:\n * \n * (code)\n * graph.isPort = function(cell)\n * {\n *   var geo = this.getCellGeometry(cell);\n *   \n *   return (geo != null) ? geo.relative : false;\n * };\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n */\nmxGraph.prototype.isPort = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getTerminalForPort\n * \n * Returns the terminal to be used for a given port. This implementation\n * always returns the parent cell.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the port.\n * source - If the cell is the source or target port.\n */\nmxGraph.prototype.getTerminalForPort = function(cell, source)\n{\n\treturn this.model.getParent(cell);\n};\n\n/**\n * Function: getChildOffsetForCell\n * \n * Returns the offset to be used for the cells inside the given cell. The\n * root and layer cells may be identified using <mxGraphModel.isRoot> and\n * <mxGraphModel.isLayer>. For all other current roots, the\n * <mxGraphView.currentRoot> field points to the respective cell, so that\n * the following holds: cell == this.view.currentRoot. This implementation\n * returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose offset should be returned.\n */\nmxGraph.prototype.getChildOffsetForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: enterGroup\n * \n * Uses the given cell as the root of the displayed cell hierarchy. If no\n * cell is specified then the selection cell is used. The cell is only used\n * if <isValidRoot> returns true.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> to be used as the new root. Default is the\n * selection cell.\n */\nmxGraph.prototype.enterGroup = function(cell)\n{\n\tcell = cell || this.getSelectionCell();\n\t\n\tif (cell != null && this.isValidRoot(cell))\n\t{\n\t\tthis.view.setCurrentRoot(cell);\n\t\tthis.clearSelection();\n\t}\n};\n\n/**\n * Function: exitGroup\n * \n * Changes the current root to the next valid root in the displayed cell\n * hierarchy.\n */\nmxGraph.prototype.exitGroup = function()\n{\n\tvar root = this.model.getRoot();\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tvar next = this.model.getParent(current);\n\t\t\n\t\t// Finds the next valid root in the hierarchy\n\t\twhile (next != root && !this.isValidRoot(next) &&\n\t\t\t\tthis.model.getParent(next) != root)\n\t\t{\n\t\t\tnext = this.model.getParent(next);\n\t\t}\n\t\t\n\t\t// Clears the current root if the new root is\n\t\t// the model's root or one of the layers.\n\t\tif (next == root || this.model.getParent(next) == root)\n\t\t{\n\t\t\tthis.view.setCurrentRoot(null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.view.setCurrentRoot(next);\n\t\t}\n\t\t\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\t// Selects the previous root in the graph\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: home\n * \n * Uses the root of the model as the root of the displayed cell hierarchy\n * and selects the previous root.\n */\nmxGraph.prototype.home = function()\n{\n\tvar current = this.getCurrentRoot();\n\t\n\tif (current != null)\n\t{\n\t\tthis.view.setCurrentRoot(null);\n\t\tvar state = this.view.getState(current);\n\t\t\n\t\tif (state != null)\n\t\t{\n\t\t\tthis.setSelectionCell(current);\n\t\t}\n\t}\n};\n\n/**\n * Function: isValidRoot\n * \n * Returns true if the given cell is a valid root for the cell display\n * hierarchy. This implementation returns true for all non-null values.\n * \n * Parameters:\n * \n * cell - <mxCell> which should be checked as a possible root.\n */\nmxGraph.prototype.isValidRoot = function(cell)\n{\n\treturn (cell != null);\n};\n\n/**\n * Group: Graph display\n */\n \n/**\n * Function: getGraphBounds\n * \n * Returns the bounds of the visible graph. Shortcut to\n * <mxGraphView.getGraphBounds>. See also: <getBoundingBoxFromGeometry>.\n */\n mxGraph.prototype.getGraphBounds = function()\n {\n \treturn this.view.getGraphBounds();\n };\n\n/**\n * Function: getCellBounds\n * \n * Returns the scaled, translated bounds for the given cell. See\n * <mxGraphView.getBounds> for arrays.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bounds should be returned.\n * includeEdge - Optional boolean that specifies if the bounds of\n * the connected edges should be included. Default is false.\n * includeDescendants - Optional boolean that specifies if the bounds\n * of all descendants should be included. Default is false.\n */\nmxGraph.prototype.getCellBounds = function(cell, includeEdges, includeDescendants)\n{\n\tvar cells = [cell];\n\t\n\t// Includes all connected edges\n\tif (includeEdges)\n\t{\n\t\tcells = cells.concat(this.model.getEdges(cell));\n\t}\n\t\n\tvar result = this.view.getBounds(cells);\n\t\n\t// Recursively includes the bounds of the children\n\tif (includeDescendants)\n\t{\n\t\tvar childCount = this.model.getChildCount(cell);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar tmp = this.getCellBounds(this.model.getChildAt(cell, i),\n\t\t\t\tincludeEdges, true);\n\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tresult.add(tmp);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult = tmp;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getBoundingBoxFromGeometry\n * \n * Returns the bounding box for the geometries of the vertices in the\n * given array of cells. This can be used to find the graph bounds during\n * a layout operation (ie. before the last endUpdate) as follows:\n * \n * (code)\n * var cells = graph.getChildCells(graph.getDefaultParent(), true, true);\n * var bounds = graph.getBoundingBoxFromGeometry(cells, true);\n * (end)\n * \n * This can then be used to move cells to the origin:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.moveCells(cells, -Math.min(bounds.x, 0), -Math.min(bounds.y, 0))\n * }\n * (end)\n * \n * Or to translate the graph view:\n * \n * (code)\n * if (bounds.x < 0 || bounds.y < 0)\n * {\n *   graph.view.setTranslate(-Math.min(bounds.x, 0), -Math.min(bounds.y, 0));\n * }\n * (end)\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose bounds should be returned.\n * includeEdges - Specifies if edge bounds should be included by computing\n * the bounding box for all points in geometry. Default is false.\n */\nmxGraph.prototype.getBoundingBoxFromGeometry = function(cells, includeEdges)\n{\n\tincludeEdges = (includeEdges != null) ? includeEdges : false;\n\tvar result = null;\n\t\n\tif (cells != null)\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (includeEdges || this.model.isVertex(cells[i]))\n\t\t\t{\n\t\t\t\t// Computes the bounding box for the points in the geometry\n\t\t\t\tvar geo = this.getCellGeometry(cells[i]);\n\t\t\t\t\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = null;\n\t\t\t\t\t\n\t\t\t\t\tif (this.model.isEdge(cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar addPoint = function(pt)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (pt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (tmp == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp = new mxRectangle(pt.x, pt.y, 0, 0);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttmp.add(new mxRectangle(pt.x, pt.y, 0, 0));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], true) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (this.model.getTerminal(cells[i], false) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taddPoint(geo.getTerminalPoint(false));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tvar pts = geo.points;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pts != null && pts.length > 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = new mxRectangle(pts[0].x, pts[0].y, 0, 0);\n\n\t\t\t\t\t\t\tfor (var j = 1; j < pts.length; j++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\taddPoint(pts[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbbox = tmp;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tvar parent = this.model.getParent(cells[i]);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (geo.relative)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && parent != this.view.currentRoot)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox = new mxRectangle(geo.x * tmp.width, geo.y * tmp.height, geo.width, geo.height);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox = mxRectangle.fromRectangle(geo);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (this.model.isVertex(parent) && mxUtils.indexOf(cells, parent) >= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar tmp = this.getBoundingBoxFromGeometry([parent], false);\n\n\t\t\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tbbox.x += tmp.x;\n\t\t\t\t\t\t\t\t\tbbox.y += tmp.y;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bbox != null && geo.offset != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbbox.x += geo.offset.x;\n\t\t\t\t\t\t\tbbox.y += geo.offset.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (bbox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (result == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: refresh\n * \n * Clears all cell states or the states for the hierarchy starting at the\n * given cell and validates the graph. This fires a refresh event as the\n * last step.\n * \n * Parameters:\n * \n * cell - Optional <mxCell> for which the cell states should be cleared.\n */\nmxGraph.prototype.refresh = function(cell)\n{\n\tthis.view.clear(cell, cell == null);\n\tthis.view.validate();\n\tthis.sizeDidChange();\n\tthis.fireEvent(new mxEventObject(mxEvent.REFRESH));\n};\n\n/**\n * Function: snap\n * \n * Snaps the given numeric value to the grid if <gridEnabled> is true.\n * \n * Parameters:\n * \n * value - Numeric value to be snapped to the grid.\n */\nmxGraph.prototype.snap = function(value)\n{\n\tif (this.gridEnabled)\n\t{\n\t\tvalue = Math.round(value / this.gridSize ) * this.gridSize;\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: panGraph\n * \n * Shifts the graph display by the given amount. This is used to preview\n * panning operations, use <mxGraphView.setTranslate> to set a persistent\n * translation of the view. Fires <mxEvent.PAN>.\n * \n * Parameters:\n * \n * dx - Amount to shift the graph along the x-axis.\n * dy - Amount to shift the graph along the y-axis.\n */\nmxGraph.prototype.panGraph = function(dx, dy)\n{\n\tif (this.useScrollbarsForPanning && mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.container.scrollLeft = -dx;\n\t\tthis.container.scrollTop = -dy;\n\t}\n\telse\n\t{\n\t\tvar canvas = this.view.getCanvas();\n\t\t\n\t\tif (this.dialect == mxConstants.DIALECT_SVG)\n\t\t{\n\t\t\t// Puts everything inside the container in a DIV so that it\n\t\t\t// can be moved without changing the state of the container\n\t\t\tif (dx == 0 && dy == 0)\n\t\t\t{\n\t\t\t\t// Workaround for ignored removeAttribute on SVG element in IE9 standards\n\t\t\t\tif (mxClient.IS_IE)\n\t\t\t\t{\n\t\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcanvas.removeAttribute('transform');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 != null)\n\t\t\t\t{\n\t\t\t\t\tvar child = this.shiftPreview1.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview1.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview1.parentNode.removeChild(this.shiftPreview1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview1 = null;\n\t\t\t\t\t\n\t\t\t\t\tthis.container.appendChild(canvas.parentNode);\n\t\t\t\t\t\n\t\t\t\t\tchild = this.shiftPreview2.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\tthis.container.appendChild(child);\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.shiftPreview2.parentNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shiftPreview2.parentNode.removeChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcanvas.setAttribute('transform', 'translate(' + dx + ',' + dy + ')');\n\t\t\t\t\n\t\t\t\tif (this.shiftPreview1 == null)\n\t\t\t\t{\n\t\t\t\t\t// Needs two divs for stuff before and after the SVG element\n\t\t\t\t\tthis.shiftPreview1 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview1.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview1.style.overflow = 'visible';\n\t\t\t\t\t\n\t\t\t\t\tthis.shiftPreview2 = document.createElement('div');\n\t\t\t\t\tthis.shiftPreview2.style.position = 'absolute';\n\t\t\t\t\tthis.shiftPreview2.style.overflow = 'visible';\n\n\t\t\t\t\tvar current = this.shiftPreview1;\n\t\t\t\t\tvar child = this.container.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (child != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar next = child.nextSibling;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// SVG element is moved via transform attribute\n\t\t\t\t\t\tif (child != canvas.parentNode)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent.appendChild(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = this.shiftPreview2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tchild = next;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Inserts elements only if not empty\n\t\t\t\t\tif (this.shiftPreview1.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.insertBefore(this.shiftPreview1, canvas.parentNode);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.shiftPreview2.firstChild != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.container.appendChild(this.shiftPreview2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.shiftPreview1.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview1.style.top = dy + 'px';\n\t\t\t\tthis.shiftPreview2.style.left = dx + 'px';\n\t\t\t\tthis.shiftPreview2.style.top = dy + 'px';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcanvas.style.left = dx + 'px';\n\t\t\tcanvas.style.top = dy + 'px';\n\t\t}\n\t\t\n\t\tthis.panDx = dx;\n\t\tthis.panDy = dy;\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN));\n\t}\n};\n\n/**\n * Function: zoomIn\n * \n * Zooms into the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomIn = function()\n{\n\tthis.zoom(this.zoomFactor);\n};\n\n/**\n * Function: zoomOut\n * \n * Zooms out of the graph by <zoomFactor>.\n */\nmxGraph.prototype.zoomOut = function()\n{\n\tthis.zoom(1 / this.zoomFactor);\n};\n\n/**\n * Function: zoomActual\n * \n * Resets the zoom and panning in the view.\n */\nmxGraph.prototype.zoomActual = function()\n{\n\tif (this.view.scale == 1)\n\t{\n\t\tthis.view.setTranslate(0, 0);\n\t}\n\telse\n\t{\n\t\tthis.view.translate.x = 0;\n\t\tthis.view.translate.y = 0;\n\n\t\tthis.view.setScale(1);\n\t}\n};\n\n/**\n * Function: zoomTo\n * \n * Zooms the graph to the given scale with an optional boolean center\n * argument, which is passd to <zoom>.\n */\nmxGraph.prototype.zoomTo = function(scale, center)\n{\n\tthis.zoom(scale / this.view.scale, center);\n};\n\n/**\n * Function: center\n * \n * Centers the graph in the container.\n * \n * Parameters:\n * \n * horizontal - Optional boolean that specifies if the graph should be centered\n * horizontally. Default is true.\n * vertical - Optional boolean that specifies if the graph should be centered\n * vertically. Default is true.\n * cx - Optional float that specifies the horizontal center. Default is 0.5.\n * cy - Optional float that specifies the vertical center. Default is 0.5.\n */\nmxGraph.prototype.center = function(horizontal, vertical, cx, cy)\n{\n\thorizontal = (horizontal != null) ? horizontal : true;\n\tvertical = (vertical != null) ? vertical : true;\n\tcx = (cx != null) ? cx : 0.5;\n\tcy = (cy != null) ? cy : 0.5;\n\t\n\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\tvar cw = this.container.clientWidth;\n\tvar ch = this.container.clientHeight;\n\tvar bounds = this.getGraphBounds();\n\n\tvar t = this.view.translate;\n\tvar s = this.view.scale;\n\n\tvar dx = (horizontal) ? cw - bounds.width : 0;\n\tvar dy = (vertical) ? ch - bounds.height : 0;\n\t\n\tif (!hasScrollbars)\n\t{\n\t\tthis.view.setTranslate((horizontal) ? Math.floor(t.x - bounds.x * s + dx * cx / s) : t.x,\n\t\t\t(vertical) ? Math.floor(t.y - bounds.y * s + dy * cy / s) : t.y);\n\t}\n\telse\n\t{\n\t\tbounds.x -= t.x;\n\t\tbounds.y -= t.y;\n\t\n\t\tvar sw = this.container.scrollWidth;\n\t\tvar sh = this.container.scrollHeight;\n\t\t\n\t\tif (sw > cw)\n\t\t{\n\t\t\tdx = 0;\n\t\t}\n\t\t\n\t\tif (sh > ch)\n\t\t{\n\t\t\tdy = 0;\n\t\t}\n\n\t\tthis.view.setTranslate(Math.floor(dx / 2 - bounds.x), Math.floor(dy / 2 - bounds.y));\n\t\tthis.container.scrollLeft = (sw - cw) / 2;\n\t\tthis.container.scrollTop = (sh - ch) / 2;\n\t}\n};\n\n/**\n * Function: zoom\n * \n * Zooms the graph using the given factor. Center is an optional boolean\n * argument that keeps the graph scrolled to the center. If the center argument\n * is omitted, then <centerZoom> will be used as its value.\n */\nmxGraph.prototype.zoom = function(factor, center)\n{\n\tcenter = (center != null) ? center : this.centerZoom;\n\tvar scale = Math.round(this.view.scale * factor * 100) / 100;\n\tvar state = this.view.getState(this.getSelectionCell());\n\tfactor = scale / this.view.scale;\n\t\n\tif (this.keepSelectionVisibleOnZoom && state != null)\n\t{\n\t\tvar rect = new mxRectangle(state.x * factor, state.y * factor,\n\t\t\tstate.width * factor, state.height * factor);\n\t\t\n\t\t// Refreshes the display only once if a scroll is carried out\n\t\tthis.view.scale = scale;\n\t\t\n\t\tif (!this.scrollRectToVisible(rect))\n\t\t{\n\t\t\tthis.view.revalidate();\n\t\t\t\n\t\t\t// Forces an event to be fired but does not revalidate again\n\t\t\tthis.view.setScale(scale);\n\t\t}\n\t}\n\telse\n\t{\n\t\tvar hasScrollbars = mxUtils.hasScrollbars(this.container);\n\t\t\n\t\tif (center && !hasScrollbars)\n\t\t{\n\t\t\tvar dx = this.container.offsetWidth;\n\t\t\tvar dy = this.container.offsetHeight;\n\t\t\t\n\t\t\tif (factor > 1)\n\t\t\t{\n\t\t\t\tvar f = (factor - 1) / (scale * 2);\n\t\t\t\tdx *= -f;\n\t\t\t\tdy *= -f;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar f = (1 / factor - 1) / (this.view.scale * 2);\n\t\t\t\tdx *= f;\n\t\t\t\tdy *= f;\n\t\t\t}\n\n\t\t\tthis.view.scaleAndTranslate(scale,\n\t\t\t\tthis.view.translate.x + dx,\n\t\t\t\tthis.view.translate.y + dy);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Allows for changes of translate and scrollbars during setscale\n\t\t\tvar tx = this.view.translate.x;\n\t\t\tvar ty = this.view.translate.y;\n\t\t\tvar sl = this.container.scrollLeft;\n\t\t\tvar st = this.container.scrollTop;\n\t\t\t\n\t\t\tthis.view.setScale(scale);\n\t\t\t\n\t\t\tif (hasScrollbars)\n\t\t\t{\n\t\t\t\tvar dx = 0;\n\t\t\t\tvar dy = 0;\n\t\t\t\t\n\t\t\t\tif (center)\n\t\t\t\t{\n\t\t\t\t\tdx = this.container.offsetWidth * (factor - 1) / 2;\n\t\t\t\t\tdy = this.container.offsetHeight * (factor - 1) / 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.container.scrollLeft = (this.view.translate.x - tx) * this.view.scale + Math.round(sl * factor + dx);\n\t\t\t\tthis.container.scrollTop = (this.view.translate.y - ty) * this.view.scale + Math.round(st * factor + dy);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: zoomToRect\n * \n * Zooms the graph to the specified rectangle. If the rectangle does not have same aspect\n * ratio as the display container, it is increased in the smaller relative dimension only\n * until the aspect match. The original rectangle is centralised within this expanded one.\n * \n * Note that the input rectangular must be un-scaled and un-translated.\n * \n * Parameters:\n * \n * rect - The un-scaled and un-translated rectangluar region that should be just visible \n * after the operation\n */\nmxGraph.prototype.zoomToRect = function(rect)\n{\n\tvar scaleX = this.container.clientWidth / rect.width;\n\tvar scaleY = this.container.clientHeight / rect.height;\n\tvar aspectFactor = scaleX / scaleY;\n\n\t// Remove any overlap of the rect outside the client area\n\trect.x = Math.max(0, rect.x);\n\trect.y = Math.max(0, rect.y);\n\tvar rectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\tvar rectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\trect.width = rectRight - rect.x;\n\trect.height = rectBottom - rect.y;\n\n\t// The selection area has to be increased to the same aspect\n\t// ratio as the container, centred around the centre point of the \n\t// original rect passed in.\n\tif (aspectFactor < 1.0)\n\t{\n\t\t// Height needs increasing\n\t\tvar newHeight = rect.height / aspectFactor;\n\t\tvar deltaHeightBuffer = (newHeight - rect.height) / 2.0;\n\t\trect.height = newHeight;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar upperBuffer = Math.min(rect.y , deltaHeightBuffer);\n\t\trect.y = rect.y - upperBuffer;\n\t\t\n\t\t// Check if the bottom has extended too far\n\t\trectBottom = Math.min(this.container.scrollHeight, rect.y + rect.height);\n\t\trect.height = rectBottom - rect.y;\n\t}\n\telse\n\t{\n\t\t// Width needs increasing\n\t\tvar newWidth = rect.width * aspectFactor;\n\t\tvar deltaWidthBuffer = (newWidth - rect.width) / 2.0;\n\t\trect.width = newWidth;\n\t\t\n\t\t// Assign up to half the buffer to the upper part of the rect, not crossing 0\n\t\t// put the rest on the bottom\n\t\tvar leftBuffer = Math.min(rect.x , deltaWidthBuffer);\n\t\trect.x = rect.x - leftBuffer;\n\t\t\n\t\t// Check if the right hand side has extended too far\n\t\trectRight = Math.min(this.container.scrollWidth, rect.x + rect.width);\n\t\trect.width = rectRight - rect.x;\n\t}\n\n\tvar scale = this.container.clientWidth / rect.width;\n\tvar newScale = this.view.scale * scale;\n\n\tif (!mxUtils.hasScrollbars(this.container))\n\t{\n\t\tthis.view.scaleAndTranslate(newScale, (this.view.translate.x - rect.x / this.view.scale), (this.view.translate.y - rect.y / this.view.scale));\n\t}\n\telse\n\t{\n\t\tthis.view.setScale(newScale);\n\t\tthis.container.scrollLeft = Math.round(rect.x * scale);\n\t\tthis.container.scrollTop = Math.round(rect.y * scale);\n\t}\n};\n\n/**\n * Function: scrollCellToVisible\n * \n * Pans the graph so that it shows the given cell. Optionally the cell may\n * be centered in the container.\n * \n * To center a given graph if the <container> has no scrollbars, use the following code.\n * \n * [code]\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x - (bounds.width - container.clientWidth) / 2,\n * \t\t\t\t\t\t   -bounds.y - (bounds.height - container.clientHeight) / 2);\n * [/code]\n * \n * Parameters:\n * \n * cell - <mxCell> to be made visible.\n * center - Optional boolean flag. Default is false.\n */\nmxGraph.prototype.scrollCellToVisible = function(cell, center)\n{\n\tvar x = -this.view.translate.x;\n\tvar y = -this.view.translate.y;\n\n\tvar state = this.view.getState(cell);\n\n\tif (state != null)\n\t{\n\t\tvar bounds = new mxRectangle(x + state.x, y + state.y, state.width,\n\t\t\tstate.height);\n\n\t\tif (center && this.container != null)\n\t\t{\n\t\t\tvar w = this.container.clientWidth;\n\t\t\tvar h = this.container.clientHeight;\n\n\t\t\tbounds.x = bounds.getCenterX() - w / 2;\n\t\t\tbounds.width = w;\n\t\t\tbounds.y = bounds.getCenterY() - h / 2;\n\t\t\tbounds.height = h;\n\t\t}\n\t\t\n\t\tvar tr = new mxPoint(this.view.translate.x, this.view.translate.y);\n\n\t\tif (this.scrollRectToVisible(bounds))\n\t\t{\n\t\t\t// Triggers an update via the view's event source\n\t\t\tvar tr2 = new mxPoint(this.view.translate.x, this.view.translate.y);\n\t\t\tthis.view.translate.x = tr.x;\n\t\t\tthis.view.translate.y = tr.y;\n\t\t\tthis.view.setTranslate(tr2.x, tr2.y);\n\t\t}\n\t}\n};\n\n/**\n * Function: scrollRectToVisible\n * \n * Pans the graph so that it shows the given rectangle.\n * \n * Parameters:\n * \n * rect - <mxRectangle> to be made visible.\n */\nmxGraph.prototype.scrollRectToVisible = function(rect)\n{\n\tvar isChanged = false;\n\t\n\tif (rect != null)\n\t{\n\t\tvar w = this.container.offsetWidth;\n\t\tvar h = this.container.offsetHeight;\n\n        var widthLimit = Math.min(w, rect.width);\n        var heightLimit = Math.min(h, rect.height);\n\n\t\tif (mxUtils.hasScrollbars(this.container))\n\t\t{\n\t\t\tvar c = this.container;\n\t\t\trect.x += this.view.translate.x;\n\t\t\trect.y += this.view.translate.y;\n\t\t\tvar dx = c.scrollLeft - rect.x;\n\t\t\tvar ddx = Math.max(dx - c.scrollLeft, 0);\n\n\t\t\tif (dx > 0)\n\t\t\t{\n\t\t\t\tc.scrollLeft -= dx + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdx = rect.x + widthLimit - c.scrollLeft - c.clientWidth;\n\n\t\t\t\tif (dx > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollLeft += dx + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar dy = c.scrollTop - rect.y;\n\t\t\tvar ddy = Math.max(0, dy - c.scrollTop);\n\n\t\t\tif (dy > 0)\n\t\t\t{\n\t\t\t\tc.scrollTop -= dy + 2;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tdy = rect.y + heightLimit - c.scrollTop - c.clientHeight;\n\n\t\t\t\tif (dy > 0)\n\t\t\t\t{\n\t\t\t\t\tc.scrollTop += dy + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.useScrollbarsForPanning && (ddx != 0 || ddy != 0))\n\t\t\t{\n\t\t\t\tthis.view.setTranslate(ddx, ddy);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar x = -this.view.translate.x;\n\t\t\tvar y = -this.view.translate.y;\n\n\t\t\tvar s = this.view.scale;\n\n\t\t\tif (rect.x + widthLimit > x + w)\n\t\t\t{\n\t\t\t\tthis.view.translate.x -= (rect.x + widthLimit - w - x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y + heightLimit > y + h)\n\t\t\t{\n\t\t\t\tthis.view.translate.y -= (rect.y + heightLimit - h - y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.x < x)\n\t\t\t{\n\t\t\t\tthis.view.translate.x += (x - rect.x) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (rect.y  < y)\n\t\t\t{\n\t\t\t\tthis.view.translate.y += (y - rect.y) / s;\n\t\t\t\tisChanged = true;\n\t\t\t}\n\n\t\t\tif (isChanged)\n\t\t\t{\n\t\t\t\tthis.view.refresh();\n\t\t\t\t\n\t\t\t\t// Repaints selection marker (ticket 18)\n\t\t\t\tif (this.selectionCellsHandler != null)\n\t\t\t\t{\n\t\t\t\t\tthis.selectionCellsHandler.refresh();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn isChanged;\n};\n\n/**\n * Function: getCellGeometry\n * \n * Returns the <mxGeometry> for the given cell. This implementation uses\n * <mxGraphModel.getGeometry>. Subclasses can override this to implement\n * specific geometries for cells in only one graph, that is, it can return\n * geometries that depend on the current state of the view.\n * \n * Parameters:\n * \n * cell - <mxCell> whose geometry should be returned.\n */\nmxGraph.prototype.getCellGeometry = function(cell)\n{\n\treturn this.model.getGeometry(cell);\n};\n\n/**\n * Function: isCellVisible\n * \n * Returns true if the given cell is visible in this graph. This\n * implementation uses <mxGraphModel.isVisible>. Subclassers can override\n * this to implement specific visibility for cells in only one graph, that\n * is, without affecting the visible state of the cell.\n * \n * When using dynamic filter expressions for cell visibility, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose visible state should be returned.\n */\nmxGraph.prototype.isCellVisible = function(cell)\n{\n\treturn this.model.isVisible(cell);\n};\n\n/**\n * Function: isCellCollapsed\n * \n * Returns true if the given cell is collapsed in this graph. This\n * implementation uses <mxGraphModel.isCollapsed>. Subclassers can override\n * this to implement specific collapsed states for cells in only one graph,\n * that is, without affecting the collapsed state of the cell.\n * \n * When using dynamic filter expressions for the collapsed state, then the\n * graph should be revalidated after the filter expression has changed.\n * \n * Parameters:\n * \n * cell - <mxCell> whose collapsed state should be returned.\n */\nmxGraph.prototype.isCellCollapsed = function(cell)\n{\n\treturn this.model.isCollapsed(cell);\n};\n\n/**\n * Function: isCellConnectable\n * \n * Returns true if the given cell is connectable in this graph. This\n * implementation uses <mxGraphModel.isConnectable>. Subclassers can override\n * this to implement specific connectable states for cells in only one graph,\n * that is, without affecting the connectable state of the cell in the model.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connectable state should be returned.\n */\nmxGraph.prototype.isCellConnectable = function(cell)\n{\n\treturn this.model.isConnectable(cell);\n};\n\n/**\n * Function: isOrthogonal\n * \n * Returns true if perimeter points should be computed such that the\n * resulting edge has only horizontal or vertical segments.\n * \n * Parameters:\n * \n * edge - <mxCellState> that represents the edge.\n */\nmxGraph.prototype.isOrthogonal = function(edge)\n{\n\tvar orthogonal = edge.style[mxConstants.STYLE_ORTHOGONAL];\n\t\n\tif (orthogonal != null)\n\t{\n\t\treturn orthogonal;\n\t}\n\t\n\tvar tmp = this.view.getEdgeStyle(edge);\n\t\n\treturn tmp == mxEdgeStyle.SegmentConnector ||\n\t\ttmp == mxEdgeStyle.ElbowConnector ||\n\t\ttmp == mxEdgeStyle.SideToSide ||\n\t\ttmp == mxEdgeStyle.TopToBottom ||\n\t\ttmp == mxEdgeStyle.EntityRelation ||\n\t\ttmp == mxEdgeStyle.OrthConnector;\n};\n\n/**\n * Function: isLoop\n * \n * Returns true if the given cell state is a loop.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents a potential loop.\n */\nmxGraph.prototype.isLoop = function(state)\n{\n\tvar src = state.getVisibleTerminalState(true);\n\tvar trg = state.getVisibleTerminalState(false);\n\t\n\treturn (src != null && src == trg);\n};\n\n/**\n * Function: isCloneEvent\n * \n * Returns true if the given event is a clone event. This implementation\n * returns true if control is pressed.\n */\nmxGraph.prototype.isCloneEvent = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isTransparentClickEvent\n * \n * Hook for implementing click-through behaviour on selected cells. If this\n * returns true the cell behind the selected cell will be selected. This\n * implementation returns false;\n */\nmxGraph.prototype.isTransparentClickEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Function: isToggleEvent\n * \n * Returns true if the given event is a toggle event. This implementation\n * returns true if the meta key (Cmd) is pressed on Macs or if control is\n * pressed on any other platform.\n */\nmxGraph.prototype.isToggleEvent = function(evt)\n{\n\treturn (mxClient.IS_MAC) ? mxEvent.isMetaDown(evt) : mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: isGridEnabledEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isGridEnabledEvent = function(evt)\n{\n\treturn evt != null && !mxEvent.isAltDown(evt);\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the given mouse event should be aligned to the grid.\n */\nmxGraph.prototype.isConstrainedEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isIgnoreTerminalEvent\n * \n * Returns true if the given mouse event should not allow any connections to be\n * made. This implementation returns false.\n */\nmxGraph.prototype.isIgnoreTerminalEvent = function(evt)\n{\n\treturn false;\n};\n\n/**\n * Group: Validation\n */\n\n/**\n * Function: validationAlert\n * \n * Displays the given validation error in a dialog. This implementation uses\n * mxUtils.alert.\n */\nmxGraph.prototype.validationAlert = function(message)\n{\n\tmxUtils.alert(message);\n};\n\n/**\n * Function: isEdgeValid\n * \n * Checks if the return value of <getEdgeValidationError> for the given\n * arguments is null.\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.isEdgeValid = function(edge, source, target)\n{\n\treturn this.getEdgeValidationError(edge, source, target) == null;\n};\n\n/**\n * Function: getEdgeValidationError\n * \n * Returns the validation error message to be displayed when inserting or\n * changing an edges' connectivity. A return value of null means the edge\n * is valid, a return value of '' means it's not valid, but do not display\n * an error message. Any other (non-empty) string returned from this method\n * is displayed as an error message when trying to connect an edge to a\n * source and target. This implementation uses the <multiplicities>, and\n * checks <multigraph>, <allowDanglingEdges> and <allowLoops> to generate\n * validation errors.\n * \n * For extending this method with specific checks for source/target cells,\n * the method can be extended as follows. Returning an empty string means\n * the edge is invalid with no error message, a non-null string specifies\n * the error message, and null means the edge is valid.\n * \n * (code)\n * graph.getEdgeValidationError = function(edge, source, target)\n * {\n *   if (source != null && target != null &&\n *     this.model.getValue(source) != null &&\n *     this.model.getValue(target) != null)\n *   {\n *     if (target is not valid for source)\n *     {\n *       return 'Invalid Target';\n *     }\n *   }\n *   \n *   // \"Supercall\"\n *   return mxGraph.prototype.getEdgeValidationError.apply(this, arguments);\n * }\n * (end)\n *  \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.getEdgeValidationError = function(edge, source, target)\n{\n\tif (edge != null && !this.isAllowDanglingEdges() && (source == null || target == null))\n\t{\n\t\treturn '';\n\t}\n\t\n\tif (edge != null && this.model.getTerminal(edge, true) == null &&\n\t\tthis.model.getTerminal(edge, false) == null)\t\n\t{\n\t\treturn null;\n\t}\n\t\n\t// Checks if we're dealing with a loop\n\tif (!this.allowLoops && source == target && source != null)\n\t{\n\t\treturn '';\n\t}\n\t\n\t// Checks if the connection is generally allowed\n\tif (!this.isValidConnection(source, target))\n\t{\n\t\treturn '';\n\t}\n\n\tif (source != null && target != null)\n\t{\n\t\tvar error = '';\n\n\t\t// Checks if the cells are already connected\n\t\t// and adds an error message if required\t\t\t\n\t\tif (!this.multigraph)\n\t\t{\n\t\t\tvar tmp = this.model.getEdgesBetween(source, target, true);\n\t\t\t\n\t\t\t// Checks if the source and target are not connected by another edge\n\t\t\tif (tmp.length > 1 || (tmp.length == 1 && tmp[0] != edge))\n\t\t\t{\n\t\t\t\terror += (mxResources.get(this.alreadyConnectedResource) ||\n\t\t\t\t\tthis.alreadyConnectedResource)+'\\n';\n\t\t\t}\n\t\t}\n\n\t\t// Gets the number of outgoing edges from the source\n\t\t// and the number of incoming edges from the target\n\t\t// without counting the edge being currently changed.\n\t\tvar sourceOut = this.model.getDirectedEdgeCount(source, true, edge);\n\t\tvar targetIn = this.model.getDirectedEdgeCount(target, false, edge);\n\n\t\t// Checks the change against each multiplicity rule\n\t\tif (this.multiplicities != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t\t{\n\t\t\t\tvar err = this.multiplicities[i].check(this, edge, source,\n\t\t\t\t\ttarget, sourceOut, targetIn);\n\t\t\t\t\n\t\t\t\tif (err != null)\n\t\t\t\t{\n\t\t\t\t\terror += err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validates the source and target terminals independently\n\t\tvar err = this.validateEdge(edge, source, target);\n\t\t\n\t\tif (err != null)\n\t\t{\n\t\t\terror += err;\n\t\t}\n\t\t\n\t\treturn (error.length > 0) ? error : null;\n\t}\n\t\n\treturn (this.allowDanglingEdges) ? null : '';\n};\n\n/**\n * Function: validateEdge\n * \n * Hook method for subclassers to return an error message for the given\n * edge and terminals. This implementation returns null.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxGraph.prototype.validateEdge = function(edge, source, target)\n{\n\treturn null;\n};\n\n/**\n * Function: validateGraph\n * \n * Validates the graph by validating each descendant of the given cell or\n * the root of the model. Context is an object that contains the validation\n * state for the complete validation run. The validation errors are\n * attached to their cells using <setCellWarning>. Returns null in the case of\n * successful validation or an array of strings (warnings) in the case of\n * failed validations.\n * \n * Paramters:\n * \n * cell - Optional <mxCell> to start the validation recursion. Default is\n * the graph root.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateGraph = function(cell, context)\n{\n\tcell = (cell != null) ? cell : this.model.getRoot();\n\tcontext = (context != null) ? context : new Object();\n\t\n\tvar isValid = true;\n\tvar childCount = this.model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar tmp = this.model.getChildAt(cell, i);\n\t\tvar ctx = context;\n\t\t\n\t\tif (this.isValidRoot(tmp))\n\t\t{\n\t\t\tctx = new Object();\n\t\t}\n\t\t\n\t\tvar warn = this.validateGraph(tmp, ctx);\n\t\t\n\t\tif (warn != null)\n\t\t{\n\t\t\tthis.setCellWarning(tmp, warn.replace(/\\n/g, '<br>'));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.setCellWarning(tmp, null);\n\t\t}\n\t\t\n\t\tisValid = isValid && warn == null;\n\t}\n\t\n\tvar warning = '';\n\t\n\t// Adds error for invalid children if collapsed (children invisible)\n\tif (this.isCellCollapsed(cell) && !isValid)\n\t{\n\t\twarning += (mxResources.get(this.containsValidationErrorsResource) ||\n\t\t\tthis.containsValidationErrorsResource) + '\\n';\n\t}\n\t\n\t// Checks edges and cells using the defined multiplicities\n\tif (this.model.isEdge(cell))\n\t{\n\t\twarning += this.getEdgeValidationError(cell,\n\t\tthis.model.getTerminal(cell, true),\n\t\tthis.model.getTerminal(cell, false)) || '';\n\t}\n\telse\n\t{\n\t\twarning += this.getCellValidationError(cell) || '';\n\t}\n\t\n\t// Checks custom validation rules\n\tvar err = this.validateCell(cell, context);\n\t\n\tif (err != null)\n\t{\n\t\twarning += err;\n\t}\n\t\n\t// Updates the display with the warning icons\n\t// before any potential alerts are displayed.\n\t// LATER: Move this into addCellOverlay. Redraw\n\t// should check if overlay was added or removed.\n\tif (this.model.getParent(cell) == null)\n\t{\n\t\tthis.view.validate();\n\t}\n\n\treturn (warning.length > 0 || !isValid) ? warning : null;\n};\n\n/**\n * Function: getCellValidationError\n * \n * Checks all <multiplicities> that cannot be enforced while the graph is\n * being modified, namely, all multiplicities that require a minimum of\n * 1 edge.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the multiplicities should be checked.\n */\nmxGraph.prototype.getCellValidationError = function(cell)\n{\n\tvar outCount = this.model.getDirectedEdgeCount(cell, true);\n\tvar inCount = this.model.getDirectedEdgeCount(cell, false);\n\tvar value = this.model.getValue(cell);\n\tvar error = '';\n\n\tif (this.multiplicities != null)\n\t{\n\t\tfor (var i = 0; i < this.multiplicities.length; i++)\n\t\t{\n\t\t\tvar rule = this.multiplicities[i];\n\t\t\t\n\t\t\tif (rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\trule.attr, rule.value) && (outCount > rule.max ||\n\t\t\t\toutCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t\telse if (!rule.source && mxUtils.isNode(value, rule.type,\n\t\t\t\t\trule.attr, rule.value) && (inCount > rule.max ||\n\t\t\t\t\tinCount < rule.min))\n\t\t\t{\n\t\t\t\terror += rule.countError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: validateCell\n * \n * Hook method for subclassers to return an error message for the given\n * cell and validation context. This implementation returns null. Any HTML\n * breaks will be converted to linefeeds in the calling method.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to validate.\n * context - Object that represents the global validation state.\n */\nmxGraph.prototype.validateCell = function(cell, context)\n{\n\treturn null;\n};\n\n/**\n * Group: Graph appearance\n */\n\n/**\n * Function: getBackgroundImage\n * \n * Returns the <backgroundImage> as an <mxImage>.\n */\nmxGraph.prototype.getBackgroundImage = function()\n{\n\treturn this.backgroundImage;\n};\n\n/**\n * Function: setBackgroundImage\n * \n * Sets the new <backgroundImage>.\n * \n * Parameters:\n * \n * image - New <mxImage> to be used for the background.\n */\nmxGraph.prototype.setBackgroundImage = function(image)\n{\n\tthis.backgroundImage = image;\n};\n\n/**\n * Function: getFoldingImage\n * \n * Returns the <mxImage> used to display the collapsed state of\n * the specified cell state. This returns null for all edges.\n */\nmxGraph.prototype.getFoldingImage = function(state)\n{\n\tif (state != null && this.foldingEnabled && !this.getModel().isEdge(state.cell))\n\t{\n\t\tvar tmp = this.isCellCollapsed(state.cell);\n\t\t\n\t\tif (this.isCellFoldable(state.cell, !tmp))\n\t\t{\n\t\t\treturn (tmp) ? this.collapsedImage : this.expandedImage;\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: convertValueToString\n * \n * Returns the textual representation for the given cell. This\n * implementation returns the nodename or string-representation of the user\n * object.\n *\n * Example:\n * \n * The following returns the label attribute from the cells user\n * object if it is an XML node.\n * \n * (code)\n * graph.convertValueToString = function(cell)\n * {\n * \treturn cell.getAttribute('label');\n * }\n * (end)\n * \n * See also: <cellLabelChanged>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose textual representation should be returned.\n */\nmxGraph.prototype.convertValueToString = function(cell)\n{\n\tvar value = this.model.getValue(cell);\n\t\n\tif (value != null)\n\t{\n\t\tif (mxUtils.isNode(value))\n\t\t{\n\t\t\treturn value.nodeName;\n\t\t}\n\t\telse if (typeof(value.toString) == 'function')\n\t\t{\n\t\t\treturn value.toString();\n\t\t}\n\t}\n\t\n\treturn '';\n};\n\n/**\n * Function: getLabel\n * \n * Returns a string or DOM node that represents the label for the given\n * cell. This implementation uses <convertValueToString> if <labelsVisible>\n * is true. Otherwise it returns an empty string.\n * \n * To truncate a label to match the size of the cell, the following code\n * can be used.\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var label = mxGraph.prototype.getLabel.apply(this, arguments);\n * \n *   if (label != null && this.model.isVertex(cell))\n *   {\n *     var geo = this.getCellGeometry(cell);\n * \n *     if (geo != null)\n *     {\n *       var max = parseInt(geo.width / 8);\n * \n *       if (label.length > max)\n *       {\n *         label = label.substring(0, max)+'...';\n *       }\n *     }\n *   } \n *   return mxUtils.htmlEntities(label);\n * }\n * (end)\n * \n * A resize listener is needed in the graph to force a repaint of the label\n * after a resize.\n * \n * (code)\n * graph.addListener(mxEvent.RESIZE_CELLS, function(sender, evt)\n * {\n *   var cells = evt.getProperty('cells');\n * \n *   for (var i = 0; i < cells.length; i++)\n *   {\n *     this.view.removeState(cells[i]);\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be returned.\n */\nmxGraph.prototype.getLabel = function(cell)\n{\n\tvar result = '';\n\t\n\tif (this.labelsVisible && cell != null)\n\t{\n\t\tvar state = this.view.getState(cell);\n\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\t\n\t\tif (!mxUtils.getValue(style, mxConstants.STYLE_NOLABEL, false))\n\t\t{\n\t\t\tresult = this.convertValueToString(cell);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isHtmlLabel\n * \n * Returns true if the label must be rendered as HTML markup. The default\n * implementation returns <htmlLabels>.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be displayed as HTML markup.\n */\nmxGraph.prototype.isHtmlLabel = function(cell)\n{\n\treturn this.isHtmlLabels();\n};\n \n/**\n * Function: isHtmlLabels\n * \n * Returns <htmlLabels>.\n */\nmxGraph.prototype.isHtmlLabels = function()\n{\n\treturn this.htmlLabels;\n};\n \n/**\n * Function: setHtmlLabels\n * \n * Sets <htmlLabels>.\n */\nmxGraph.prototype.setHtmlLabels = function(value)\n{\n\tthis.htmlLabels = value;\n};\n\n/**\n * Function: isWrapping\n * \n * This enables wrapping for HTML labels.\n * \n * Returns true if no white-space CSS style directive should be used for\n * displaying the given cells label. This implementation returns true if\n * <mxConstants.STYLE_WHITE_SPACE> in the style of the given cell is 'wrap'.\n * \n * This is used as a workaround for IE ignoring the white-space directive\n * of child elements if the directive appears in a parent element. It\n * should be overridden to return true if a white-space directive is used\n * in the HTML markup that represents the given cells label. In order for\n * HTML markup to work in labels, <isHtmlLabel> must also return true\n * for the given cell.\n * \n * Example:\n * \n * (code)\n * graph.getLabel = function(cell)\n * {\n *   var tmp = mxGraph.prototype.getLabel.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.model.isEdge(cell))\n *   {\n *     tmp = '<div style=\"width: 150px; white-space:normal;\">'+tmp+'</div>';\n *   }\n *   \n *   return tmp;\n * }\n * \n * graph.isWrapping = function(state)\n * {\n * \t return this.model.isEdge(state.cell);\n * }\n * (end)\n * \n * Makes sure no edge label is wider than 150 pixels, otherwise the content\n * is wrapped. Note: No width must be specified for wrapped vertex labels as\n * the vertex defines the width in its geometry.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be wrapped.\n */\nmxGraph.prototype.isWrapping = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn (style != null) ? style[mxConstants.STYLE_WHITE_SPACE] == 'wrap' : false;\n};\n\n/**\n * Function: isLabelClipped\n * \n * Returns true if the overflow portion of labels should be hidden. If this\n * returns true then vertex labels will be clipped to the size of the vertices.\n * This implementation returns true if <mxConstants.STYLE_OVERFLOW> in the\n * style of the given cell is 'hidden'.\n * \n * Parameters:\n * \n * state - <mxCell> whose label should be clipped.\n */\nmxGraph.prototype.isLabelClipped = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn (style != null) ? style[mxConstants.STYLE_OVERFLOW] == 'hidden' : false;\n};\n\n/**\n * Function: getTooltip\n * \n * Returns the string or DOM node that represents the tooltip for the given\n * state, node and coordinate pair. This implementation checks if the given\n * node is a folding icon or overlay and returns the respective tooltip. If\n * this does not result in a tooltip, the handler for the cell is retrieved\n * from <selectionCellsHandler> and the optional getTooltipForNode method is\n * called. If no special tooltip exists here then <getTooltipForCell> is used\n * with the cell in the given state as the argument to return a tooltip for the\n * given state.\n * \n * Parameters:\n * \n * state - <mxCellState> whose tooltip should be returned.\n * node - DOM node that is currently under the mouse.\n * x - X-coordinate of the mouse.\n * y - Y-coordinate of the mouse.\n */\nmxGraph.prototype.getTooltip = function(state, node, x, y)\n{\n\tvar tip = null;\n\t\n\tif (state != null)\n\t{\n\t\t// Checks if the mouse is over the folding icon\n\t\tif (state.control != null && (node == state.control.node ||\n\t\t\tnode.parentNode == state.control.node))\n\t\t{\n\t\t\ttip = this.collapseExpandResource;\n\t\t\ttip = mxUtils.htmlEntities(mxResources.get(tip) || tip).replace(/\\\\n/g, '<br>');\n\t\t}\n\n\t\tif (tip == null && state.overlays != null)\n\t\t{\n\t\t\tstate.overlays.visit(function(id, shape)\n\t\t\t{\n\t\t\t\t// LATER: Exit loop if tip is not null\n\t\t\t\tif (tip == null && (node == shape.node || node.parentNode == shape.node))\n\t\t\t\t{\n\t\t\t\t\ttip = shape.overlay.toString();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\tvar handler = this.selectionCellsHandler.getHandler(state.cell);\n\t\t\t\n\t\t\tif (handler != null && typeof(handler.getTooltipForNode) == 'function')\n\t\t\t{\n\t\t\t\ttip = handler.getTooltipForNode(node);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (tip == null)\n\t\t{\n\t\t\ttip = this.getTooltipForCell(state.cell);\n\t\t}\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getTooltipForCell\n * \n * Returns the string or DOM node to be used as the tooltip for the given\n * cell. This implementation uses the cells getTooltip function if it\n * exists, or else it returns <convertValueToString> for the cell.\n * \n * Example:\n * \n * (code)\n * graph.getTooltipForCell = function(cell)\n * {\n *   return 'Hello, World!';\n * }\n * (end)\n * \n * Replaces all tooltips with the string Hello, World!\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getTooltipForCell = function(cell)\n{\n\tvar tip = null;\n\t\n\tif (cell != null && cell.getTooltip != null)\n\t{\n\t\ttip = cell.getTooltip();\n\t}\n\telse\n\t{\n\t\ttip = this.convertValueToString(cell);\n\t}\n\t\n\treturn tip;\n};\n\n/**\n * Function: getLinkForCell\n * \n * Returns the string to be used as the link for the given cell. This\n * implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose tooltip should be returned.\n */\nmxGraph.prototype.getLinkForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getCursorForMouseEvent\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given event. This implementation calls <getCursorForCell>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForMouseEvent = function(me)\n{\n\treturn this.getCursorForCell(me.getCell());\n};\n\n/**\n * Function: getCursorForCell\n * \n * Returns the cursor value to be used for the CSS of the shape for the\n * given cell. This implementation returns null.\n * \n * Parameters:\n * \n * cell - <mxCell> whose cursor should be returned.\n */\nmxGraph.prototype.getCursorForCell = function(cell)\n{\n\treturn null;\n};\n\n/**\n * Function: getStartSize\n * \n * Returns the start size of the given swimlane, that is, the width or\n * height of the part that contains the title, depending on the\n * horizontal style. The return value is an <mxRectangle> with either\n * width or height set as appropriate.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose start size should be returned.\n */\nmxGraph.prototype.getStartSize = function(swimlane)\n{\n\tvar result = new mxRectangle();\n\tvar state = this.view.getState(swimlane);\n\tvar style = (state != null) ? state.style : this.getCellStyle(swimlane);\n\t\n\tif (style != null)\n\t{\n\t\tvar size = parseInt(mxUtils.getValue(style,\n\t\t\tmxConstants.STYLE_STARTSIZE, mxConstants.DEFAULT_STARTSIZE));\n\t\t\n\t\tif (mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, true))\n\t\t{\n\t\t\tresult.height = size;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult.width = size;\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getImage\n * \n * Returns the image URL for the given cell state. This implementation\n * returns the value stored under <mxConstants.STYLE_IMAGE> in the cell\n * style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose image URL should be returned.\n */\nmxGraph.prototype.getImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_IMAGE] : null;\n};\n\n/**\n * Function: getVerticalAlign\n * \n * Returns the vertical alignment for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_VERTICAL_ALIGN> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose vertical alignment should be\n * returned.\n */\nmxGraph.prototype.getVerticalAlign = function(state)\n{\n\treturn (state != null && state.style != null) ?\n\t\t(state.style[mxConstants.STYLE_VERTICAL_ALIGN] ||\n\t\tmxConstants.ALIGN_MIDDLE) : null;\n};\n\n/**\n * Function: getIndicatorColor\n * \n * Returns the indicator color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_COLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_COLOR] : null;\n};\n\n/**\n * Function: getIndicatorGradientColor\n * \n * Returns the indicator gradient color for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_GRADIENTCOLOR> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator gradient color should be\n * returned.\n */\nmxGraph.prototype.getIndicatorGradientColor = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_GRADIENTCOLOR] : null;\n};\n\n/**\n * Function: getIndicatorShape\n * \n * Returns the indicator shape for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_SHAPE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator shape should be returned.\n */\nmxGraph.prototype.getIndicatorShape = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_SHAPE] : null;\n};\n\n/**\n * Function: getIndicatorImage\n * \n * Returns the indicator image for the given cell state. This\n * implementation returns the value stored under\n * <mxConstants.STYLE_INDICATOR_IMAGE> in the cell style.\n * \n * Parameters:\n * \n * state - <mxCellState> whose indicator image should be returned.\n */\nmxGraph.prototype.getIndicatorImage = function(state)\n{\n\treturn (state != null && state.style != null) ? state.style[mxConstants.STYLE_INDICATOR_IMAGE] : null;\n};\n\n/**\n * Function: getBorder\n * \n * Returns the value of <border>.\n */\nmxGraph.prototype.getBorder = function()\n{\n\treturn this.border;\n};\n\n/**\n * Function: setBorder\n * \n * Sets the value of <border>.\n * \n * Parameters:\n * \n * value - Positive integer that represents the border to be used.\n */\nmxGraph.prototype.setBorder = function(value)\n{\n\tthis.border = value;\n};\n\n/**\n * Function: isSwimlane\n * \n * Returns true if the given cell is a swimlane in the graph. A swimlane is\n * a container cell with some specific behaviour. This implementation\n * checks if the shape associated with the given cell is a <mxSwimlane>.\n * \n * Parameters:\n * \n * cell - <mxCell> to be checked.\n */\nmxGraph.prototype.isSwimlane = function (cell)\n{\n\tif (cell != null)\n\t{\n\t\tif (this.model.getParent(cell) != this.model.getRoot())\n\t\t{\n\t\t\tvar state = this.view.getState(cell);\n\t\t\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\t\t\tif (style != null && !this.model.isEdge(cell))\n\t\t\t{\n\t\t\t\treturn style[mxConstants.STYLE_SHAPE] == mxConstants.SHAPE_SWIMLANE;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Group: Graph behaviour\n */\n\n/**\n * Function: isResizeContainer\n * \n * Returns <resizeContainer>.\n */\nmxGraph.prototype.isResizeContainer = function()\n{\n\treturn this.resizeContainer;\n};\n\n/**\n * Function: setResizeContainer\n * \n * Sets <resizeContainer>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the container should be resized.\n */\nmxGraph.prototype.setResizeContainer = function(value)\n{\n\tthis.resizeContainer = value;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if the graph is <enabled>.\n */\nmxGraph.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Specifies if the graph should allow any interactions. This\n * implementation updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be enabled.\n */\nmxGraph.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isEscapeEnabled\n * \n * Returns <escapeEnabled>.\n */\nmxGraph.prototype.isEscapeEnabled = function()\n{\n\treturn this.escapeEnabled;\n};\n\n/**\n * Function: setEscapeEnabled\n * \n * Sets <escapeEnabled>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if escape should be enabled.\n */\nmxGraph.prototype.setEscapeEnabled = function(value)\n{\n\tthis.escapeEnabled = value;\n};\n\n/**\n * Function: isInvokesStopCellEditing\n * \n * Returns <invokesStopCellEditing>.\n */\nmxGraph.prototype.isInvokesStopCellEditing = function()\n{\n\treturn this.invokesStopCellEditing;\n};\n\n/**\n * Function: setInvokesStopCellEditing\n * \n * Sets <invokesStopCellEditing>.\n */\nmxGraph.prototype.setInvokesStopCellEditing = function(value)\n{\n\tthis.invokesStopCellEditing = value;\n};\n\n/**\n * Function: isEnterStopsCellEditing\n * \n * Returns <enterStopsCellEditing>.\n */\nmxGraph.prototype.isEnterStopsCellEditing = function()\n{\n\treturn this.enterStopsCellEditing;\n};\n\n/**\n * Function: setEnterStopsCellEditing\n * \n * Sets <enterStopsCellEditing>.\n */\nmxGraph.prototype.setEnterStopsCellEditing = function(value)\n{\n\tthis.enterStopsCellEditing = value;\n};\n\n/**\n * Function: isCellLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellLocked = function(cell)\n{\n\tvar geometry = this.model.getGeometry(cell);\n\t\n\treturn this.isCellsLocked() || (geometry != null && this.model.isVertex(cell) && geometry.relative);\n};\n\n/**\n * Function: isCellsLocked\n * \n * Returns true if the given cell may not be moved, sized, bended,\n * disconnected, edited or selected. This implementation returns true for\n * all vertices with a relative geometry if <locked> is false.\n * \n * Parameters:\n * \n * cell - <mxCell> whose locked state should be returned.\n */\nmxGraph.prototype.isCellsLocked = function()\n{\n\treturn this.cellsLocked;\n};\n\n/**\n * Function: setCellsLocked\n * \n * Sets if any cell may be moved, sized, bended, disconnected, edited or\n * selected.\n * \n * Parameters:\n * \n * value - Boolean that defines the new value for <cellsLocked>.\n */\nmxGraph.prototype.setCellsLocked = function(value)\n{\n\tthis.cellsLocked = value;\n};\n\n/**\n * Function: getCloneableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getCloneableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellCloneable(cell);\n\t}));\n};\n\n/**\n * Function: isCellCloneable\n * \n * Returns true if the given cell is cloneable. This implementation returns\n * <isCellsCloneable> for all cells unless a cell style specifies\n * <mxConstants.STYLE_CLONEABLE> to be 0. \n * \n * Parameters:\n * \n * cell - Optional <mxCell> whose cloneable state should be returned.\n */\nmxGraph.prototype.isCellCloneable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsCloneable() && style[mxConstants.STYLE_CLONEABLE] != 0;\n};\n\n/**\n * Function: isCellsCloneable\n * \n * Returns <cellsCloneable>, that is, if the graph allows cloning of cells\n * by using control-drag.\n */\nmxGraph.prototype.isCellsCloneable = function()\n{\n\treturn this.cellsCloneable;\n};\n\n/**\n * Function: setCellsCloneable\n * \n * Specifies if the graph should allow cloning of cells by holding down the\n * control key while cells are being moved. This implementation updates\n * <cellsCloneable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should be cloneable.\n */\nmxGraph.prototype.setCellsCloneable = function(value)\n{\n\tthis.cellsCloneable = value;\n};\n\n/**\n * Function: getExportableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getExportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canExportCell(cell);\n\t}));\n};\n\n/**\n * Function: canExportCell\n * \n * Returns true if the given cell may be exported to the clipboard. This\n * implementation returns <exportEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be exported.\n */\nmxGraph.prototype.canExportCell = function(cell)\n{\n\treturn this.exportEnabled;\n};\n\n/**\n * Function: getImportableCells\n * \n * Returns the cells which may be imported in the given array of cells.\n */\nmxGraph.prototype.getImportableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.canImportCell(cell);\n\t}));\n};\n\n/**\n * Function: canImportCell\n * \n * Returns true if the given cell may be imported from the clipboard.\n * This implementation returns <importEnabled> for all cells.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the cell to be imported.\n */\nmxGraph.prototype.canImportCell = function(cell)\n{\n\treturn this.importEnabled;\n};\n\n/**\n * Function: isCellSelectable\n *\n * Returns true if the given cell is selectable. This implementation\n * returns <cellsSelectable>.\n * \n * To add a new style for making cells (un)selectable, use the following code.\n * \n * (code)\n * mxGraph.prototype.isCellSelectable = function(cell)\n * {\n *   var state = this.view.getState(cell);\n *   var style = (state != null) ? state.style : this.getCellStyle(cell);\n *   \n *   return this.isCellsSelectable() && !this.isCellLocked(cell) && style['selectable'] != 0;\n * };\n * (end)\n * \n * You can then use the new style as shown in this example.\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'selectable=0');\n * (end)\n * \n * Parameters:\n * \n * cell - <mxCell> whose selectable state should be returned.\n */\nmxGraph.prototype.isCellSelectable = function(cell)\n{\n\treturn this.isCellsSelectable();\n};\n\n/**\n * Function: isCellsSelectable\n *\n * Returns <cellsSelectable>.\n */\nmxGraph.prototype.isCellsSelectable = function()\n{\n\treturn this.cellsSelectable;\n};\n\n/**\n * Function: setCellsSelectable\n *\n * Sets <cellsSelectable>.\n */\nmxGraph.prototype.setCellsSelectable = function(value)\n{\n\tthis.cellsSelectable = value;\n};\n\n/**\n * Function: getDeletableCells\n * \n * Returns the cells which may be exported in the given array of cells.\n */\nmxGraph.prototype.getDeletableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellDeletable(cell);\n\t}));\n};\n\n/**\n * Function: isCellDeletable\n *\n * Returns true if the given cell is moveable. This returns\n * <cellsDeletable> for all given cells if a cells style does not specify\n * <mxConstants.STYLE_DELETABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose deletable state should be returned.\n */\nmxGraph.prototype.isCellDeletable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsDeletable() && style[mxConstants.STYLE_DELETABLE] != 0;\n};\n\n/**\n * Function: isCellsDeletable\n *\n * Returns <cellsDeletable>.\n */\nmxGraph.prototype.isCellsDeletable = function()\n{\n\treturn this.cellsDeletable;\n};\n\n/**\n * Function: setCellsDeletable\n * \n * Sets <cellsDeletable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow deletion of cells.\n */\nmxGraph.prototype.setCellsDeletable = function(value)\n{\n\tthis.cellsDeletable = value;\n};\n\n/**\n * Function: isLabelMovable\n *\n * Returns true if the given edges's label is moveable. This returns\n * <movable> for all given cells if <isLocked> does not return true\n * for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose label should be moved.\n */\nmxGraph.prototype.isLabelMovable = function(cell)\n{\n\treturn !this.isCellLocked(cell) &&\n\t\t((this.model.isEdge(cell) && this.edgeLabelsMovable) ||\n\t\t(this.model.isVertex(cell) && this.vertexLabelsMovable));\n};\n\n/**\n * Function: isCellRotatable\n *\n * Returns true if the given cell is rotatable. This returns true for the given\n * cell if its style does not specify <mxConstants.STYLE_ROTATABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose rotatable state should be returned.\n */\nmxGraph.prototype.isCellRotatable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn style[mxConstants.STYLE_ROTATABLE] != 0;\n};\n\n/**\n * Function: getMovableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getMovableCells = function(cells)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellMovable(cell);\n\t}));\n};\n\n/**\n * Function: isCellMovable\n *\n * Returns true if the given cell is moveable. This returns <cellsMovable>\n * for all given cells if <isCellLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_MOVABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose movable state should be returned.\n */\nmxGraph.prototype.isCellMovable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsMovable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_MOVABLE] != 0;\n};\n\n/**\n * Function: isCellsMovable\n *\n * Returns <cellsMovable>.\n */\nmxGraph.prototype.isCellsMovable = function()\n{\n\treturn this.cellsMovable;\n};\n\n/**\n * Function: setCellsMovable\n * \n * Specifies if the graph should allow moving of cells. This implementation\n * updates <cellsMsovable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow moving of cells.\n */\nmxGraph.prototype.setCellsMovable = function(value)\n{\n\tthis.cellsMovable = value;\n};\n\n/**\n * Function: isGridEnabled\n *\n * Returns <gridEnabled> as a boolean.\n */\nmxGraph.prototype.isGridEnabled = function()\n{\n\treturn this.gridEnabled;\n};\n\n/**\n * Function: setGridEnabled\n * \n * Specifies if the grid should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the grid should be enabled.\n */\nmxGraph.prototype.setGridEnabled = function(value)\n{\n\tthis.gridEnabled = value;\n};\n\n/**\n * Function: isPortsEnabled\n *\n * Returns <portsEnabled> as a boolean.\n */\nmxGraph.prototype.isPortsEnabled = function()\n{\n\treturn this.portsEnabled;\n};\n\n/**\n * Function: setPortsEnabled\n * \n * Specifies if the ports should be enabled.\n * \n * Parameters:\n * \n * value - Boolean indicating if the ports should be enabled.\n */\nmxGraph.prototype.setPortsEnabled = function(value)\n{\n\tthis.portsEnabled = value;\n};\n\n/**\n * Function: getGridSize\n *\n * Returns <gridSize>.\n */\nmxGraph.prototype.getGridSize = function()\n{\n\treturn this.gridSize;\n};\n\n/**\n * Function: setGridSize\n * \n * Sets <gridSize>.\n */\nmxGraph.prototype.setGridSize = function(value)\n{\n\tthis.gridSize = value;\n};\n\n/**\n * Function: getTolerance\n *\n * Returns <tolerance>.\n */\nmxGraph.prototype.getTolerance = function()\n{\n\treturn this.tolerance;\n};\n\n/**\n * Function: setTolerance\n * \n * Sets <tolerance>.\n */\nmxGraph.prototype.setTolerance = function(value)\n{\n\tthis.tolerance = value;\n};\n\n/**\n * Function: isVertexLabelsMovable\n *\n * Returns <vertexLabelsMovable>.\n */\nmxGraph.prototype.isVertexLabelsMovable = function()\n{\n\treturn this.vertexLabelsMovable;\n};\n\n/**\n * Function: setVertexLabelsMovable\n * \n * Sets <vertexLabelsMovable>.\n */\nmxGraph.prototype.setVertexLabelsMovable = function(value)\n{\n\tthis.vertexLabelsMovable = value;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n *\n * Returns <edgeLabelsMovable>.\n */\nmxGraph.prototype.isEdgeLabelsMovable = function()\n{\n\treturn this.edgeLabelsMovable;\n};\n\n/**\n * Function: isEdgeLabelsMovable\n * \n * Sets <edgeLabelsMovable>.\n */\nmxGraph.prototype.setEdgeLabelsMovable = function(value)\n{\n\tthis.edgeLabelsMovable = value;\n};\n\n/**\n * Function: isSwimlaneNesting\n *\n * Returns <swimlaneNesting> as a boolean.\n */\nmxGraph.prototype.isSwimlaneNesting = function()\n{\n\treturn this.swimlaneNesting;\n};\n\n/**\n * Function: setSwimlaneNesting\n * \n * Specifies if swimlanes can be nested by drag and drop. This is only\n * taken into account if dropEnabled is true.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes can be nested.\n */\nmxGraph.prototype.setSwimlaneNesting = function(value)\n{\n\tthis.swimlaneNesting = value;\n};\n\n/**\n * Function: isSwimlaneSelectionEnabled\n *\n * Returns <swimlaneSelectionEnabled> as a boolean.\n */\nmxGraph.prototype.isSwimlaneSelectionEnabled = function()\n{\n\treturn this.swimlaneSelectionEnabled;\n};\n\n/**\n * Function: setSwimlaneSelectionEnabled\n * \n * Specifies if swimlanes should be selected if the mouse is released\n * over their content area.\n * \n * Parameters:\n * \n * value - Boolean indicating if swimlanes content areas\n * should be selected when the mouse is released over them.\n */\nmxGraph.prototype.setSwimlaneSelectionEnabled = function(value)\n{\n\tthis.swimlaneSelectionEnabled = value;\n};\n\n/**\n * Function: isMultigraph\n *\n * Returns <multigraph> as a boolean.\n */\nmxGraph.prototype.isMultigraph = function()\n{\n\treturn this.multigraph;\n};\n\n/**\n * Function: setMultigraph\n * \n * Specifies if the graph should allow multiple connections between the\n * same pair of vertices.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph allows multiple connections\n * between the same pair of vertices.\n */\nmxGraph.prototype.setMultigraph = function(value)\n{\n\tthis.multigraph = value;\n};\n\n/**\n * Function: isAllowLoops\n *\n * Returns <allowLoops> as a boolean.\n */\nmxGraph.prototype.isAllowLoops = function()\n{\n\treturn this.allowLoops;\n};\n\n/**\n * Function: setAllowDanglingEdges\n * \n * Specifies if dangling edges are allowed, that is, if edges are allowed\n * that do not have a source and/or target terminal defined.\n * \n * Parameters:\n * \n * value - Boolean indicating if dangling edges are allowed.\n */\nmxGraph.prototype.setAllowDanglingEdges = function(value)\n{\n\tthis.allowDanglingEdges = value;\n};\n\n/**\n * Function: isAllowDanglingEdges\n *\n * Returns <allowDanglingEdges> as a boolean.\n */\nmxGraph.prototype.isAllowDanglingEdges = function()\n{\n\treturn this.allowDanglingEdges;\n};\n\n/**\n * Function: setConnectableEdges\n * \n * Specifies if edges should be connectable.\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be connectable.\n */\nmxGraph.prototype.setConnectableEdges = function(value)\n{\n\tthis.connectableEdges = value;\n};\n\n/**\n * Function: isConnectableEdges\n *\n * Returns <connectableEdges> as a boolean.\n */\nmxGraph.prototype.isConnectableEdges = function()\n{\n\treturn this.connectableEdges;\n};\n\n/**\n * Function: setCloneInvalidEdges\n * \n * Specifies if edges should be inserted when cloned but not valid wrt.\n * <getEdgeValidationError>. If false such edges will be silently ignored.\n * \n * Parameters:\n * \n * value - Boolean indicating if cloned invalid edges should be\n * inserted into the graph or ignored.\n */\nmxGraph.prototype.setCloneInvalidEdges = function(value)\n{\n\tthis.cloneInvalidEdges = value;\n};\n\n/**\n * Function: isCloneInvalidEdges\n *\n * Returns <cloneInvalidEdges> as a boolean.\n */\nmxGraph.prototype.isCloneInvalidEdges = function()\n{\n\treturn this.cloneInvalidEdges;\n};\n\n/**\n * Function: setAllowLoops\n * \n * Specifies if loops are allowed.\n * \n * Parameters:\n * \n * value - Boolean indicating if loops are allowed.\n */\nmxGraph.prototype.setAllowLoops = function(value)\n{\n\tthis.allowLoops = value;\n};\n\n/**\n * Function: isDisconnectOnMove\n *\n * Returns <disconnectOnMove> as a boolean.\n */\nmxGraph.prototype.isDisconnectOnMove = function()\n{\n\treturn this.disconnectOnMove;\n};\n\n/**\n * Function: setDisconnectOnMove\n * \n * Specifies if edges should be disconnected when moved. (Note: Cloned\n * edges are always disconnected.)\n * \n * Parameters:\n * \n * value - Boolean indicating if edges should be disconnected\n * when moved.\n */\nmxGraph.prototype.setDisconnectOnMove = function(value)\n{\n\tthis.disconnectOnMove = value;\n};\n\n/**\n * Function: isDropEnabled\n *\n * Returns <dropEnabled> as a boolean.\n */\nmxGraph.prototype.isDropEnabled = function()\n{\n\treturn this.dropEnabled;\n};\n\n/**\n * Function: setDropEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setDropEnabled = function(value)\n{\n\tthis.dropEnabled = value;\n};\n\n/**\n * Function: isSplitEnabled\n *\n * Returns <splitEnabled> as a boolean.\n */\nmxGraph.prototype.isSplitEnabled = function()\n{\n\treturn this.splitEnabled;\n};\n\n/**\n * Function: setSplitEnabled\n * \n * Specifies if the graph should allow dropping of cells onto or into other\n * cells.\n * \n * Parameters:\n * \n * dropEnabled - Boolean indicating if the graph should allow dropping\n * of cells into other cells.\n */\nmxGraph.prototype.setSplitEnabled = function(value)\n{\n\tthis.splitEnabled = value;\n};\n\n/**\n * Function: isCellResizable\n *\n * Returns true if the given cell is resizable. This returns\n * <cellsResizable> for all given cells if <isCellLocked> does not return\n * true for the given cell and its style does not specify\n * <mxConstants.STYLE_RESIZABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose resizable state should be returned.\n */\nmxGraph.prototype.isCellResizable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\n\treturn this.isCellsResizable() && !this.isCellLocked(cell) &&\n\t\tmxUtils.getValue(style, mxConstants.STYLE_RESIZABLE, '1') != '0';\n};\n\n/**\n * Function: isCellsResizable\n *\n * Returns <cellsResizable>.\n */\nmxGraph.prototype.isCellsResizable = function()\n{\n\treturn this.cellsResizable;\n};\n\n/**\n * Function: setCellsResizable\n * \n * Specifies if the graph should allow resizing of cells. This\n * implementation updates <cellsResizable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow resizing of\n * cells.\n */\nmxGraph.prototype.setCellsResizable = function(value)\n{\n\tthis.cellsResizable = value;\n};\n\n/**\n * Function: isTerminalPointMovable\n *\n * Returns true if the given terminal point is movable. This is independent\n * from <isCellConnectable> and <isCellDisconnectable> and controls if terminal\n * points can be moved in the graph if the edge is not connected. Note that it\n * is required for this to return true to connect unconnected edges. This\n * implementation returns true.\n * \n * Parameters:\n * \n * cell - <mxCell> whose terminal point should be moved.\n * source - Boolean indicating if the source or target terminal should be moved.\n */\nmxGraph.prototype.isTerminalPointMovable = function(cell, source)\n{\n\treturn true;\n};\n\n/**\n * Function: isCellBendable\n *\n * Returns true if the given cell is bendable. This returns <cellsBendable>\n * for all given cells if <isLocked> does not return true for the given\n * cell and its style does not specify <mxConstants.STYLE_BENDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose bendable state should be returned.\n */\nmxGraph.prototype.isCellBendable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsBendable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_BENDABLE] != 0;\n};\n\n/**\n * Function: isCellsBendable\n *\n * Returns <cellsBenadable>.\n */\nmxGraph.prototype.isCellsBendable = function()\n{\n\treturn this.cellsBendable;\n};\n\n/**\n * Function: setCellsBendable\n * \n * Specifies if the graph should allow bending of edges. This\n * implementation updates <bendable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow bending of\n * edges.\n */\nmxGraph.prototype.setCellsBendable = function(value)\n{\n\tthis.cellsBendable = value;\n};\n\n/**\n * Function: isCellEditable\n *\n * Returns true if the given cell is editable. This returns <cellsEditable> for\n * all given cells if <isCellLocked> does not return true for the given cell\n * and its style does not specify <mxConstants.STYLE_EDITABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose editable state should be returned.\n */\nmxGraph.prototype.isCellEditable = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isCellsEditable() && !this.isCellLocked(cell) && style[mxConstants.STYLE_EDITABLE] != 0;\n};\n\n/**\n * Function: isCellsEditable\n *\n * Returns <cellsEditable>.\n */\nmxGraph.prototype.isCellsEditable = function()\n{\n\treturn this.cellsEditable;\n};\n\n/**\n * Function: setCellsEditable\n * \n * Specifies if the graph should allow in-place editing for cell labels.\n * This implementation updates <cellsEditable>.\n * \n * Parameters:\n * \n * value - Boolean indicating if the graph should allow in-place\n * editing.\n */\nmxGraph.prototype.setCellsEditable = function(value)\n{\n\tthis.cellsEditable = value;\n};\n\n/**\n * Function: isCellDisconnectable\n *\n * Returns true if the given cell is disconnectable from the source or\n * target terminal. This returns <isCellsDisconnectable> for all given\n * cells if <isCellLocked> does not return true for the given cell.\n * \n * Parameters:\n * \n * cell - <mxCell> whose disconnectable state should be returned.\n * terminal - <mxCell> that represents the source or target terminal.\n * source - Boolean indicating if the source or target terminal is to be\n * disconnected.\n */\nmxGraph.prototype.isCellDisconnectable = function(cell, terminal, source)\n{\n\treturn this.isCellsDisconnectable() && !this.isCellLocked(cell);\n};\n\n/**\n * Function: isCellsDisconnectable\n *\n * Returns <cellsDisconnectable>.\n */\nmxGraph.prototype.isCellsDisconnectable = function()\n{\n\treturn this.cellsDisconnectable;\n};\n\n/**\n * Function: setCellsDisconnectable\n *\n * Sets <cellsDisconnectable>.\n */\nmxGraph.prototype.setCellsDisconnectable = function(value)\n{\n\tthis.cellsDisconnectable = value;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns true if the given cell is a valid source for new connections.\n * This implementation returns true for all non-null values and is\n * called by is called by <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible source or null.\n */\nmxGraph.prototype.isValidSource = function(cell)\n{\n\treturn (cell == null && this.allowDanglingEdges) ||\n\t\t(cell != null && (!this.model.isEdge(cell) ||\n\t\tthis.connectableEdges) && this.isCellConnectable(cell));\n};\n\t\n/**\n * Function: isValidTarget\n * \n * Returns <isValidSource> for the given cell. This is called by\n * <isValidConnection>.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents a possible target or null.\n */\nmxGraph.prototype.isValidTarget = function(cell)\n{\n\treturn this.isValidSource(cell);\n};\n\n/**\n * Function: isValidConnection\n * \n * Returns true if the given target cell is a valid target for source.\n * This is a boolean implementation for not allowing connections between\n * certain pairs of vertices and is called by <getEdgeValidationError>.\n * This implementation returns true if <isValidSource> returns true for\n * the source and <isValidTarget> returns true for the target.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source cell.\n * target - <mxCell> that represents the target cell.\n */\nmxGraph.prototype.isValidConnection = function(source, target)\n{\n\treturn this.isValidSource(source) && this.isValidTarget(target);\n};\n\n/**\n * Function: setConnectable\n * \n * Specifies if the graph should allow new connections. This implementation\n * updates <mxConnectionHandler.enabled> in <connectionHandler>.\n * \n * Parameters:\n * \n * connectable - Boolean indicating if new connections should be allowed.\n */\nmxGraph.prototype.setConnectable = function(connectable)\n{\n\tthis.connectionHandler.setEnabled(connectable);\n};\n\t\n/**\n * Function: isConnectable\n * \n * Returns true if the <connectionHandler> is enabled.\n */\nmxGraph.prototype.isConnectable = function(connectable)\n{\n\treturn this.connectionHandler.isEnabled();\n};\n\n/**\n * Function: setTooltips\n * \n * Specifies if tooltips should be enabled. This implementation updates\n * <mxTooltipHandler.enabled> in <tooltipHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if tooltips should be enabled.\n */\nmxGraph.prototype.setTooltips = function (enabled)\n{\n\tthis.tooltipHandler.setEnabled(enabled);\n};\n\n/**\n * Function: setPanning\n * \n * Specifies if panning should be enabled. This implementation updates\n * <mxPanningHandler.panningEnabled> in <panningHandler>.\n * \n * Parameters:\n * \n * enabled - Boolean indicating if panning should be enabled.\n */\nmxGraph.prototype.setPanning = function(enabled)\n{\n\tthis.panningHandler.panningEnabled = enabled;\n};\n\n/**\n * Function: isEditing\n * \n * Returns true if the given cell is currently being edited.\n * If no cell is specified then this returns true if any\n * cell is currently being edited.\n *\n * Parameters:\n * \n * cell - <mxCell> that should be checked.\n */\nmxGraph.prototype.isEditing = function(cell)\n{\n\tif (this.cellEditor != null)\n\t{\n\t\tvar editingCell = this.cellEditor.getEditingCell();\n\t\t\n\t\treturn (cell == null) ? editingCell != null : cell == editingCell;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: isAutoSizeCell\n * \n * Returns true if the size of the given cell should automatically be\n * updated after a change of the label. This implementation returns\n * <autoSizeCells> or checks if the cell style does specify\n * <mxConstants.STYLE_AUTOSIZE> to be 1.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be resized.\n */\nmxGraph.prototype.isAutoSizeCell = function(cell)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.isAutoSizeCells() || style[mxConstants.STYLE_AUTOSIZE] == 1;\n};\n\n/**\n * Function: isAutoSizeCells\n * \n * Returns <autoSizeCells>.\n */\nmxGraph.prototype.isAutoSizeCells = function()\n{\n\treturn this.autoSizeCells;\n};\n\n/**\n * Function: setAutoSizeCells\n * \n * Specifies if cell sizes should be automatically updated after a label\n * change. This implementation sets <autoSizeCells> to the given parameter.\n * To update the size of cells when the cells are added, set\n * <autoSizeCellsOnAdd> to true.\n * \n * Parameters:\n * \n * value - Boolean indicating if cells should be resized\n * automatically.\n */\nmxGraph.prototype.setAutoSizeCells = function(value)\n{\n\tthis.autoSizeCells = value;\n};\n\n/**\n * Function: isExtendParent\n * \n * Returns true if the parent of the given cell should be extended if the\n * child has been resized so that it overlaps the parent. This\n * implementation returns <isExtendParents> if the cell is not an edge.\n * \n * Parameters:\n * \n * cell - <mxCell> that has been resized.\n */\nmxGraph.prototype.isExtendParent = function(cell)\n{\n\treturn !this.getModel().isEdge(cell) && this.isExtendParents();\n};\n\n/**\n * Function: isExtendParents\n * \n * Returns <extendParents>.\n */\nmxGraph.prototype.isExtendParents = function()\n{\n\treturn this.extendParents;\n};\n\n/**\n * Function: setExtendParents\n * \n * Sets <extendParents>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParents>.\n */\nmxGraph.prototype.setExtendParents = function(value)\n{\n\tthis.extendParents = value;\n};\n\n/**\n * Function: isExtendParentsOnAdd\n * \n * Returns <extendParentsOnAdd>.\n */\nmxGraph.prototype.isExtendParentsOnAdd = function(cell)\n{\n\treturn this.extendParentsOnAdd;\n};\n\n/**\n * Function: setExtendParentsOnAdd\n * \n * Sets <extendParentsOnAdd>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnAdd = function(value)\n{\n\tthis.extendParentsOnAdd = value;\n};\n\n/**\n * Function: isExtendParentsOnMove\n * \n * Returns <extendParentsOnMove>.\n */\nmxGraph.prototype.isExtendParentsOnMove = function()\n{\n\treturn this.extendParentsOnMove;\n};\n\n/**\n * Function: setExtendParentsOnMove\n * \n * Sets <extendParentsOnMove>.\n * \n * Parameters:\n * \n * value - New boolean value for <extendParentsOnAdd>.\n */\nmxGraph.prototype.setExtendParentsOnMove = function(value)\n{\n\tthis.extendParentsOnMove = value;\n};\n\n/**\n * Function: isRecursiveResize\n * \n * Returns <recursiveResize>.\n * \n * Parameters:\n * \n * state - <mxCellState> that is being resized.\n */\nmxGraph.prototype.isRecursiveResize = function(state)\n{\n\treturn this.recursiveResize;\n};\n\n/**\n * Function: setRecursiveResize\n * \n * Sets <recursiveResize>.\n * \n * Parameters:\n * \n * value - New boolean value for <recursiveResize>.\n */\nmxGraph.prototype.setRecursiveResize = function(value)\n{\n\tthis.recursiveResize = value;\n};\n\n/**\n * Function: isConstrainChild\n * \n * Returns true if the given cell should be kept inside the bounds of its\n * parent according to the rules defined by <getOverlap> and\n * <isAllowOverlapParent>. This implementation returns false for all children\n * of edges and <isConstrainChildren> otherwise.\n * \n * Parameters:\n * \n * cell - <mxCell> that should be constrained.\n */\nmxGraph.prototype.isConstrainChild = function(cell)\n{\n\treturn this.isConstrainChildren() && !this.getModel().isEdge(this.getModel().getParent(cell));\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <constrainChildren>.\n */\nmxGraph.prototype.isConstrainChildren = function()\n{\n\treturn this.constrainChildren;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <constrainChildren>.\n */\nmxGraph.prototype.setConstrainChildren = function(value)\n{\n\tthis.constrainChildren = value;\n};\n\n/**\n * Function: isConstrainRelativeChildren\n * \n * Returns <constrainRelativeChildren>.\n */\nmxGraph.prototype.isConstrainRelativeChildren = function()\n{\n\treturn this.constrainRelativeChildren;\n};\n\n/**\n * Function: setConstrainRelativeChildren\n * \n * Sets <constrainRelativeChildren>.\n */\nmxGraph.prototype.setConstrainRelativeChildren = function(value)\n{\n\tthis.constrainRelativeChildren = value;\n};\n\n/**\n * Function: isConstrainChildren\n * \n * Returns <allowNegativeCoordinates>.\n */\nmxGraph.prototype.isAllowNegativeCoordinates = function()\n{\n\treturn this.allowNegativeCoordinates;\n};\n\n/**\n * Function: setConstrainChildren\n * \n * Sets <allowNegativeCoordinates>.\n */\nmxGraph.prototype.setAllowNegativeCoordinates = function(value)\n{\n\tthis.allowNegativeCoordinates = value;\n};\n\n/**\n * Function: getOverlap\n * \n * Returns a decimal number representing the amount of the width and height\n * of the given cell that is allowed to overlap its parent. A value of 0\n * means all children must stay inside the parent, 1 means the child is\n * allowed to be placed outside of the parent such that it touches one of\n * the parents sides. If <isAllowOverlapParent> returns false for the given\n * cell, then this method returns 0.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the overlap ratio should be returned.\n */\nmxGraph.prototype.getOverlap = function(cell)\n{\n\treturn (this.isAllowOverlapParent(cell)) ? this.defaultOverlap : 0;\n};\n\t\n/**\n * Function: isAllowOverlapParent\n * \n * Returns true if the given cell is allowed to be placed outside of the\n * parents area.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the child to be checked.\n */\nmxGraph.prototype.isAllowOverlapParent = function(cell)\n{\n\treturn false;\n};\n\n/**\n * Function: getFoldableCells\n * \n * Returns the cells which are movable in the given array of cells.\n */\nmxGraph.prototype.getFoldableCells = function(cells, collapse)\n{\n\treturn this.model.filterCells(cells, mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.isCellFoldable(cell, collapse);\n\t}));\n};\n\n/**\n * Function: isCellFoldable\n * \n * Returns true if the given cell is foldable. This implementation\n * returns true if the cell has at least one child and its style\n * does not specify <mxConstants.STYLE_FOLDABLE> to be 0.\n * \n * Parameters:\n * \n * cell - <mxCell> whose foldable state should be returned.\n */\nmxGraph.prototype.isCellFoldable = function(cell, collapse)\n{\n\tvar state = this.view.getState(cell);\n\tvar style = (state != null) ? state.style : this.getCellStyle(cell);\n\t\n\treturn this.model.getChildCount(cell) > 0 && style[mxConstants.STYLE_FOLDABLE] != 0;\n};\n\n/**\n * Function: isValidDropTarget\n *\n * Returns true if the given cell is a valid drop target for the specified\n * cells. If <splitEnabled> is true then this returns <isSplitTarget> for\n * the given arguments else it returns true if the cell is not collapsed\n * and its child count is greater than 0.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the possible drop target.\n * cells - <mxCells> that should be dropped into the target.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isValidDropTarget = function(cell, cells, evt)\n{\n\treturn cell != null && ((this.isSplitEnabled() &&\n\t\tthis.isSplitTarget(cell, cells, evt)) || (!this.model.isEdge(cell) &&\n\t\t(this.isSwimlane(cell) || (this.model.getChildCount(cell) > 0 &&\n\t\t!this.isCellCollapsed(cell)))));\n};\n\n/**\n * Function: isSplitTarget\n *\n * Returns true if the given edge may be splitted into two edges with the\n * given cell as a new terminal between the two.\n * \n * Parameters:\n * \n * target - <mxCell> that represents the edge to be splitted.\n * cells - <mxCells> that should split the edge.\n * evt - Mouseevent that triggered the invocation.\n */\nmxGraph.prototype.isSplitTarget = function(target, cells, evt)\n{\n\tif (this.model.isEdge(target) && cells != null && cells.length == 1 &&\n\t\tthis.isCellConnectable(cells[0]) && this.getEdgeValidationError(target,\n\t\t\tthis.model.getTerminal(target, true), cells[0]) == null)\n\t{\n\t\tvar src = this.model.getTerminal(target, true);\n\t\tvar trg = this.model.getTerminal(target, false);\n\n\t\treturn (!this.model.isAncestor(cells[0], src) &&\n\t\t\t\t!this.model.isAncestor(cells[0], trg));\n\t}\n\n\treturn false;\n};\n\n/**\n * Function: getDropTarget\n * \n * Returns the given cell if it is a drop target for the given cells or the\n * nearest ancestor that may be used as a drop target for the given cells.\n * If the given array contains a swimlane and <swimlaneNesting> is false\n * then this always returns null. If no cell is given, then the bottommost\n * swimlane at the location of the given event is returned.\n * \n * This function should only be used if <isDropEnabled> returns true.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> which are to be dropped onto the target.\n * evt - Mouseevent for the drag and drop.\n * cell - <mxCell> that is under the mousepointer.\n * clone - Optional boolean to indicate of cells will be cloned.\n */\nmxGraph.prototype.getDropTarget = function(cells, evt, cell, clone)\n{\n\tif (!this.isSwimlaneNesting())\n\t{\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (this.isSwimlane(cells[i]))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar pt = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\tpt.x -= this.panDx;\n\tpt.y -= this.panDy;\n\tvar swimlane = this.getSwimlaneAt(pt.x, pt.y);\n\t\n\tif (cell == null)\n\t{\n\t\tcell = swimlane;\n\t}\n\telse if (swimlane != null)\n\t{\n\t\t// Checks if the cell is an ancestor of the swimlane\n\t\t// under the mouse and uses the swimlane in that case\n\t\tvar tmp = this.model.getParent(swimlane);\n\t\t\n\t\twhile (tmp != null && this.isSwimlane(tmp) && tmp != cell)\n\t\t{\n\t\t\ttmp = this.model.getParent(tmp);\n\t\t}\n\t\t\n\t\tif (tmp == cell)\n\t\t{\n\t\t\tcell = swimlane;\n\t\t}\n\t}\n\t\n\twhile (cell != null && !this.isValidDropTarget(cell, cells, evt) &&\n\t\t!this.model.isLayer(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\t// Checks if parent is dropped into child if not cloning\n\tif (clone == null || !clone)\n\t{\n\t\tvar parent = cell;\n\t\t\n\t\twhile (parent != null && mxUtils.indexOf(cells, parent) < 0)\n\t\t{\n\t\t\tparent = this.model.getParent(parent);\n\t\t}\n\t}\n\n\treturn (!this.model.isLayer(cell) && parent == null) ? cell : null;\n};\n\n/**\n * Group: Cell retrieval\n */\n\n/**\n * Function: getDefaultParent\n * \n * Returns <defaultParent> or <mxGraphView.currentRoot> or the first child\n * child of <mxGraphModel.root> if both are null. The value returned by\n * this function should be used as the parent for new cells (aka default\n * layer).\n */\nmxGraph.prototype.getDefaultParent = function()\n{\n\tvar parent = this.getCurrentRoot();\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.defaultParent;\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tvar root = this.model.getRoot();\n\t\t\tparent = this.model.getChildAt(root, 0);\n\t\t}\n\t}\n\t\n\treturn parent;\n};\n\n/**\n * Function: setDefaultParent\n * \n * Sets the <defaultParent> to the given cell. Set this to null to return\n * the first child of the root in getDefaultParent.\n */\nmxGraph.prototype.setDefaultParent = function(cell)\n{\n\tthis.defaultParent = cell;\n};\n\n/**\n * Function: getSwimlane\n * \n * Returns the nearest ancestor of the given cell which is a swimlane, or\n * the given cell, if it is itself a swimlane.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the ancestor swimlane should be returned.\n */\nmxGraph.prototype.getSwimlane = function(cell)\n{\n\twhile (cell != null && !this.isSwimlane(cell))\n\t{\n\t\tcell = this.model.getParent(cell);\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: getSwimlaneAt\n * \n * Returns the bottom-most swimlane that intersects the given point (x, y)\n * in the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.getSwimlaneAt = function (x, y, parent)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getSwimlaneAt(x, y, child);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isSwimlane(child))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn child;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: getCellAt\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy starting at the given parent. This will also return\n * swimlanes if the given location intersects the content area of the\n * swimlane. If this is not desired, then the <hitsSwimlaneContent> may be\n * used if the returned cell is a swimlane to determine if the location\n * is inside the content area or on the actual title of the swimlane.\n * \n * Parameters:\n * \n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * vertices - Optional boolean indicating if vertices should be returned.\n * Default is true.\n * edges - Optional boolean indicating if edges should be returned. Default\n * is true.\n * ignoreFn - Optional function that returns true if cell should be ignored.\n * The function is passed the cell state and the x and y parameter.\n */\nmxGraph.prototype.getCellAt = function(x, y, parent, vertices, edges, ignoreFn)\n{\n\tvertices = (vertices != null) ? vertices : true;\n\tedges = (edges != null) ? edges : true;\n\n\tif (parent == null)\n\t{\n\t\tparent = this.getCurrentRoot();\n\t\t\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getModel().getRoot();\n\t\t}\n\t}\n\n\tif (parent != null)\n\t{\n\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\n\t\tfor (var i = childCount - 1; i >= 0; i--)\n\t\t{\n\t\t\tvar cell = this.model.getChildAt(parent, i);\n\t\t\tvar result = this.getCellAt(x, y, cell, vertices, edges, ignoreFn);\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if (this.isCellVisible(cell) && (edges && this.model.isEdge(cell) ||\n\t\t\t\tvertices && this.model.isVertex(cell)))\n\t\t\t{\n\t\t\t\tvar state = this.view.getState(cell);\n\n\t\t\t\tif (state != null && (ignoreFn == null || !ignoreFn(state, x, y)) &&\n\t\t\t\t\tthis.intersects(state, x, y))\n\t\t\t\t{\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: intersects\n * \n * Returns the bottom-most cell that intersects the given point (x, y) in\n * the cell hierarchy that starts at the given parent.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the cell state.\n * x - X-coordinate of the location to be checked.\n * y - Y-coordinate of the location to be checked.\n */\nmxGraph.prototype.intersects = function(state, x, y)\n{\n\tif (state != null)\n\t{\n\t\tvar pts = state.absolutePoints;\n\n\t\tif (pts != null)\n\t\t{\n\t\t\tvar t2 = this.tolerance * this.tolerance;\n\t\t\tvar pt = pts[0];\n\t\t\t\n\t\t\tfor (var i = 1; i < pts.length; i++)\n\t\t\t{\n\t\t\t\tvar next = pts[i];\n\t\t\t\tvar dist = mxUtils.ptSegDistSq(pt.x, pt.y, next.x, next.y, x, y);\n\t\t\t\t\n\t\t\t\tif (dist <= t2)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tpt = next;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(x, y), cos, sin, cx);\n\t\t\t\tx = pt.x;\n\t\t\t\ty = pt.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (mxUtils.contains(state, x, y))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: hitsSwimlaneContent\n * \n * Returns true if the given coordinate pair is inside the content\n * are of the given swimlane.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that specifies the swimlane.\n * x - X-coordinate of the mouse event.\n * y - Y-coordinate of the mouse event.\n */\nmxGraph.prototype.hitsSwimlaneContent = function(swimlane, x, y)\n{\n\tvar state = this.getView().getState(swimlane);\n\tvar size = this.getStartSize(swimlane);\n\t\n\tif (state != null)\n\t{\n\t\tvar scale = this.getView().getScale();\n\t\tx -= state.x;\n\t\ty -= state.y;\n\t\t\n\t\tif (size.width > 0 && x > 0 && x > size.width * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse if (size.height > 0 && y > 0 && y > size.height * scale)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: getChildVertices\n * \n * Returns the visible child vertices of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n */\nmxGraph.prototype.getChildVertices = function(parent)\n{\n\treturn this.getChildCells(parent, true, false);\n};\n\t\n/**\n * Function: getChildEdges\n * \n * Returns the visible child edges of the given parent.\n * \n * Parameters:\n * \n * parent - <mxCell> whose child vertices should be returned.\n */\nmxGraph.prototype.getChildEdges = function(parent)\n{\n\treturn this.getChildCells(parent, false, true);\n};\n\n/**\n * Function: getChildCells\n * \n * Returns the visible child vertices or edges in the given parent. If\n * vertices and edges is false, then all children are returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be returned.\n * vertices - Optional boolean that specifies if child vertices should\n * be returned. Default is false.\n * edges - Optional boolean that specifies if child edges should\n * be returned. Default is false.\n */\nmxGraph.prototype.getChildCells = function(parent, vertices, edges)\n{\n\tparent = (parent != null) ? parent : this.getDefaultParent();\n\tvertices = (vertices != null) ? vertices : false;\n\tedges = (edges != null) ? edges : false;\n\n\tvar cells = this.model.getChildCells(parent, vertices, edges);\n\tvar result = [];\n\n\t// Filters out the non-visible child cells\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\tif (this.isCellVisible(cells[i]))\n\t\t{\n\t\t\tresult.push(cells[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\t\n/**\n * Function: getConnections\n * \n * Returns all visible edges connected to the given cell without loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose connections should be returned.\n * parent - Optional parent of the opposite end for a connection to be\n * returned.\n */\nmxGraph.prototype.getConnections = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, true, false);\n};\n\t\n/**\n * Function: getIncomingEdges\n * \n * Returns the visible incoming edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose incoming edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getIncomingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, true, false, false);\n};\n\t\n/**\n * Function: getOutgoingEdges\n * \n * Returns the visible outgoing edges for the given cell. If the optional\n * parent argument is specified, then only child edges of the given parent\n * are returned.\n * \n * Parameters:\n * \n * cell - <mxCell> whose outgoing edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n */\nmxGraph.prototype.getOutgoingEdges = function(cell, parent)\n{\n\treturn this.getEdges(cell, parent, false, true, false);\n};\n\t\n/**\n * Function: getEdges\n * \n * Returns the incoming and/or outgoing edges for the given cell.\n * If the optional parent argument is specified, then only edges are returned\n * where the opposite is in the given parent cell. If at least one of incoming\n * or outgoing is true, then loops are ignored, if both are false, then all\n * edges connected to the given cell are returned including loops.\n * \n * Parameters:\n * \n * cell - <mxCell> whose edges should be returned.\n * parent - Optional parent of the opposite end for an edge to be\n * returned.\n * incoming - Optional boolean that specifies if incoming edges should\n * be included in the result. Default is true.\n * outgoing - Optional boolean that specifies if outgoing edges should\n * be included in the result. Default is true.\n * includeLoops - Optional boolean that specifies if loops should be\n * included in the result. Default is true.\n * recurse - Optional boolean the specifies if the parent specified only \n * need be an ancestral parent, true, or the direct parent, false.\n * Default is false\n */\nmxGraph.prototype.getEdges = function(cell, parent, incoming, outgoing, includeLoops, recurse)\n{\n\tincoming = (incoming != null) ? incoming : true;\n\toutgoing = (outgoing != null) ? outgoing : true;\n\tincludeLoops = (includeLoops != null) ? includeLoops : true;\n\trecurse = (recurse != null) ? recurse : false;\n\t\n\tvar edges = [];\n\tvar isCollapsed = this.isCellCollapsed(cell);\n\tvar childCount = this.model.getChildCount(cell);\n\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = this.model.getChildAt(cell, i);\n\n\t\tif (isCollapsed || !this.isCellVisible(child))\n\t\t{\n\t\t\tedges = edges.concat(this.model.getEdges(child, incoming, outgoing));\n\t\t}\n\t}\n\n\tedges = edges.concat(this.model.getEdges(cell, incoming, outgoing));\n\tvar result = [];\n\t\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((includeLoops && source == target) || ((source != target) && ((incoming &&\n\t\t\ttarget == cell && (parent == null || this.isValidAncestor(source, parent, recurse))) ||\n\t\t\t(outgoing && source == cell && (parent == null ||\n\t\t\t\t\tthis.isValidAncestor(target, parent, recurse))))))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isValidAncestor\n * \n * Returns whether or not the specified parent is a valid\n * ancestor of the specified cell, either direct or indirectly\n * based on whether ancestor recursion is enabled.\n * \n * Parameters:\n * \n * cell - <mxCell> the possible child cell\n * parent - <mxCell> the possible parent cell\n * recurse - boolean whether or not to recurse the child ancestors\n */\nmxGraph.prototype.isValidAncestor = function(cell, parent, recurse)\n{\n\treturn (recurse ? this.model.isAncestor(parent, cell) : this.model\n\t\t\t.getParent(cell) == parent);\n};\n\n/**\n * Function: getOpposites\n * \n * Returns all distinct visible opposite cells for the specified terminal\n * on the given edges.\n * \n * Parameters:\n * \n * edges - Array of <mxCells> that contains the edges whose opposite\n * terminals should be returned.\n * terminal - Terminal that specifies the end whose opposite should be\n * returned.\n * source - Optional boolean that specifies if source terminals should be\n * included in the result. Default is true.\n * targets - Optional boolean that specifies if targer terminals should be\n * included in the result. Default is true.\n */\nmxGraph.prototype.getOpposites = function(edges, terminal, sources, targets)\n{\n\tsources = (sources != null) ? sources : true;\n\ttargets = (targets != null) ? targets : true;\n\t\n\tvar terminals = [];\n\t\n\t// Fast lookup to avoid duplicates in terminals array\n\tvar dict = new mxDictionary();\n\t\n\tif (edges != null)\n\t{\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar state = this.view.getState(edges[i]);\n\t\t\t\n\t\t\tvar source = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\t\tvar target = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\t\t\t\n\t\t\t// Checks if the terminal is the source of the edge and if the\n\t\t\t// target should be stored in the result\n\t\t\tif (source == terminal && target != null && target != terminal && targets)\n\t\t\t{\n\t\t\t\tif (!dict.get(target))\n\t\t\t\t{\n\t\t\t\t\tdict.put(target, true);\n\t\t\t\t\tterminals.push(target);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Checks if the terminal is the taget of the edge and if the\n\t\t\t// source should be stored in the result\n\t\t\telse if (target == terminal && source != null && source != terminal && sources)\n\t\t\t{\n\t\t\t\tif (!dict.get(source))\n\t\t\t\t{\n\t\t\t\t\tdict.put(source, true);\n\t\t\t\t\tterminals.push(source);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn terminals;\n};\n\n/**\n * Function: getEdgesBetween\n * \n * Returns the edges between the given source and target. This takes into\n * account collapsed and invisible cells and returns the connected edges\n * as displayed on the screen.\n * \n * Parameters:\n * \n * source -\n * target -\n * directed -\n */\nmxGraph.prototype.getEdgesBetween = function(source, target, directed)\n{\n\tdirected = (directed != null) ? directed : false;\n\tvar edges = this.getEdges(source);\n\tvar result = [];\n\n\t// Checks if the edge is connected to the correct\n\t// cell and returns the first match\n\tfor (var i = 0; i < edges.length; i++)\n\t{\n\t\tvar state = this.view.getState(edges[i]);\n\t\t\n\t\tvar src = (state != null) ? state.getVisibleTerminal(true) : this.view.getVisibleTerminal(edges[i], true);\n\t\tvar trg = (state != null) ? state.getVisibleTerminal(false) : this.view.getVisibleTerminal(edges[i], false);\n\n\t\tif ((src == source && trg == target) || (!directed && src == target && trg == source))\n\t\t{\n\t\t\tresult.push(edges[i]);\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns an <mxPoint> representing the given event in the unscaled,\n * non-translated coordinate space of <container> and applies the grid.\n * \n * Parameters:\n * \n * evt - Mousevent that contains the mouse pointer location.\n * addOffset - Optional boolean that specifies if the position should be\n * offset by half of the <gridSize>. Default is true.\n */\n mxGraph.prototype.getPointForEvent = function(evt, addOffset)\n {\n\tvar p = mxUtils.convertPoint(this.container,\n\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\n\tvar s = this.view.scale;\n\tvar tr = this.view.translate;\n\tvar off = (addOffset != false) ? this.gridSize / 2 : 0;\n\t\n\tp.x = this.snap(p.x / s - tr.x - off);\n\tp.y = this.snap(p.y / s - tr.y - off);\n\t\n\treturn p;\n };\n\n/**\n * Function: getCells\n * \n * Returns the child vertices and edges of the given parent that are contained\n * in the given rectangle. The result is added to the optional result array,\n * which is returned. If no result array is specified then a new array is\n * created and returned.\n * \n * Parameters:\n * \n * x - X-coordinate of the rectangle.\n * y - Y-coordinate of the rectangle.\n * width - Width of the rectangle.\n * height - Height of the rectangle.\n * parent - <mxCell> that should be used as the root of the recursion.\n * Default is current root of the view or the root of the model.\n * result - Optional array to store the result in.\n */\nmxGraph.prototype.getCells = function(x, y, width, height, parent, result)\n{\n\tresult = (result != null) ? result : [];\n\t\n\tif (width > 0 || height > 0)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar right = x + width;\n\t\tvar bottom = y + height;\n\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getCurrentRoot();\n\t\t\t\n\t\t\tif (parent == null)\n\t\t\t{\n\t\t\t\tparent = model.getRoot();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(cell);\n\t\t\t\t\n\t\t\t\tif (state != null && this.isCellVisible(cell))\n\t\t\t\t{\n\t\t\t\t\tvar deg = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0;\n\t\t\t\t\tvar box = state;\n\t\t\t\t\t\n\t\t\t\t\tif (deg != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbox = mxUtils.getBoundingBox(box, deg);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif ((model.isEdge(cell) || model.isVertex(cell)) &&\n\t\t\t\t\t\tbox.x >= x && box.y + box.height <= bottom &&\n\t\t\t\t\t\tbox.y >= y && box.x + box.width <= right)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(cell);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.getCells(x, y, width, height, cell, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsBeyond\n * \n * Returns the children of the given parent that are contained in the\n * halfpane from the given point (x0, y0) rightwards or downwards\n * depending on rightHalfpane and bottomHalfpane.\n * \n * Parameters:\n * \n * x0 - X-coordinate of the origin.\n * y0 - Y-coordinate of the origin.\n * parent - Optional <mxCell> whose children should be checked. Default is\n * <defaultParent>.\n * rightHalfpane - Boolean indicating if the cells in the right halfpane\n * from the origin should be returned.\n * bottomHalfpane - Boolean indicating if the cells in the bottom halfpane\n * from the origin should be returned.\n */\nmxGraph.prototype.getCellsBeyond = function(x0, y0, parent, rightHalfpane, bottomHalfpane)\n{\n\tvar result = [];\n\t\n\tif (rightHalfpane || bottomHalfpane)\n\t{\n\t\tif (parent == null)\n\t\t{\n\t\t\tparent = this.getDefaultParent();\n\t\t}\n\t\t\n\t\tif (parent != null)\n\t\t{\n\t\t\tvar childCount = this.model.getChildCount(parent);\n\t\t\t\n\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child = this.model.getChildAt(parent, i);\n\t\t\t\tvar state = this.view.getState(child);\n\t\t\t\t\n\t\t\t\tif (this.isCellVisible(child) && state != null)\n\t\t\t\t{\n\t\t\t\t\tif ((!rightHalfpane || state.x >= x0) &&\n\t\t\t\t\t\t(!bottomHalfpane || state.y >= y0))\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: findTreeRoots\n * \n * Returns all children in the given parent which do not have incoming\n * edges. If the result is empty then the with the greatest difference\n * between incoming and outgoing edges is returned.\n * \n * Parameters:\n * \n * parent - <mxCell> whose children should be checked.\n * isolate - Optional boolean that specifies if edges should be ignored if\n * the opposite end is not a child of the given parent cell. Default is\n * false.\n * invert - Optional boolean that specifies if outgoing or incoming edges\n * should be counted for a tree root. If false then outgoing edges will be\n * counted. Default is false.\n */\nmxGraph.prototype.findTreeRoots = function(parent, isolate, invert)\n{\n\tisolate = (isolate != null) ? isolate : false;\n\tinvert = (invert != null) ? invert : false;\n\tvar roots = [];\n\t\n\tif (parent != null)\n\t{\n\t\tvar model = this.getModel();\n\t\tvar childCount = model.getChildCount(parent);\n\t\tvar best = null;\n\t\tvar maxDiff = 0;\n\t\t\n\t\tfor (var i=0; i<childCount; i++)\n\t\t{\n\t\t\tvar cell = model.getChildAt(parent, i);\n\t\t\t\n\t\t\tif (this.model.isVertex(cell) && this.isCellVisible(cell))\n\t\t\t{\n\t\t\t\tvar conns = this.getConnections(cell, (isolate) ? parent : null);\n\t\t\t\tvar fanOut = 0;\n\t\t\t\tvar fanIn = 0;\n\t\t\t\t\n\t\t\t\tfor (var j = 0; j < conns.length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar src = this.view.getVisibleTerminal(conns[j], true);\n\n                    if (src == cell)\n                    {\n                        fanOut++;\n                    }\n                    else\n                    {\n                        fanIn++;\n                    }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((invert && fanOut == 0 && fanIn > 0) ||\n\t\t\t\t\t(!invert && fanIn == 0 && fanOut > 0))\n\t\t\t\t{\n\t\t\t\t\troots.push(cell);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar diff = (invert) ? fanIn - fanOut : fanOut - fanIn;\n\t\t\t\t\n\t\t\t\tif (diff > maxDiff)\n\t\t\t\t{\n\t\t\t\t\tmaxDiff = diff;\n\t\t\t\t\tbest = cell;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (roots.length == 0 && best != null)\n\t\t{\n\t\t\troots.push(best);\n\t\t}\n\t}\n\t\n\treturn roots;\n};\n\n/**\n * Function: traverse\n * \n * Traverses the (directed) graph invoking the given function for each\n * visited vertex and edge. The function is invoked with the current vertex\n * and the incoming edge as a parameter. This implementation makes sure\n * each vertex is only visited once. The function may return false if the\n * traversal should stop at the given vertex.\n * \n * Example:\n * \n * (code)\n * mxLog.show();\n * var cell = graph.getSelectionCell();\n * graph.traverse(cell, false, function(vertex, edge)\n * {\n *   mxLog.debug(graph.getLabel(vertex));\n * });\n * (end)\n * \n * Parameters:\n * \n * vertex - <mxCell> that represents the vertex where the traversal starts.\n * directed - Optional boolean indicating if edges should only be traversed\n * from source to target. Default is true.\n * func - Visitor function that takes the current vertex and the incoming\n * edge as arguments. The traversal stops if the function returns false.\n * edge - Optional <mxCell> that represents the incoming edge. This is\n * null for the first step of the traversal.\n * visited - Optional <mxDictionary> from cells to true for the visited cells.\n * inverse - Optional boolean to traverse in inverse direction. Default is false.\n * This is ignored if directed is false.\n */\nmxGraph.prototype.traverse = function(vertex, directed, func, edge, visited, inverse)\n{\n\tif (func != null && vertex != null)\n\t{\n\t\tdirected = (directed != null) ? directed : true;\n\t\tinverse = (inverse != null) ? inverse : false;\n\t\tvisited = visited || new mxDictionary();\n\t\t\n\t\tif (!visited.get(vertex))\n\t\t{\n\t\t\tvisited.put(vertex, true);\n\t\t\tvar result = func(vertex, edge);\n\t\t\t\n\t\t\tif (result == null || result)\n\t\t\t{\n\t\t\t\tvar edgeCount = this.model.getEdgeCount(vertex);\n\t\t\t\t\n\t\t\t\tif (edgeCount > 0)\n\t\t\t\t{\n\t\t\t\t\tfor (var i = 0; i < edgeCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar e = this.model.getEdgeAt(vertex, i);\n\t\t\t\t\t\tvar isSource = this.model.getTerminal(e, true) == vertex;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (!directed || (!inverse == isSource))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar next = this.model.getTerminal(e, !isSource);\n\t\t\t\t\t\t\tthis.traverse(next, directed, func, e, visited, inverse);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Group: Selection\n */\n\n/**\n * Function: isCellSelected\n * \n * Returns true if the given cell is selected.\n * \n * Parameters:\n * \n * cell - <mxCell> for which the selection state should be returned.\n */\nmxGraph.prototype.isCellSelected = function(cell)\n{\n\treturn this.getSelectionModel().isSelected(cell);\n};\n\n/**\n * Function: isSelectionEmpty\n * \n * Returns true if the selection is empty.\n */\nmxGraph.prototype.isSelectionEmpty = function()\n{\n\treturn this.getSelectionModel().isEmpty();\n};\n\n/**\n * Function: clearSelection\n * \n * Clears the selection using <mxGraphSelectionModel.clear>.\n */\nmxGraph.prototype.clearSelection = function()\n{\n\treturn this.getSelectionModel().clear();\n};\n\n/**\n * Function: getSelectionCount\n * \n * Returns the number of selected cells.\n */\nmxGraph.prototype.getSelectionCount = function()\n{\n\treturn this.getSelectionModel().cells.length;\n};\n\t\n/**\n * Function: getSelectionCell\n * \n * Returns the first cell from the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCell = function()\n{\n\treturn this.getSelectionModel().cells[0];\n};\n\n/**\n * Function: getSelectionCells\n * \n * Returns the array of selected <mxCells>.\n */\nmxGraph.prototype.getSelectionCells = function()\n{\n\treturn this.getSelectionModel().cells.slice();\n};\n\n/**\n * Function: setSelectionCell\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n */\nmxGraph.prototype.setSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().setCell(cell);\n};\n\n/**\n * Function: setSelectionCells\n * \n * Sets the selection cell.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n */\nmxGraph.prototype.setSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().setCells(cells);\n};\n\n/**\n * Function: addSelectionCell\n * \n * Adds the given cell to the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be add to the selection.\n */\nmxGraph.prototype.addSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().addCell(cell);\n};\n\n/**\n * Function: addSelectionCells\n * \n * Adds the given cells to the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be added to the selection.\n */\nmxGraph.prototype.addSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().addCells(cells);\n};\n\n/**\n * Function: removeSelectionCell\n * \n * Removes the given cell from the selection.\n * \n * Parameters:\n * \n * cell - <mxCell> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCell = function(cell)\n{\n\tthis.getSelectionModel().removeCell(cell);\n};\n\n/**\n * Function: removeSelectionCells\n * \n * Removes the given cells from the selection.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be removed from the selection.\n */\nmxGraph.prototype.removeSelectionCells = function(cells)\n{\n\tthis.getSelectionModel().removeCells(cells);\n};\n\n/**\n * Function: selectRegion\n * \n * Selects and returns the cells inside the given rectangle for the\n * specified event.\n * \n * Parameters:\n * \n * rect - <mxRectangle> that represents the region to be selected.\n * evt - Mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectRegion = function(rect, evt)\n{\n\tvar cells = this.getCells(rect.x, rect.y, rect.width, rect.height);\n\tthis.selectCellsForEvent(cells, evt);\n\t\n\treturn cells;\n};\n\n/**\n * Function: selectNextCell\n * \n * Selects the next cell.\n */\nmxGraph.prototype.selectNextCell = function()\n{\n\tthis.selectCell(true);\n};\n\n/**\n * Function: selectPreviousCell\n * \n * Selects the previous cell.\n */\nmxGraph.prototype.selectPreviousCell = function()\n{\n\tthis.selectCell();\n};\n\n/**\n * Function: selectParentCell\n * \n * Selects the parent cell.\n */\nmxGraph.prototype.selectParentCell = function()\n{\n\tthis.selectCell(false, true);\n};\n\n/**\n * Function: selectChildCell\n * \n * Selects the first child cell.\n */\nmxGraph.prototype.selectChildCell = function()\n{\n\tthis.selectCell(false, false, true);\n};\n\n/**\n * Function: selectCell\n * \n * Selects the next, parent, first child or previous cell, if all arguments\n * are false.\n * \n * Parameters:\n * \n * isNext - Boolean indicating if the next cell should be selected.\n * isParent - Boolean indicating if the parent cell should be selected.\n * isChild - Boolean indicating if the first child cell should be selected.\n */\nmxGraph.prototype.selectCell = function(isNext, isParent, isChild)\n{\n\tvar sel = this.selectionModel;\n\tvar cell = (sel.cells.length > 0) ? sel.cells[0] : null;\n\t\n\tif (sel.cells.length > 1)\n\t{\n\t\tsel.clear();\n\t}\n\t\n\tvar parent = (cell != null) ?\n\t\tthis.model.getParent(cell) :\n\t\tthis.getDefaultParent();\n\t\n\tvar childCount = this.model.getChildCount(parent);\n\t\n\tif (cell == null && childCount > 0)\n\t{\n\t\tvar child = this.model.getChildAt(parent, 0);\n\t\tthis.setSelectionCell(child);\n\t}\n\telse if ((cell == null || isParent) &&\n\t\tthis.view.getState(parent) != null &&\n\t\tthis.model.getGeometry(parent) != null)\n\t{\n\t\tif (this.getCurrentRoot() != parent)\n\t\t{\n\t\t\tthis.setSelectionCell(parent);\n\t\t}\n\t}\n\telse if (cell != null && isChild)\n\t{\n\t\tvar tmp = this.model.getChildCount(cell);\n\t\t\n\t\tif (tmp > 0)\n\t\t{\n\t\t\tvar child = this.model.getChildAt(cell, 0);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n\telse if (childCount > 0)\n\t{\n\t\tvar i = parent.getIndex(cell);\n\t\t\n\t\tif (isNext)\n\t\t{\n\t\t\ti++;\n\t\t\tvar child = this.model.getChildAt(parent, i % childCount);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ti--;\n\t\t\tvar index =  (i < 0) ? childCount - 1 : i;\n\t\t\tvar child = this.model.getChildAt(parent, index);\n\t\t\tthis.setSelectionCell(child);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectAll\n * \n * Selects all children of the given parent cell or the children of the\n * default parent if no parent is specified. To select leaf vertices and/or\n * edges use <selectCells>.\n * \n * Parameters:\n * \n * parent - Optional <mxCell> whose children should be selected.\n * Default is <defaultParent>.\n * descendants - Optional boolean specifying whether all descendants should be\n * selected. Default is false.\n */\nmxGraph.prototype.selectAll = function(parent, descendants)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar cells = (descendants) ? this.model.filterDescendants(function(cell)\n\t{\n\t\treturn cell != parent;\n\t}, parent) : this.model.getChildren(parent);\n\t\n\tif (cells != null)\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectVertices = function(parent)\n{\n\tthis.selectCells(true, false, parent);\n};\n\n/**\n * Function: selectVertices\n * \n * Select all vertices inside the given parent or the default parent.\n */\nmxGraph.prototype.selectEdges = function(parent)\n{\n\tthis.selectCells(false, true, parent);\n};\n\n/**\n * Function: selectCells\n * \n * Selects all vertices and/or edges depending on the given boolean\n * arguments recursively, starting at the given parent or the default\n * parent if no parent is specified. Use <selectAll> to select all cells.\n * For vertices, only cells with no children are selected.\n * \n * Parameters:\n * \n * vertices - Boolean indicating if vertices should be selected.\n * edges - Boolean indicating if edges should be selected.\n * parent - Optional <mxCell> that acts as the root of the recursion.\n * Default is <defaultParent>.\n */\nmxGraph.prototype.selectCells = function(vertices, edges, parent)\n{\n\tparent = parent || this.getDefaultParent();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.view.getState(cell) != null &&\n\t\t\t((this.model.getChildCount(cell) == 0 && this.model.isVertex(cell) && vertices\n\t\t\t&& !this.model.isEdge(this.model.getParent(cell))) ||\n\t\t\t(this.model.isEdge(cell) && edges));\n\t});\n\t\n\tvar cells = this.model.filterDescendants(filter, parent);\n\tthis.setSelectionCells(cells);\n};\n\n/**\n * Function: selectCellForEvent\n * \n * Selects the given cell by either adding it to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cell - <mxCell> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellForEvent = function(cell, evt)\n{\n\tvar isSelected = this.isCellSelected(cell);\n\t\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tif (isSelected)\n\t\t{\n\t\t\tthis.removeSelectionCell(cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.addSelectionCell(cell);\n\t\t}\n\t}\n\telse if (!isSelected || this.getSelectionCount() != 1)\n\t{\n\t\tthis.setSelectionCell(cell);\n\t}\n};\n\n/**\n * Function: selectCellsForEvent\n * \n * Selects the given cells by either adding them to the selection or\n * replacing the selection depending on whether the given mouse event is a\n * toggle event.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> to be selected.\n * evt - Optional mouseevent that triggered the selection.\n */\nmxGraph.prototype.selectCellsForEvent = function(cells, evt)\n{\n\tif (this.isToggleEvent(evt))\n\t{\n\t\tthis.addSelectionCells(cells);\n\t}\n\telse\n\t{\n\t\tthis.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Group: Selection state\n */\n\n/**\n * Function: createHandler\n * \n * Creates a new handler for the given cell state. This implementation\n * returns a new <mxEdgeHandler> of the corresponding cell is an edge,\n * otherwise it returns an <mxVertexHandler>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose handler should be created.\n */\nmxGraph.prototype.createHandler = function(state)\n{\n\tvar result = null;\n\t\n\tif (state != null)\n\t{\n\t\tif (this.model.isEdge(state.cell))\n\t\t{\n\t\t\tvar source = state.getVisibleTerminalState(true);\n\t\t\tvar target = state.getVisibleTerminalState(false);\n\t\t\tvar geo = this.getCellGeometry(state.cell);\n\t\t\t\n\t\t\tvar edgeStyle = this.view.getEdgeStyle(state, (geo != null) ? geo.points : null, source, target);\n\t\t\tresult = this.createEdgeHandler(state, edgeStyle);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tresult = this.createVertexHandler(state);\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createVertexHandler\n * \n * Hooks to create a new <mxVertexHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createVertexHandler = function(state)\n{\n\treturn new mxVertexHandler(state);\n};\n\n/**\n * Function: createEdgeHandler\n * \n * Hooks to create a new <mxEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeHandler = function(state, edgeStyle)\n{\n\tvar result = null;\n\t\n\tif (edgeStyle == mxEdgeStyle.Loop ||\n\t\tedgeStyle == mxEdgeStyle.ElbowConnector ||\n\t\tedgeStyle == mxEdgeStyle.SideToSide ||\n\t\tedgeStyle == mxEdgeStyle.TopToBottom)\n\t{\n\t\tresult = this.createElbowEdgeHandler(state);\n\t}\n\telse if (edgeStyle == mxEdgeStyle.SegmentConnector || \n\t\t\tedgeStyle == mxEdgeStyle.OrthConnector)\n\t{\n\t\tresult = this.createEdgeSegmentHandler(state);\n\t}\n\telse\n\t{\n\t\tresult = new mxEdgeHandler(state);\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createEdgeSegmentHandler\n * \n * Hooks to create a new <mxEdgeSegmentHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createEdgeSegmentHandler = function(state)\n{\n\treturn new mxEdgeSegmentHandler(state);\n};\n\n/**\n * Function: createElbowEdgeHandler\n * \n * Hooks to create a new <mxElbowEdgeHandler> for the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> to create the handler for.\n */\nmxGraph.prototype.createElbowEdgeHandler = function(state)\n{\n\treturn new mxElbowEdgeHandler(state);\n};\n\n/**\n * Group: Graph events\n */\n\n/**\n * Function: addMouseListener\n * \n * Adds a listener to the graph event dispatch loop. The listener\n * must implement the mouseDown, mouseMove and mouseUp methods\n * as shown in the <mxMouseEvent> class.\n * \n * Parameters:\n * \n * listener - Listener to be added to the graph event listeners.\n */\nmxGraph.prototype.addMouseListener = function(listener)\n{\n\tif (this.mouseListeners == null)\n\t{\n\t\tthis.mouseListeners = [];\n\t}\n\t\n\tthis.mouseListeners.push(listener);\n};\n\n/**\n * Function: removeMouseListener\n * \n * Removes the specified graph listener.\n * \n * Parameters:\n * \n * listener - Listener to be removed from the graph event listeners.\n */\nmxGraph.prototype.removeMouseListener = function(listener)\n{\n\tif (this.mouseListeners != null)\n\t{\n\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t{\n\t\t\tif (this.mouseListeners[i] == listener)\n\t\t\t{\n\t\t\t\tthis.mouseListeners.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: updateMouseEvent\n * \n * Sets the graphX and graphY properties if the given <mxMouseEvent> if\n * required and returned the event.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> to be updated.\n * evtName - Name of the mouse event.\n */\nmxGraph.prototype.updateMouseEvent = function(me, evtName)\n{\n\tif (me.graphX == null || me.graphY == null)\n\t{\n\t\tvar pt = mxUtils.convertPoint(this.container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x - this.panDx;\n\t\tme.graphY = pt.y - this.panDy;\n\t\t\n\t\t// Searches for rectangles using method if native hit detection is disabled on shape\n\t\tif (me.getCell() == null && this.isMouseDown && evtName == mxEvent.MOUSE_MOVE)\n\t\t{\n\t\t\tme.state = this.view.getState(this.getCellAt(pt.x, pt.y, null, null, null, function(state)\n\t\t\t{\n\t\t\t\treturn state.shape == null || state.shape.paintBackground != mxRectangleShape.prototype.paintBackground ||\n\t\t\t\t\tmxUtils.getValue(state.style, mxConstants.STYLE_POINTER_EVENTS, '1') == '1' ||\n\t\t\t\t\t(state.shape.fill != null && state.shape.fill != mxConstants.NONE);\n\t\t\t}));\n\t\t}\n\t}\n\t\n\treturn me;\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the state for the given touch event.\n */\nmxGraph.prototype.getStateForTouchEvent = function(evt)\n{\n\tvar x = mxEvent.getClientX(evt);\n\tvar y = mxEvent.getClientY(evt);\n\t\n\t// Dispatches the drop event to the graph which\n\t// consumes and executes the source function\n\tvar pt = mxUtils.convertPoint(this.container, x, y);\n\n\treturn this.view.getState(this.getCellAt(pt.x, pt.y));\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>.\n */\nmxGraph.prototype.isEventIgnored = function(evtName, me, sender)\n{\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\tvar result = false;\n\n\t// Drops events that are fired more than once\n\tif (me.getEvent() == this.lastEvent)\n\t{\n\t\tresult = true;\n\t}\n\telse\n\t{\n\t\tthis.lastEvent = me.getEvent();\n\t}\n\n\t// Installs event listeners to capture the complete gesture from the event source\n\t// for non-MS touch events as a workaround for all events for the same geture being\n\t// fired from the event source even if that was removed from the DOM.\n\tif (this.eventSource != null && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tmxEvent.removeGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t\tthis.mouseMoveRedirect = null;\n\t\tthis.mouseUpRedirect = null;\n\t\tthis.eventSource = null;\n\t}\n\telse if (!mxClient.IS_GC && this.eventSource != null && me.getSource() != this.eventSource)\n\t{\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_TOUCH && evtName == mxEvent.MOUSE_DOWN && !mouseEvent && !mxEvent.isPenEvent(me.getEvent()))\n\t{\n\t\tthis.eventSource = me.getSource();\n\n\t\tthis.mouseMoveRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\tthis.mouseUpRedirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt, this.getStateForTouchEvent(evt)));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(this.eventSource, null, this.mouseMoveRedirect, this.mouseUpRedirect);\n\t}\n\n\t// Factored out the workarounds for FF to make it easier to override/remove\n\t// Note this method has side-effects!\n\tif (this.isSyntheticEventIgnored(evtName, me, sender))\n\t{\n\t\tresult = true;\n\t}\n\n\t// Never fires mouseUp/-Down for double clicks\n\tif (!mxEvent.isPopupTrigger(this.lastEvent) && evtName != mxEvent.MOUSE_MOVE && this.lastEvent.detail == 2)\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Filters out of sequence events or mixed event types during a gesture\n\tif (evtName == mxEvent.MOUSE_UP && this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = false;\n\t}\n\telse if (evtName == mxEvent.MOUSE_DOWN && !this.isMouseDown)\n\t{\n\t\tthis.isMouseDown = true;\n\t\tthis.isMouseTrigger = mouseEvent;\n\t}\n\t// Drops mouse events that are fired during touch gestures as a workaround for Webkit\n\t// and mouse events that are not in sync with the current internal button state\n\telse if (!result && (((!mxClient.IS_FF || evtName != mxEvent.MOUSE_MOVE) &&\n\t\tthis.isMouseDown && this.isMouseTrigger != mouseEvent) ||\n\t\t(evtName == mxEvent.MOUSE_DOWN && this.isMouseDown) ||\n\t\t(evtName == mxEvent.MOUSE_UP && !this.isMouseDown)))\n\t{\n\t\tresult = true;\n\t}\n\t\n\tif (!result && evtName == mxEvent.MOUSE_DOWN)\n\t{\n\t\tthis.lastMouseX = me.getX();\n\t\tthis.lastMouseY = me.getY();\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isSyntheticEventIgnored\n * \n * Hook for ignoring synthetic mouse events after touchend in Firefox.\n */\nmxGraph.prototype.isSyntheticEventIgnored = function(evtName, me, sender)\n{\n\tvar result = false;\n\tvar mouseEvent = mxEvent.isMouseEvent(me.getEvent());\n\t\n\t// LATER: This does not cover all possible cases that can go wrong in FF\n\tif (this.ignoreMouseEvents && mouseEvent && evtName != mxEvent.MOUSE_MOVE)\n\t{\n\t\tthis.ignoreMouseEvents = evtName != mxEvent.MOUSE_UP;\n\t\tresult = true;\n\t}\n\telse if (mxClient.IS_FF && !mouseEvent && evtName == mxEvent.MOUSE_UP)\n\t{\n\t\tthis.ignoreMouseEvents = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: isEventSourceIgnored\n * \n * Returns true if the event should be ignored in <fireMouseEvent>. This\n * implementation returns true for select, option and input (if not of type\n * checkbox, radio, button, submit or file) event sources if the event is not\n * a mouse event or a left mouse button press event.\n * \n * Parameters:\n * \n * evtName - The name of the event.\n * me - <mxMouseEvent> that should be ignored.\n */\nmxGraph.prototype.isEventSourceIgnored = function(evtName, me)\n{\n\tvar source = me.getSource();\n\tvar name = (source.nodeName != null) ? source.nodeName.toLowerCase() : '';\n\tvar candidate = !mxEvent.isMouseEvent(me.getEvent()) || mxEvent.isLeftMouseButton(me.getEvent());\n\t\n\treturn evtName == mxEvent.MOUSE_DOWN && candidate && (name == 'select' || name == 'option' ||\n\t\t(name == 'input' && source.type != 'checkbox' && source.type != 'radio' &&\n\t\tsource.type != 'button' && source.type != 'submit' && source.type != 'file'));\n};\n\n/**\n * Function: getEventState\n * \n * Returns the <mxCellState> to be used when firing the mouse event for the\n * given state. This implementation returns the given state.\n * \n * Parameters:\n * \n * <mxCellState> - State whose event source should be returned.\n */\nmxGraph.prototype.getEventState = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: fireMouseEvent\n * \n * Dispatches the given event in the graph event dispatch loop. Possible\n * event names are <mxEvent.MOUSE_DOWN>, <mxEvent.MOUSE_MOVE> and\n * <mxEvent.MOUSE_UP>. All listeners are invoked for all events regardless\n * of the consumed state of the event.\n * \n * Parameters:\n * \n * evtName - String that specifies the type of event to be dispatched.\n * me - <mxMouseEvent> to be fired.\n * sender - Optional sender argument. Default is this.\n */\nmxGraph.prototype.fireMouseEvent = function(evtName, me, sender)\n{\n\tif (this.isEventSourceIgnored(evtName, me))\n\t{\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.hide();\n\t\t}\n\t\t\n\t\treturn;\n\t}\n\t\n\tif (sender == null)\n\t{\n\t\tsender = this;\n\t}\n\n\t// Updates the graph coordinates in the event\n\tme = this.updateMouseEvent(me, evtName);\n\n\t// Detects and processes double taps for touch-based devices which do not have native double click events\n\t// or where detection of double click is not always possible (quirks, IE10+). Note that this can only handle\n\t// double clicks on cells because the sequence of events in IE prevents detection on the background, it fires\n\t// two mouse ups, one of which without a cell but no mousedown for the second click which means we cannot\n\t// detect which mouseup(s) are part of the first click, ie we do not know when the first click ends.\n\tif ((!this.nativeDblClickEnabled && !mxEvent.isPopupTrigger(me.getEvent())) || (this.doubleTapEnabled &&\n\t\tmxClient.IS_TOUCH && (mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent()))))\n\t{\n\t\tvar currentTime = new Date().getTime();\n\t\t\n\t\t// NOTE: Second mouseDown for double click missing in quirks mode\n\t\tif ((!mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_DOWN) || (mxClient.IS_QUIRKS && evtName == mxEvent.MOUSE_UP && !this.fireDoubleClick))\n\t\t{\n\t\t\tif (this.lastTouchEvent != null && this.lastTouchEvent != me.getEvent() &&\n\t\t\t\tcurrentTime - this.lastTouchTime < this.doubleTapTimeout &&\n\t\t\t\tMath.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance &&\n\t\t\t\tthis.doubleClickCounter < 2)\n\t\t\t{\n\t\t\t\tthis.doubleClickCounter++;\n\t\t\t\tvar doubleClickFired = false;\n\t\t\t\t\n\t\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t{\n\t\t\t\t\tif (me.getCell() == this.lastTouchCell && this.lastTouchCell != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t\t\tvar cell = this.lastTouchCell;\n\t\t\t\t\t\tthis.lastTouchCell = null;\n\n\t\t\t\t\t\t// Fires native dblclick event via event source\n\t\t\t\t\t\t// NOTE: This fires two double click events on edges in quirks mode. While\n\t\t\t\t\t\t// trying to fix this, we realized that nativeDoubleClick can be disabled for\n\t\t\t\t\t\t// quirks and IE10+ (or we didn't find the case mentioned above where it\n\t\t\t\t\t\t// would not work), ie. all double clicks seem to be working without this.\n\t\t\t\t\t\tif (mxClient.IS_QUIRKS)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tme.getSource().fireEvent('ondblclick');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t\t\t\tdoubleClickFired = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.fireDoubleClick = true;\n\t\t\t\t\tthis.lastTouchTime = 0;\n\t\t\t\t}\n\n\t\t\t\t// Do not ignore mouse up in quirks in this case\n\t\t\t\tif (!mxClient.IS_QUIRKS || doubleClickFired)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.lastTouchEvent == null || this.lastTouchEvent != me.getEvent())\n\t\t\t{\n\t\t\t\tthis.lastTouchCell = me.getCell();\n\t\t\t\tthis.lastTouchX = me.getX();\n\t\t\t\tthis.lastTouchY = me.getY();\n\t\t\t\tthis.lastTouchTime = currentTime;\n\t\t\t\tthis.lastTouchEvent = me.getEvent();\n\t\t\t\tthis.doubleClickCounter = 0;\n\t\t\t}\n\t\t}\n\t\telse if ((this.isMouseDown || evtName == mxEvent.MOUSE_UP) && this.fireDoubleClick)\n\t\t{\n\t\t\tthis.fireDoubleClick = false;\n\t\t\tvar cell = this.lastTouchCell;\n\t\t\tthis.lastTouchCell = null;\n\t\t\tthis.isMouseDown = false;\n\t\t\t\n\t\t\t// Workaround for Chrome/Safari not firing native double click events for double touch on background\n\t\t\tvar valid = (cell != null) || ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\t\t(mxClient.IS_GC || mxClient.IS_SF));\n\t\t\t\n\t\t\tif (valid && Math.abs(this.lastTouchX - me.getX()) < this.doubleTapTolerance &&\n\t\t\t\tMath.abs(this.lastTouchY - me.getY()) < this.doubleTapTolerance)\n\t\t\t{\n\t\t\t\tthis.dblClick(me.getEvent(), cell);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmxEvent.consume(me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!this.isEventIgnored(evtName, me, sender))\n\t{\n\t\t// Updates the event state via getEventState\n\t\tme.state = this.getEventState(me.getState());\n\t\tthis.fireEvent(new mxEventObject(mxEvent.FIRE_MOUSE_EVENT, 'eventName', evtName, 'event', me));\n\t\t\n\t\tif ((mxClient.IS_OP || mxClient.IS_SF || mxClient.IS_GC || mxClient.IS_IE11 ||\n\t\t\t(mxClient.IS_IE && mxClient.IS_SVG) || me.getEvent().target != this.container))\n\t\t{\n\t\t\tif (evtName == mxEvent.MOUSE_MOVE && this.isMouseDown && this.autoScroll && !mxEvent.isMultiTouchEvent(me.getEvent))\n\t\t\t{\n\t\t\t\tthis.scrollPointToVisible(me.getGraphX(), me.getGraphY(), this.autoExtend);\n\t\t\t}\n\t\t\telse if (evtName == mxEvent.MOUSE_UP && this.ignoreScrollbars && this.translateToScrollPosition &&\n\t\t\t\t\t(this.container.scrollLeft != 0 || this.container.scrollTop != 0))\n\t\t\t{\n\t\t\t\tvar s = this.view.scale;\n\t\t\t\tvar tr = this.view.translate;\n\t\t\t\tthis.view.setTranslate(tr.x - this.container.scrollLeft / s, tr.y - this.container.scrollTop / s);\n\t\t\t\tthis.container.scrollLeft = 0;\n\t\t\t\tthis.container.scrollTop = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.mouseListeners != null)\n\t\t\t{\n\t\t\t\tvar args = [sender, me];\n\t\n\t\t\t\t// Does not change returnValue in Opera\n\t\t\t\tif (!me.getEvent().preventDefault)\n\t\t\t\t{\n\t\t\t\t\tme.getEvent().returnValue = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < this.mouseListeners.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar l = this.mouseListeners[i];\n\t\t\t\t\t\n\t\t\t\t\tif (evtName == mxEvent.MOUSE_DOWN)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseDown.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_MOVE)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseMove.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t\t\t\t{\n\t\t\t\t\t\tl.mouseUp.apply(l, args);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Invokes the click handler\n\t\t\tif (evtName == mxEvent.MOUSE_UP)\n\t\t\t{\n\t\t\t\tthis.click(me);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Detects tapAndHold events using a timer\n\t\tif ((mxEvent.isTouchEvent(me.getEvent()) || mxEvent.isPenEvent(me.getEvent())) &&\n\t\t\tevtName == mxEvent.MOUSE_DOWN && this.tapAndHoldEnabled && !this.tapAndHoldInProgress)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = true;\n\t\t\tthis.initialTouchX = me.getGraphX();\n\t\t\tthis.initialTouchY = me.getGraphY();\n\t\t\t\n\t\t\tvar handler = function()\n\t\t\t{\n\t\t\t\tif (this.tapAndHoldValid)\n\t\t\t\t{\n\t\t\t\t\tthis.tapAndHold(me);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\t\tthis.tapAndHoldValid = false;\n\t\t\t};\n\t\t\t\n\t\t\tif (this.tapAndHoldThread)\n\t\t\t{\n\t\t\t\twindow.clearTimeout(this.tapAndHoldThread);\n\t\t\t}\n\t\n\t\t\tthis.tapAndHoldThread = window.setTimeout(mxUtils.bind(this, handler), this.tapAndHoldDelay);\n\t\t\tthis.tapAndHoldValid = true;\n\t\t}\n\t\telse if (evtName == mxEvent.MOUSE_UP)\n\t\t{\n\t\t\tthis.tapAndHoldInProgress = false;\n\t\t\tthis.tapAndHoldValid = false;\n\t\t}\n\t\telse if (this.tapAndHoldValid)\n\t\t{\n\t\t\tthis.tapAndHoldValid =\n\t\t\t\tMath.abs(this.initialTouchX - me.getGraphX()) < this.tolerance &&\n\t\t\t\tMath.abs(this.initialTouchY - me.getGraphY()) < this.tolerance;\n\t\t}\n\n\t\t// Stops editing for all events other than from cellEditor\n\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isEditing() && !this.cellEditor.isEventSource(me.getEvent()))\n\t\t{\n\t\t\tthis.stopEditing(!this.isInvokesStopCellEditing());\n\t\t}\n\n\t\tthis.consumeMouseEvent(evtName, me, sender);\n\t}\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given <mxMouseEvent> if it's a touchStart event.\n */\nmxGraph.prototype.consumeMouseEvent = function(evtName, me, sender)\n{\n\t// Workaround for duplicate click in Windows 8 with Chrome/FF/Opera with touch\n\tif (evtName == mxEvent.MOUSE_DOWN && mxEvent.isTouchEvent(me.getEvent()))\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: fireGestureEvent\n * \n * Dispatches a <mxEvent.GESTURE> event. The following example will resize the\n * cell under the mouse based on the scale property of the native touch event.\n * \n * (code)\n * graph.addListener(mxEvent.GESTURE, function(sender, eo)\n * {\n *   var evt = eo.getProperty('event');\n *   var state = graph.view.getState(eo.getProperty('cell'));\n *   \n *   if (graph.isEnabled() && graph.isCellResizable(state.cell) && Math.abs(1 - evt.scale) > 0.2)\n *   {\n *     var scale = graph.view.scale;\n *     var tr = graph.view.translate;\n *     \n *     var w = state.width * evt.scale;\n *     var h = state.height * evt.scale;\n *     var x = state.x - (w - state.width) / 2;\n *     var y = state.y - (h - state.height) / 2;\n *     \n *     var bounds = new mxRectangle(graph.snap(x / scale) - tr.x,\n *     \t\tgraph.snap(y / scale) - tr.y, graph.snap(w / scale), graph.snap(h / scale));\n *     graph.resizeCell(state.cell, bounds);\n *     eo.consume();\n *   }\n * });\n * (end)\n * \n * Parameters:\n * \n * evt - Gestureend event that represents the gesture.\n * cell - Optional <mxCell> associated with the gesture.\n */\nmxGraph.prototype.fireGestureEvent = function(evt, cell)\n{\n\t// Resets double tap event handling when gestures take place\n\tthis.lastTouchTime = 0;\n\tthis.fireEvent(new mxEventObject(mxEvent.GESTURE, 'event', evt, 'cell', cell));\n};\n\n/**\n * Function: destroy\n * \n * Destroys the graph and all its resources.\n */\nmxGraph.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\t\n\t\tif (this.tooltipHandler != null)\n\t\t{\n\t\t\tthis.tooltipHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.selectionCellsHandler != null)\n\t\t{\n\t\t\tthis.selectionCellsHandler.destroy();\n\t\t}\n\n\t\tif (this.panningHandler != null)\n\t\t{\n\t\t\tthis.panningHandler.destroy();\n\t\t}\n\n\t\tif (this.popupMenuHandler != null)\n\t\t{\n\t\t\tthis.popupMenuHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.connectionHandler != null)\n\t\t{\n\t\t\tthis.connectionHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.graphHandler != null)\n\t\t{\n\t\t\tthis.graphHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.cellEditor != null)\n\t\t{\n\t\t\tthis.cellEditor.destroy();\n\t\t}\n\t\t\n\t\tif (this.view != null)\n\t\t{\n\t\t\tthis.view.destroy();\n\t\t}\n\n\t\tif (this.model != null && this.graphModelChangeListener != null)\n\t\t{\n\t\t\tthis.model.removeListener(this.graphModelChangeListener);\n\t\t\tthis.graphModelChangeListener = null;\n\t\t}\n\n\t\tthis.container = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellOverlay\n *\n * Extends <mxEventSource> to implement a graph overlay, represented by an icon\n * and a tooltip. Overlays can handle and fire <click> events and are added to\n * the graph using <mxGraph.addCellOverlay>, and removed using\n * <mxGraph.removeCellOverlay>, or <mxGraph.removeCellOverlays> to remove all overlays.\n * The <mxGraph.getCellOverlays> function returns the array of overlays for a given\n * cell in a graph. If multiple overlays exist for the same cell, then\n * <getBounds> should be overridden in at least one of the overlays.\n * \n * Overlays appear on top of all cells in a special layer. If this is not\n * desirable, then the image must be rendered as part of the shape or label of\n * the cell instead.\n *\n * Example:\n * \n * The following adds a new overlays for a given vertex and selects the cell\n * if the overlay is clicked.\n *\n * (code)\n * var overlay = new mxCellOverlay(img, html);\n * graph.addCellOverlay(vertex, overlay);\n * overlay.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var cell = evt.getProperty('cell');\n *   graph.setSelectionCell(cell);\n * });\n * (end)\n * \n * For cell overlays to be printed use <mxPrintPreview.printOverlays>.\n *\n * Event: mxEvent.CLICK\n *\n * Fires when the user clicks on the overlay. The <code>event</code> property\n * contains the corresponding mouse event and the <code>cell</code> property\n * contains the cell. For touch devices this is fired if the element receives\n * a touchend event.\n * \n * Constructor: mxCellOverlay\n *\n * Constructs a new overlay using the given image and tooltip.\n * \n * Parameters:\n * \n * image - <mxImage> that represents the icon to be displayed.\n * tooltip - Optional string that specifies the tooltip.\n * align - Optional horizontal alignment for the overlay. Possible\n * values are <ALIGN_LEFT>, <ALIGN_CENTER> and <ALIGN_RIGHT>\n * (default).\n * verticalAlign - Vertical alignment for the overlay. Possible\n * values are <ALIGN_TOP>, <ALIGN_MIDDLE> and <ALIGN_BOTTOM>\n * (default).\n */\nfunction mxCellOverlay(image, tooltip, align, verticalAlign, offset, cursor)\n{\n\tthis.image = image;\n\tthis.tooltip = tooltip;\n\tthis.align = (align != null) ? align : this.align;\n\tthis.verticalAlign = (verticalAlign != null) ? verticalAlign : this.verticalAlign;\n\tthis.offset = (offset != null) ? offset : new mxPoint();\n\tthis.cursor = (cursor != null) ? cursor : 'help';\n};\n\n/**\n * Extends mxEventSource.\n */\nmxCellOverlay.prototype = new mxEventSource();\nmxCellOverlay.prototype.constructor = mxCellOverlay;\n\n/**\n * Variable: image\n *\n * Holds the <mxImage> to be used as the icon.\n */\nmxCellOverlay.prototype.image = null;\n\n/**\n * Variable: tooltip\n * \n * Holds the optional string to be used as the tooltip.\n */\nmxCellOverlay.prototype.tooltip = null;\n\n/**\n * Variable: align\n * \n * Holds the horizontal alignment for the overlay. Default is\n * <mxConstants.ALIGN_RIGHT>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.align = mxConstants.ALIGN_RIGHT;\n\n/**\n * Variable: verticalAlign\n * \n * Holds the vertical alignment for the overlay. Default is\n * <mxConstants.ALIGN_BOTTOM>. For edges, the overlay always appears in the\n * center of the edge.\n */\nmxCellOverlay.prototype.verticalAlign = mxConstants.ALIGN_BOTTOM;\n\n/**\n * Variable: offset\n * \n * Holds the offset as an <mxPoint>. The offset will be scaled according to the\n * current scale.\n */\nmxCellOverlay.prototype.offset = null;\n\n/**\n * Variable: cursor\n * \n * Holds the cursor for the overlay. Default is 'help'.\n */\nmxCellOverlay.prototype.cursor = null;\n\n/**\n * Variable: defaultOverlap\n * \n * Defines the overlapping for the overlay, that is, the proportional distance\n * from the origin to the point defined by the alignment. Default is 0.5.\n */\nmxCellOverlay.prototype.defaultOverlap = 0.5;\n\n/**\n * Function: getBounds\n * \n * Returns the bounds of the overlay for the given <mxCellState> as an\n * <mxRectangle>. This should be overridden when using multiple overlays\n * per cell so that the overlays do not overlap.\n * \n * The following example will place the overlay along an edge (where\n * x=[-1..1] from the start to the end of the edge and y is the\n * orthogonal offset in px).\n * \n * (code)\n * overlay.getBounds = function(state)\n * {\n *   var bounds = mxCellOverlay.prototype.getBounds.apply(this, arguments);\n *   \n *   if (state.view.graph.getModel().isEdge(state.cell))\n *   {\n *     var pt = state.view.getPoint(state, {x: 0, y: 0, relative: true});\n *     \n *     bounds.x = pt.x - bounds.width / 2;\n *     bounds.y = pt.y - bounds.height / 2;\n *   }\n *   \n *   return bounds;\n * };\n * (end)\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the current state of the\n * associated cell.\n */\nmxCellOverlay.prototype.getBounds = function(state)\n{\n\tvar isEdge = state.view.graph.getModel().isEdge(state.cell);\n\tvar s = state.view.scale;\n\tvar pt = null;\n\n\tvar w = this.image.width;\n\tvar h = this.image.height;\n\t\n\tif (isEdge)\n\t{\n\t\tvar pts = state.absolutePoints;\n\t\t\n\t\tif (pts.length % 2 == 1)\n\t\t{\n\t\t\tpt = pts[Math.floor(pts.length / 2)];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar idx = pts.length / 2;\n\t\t\tvar p0 = pts[idx-1];\n\t\t\tvar p1 = pts[idx];\n\t\t\tpt = new mxPoint(p0.x + (p1.x - p0.x) / 2,\n\t\t\t\tp0.y + (p1.y - p0.y) / 2);\n\t\t}\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint();\n\t\t\n\t\tif (this.align == mxConstants.ALIGN_LEFT)\n\t\t{\n\t\t\tpt.x = state.x;\n\t\t}\n\t\telse if (this.align == mxConstants.ALIGN_CENTER)\n\t\t{\n\t\t\tpt.x = state.x + state.width / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.x = state.x + state.width;\n\t\t}\n\t\t\n\t\tif (this.verticalAlign == mxConstants.ALIGN_TOP)\n\t\t{\n\t\t\tpt.y = state.y;\n\t\t}\n\t\telse if (this.verticalAlign == mxConstants.ALIGN_MIDDLE)\n\t\t{\n\t\t\tpt.y = state.y + state.height / 2;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tpt.y = state.y + state.height;\n\t\t}\n\t}\n\n\treturn new mxRectangle(Math.round(pt.x - (w * this.defaultOverlap - this.offset.x) * s),\n\t\tMath.round(pt.y - (h * this.defaultOverlap - this.offset.y) * s), w * s, h * s);\n};\n\n/**\n * Function: toString\n * \n * Returns the textual representation of the overlay to be used as the\n * tooltip. This implementation returns <tooltip>.\n */\nmxCellOverlay.prototype.toString = function()\n{\n\treturn this.tooltip;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxOutline\n *\n * Implements an outline (aka overview) for a graph. Set <updateOnPan> to true\n * to enable updates while the source graph is panning.\n * \n * Example:\n * \n * (code)\n * var outline = new mxOutline(graph, div);\n * (end)\n * \n * If an outline is used in an <mxWindow> in IE8 standards mode, the following\n * code makes sure that the shadow filter is not inherited and that any\n * transparent elements in the graph do not show the page background, but the\n * background of the graph container.\n * \n * (code)\n * if (document.documentMode == 8)\n * {\n *   container.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n * }\n * (end)\n * \n * To move the graph to the top, left corner the following code can be used.\n * \n * (code)\n * var scale = graph.view.scale;\n * var bounds = graph.getGraphBounds();\n * graph.view.setTranslate(-bounds.x / scale, -bounds.y / scale);\n * (end)\n * \n * To toggle the suspended mode, the following can be used.\n * \n * (code)\n * outline.suspended = !outln.suspended;\n * if (!outline.suspended)\n * {\n *   outline.update(true);\n * }\n * (end)\n * \n * Constructor: mxOutline\n *\n * Constructs a new outline for the specified graph inside the given\n * container.\n * \n * Parameters:\n * \n * source - <mxGraph> to create the outline for.\n * container - DOM node that will contain the outline.\n */\nfunction mxOutline(source, container)\n{\n\tthis.source = source;\n\n\tif (container != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\n/**\n * Function: source\n * \n * Reference to the source <mxGraph>.\n */\nmxOutline.prototype.source = null;\n\n/**\n * Function: outline\n * \n * Reference to the <mxGraph> that renders the outline.\n */\nmxOutline.prototype.outline = null;\n\n/**\n * Function: graphRenderHint\n * \n * Renderhint to be used for the outline graph. Default is faster.\n */\nmxOutline.prototype.graphRenderHint = mxConstants.RENDERING_HINT_FASTER;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxOutline.prototype.enabled = true;\n\n/**\n * Variable: showViewport\n * \n * Specifies a viewport rectangle should be shown. Default is true.\n */\nmxOutline.prototype.showViewport = true;\n\n/**\n * Variable: border\n * \n * Border to be added at the bottom and right. Default is 10.\n */\nmxOutline.prototype.border = 10;\n\n/**\n * Variable: enabled\n * \n * Specifies the size of the sizer handler. Default is 8.\n */\nmxOutline.prototype.sizerSize = 8;\n\n/**\n * Variable: labelsVisible\n * \n * Specifies if labels should be visible in the outline. Default is false.\n */\nmxOutline.prototype.labelsVisible = false;\n\n/**\n * Variable: updateOnPan\n * \n * Specifies if <update> should be called for <mxEvent.PAN> in the source\n * graph. Default is false.\n */\nmxOutline.prototype.updateOnPan = false;\n\n/**\n * Variable: sizerImage\n * \n * Optional <mxImage> to be used for the sizer. Default is null.\n */\nmxOutline.prototype.sizerImage = null;\n\n/**\n * Variable: minScale\n * \n * Minimum scale to be used. Default is 0.001.\n */\nmxOutline.prototype.minScale = 0.0001;\n\n/**\n * Variable: suspended\n * \n * Optional boolean flag to suspend updates. Default is false. This flag will\n * also suspend repaints of the outline. To toggle this switch, use the\n * following code.\n * \n * (code)\n * nav.suspended = !nav.suspended;\n * \n * if (!nav.suspended)\n * {\n *   nav.update(true);\n * }\n * (end)\n */\nmxOutline.prototype.suspended = false;\n\n/**\n * Variable: forceVmlHandles\n * \n * Specifies if VML should be used to render the handles in this control. This\n * is true for IE8 standards mode and false for all other browsers and modes.\n * This is a workaround for rendering issues of HTML elements over elements\n * with filters in IE 8 standards mode.\n */\nmxOutline.prototype.forceVmlHandles = document.documentMode == 8;\n\n/**\n * Function: createGraph\n * \n * Creates the <mxGraph> used in the outline.\n */\nmxOutline.prototype.createGraph = function(container)\n{\n\tvar graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint, this.source.getStylesheet());\n\tgraph.foldingEnabled = false;\n\tgraph.autoScroll = false;\n\t\n\treturn graph;\n};\n\n/**\n * Function: init\n * \n * Initializes the outline inside the given container.\n */\nmxOutline.prototype.init = function(container)\n{\n\tthis.outline = this.createGraph(container);\n\t\n\t// Do not repaint when suspended\n\tvar outlineGraphModelChanged = this.outline.graphModelChanged;\n\tthis.outline.graphModelChanged = mxUtils.bind(this, function(changes)\n\t{\n\t\tif (!this.suspended && this.outline != null)\n\t\t{\n\t\t\toutlineGraphModelChanged.apply(this.outline, arguments);\n\t\t}\n\t});\n\n\t// Enables faster painting in SVG\n\tif (mxClient.IS_SVG)\n\t{\n\t\tvar node = this.outline.getView().getCanvas().parentNode;\n\t\tnode.setAttribute('shape-rendering', 'optimizeSpeed');\n\t\tnode.setAttribute('image-rendering', 'optimizeSpeed');\n\t}\n\t\n\t// Hides cursors and labels\n\tthis.outline.labelsVisible = this.labelsVisible;\n\tthis.outline.setEnabled(false);\n\t\n\tthis.updateHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (!this.suspended && !this.active)\n\t\t{\n\t\t\tthis.update();\n\t\t}\n\t});\n\t\n\t// Updates the scale of the outline after a change of the main graph\n\tthis.source.getModel().addListener(mxEvent.CHANGE, this.updateHandler);\n\tthis.outline.addMouseListener(this);\n\t\n\t// Adds listeners to keep the outline in sync with the source graph\n\tvar view = this.source.getView();\n\tview.addListener(mxEvent.SCALE, this.updateHandler);\n\tview.addListener(mxEvent.TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.SCALE_AND_TRANSLATE, this.updateHandler);\n\tview.addListener(mxEvent.DOWN, this.updateHandler);\n\tview.addListener(mxEvent.UP, this.updateHandler);\n\n\t// Updates blue rectangle on scroll\n\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\n\tthis.panHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.updateOnPan)\n\t\t{\n\t\t\tthis.updateHandler.apply(this, arguments);\n\t\t}\n\t});\n\tthis.source.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Refreshes the graph in the outline after a refresh of the main graph\n\tthis.refreshHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.outline.setStylesheet(this.source.getStylesheet());\n\t\tthis.outline.refresh();\n\t});\n\tthis.source.addListener(mxEvent.REFRESH, this.refreshHandler);\n\n\t// Creates the blue rectangle for the viewport\n\tthis.bounds = new mxRectangle(0, 0, 0, 0);\n\tthis.selectionBorder = new mxRectangleShape(this.bounds, null,\n\t\tmxConstants.OUTLINE_COLOR, mxConstants.OUTLINE_STROKEWIDTH);\n\tthis.selectionBorder.dialect = this.outline.dialect;\n\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.selectionBorder.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.selectionBorder.init(this.outline.getView().getOverlayPane());\n\n\t// Handles event by catching the initial pointer start and then listening to the\n\t// complete gesture on the event target. This is needed because all the events\n\t// are routed via the initial element even if that element is removed from the\n\t// DOM, which happens when we repaint the selection border and zoom handles.\n\tvar handler = mxUtils.bind(this, function(evt)\n\t{\n\t\tvar t = mxEvent.getSource(evt);\n\t\t\n\t\tvar redirect = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_MOVE, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tvar redirect2 = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tmxEvent.removeGestureListeners(t, null, redirect, redirect2);\n\t\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_UP, new mxMouseEvent(evt));\n\t\t});\n\t\t\n\t\tmxEvent.addGestureListeners(t, null, redirect, redirect2);\n\t\tthis.outline.fireMouseEvent(mxEvent.MOUSE_DOWN, new mxMouseEvent(evt));\n\t});\n\t\n\tmxEvent.addGestureListeners(this.selectionBorder.node, handler);\n\n\t// Creates a small blue rectangle for sizing (sizer handle)\n\tthis.sizer = this.createSizer();\n\t\n\tif (this.forceVmlHandles)\n\t{\n\t\tthis.sizer.isHtmlAllowed = function()\n\t\t{\n\t\t\treturn false;\n\t\t};\n\t}\n\t\n\tthis.sizer.init(this.outline.getView().getOverlayPane());\n\t\n\tif (this.enabled)\n\t{\n\t\tthis.sizer.node.style.cursor = 'nwse-resize';\n\t}\n\t\n\tmxEvent.addGestureListeners(this.sizer.node, handler);\n\n\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\tthis.sizer.node.style.display = this.selectionBorder.node.style.display;\n\tthis.selectionBorder.node.style.cursor = 'move';\n\n\tthis.update(false);\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxOutline.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: setZoomEnabled\n * \n * Enables or disables the zoom handling by showing or hiding the respective\n * handle.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new enabled state.\n */\nmxOutline.prototype.setZoomEnabled = function(value)\n{\n\tthis.sizer.node.style.visibility = (value) ? 'visible' : 'hidden';\n};\n\n/**\n * Function: refresh\n * \n * Invokes <update> and revalidate the outline. This method is deprecated.\n */\nmxOutline.prototype.refresh = function()\n{\n\tthis.update(true);\n};\n\n/**\n * Function: createSizer\n * \n * Creates the shape used as the sizer.\n */\nmxOutline.prototype.createSizer = function()\n{\n\tif (this.sizerImage != null)\n\t{\n\t\tvar sizer = new mxImageShape(new mxRectangle(0, 0, this.sizerImage.width, this.sizerImage.height), this.sizerImage.src);\n\t\tsizer.dialect = this.outline.dialect;\n\t\t\n\t\treturn sizer;\n\t}\n\telse\n\t{\n\t\tvar sizer = new mxRectangleShape(new mxRectangle(0, 0, this.sizerSize, this.sizerSize),\n\t\t\tmxConstants.OUTLINE_HANDLE_FILLCOLOR, mxConstants.OUTLINE_HANDLE_STROKECOLOR);\n\t\tsizer.dialect = this.outline.dialect;\n\t\n\t\treturn sizer;\n\t}\n};\n\n/**\n * Function: getSourceContainerSize\n * \n * Returns the size of the source container.\n */\nmxOutline.prototype.getSourceContainerSize = function()\n{\n\treturn new mxRectangle(0, 0, this.source.container.scrollWidth, this.source.container.scrollHeight);\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getOutlineOffset = function(scale)\n{\n\treturn null;\n};\n\n/**\n * Function: getOutlineOffset\n * \n * Returns the offset for drawing the outline graph.\n */\nmxOutline.prototype.getSourceGraphBounds = function()\n{\n\treturn this.source.getGraphBounds();\n};\n\n/**\n * Function: update\n * \n * Updates the outline.\n */\nmxOutline.prototype.update = function(revalidate)\n{\n\tif (this.source != null && this.source.container != null &&\n\t\tthis.outline != null && this.outline.container != null)\n\t{\n\t\tvar sourceScale = this.source.view.scale;\n\t\tvar scaledGraphBounds = this.getSourceGraphBounds();\n\t\tvar unscaledGraphBounds = new mxRectangle(scaledGraphBounds.x / sourceScale + this.source.panDx,\n\t\t\t\tscaledGraphBounds.y / sourceScale + this.source.panDy, scaledGraphBounds.width / sourceScale,\n\t\t\t\tscaledGraphBounds.height / sourceScale);\n\n\t\tvar unscaledFinderBounds = new mxRectangle(0, 0,\n\t\t\tthis.source.container.clientWidth / sourceScale,\n\t\t\tthis.source.container.clientHeight / sourceScale);\n\t\t\n\t\tvar union = unscaledGraphBounds.clone();\n\t\tunion.add(unscaledFinderBounds);\n\t\n\t\t// Zooms to the scrollable area if that is bigger than the graph\n\t\tvar size = this.getSourceContainerSize();\n\t\tvar completeWidth = Math.max(size.width / sourceScale, union.width);\n\t\tvar completeHeight = Math.max(size.height / sourceScale, union.height);\n\t\n\t\tvar availableWidth = Math.max(0, this.outline.container.clientWidth - this.border);\n\t\tvar availableHeight = Math.max(0, this.outline.container.clientHeight - this.border);\n\t\t\n\t\tvar outlineScale = Math.min(availableWidth / completeWidth, availableHeight / completeHeight);\n\t\tvar scale = (isNaN(outlineScale)) ? this.minScale : Math.max(this.minScale, outlineScale);\n\n\t\tif (scale > 0)\n\t\t{\n\t\t\tif (this.outline.getView().scale != scale)\n\t\t\t{\n\t\t\t\tthis.outline.getView().scale = scale;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\tvar navView = this.outline.getView();\n\t\t\t\n\t\t\tif (navView.currentRoot != this.source.getView().currentRoot)\n\t\t\t{\n\t\t\t\tnavView.setCurrentRoot(this.source.getView().currentRoot);\n\t\t\t}\n\n\t\t\tvar t = this.source.view.translate;\n\t\t\tvar tx = t.x + this.source.panDx;\n\t\t\tvar ty = t.y + this.source.panDy;\n\t\t\t\n\t\t\tvar off = this.getOutlineOffset(scale);\n\t\t\t\n\t\t\tif (off != null)\n\t\t\t{\n\t\t\t\ttx += off.x;\n\t\t\t\tty += off.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (unscaledGraphBounds.x < 0)\n\t\t\t{\n\t\t\t\ttx = tx - unscaledGraphBounds.x;\n\t\t\t}\n\t\t\tif (unscaledGraphBounds.y < 0)\n\t\t\t{\n\t\t\t\tty = ty - unscaledGraphBounds.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (navView.translate.x != tx || navView.translate.y != ty)\n\t\t\t{\n\t\t\t\tnavView.translate.x = tx;\n\t\t\t\tnavView.translate.y = ty;\n\t\t\t\trevalidate = true;\n\t\t\t}\n\t\t\n\t\t\t// Prepares local variables for computations\n\t\t\tvar t2 = navView.translate;\n\t\t\tscale = this.source.getView().scale;\n\t\t\tvar scale2 = scale / navView.scale;\n\t\t\tvar scale3 = 1.0 / navView.scale;\n\t\t\tvar container = this.source.container;\n\t\t\t\n\t\t\t// Updates the bounds of the viewrect in the navigation\n\t\t\tthis.bounds = new mxRectangle(\n\t\t\t\t(t2.x - t.x - this.source.panDx) / scale3,\n\t\t\t\t(t2.y - t.y - this.source.panDy) / scale3,\n\t\t\t\t(container.clientWidth / scale2),\n\t\t\t\t(container.clientHeight / scale2));\n\t\t\t\n\t\t\t// Adds the scrollbar offset to the finder\n\t\t\tthis.bounds.x += this.source.container.scrollLeft * navView.scale / scale;\n\t\t\tthis.bounds.y += this.source.container.scrollTop * navView.scale / scale;\n\t\t\t\n\t\t\tvar b = this.selectionBorder.bounds;\n\t\t\t\n\t\t\tif (b.x != this.bounds.x || b.y != this.bounds.y || b.width != this.bounds.width || b.height != this.bounds.height)\n\t\t\t{\n\t\t\t\tthis.selectionBorder.bounds = this.bounds;\n\t\t\t\tthis.selectionBorder.redraw();\n\t\t\t}\n\t\t\n\t\t\t// Updates the bounds of the zoom handle at the bottom right\n\t\t\tvar b = this.sizer.bounds;\n\t\t\tvar b2 = new mxRectangle(this.bounds.x + this.bounds.width - b.width / 2,\n\t\t\t\t\tthis.bounds.y + this.bounds.height - b.height / 2, b.width, b.height);\n\n\t\t\tif (b.x != b2.x || b.y != b2.y || b.width != b2.width || b.height != b2.height)\n\t\t\t{\n\t\t\t\tthis.sizer.bounds = b2;\n\t\t\t\t\n\t\t\t\t// Avoids update of visibility in redraw for VML\n\t\t\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t\t\t{\n\t\t\t\t\tthis.sizer.redraw();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (revalidate)\n\t\t\t{\n\t\t\t\tthis.outline.view.revalidate();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by starting a translation or zoom.\n */\nmxOutline.prototype.mouseDown = function(sender, me)\n{\n\tif (this.enabled && this.showViewport)\n\t{\n\t\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.source.tolerance : 0;\n\t\tvar hit = (this.source.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\t\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\tthis.zoom = me.isSource(this.sizer) || (hit != null && mxUtils.intersects(shape.bounds, hit));\n\t\tthis.startX = me.getX();\n\t\tthis.startY = me.getY();\n\t\tthis.active = true;\n\n\t\tif (this.source.useScrollbarsForPanning && mxUtils.hasScrollbars(this.source.container))\n\t\t{\n\t\t\tthis.dx0 = this.source.container.scrollLeft;\n\t\t\tthis.dy0 = this.source.container.scrollTop;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.dx0 = 0;\n\t\t\tthis.dy0 = 0;\n\t\t}\n\t}\n\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by previewing the viewrect in <graph> and updating the\n * rectangle that represents the viewrect in the outline.\n */\nmxOutline.prototype.mouseMove = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tthis.selectionBorder.node.style.display = (this.showViewport) ? '' : 'none';\n\t\tthis.sizer.node.style.display = this.selectionBorder.node.style.display; \n\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar bounds = null;\n\t\t\n\t\tif (!this.zoom)\n\t\t{\n\t\t\t// Previews the panning on the source graph\n\t\t\tvar scale = this.outline.getView().scale;\n\t\t\tbounds = new mxRectangle(this.bounds.x + dx,\n\t\t\t\tthis.bounds.y + dy, this.bounds.width, this.bounds.height);\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t\tdx /= scale;\n\t\t\tdx *= this.source.getView().scale;\n\t\t\tdy /= scale;\n\t\t\tdy *= this.source.getView().scale;\n\t\t\tthis.source.panGraph(-dx - this.dx0, -dy - this.dy0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Does *not* preview zooming on the source graph\n\t\t\tvar container = this.source.container;\n\t\t\tvar viewRatio = container.clientWidth / container.clientHeight;\n\t\t\tdy = dx / viewRatio;\n\t\t\tbounds = new mxRectangle(this.bounds.x,\n\t\t\t\tthis.bounds.y,\n\t\t\t\tMath.max(1, this.bounds.width + dx),\n\t\t\t\tMath.max(1, this.bounds.height + dy));\n\t\t\tthis.selectionBorder.bounds = bounds;\n\t\t\tthis.selectionBorder.redraw();\n\t\t}\n\t\t\n\t\t// Updates the zoom handle\n\t\tvar b = this.sizer.bounds;\n\t\tthis.sizer.bounds = new mxRectangle(\n\t\t\tbounds.x + bounds.width - b.width / 2,\n\t\t\tbounds.y + bounds.height - b.height / 2,\n\t\t\tb.width, b.height);\n\t\t\n\t\t// Avoids update of visibility in redraw for VML\n\t\tif (this.sizer.node.style.visibility != 'hidden')\n\t\t{\n\t\t\tthis.sizer.redraw();\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: getTranslateForEvent\n * \n * Gets the translate for the given mouse event. Here is an example to limit\n * the outline to stay within positive coordinates:\n * \n * (code)\n * outline.getTranslateForEvent = function(me)\n * {\n *   var pt = new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n *   \n *   if (!this.zoom)\n *   {\n *     var tr = this.source.view.translate;\n *     pt.x = Math.max(tr.x * this.outline.view.scale, pt.x);\n *     pt.y = Math.max(tr.y * this.outline.view.scale, pt.y);\n *   }\n *   \n *   return pt;\n * };\n * (end)\n */\nmxOutline.prototype.getTranslateForEvent = function(me)\n{\n\treturn new mxPoint(me.getX() - this.startX, me.getY() - this.startY);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the translation or zoom to <graph>.\n */\nmxOutline.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tvar delta = this.getTranslateForEvent(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\t\n\t\tif (Math.abs(dx) > 0 || Math.abs(dy) > 0)\n\t\t{\n\t\t\tif (!this.zoom)\n\t\t\t{\n\t\t\t\t// Applies the new translation if the source\n\t\t\t\t// has no scrollbars\n\t\t\t\tif (!this.source.useScrollbarsForPanning ||\n\t\t\t\t\t!mxUtils.hasScrollbars(this.source.container))\n\t\t\t\t{\n\t\t\t\t\tthis.source.panGraph(0, 0);\n\t\t\t\t\tdx /= this.outline.getView().scale;\n\t\t\t\t\tdy /= this.outline.getView().scale;\n\t\t\t\t\tvar t = this.source.getView().translate;\n\t\t\t\t\tthis.source.getView().setTranslate(t.x - dx, t.y - dy);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// Applies the new zoom\n\t\t\t\tvar w = this.selectionBorder.bounds.width;\n\t\t\t\tvar scale = this.source.getView().scale;\n\t\t\t\tthis.source.zoomTo(Math.max(this.minScale, scale - (dx * scale) / w), false);\n\t\t\t}\n\n\t\t\tthis.update();\n\t\t\tme.consume();\n\t\t}\n\t\t\t\n\t\t// Resets the state of the handler\n\t\tthis.index = null;\n\t\tthis.active = false;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroy this outline and removes all listeners from <source>.\n */\nmxOutline.prototype.destroy = function()\n{\n\tif (this.source != null)\n\t{\n\t\tthis.source.removeListener(this.panHandler);\n\t\tthis.source.removeListener(this.refreshHandler);\n\t\tthis.source.getModel().removeListener(this.updateHandler);\n\t\tthis.source.getView().removeListener(this.updateHandler);\n\t\tmxEvent.addListener(this.source.container, 'scroll', this.updateHandler);\n\t\tthis.source = null;\n\t}\n\t\n\tif (this.outline != null)\n\t{\n\t\tthis.outline.removeMouseListener(this);\n\t\tthis.outline.destroy();\n\t\tthis.outline = null;\n\t}\n\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tif (this.sizer != null)\n\t{\n\t\tthis.sizer.destroy();\n\t\tthis.sizer = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxMultiplicity\n * \n * Defines invalid connections along with the error messages that they produce.\n * To add or remove rules on a graph, you must add/remove instances of this\n * class to <mxGraph.multiplicities>.\n * \n * Example:\n * \n * (code)\n * graph.multiplicities.push(new mxMultiplicity(\n *   true, 'rectangle', null, null, 0, 2, ['circle'],\n *   'Only 2 targets allowed',\n *   'Only circle targets allowed'));\n * (end)\n * \n * Defines a rule where each rectangle must be connected to no more than 2\n * circles and no other types of targets are allowed.\n * \n * Constructor: mxMultiplicity\n * \n * Instantiate class mxMultiplicity in order to describe allowed\n * connections in a graph. Not all constraints can be enforced while\n * editing, some must be checked at validation time. The <countError> and\n * <typeError> are treated as resource keys in <mxResources>.\n * \n * Parameters:\n * \n * source - Boolean indicating if this rule applies to the source or target\n * terminal.\n * type - Type of the source or target terminal that this rule applies to.\n * See <type> for more information.\n * attr - Optional attribute name to match the source or target terminal.\n * value - Optional attribute value to match the source or target terminal.\n * min - Minimum number of edges for this rule. Default is 1.\n * max - Maximum number of edges for this rule. n means infinite. Default\n * is n.\n * validNeighbors - Array of types of the opposite terminal for which this\n * rule applies.\n * countError - Error to be displayed for invalid number of edges.\n * typeError - Error to be displayed for invalid opposite terminals.\n * validNeighborsAllowed - Optional boolean indicating if the array of\n * opposite types should be valid or invalid.\n */\nfunction mxMultiplicity(source, type, attr, value, min, max,\n\tvalidNeighbors, countError, typeError, validNeighborsAllowed)\n{\n\tthis.source = source;\n\tthis.type = type;\n\tthis.attr = attr;\n\tthis.value = value;\n\tthis.min = (min != null) ? min : 0;\n\tthis.max = (max != null) ? max : 'n';\n\tthis.validNeighbors = validNeighbors;\n\tthis.countError = mxResources.get(countError) || countError;\n\tthis.typeError = mxResources.get(typeError) || typeError;\n\tthis.validNeighborsAllowed = (validNeighborsAllowed != null) ?\n\t\tvalidNeighborsAllowed : true;\n};\n\n/**\n * Variable: type\n * \n * Defines the type of the source or target terminal. The type is a string\n * passed to <mxUtils.isNode> together with the source or target vertex\n * value as the first argument.\n */\nmxMultiplicity.prototype.type = null;\n\n/**\n * Variable: attr\n * \n * Optional string that specifies the attributename to be passed to\n * <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.attr = null;\n\n/**\n * Variable: value\n * \n * Optional string that specifies the value of the attribute to be passed\n * to <mxUtils.isNode> to check if the rule applies to a cell.\n */\nmxMultiplicity.prototype.value = null;\n\n/**\n * Variable: source\n * \n * Boolean that specifies if the rule is applied to the source or target\n * terminal of an edge.\n */\nmxMultiplicity.prototype.source = null;\n\n/**\n * Variable: min\n * \n * Defines the minimum number of connections for which this rule applies.\n * Default is 0.\n */\nmxMultiplicity.prototype.min = null;\n\n/**\n * Variable: max\n * \n * Defines the maximum number of connections for which this rule applies.\n * A value of 'n' means unlimited times. Default is 'n'. \n */\nmxMultiplicity.prototype.max = null;\n\n/**\n * Variable: validNeighbors\n * \n * Holds an array of strings that specify the type of neighbor for which\n * this rule applies. The strings are used in <mxCell.is> on the opposite\n * terminal to check if the rule applies to the connection.\n */\nmxMultiplicity.prototype.validNeighbors = null;\n\n/**\n * Variable: validNeighborsAllowed\n * \n * Boolean indicating if the list of validNeighbors are those that are allowed\n * for this rule or those that are not allowed for this rule.\n */\nmxMultiplicity.prototype.validNeighborsAllowed = true;\n\n/**\n * Variable: countError\n * \n * Holds the localized error message to be displayed if the number of\n * connections for which the rule applies is smaller than <min> or greater\n * than <max>.\n */\nmxMultiplicity.prototype.countError = null;\n\n/**\n * Variable: typeError\n * \n * Holds the localized error message to be displayed if the type of the\n * neighbor for a connection does not match the rule.\n */\nmxMultiplicity.prototype.typeError = null;\n\n/**\n * Function: check\n * \n * Checks the multiplicity for the given arguments and returns the error\n * for the given connection or null if the multiplicity does not apply.\n *  \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph> instance.\n * edge - <mxCell> that represents the edge to validate.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * sourceOut - Number of outgoing edges from the source terminal.\n * targetIn - Number of incoming edges for the target terminal.\n */\nmxMultiplicity.prototype.check = function(graph, edge, source, target, sourceOut, targetIn)\n{\n\tvar error = '';\n\n\tif ((this.source && this.checkTerminal(graph, source, edge)) ||\n\t\t(!this.source && this.checkTerminal(graph, target, edge)))\n\t{\n\t\tif (this.countError != null && \n\t\t\t((this.source && (this.max == 0 || (sourceOut >= this.max))) ||\n\t\t\t(!this.source && (this.max == 0 || (targetIn >= this.max)))))\n\t\t{\n\t\t\terror += this.countError + '\\n';\n\t\t}\n\n\t\tif (this.validNeighbors != null && this.typeError != null && this.validNeighbors.length > 0)\n\t\t{\n\t\t\tvar isValid = this.checkNeighbors(graph, edge, source, target);\n\n\t\t\tif (!isValid)\n\t\t\t{\n\t\t\t\terror += this.typeError + '\\n';\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn (error.length > 0) ? error : null;\n};\n\n/**\n * Function: checkNeighbors\n * \n * Checks if there are any valid neighbours in <validNeighbors>. This is only\n * called if <validNeighbors> is a non-empty array.\n */\nmxMultiplicity.prototype.checkNeighbors = function(graph, edge, source, target)\n{\n\tvar sourceValue = graph.model.getValue(source);\n\tvar targetValue = graph.model.getValue(target);\n\tvar isValid = !this.validNeighborsAllowed;\n\tvar valid = this.validNeighbors;\n\t\n\tfor (var j = 0; j < valid.length; j++)\n\t{\n\t\tif (this.source &&\n\t\t\tthis.checkType(graph, targetValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t\telse if (!this.source && \n\t\t\tthis.checkType(graph, sourceValue, valid[j]))\n\t\t{\n\t\t\tisValid = this.validNeighborsAllowed;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn isValid;\n};\n\n/**\n * Function: checkTerminal\n * \n * Checks the given terminal cell and returns true if this rule applies. The\n * given cell is the source or target of the given edge, depending on\n * <source>. This implementation uses <checkType> on the terminal's value.\n */\nmxMultiplicity.prototype.checkTerminal = function(graph, terminal, edge)\n{\n\tvar value = graph.model.getValue(terminal);\n\t\n\treturn this.checkType(graph, value, this.type, this.attr, this.value);\n};\n\n/**\n * Function: checkType\n * \n * Checks the type of the given value.\n */\nmxMultiplicity.prototype.checkType = function(graph, value, type, attr, attrValue)\n{\n\tif (value != null)\n\t{\n\t\tif (!isNaN(value.nodeType)) // Checks if value is a DOM node\n\t\t{\n\t\t\treturn mxUtils.isNode(value, type, attr, attrValue);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn value == type;\n\t\t}\n\t}\n\t\n\treturn false;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxLayoutManager\n * \n * Implements a layout manager that runs a given layout after any changes to the graph:\n * \n * Example:\n * \n * (code)\n * var layoutMgr = new mxLayoutManager(graph);\n * layoutMgr.getLayout = function(cell)\n * {\n *   return layout;\n * };\n * (end)\n * \n * Event: mxEvent.LAYOUT_CELLS\n * \n * Fires between begin- and endUpdate after all cells have been layouted in\n * <layoutCells>. The <code>cells</code> property contains all cells that have\n * been passed to <layoutCells>.\n * \n * Constructor: mxLayoutManager\n *\n * Constructs a new automatic layout for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxLayoutManager(graph)\n{\n\t// Executes the layout before the changes are dispatched\n\tthis.undoHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.beforeUndo(evt.getProperty('edit'));\n\t\t}\n\t});\n\t\n\t// Notifies the layout of a move operation inside a parent\n\tthis.moveHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.cellsMoved(evt.getProperty('cells'), evt.getProperty('event'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxLayoutManager.prototype = new mxEventSource();\nmxLayoutManager.prototype.constructor = mxLayoutManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxLayoutManager.prototype.graph = null;\n\n/**\n * Variable: bubbling\n * \n * Specifies if the layout should bubble along\n * the cell hierarchy. Default is true.\n */\nmxLayoutManager.prototype.bubbling = true;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxLayoutManager.prototype.enabled = true;\n\n/**\n * Variable: updateHandler\n * \n * Holds the function that handles the endUpdate event.\n */\nmxLayoutManager.prototype.updateHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxLayoutManager.prototype.moveHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxLayoutManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxLayoutManager.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isBubbling\n * \n * Returns true if a layout should bubble, that is, if the parent layout\n * should be executed whenever a cell layout (layout of the children of\n * a cell) has been executed. This implementation returns <bubbling>.\n */\nmxLayoutManager.prototype.isBubbling = function()\n{\n\treturn this.bubbling;\n};\n\n/**\n * Function: setBubbling\n * \n * Sets <bubbling>.\n */\nmxLayoutManager.prototype.setBubbling = function(value)\n{\n\tthis.bubbling = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this layout operates on.\n */\nmxLayoutManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the layouts operate on.\n */\nmxLayoutManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\t\n\t\tmodel.removeListener(this.undoHandler);\n\t\tthis.graph.removeListener(this.moveHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tvar model = this.graph.getModel();\t\n\t\tmodel.addListener(mxEvent.BEFORE_UNDO, this.undoHandler);\n\t\tthis.graph.addListener(mxEvent.MOVE_CELLS, this.moveHandler);\n\t}\n};\n\n/**\n * Function: getLayout\n * \n * Returns the layout to be executed for the given graph and parent.\n */\nmxLayoutManager.prototype.getLayout = function(parent)\n{\n\treturn null;\n};\n\n/**\n * Function: beforeUndo\n * \n * Called from the undoHandler.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.beforeUndo = function(undoableEdit)\n{\n\tvar cells = this.getCellsForChanges(undoableEdit.changes);\n\tvar model = this.getGraph().getModel();\n\n\t// Adds all descendants\n\tvar tmp = [];\n\t\n\tfor (var i = 0; i < cells.length; i++)\n\t{\n\t\ttmp = tmp.concat(model.getDescendants(cells[i]));\n\t}\n\t\n\tcells = tmp;\n\t\n\t// Adds all parent ancestors\n\tif (this.isBubbling())\n\t{\n\t\ttmp = model.getParents(cells);\n\t\t\n\t\twhile (tmp.length > 0)\n\t\t{\n\t\t\tcells = cells.concat(tmp);\n\t\t\ttmp = model.getParents(tmp);\n\t\t}\n\t}\n\t\n\tthis.executeLayoutForCells(cells);\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayoutForCells = function(cells)\n{\n\t// Adds reverse to this array to avoid duplicate execution of leafes\n\t// Works like capture/bubble for events, first executes all layout\n\t// from top to bottom and in reverse order and removes duplicates.\n\tvar sorted = mxUtils.sortCells(cells, true);\n\tsorted = sorted.concat(sorted.slice().reverse());\n\tthis.layoutCells(sorted);\n};\n\n/**\n * Function: cellsMoved\n * \n * Called from the moveHandler.\n *\n * Parameters:\n * \n * cell - Array of <mxCells> that have been moved.\n * evt - Mouse event that represents the mousedown.\n */\nmxLayoutManager.prototype.cellsMoved = function(cells, evt)\n{\n\tif (cells != null && evt != null)\n\t{\n\t\tvar point = mxUtils.convertPoint(this.getGraph().container,\n\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\t// Checks if a layout exists to take care of the moving if the\n\t\t// parent itself is not being moved\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar parent = model.getParent(cells[i]);\n\t\t\t\n\t\t\tif (mxUtils.indexOf(cells, parent) < 0)\n\t\t\t{\n\t\t\t\tvar layout = this.getLayout(parent);\n\t\n\t\t\t\tif (layout != null)\n\t\t\t\t{\n\t\t\t\t\tlayout.moveCell(cells[i], point.x, point.y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: getCellsForEdit\n * \n * Returns the cells to be layouted for the given sequence of changes.\n */\nmxLayoutManager.prototype.getCellsForChanges = function(changes)\n{\n\tvar dict = new mxDictionary();\n\tvar result = [];\n\t\n\tfor (var i = 0; i < changes.length; i++)\n\t{\n\t\tvar change = changes[i];\n\t\t\n\t\tif (change instanceof mxRootChange)\n\t\t{\n\t\t\treturn [];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cells = this.getCellsForChange(change);\n\t\t\t\n\t\t\tfor (var j = 0; j < cells.length; j++)\n\t\t\t{\n\t\t\t\tif (cells[j] != null && !dict.get(cells[j]))\n\t\t\t\t{\n\t\t\t\t\tdict.put(cells[j], true);\n\t\t\t\t\tresult.push(cells[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getCellsForChange\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.getCellsForChange = function(change)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tif (change instanceof mxChildChange)\n\t{\n\t\treturn [change.child, change.previous, model.getParent(change.child)];\n\t}\n\telse if (change instanceof mxTerminalChange || change instanceof mxGeometryChange)\n\t{\n\t\treturn [change.cell, model.getParent(change.cell)];\n\t}\n\telse if (change instanceof mxVisibleChange || change instanceof mxStyleChange)\n\t{\n\t\treturn [change.cell];\n\t}\n\t\n\treturn [];\n};\n\n/**\n * Function: layoutCells\n * \n * Executes all layouts which have been scheduled during the\n * changes.\n */\nmxLayoutManager.prototype.layoutCells = function(cells)\n{\n\tif (cells.length > 0)\n\t{\n\t\t// Invokes the layouts while removing duplicates\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry \n\t\t{\n\t\t\tvar last = null;\n\t\t\t\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (cells[i] != model.getRoot() && cells[i] != last)\n\t\t\t\t{\n\t\t\t\t\tif (this.executeLayout(this.getLayout(cells[i]), cells[i]))\n\t\t\t\t\t{\n\t\t\t\t\t\tlast = cells[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.LAYOUT_CELLS, 'cells', cells));\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: executeLayout\n * \n * Executes the given layout on the given parent.\n */\nmxLayoutManager.prototype.executeLayout = function(layout, parent)\n{\n\tvar result = false;\n\t\n\tif (layout != null && parent != null)\n\t{\n\t\tlayout.execute(parent);\n\t\tresult = true;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxLayoutManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSwimlaneManager\n * \n * Manager for swimlanes and nested swimlanes that sets the size of newly added\n * swimlanes to that of their siblings, and propagates changes to the size of a\n * swimlane to its siblings, if <siblings> is true, and its ancestors, if\n * <bubbling> is true.\n * \n * Constructor: mxSwimlaneManager\n *\n * Constructs a new swimlane manager for the given graph.\n *\n * Arguments:\n * \n * graph - Reference to the enclosing graph. \n */\nfunction mxSwimlaneManager(graph, horizontal, addEnabled, resizeEnabled)\n{\n\tthis.horizontal = (horizontal != null) ? horizontal : true;\n\tthis.addEnabled = (addEnabled != null) ? addEnabled : true;\n\tthis.resizeEnabled = (resizeEnabled != null) ? resizeEnabled : true;\n\n\tthis.addHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isAddEnabled())\n\t\t{\n\t\t\tthis.cellsAdded(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.resizeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled() && this.isResizeEnabled())\n\t\t{\n\t\t\tthis.cellsResized(evt.getProperty('cells'));\n\t\t}\n\t});\n\t\n\tthis.setGraph(graph);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxSwimlaneManager.prototype = new mxEventSource();\nmxSwimlaneManager.prototype.constructor = mxSwimlaneManager;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSwimlaneManager.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if event handling is enabled. Default is true.\n */\nmxSwimlaneManager.prototype.enabled = true;\n\n/**\n * Variable: horizontal\n * \n * Specifies the orientation of the swimlanes. Default is true.\n */\nmxSwimlaneManager.prototype.horizontal = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if newly added cells should be resized to match the size of their\n * existing siblings. Default is true.\n */\nmxSwimlaneManager.prototype.addEnabled = true;\n\n/**\n * Variable: resizeEnabled\n * \n * Specifies if resizing of swimlanes should be handled. Default is true.\n */\nmxSwimlaneManager.prototype.resizeEnabled = true;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.addHandler = null;\n\n/**\n * Variable: moveHandler\n * \n * Holds the function that handles the move event.\n */\nmxSwimlaneManager.prototype.resizeHandler = null;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxSwimlaneManager.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxSwimlaneManager.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isHorizontal\n * \n * Returns <horizontal>.\n */\nmxSwimlaneManager.prototype.isHorizontal = function()\n{\n\treturn this.horizontal;\n};\n\n/**\n * Function: setHorizontal\n * \n * Sets <horizontal>.\n */\nmxSwimlaneManager.prototype.setHorizontal = function(value)\n{\n\tthis.horizontal = value;\n};\n\n/**\n * Function: isAddEnabled\n * \n * Returns <addEnabled>.\n */\nmxSwimlaneManager.prototype.isAddEnabled = function()\n{\n\treturn this.addEnabled;\n};\n\n/**\n * Function: setAddEnabled\n * \n * Sets <addEnabled>.\n */\nmxSwimlaneManager.prototype.setAddEnabled = function(value)\n{\n\tthis.addEnabled = value;\n};\n\n/**\n * Function: isResizeEnabled\n * \n * Returns <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.isResizeEnabled = function()\n{\n\treturn this.resizeEnabled;\n};\n\n/**\n * Function: setResizeEnabled\n * \n * Sets <resizeEnabled>.\n */\nmxSwimlaneManager.prototype.setResizeEnabled = function(value)\n{\n\tthis.resizeEnabled = value;\n};\n\n/**\n * Function: getGraph\n * \n * Returns the graph that this manager operates on.\n */\nmxSwimlaneManager.prototype.getGraph = function()\n{\n\treturn this.graph;\n};\n\n/**\n * Function: setGraph\n * \n * Sets the graph that the manager operates on.\n */\nmxSwimlaneManager.prototype.setGraph = function(graph)\n{\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.removeListener(this.addHandler);\n\t\tthis.graph.removeListener(this.resizeHandler);\n\t}\n\t\n\tthis.graph = graph;\n\t\n\tif (this.graph != null)\n\t{\n\t\tthis.graph.addListener(mxEvent.ADD_CELLS, this.addHandler);\n\t\tthis.graph.addListener(mxEvent.CELLS_RESIZED, this.resizeHandler);\n\t}\n};\n\n/**\n * Function: isSwimlaneIgnored\n * \n * Returns true if the given swimlane should be ignored.\n */\nmxSwimlaneManager.prototype.isSwimlaneIgnored = function(swimlane)\n{\n\treturn !this.getGraph().isSwimlane(swimlane);\n};\n\n/**\n * Function: isCellHorizontal\n * \n * Returns true if the given cell is horizontal. If the given cell is not a\n * swimlane, then the global orientation is returned.\n */\nmxSwimlaneManager.prototype.isCellHorizontal = function(cell)\n{\n\tif (this.graph.isSwimlane(cell))\n\t{\n\t\tvar style = this.graph.getCellStyle(cell);\n\t\t\n\t\treturn mxUtils.getValue(style, mxConstants.STYLE_HORIZONTAL, 1) == 1;\n\t}\n\t\n\treturn !this.isHorizontal();\n};\n\n/**\n * Function: cellsAdded\n * \n * Called if any cells have been added.\n * \n * Parameters:\n * \n * cell - Array of <mxCells> that have been added.\n */\nmxSwimlaneManager.prototype.cellsAdded = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tthis.swimlaneAdded(cells[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: swimlaneAdded\n * \n * Updates the size of the given swimlane to match that of any existing\n * siblings swimlanes.\n * \n * Parameters:\n * \n * swimlane - <mxCell> that represents the new swimlane.\n */\nmxSwimlaneManager.prototype.swimlaneAdded = function(swimlane)\n{\n\tvar model = this.getGraph().getModel();\n\tvar parent = model.getParent(swimlane);\n\tvar childCount = model.getChildCount(parent);\n\tvar geo = null;\n\t\n\t// Finds the first valid sibling swimlane as reference\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(parent, i);\n\t\t\n\t\tif (child != swimlane && !this.isSwimlaneIgnored(child))\n\t\t{\n\t\t\tgeo = model.getGeometry(child);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\t\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Applies the size of the refernece to the newly added swimlane\n\tif (geo != null)\n\t{\n\t\tvar parentHorizontal = (parent != null) ? this.isCellHorizontal(parent) : this.horizontal;\n\t\tthis.resizeSwimlane(swimlane, geo.width, geo.height, parentHorizontal);\n\t}\n};\n\n/**\n * Function: cellsResized\n * \n * Called if any cells have been resizes. Calls <swimlaneResized> for all\n * swimlanes where <isSwimlaneIgnored> returns false.\n * \n * Parameters:\n * \n * cells - Array of <mxCells> whose size was changed.\n */\nmxSwimlaneManager.prototype.cellsResized = function(cells)\n{\n\tif (cells != null)\n\t{\n\t\tvar model = this.getGraph().getModel();\n\t\t\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\t// Finds the top-level swimlanes and adds offsets\n\t\t\tfor (var i = 0; i < cells.length; i++)\n\t\t\t{\n\t\t\t\tif (!this.isSwimlaneIgnored(cells[i]))\n\t\t\t\t{\n\t\t\t\t\tvar geo = model.getGeometry(cells[i]);\n\n\t\t\t\t\tif (geo != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar size = new mxRectangle(0, 0, geo.width, geo.height);\n\t\t\t\t\t\tvar top = cells[i];\n\t\t\t\t\t\tvar current = top;\n\t\t\t\t\t\t\n\t\t\t\t\t\twhile (current != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttop = current;\n\t\t\t\t\t\t\tcurrent = model.getParent(current);\n\t\t\t\t\t\t\tvar tmp = (this.graph.isSwimlane(current)) ?\n\t\t\t\t\t\t\t\t\tthis.graph.getStartSize(current) :\n\t\t\t\t\t\t\t\t\tnew mxRectangle();\n\t\t\t\t\t\t\tsize.width += tmp.width;\n\t\t\t\t\t\t\tsize.height += tmp.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar parentHorizontal = (current != null) ? this.isCellHorizontal(current) : this.horizontal;\n\t\t\t\t\t\tthis.resizeSwimlane(top, size.width, size.height, parentHorizontal);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t}\n};\n\n/**\n * Function: resizeSwimlane\n * \n * Called from <cellsResized> for all swimlanes that are not ignored to update\n * the size of the siblings and the size of the parent swimlanes, recursively,\n * if <bubbling> is true.\n * \n * Parameters:\n * \n * swimlane - <mxCell> whose size has changed.\n */\nmxSwimlaneManager.prototype.resizeSwimlane = function(swimlane, w, h, parentHorizontal)\n{\n\tvar model = this.getGraph().getModel();\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar horizontal = this.isCellHorizontal(swimlane);\n\t\t\n\t\tif (!this.isSwimlaneIgnored(swimlane))\n\t\t{\n\t\t\tvar geo = model.getGeometry(swimlane);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tif ((parentHorizontal && geo.height != h) || (!parentHorizontal && geo.width != w))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tif (parentHorizontal)\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.height = h;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tgeo.width = w;\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.setGeometry(swimlane, geo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar tmp = (this.graph.isSwimlane(swimlane)) ?\n\t\t\t\tthis.graph.getStartSize(swimlane) :\n\t\t\t\tnew mxRectangle();\n\t\tw -= tmp.width;\n\t\th -= tmp.height;\n\t\t\n\t\tvar childCount = model.getChildCount(swimlane);\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tvar child = model.getChildAt(swimlane, i);\n\t\t\tthis.resizeSwimlane(child, w, h, horizontal);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Removes all handlers from the <graph> and deletes the reference to it.\n */\nmxSwimlaneManager.prototype.destroy = function()\n{\n\tthis.setGraph(null);\n};\n/**\n * Copyright (c) 2006-2017, JGraph Ltd\n * Copyright (c) 2006-2017, Gaudenz Alder\n */\n/**\n * Class: mxTemporaryCellStates\n * \n * Creates a temporary set of cell states.\n */\nfunction mxTemporaryCellStates(view, scale, cells, isCellVisibleFn, getLinkForCellState)\n{\n\tscale = (scale != null) ? scale : 1;\n\tthis.view = view;\n\t\n\t// Stores the previous state\n\tthis.oldValidateCellState = view.validateCellState;\n\tthis.oldBounds = view.getGraphBounds();\n\tthis.oldStates = view.getStates();\n\tthis.oldScale = view.getScale();\n\tthis.oldDoRedrawShape = view.graph.cellRenderer.doRedrawShape;\n\n\tvar self = this;\n\n\t// Overrides doRedrawShape and paint shape to add links on shapes\n\tif (getLinkForCellState != null)\n\t{\n\t\tview.graph.cellRenderer.doRedrawShape = function(state)\n\t\t{\n\t\t\tvar oldPaint = state.shape.paint;\n\t\t\t\n\t\t\tstate.shape.paint = function(c)\n\t\t\t{\n\t\t\t\tvar link = getLinkForCellState(state);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(link);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\toldPaint.apply(this, arguments);\n\t\t\t\t\n\t\t\t\tif (link != null)\n\t\t\t\t{\n\t\t\t\t\tc.setLink(null);\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\tself.oldDoRedrawShape.apply(view.graph.cellRenderer, arguments);\n\t\t\tstate.shape.paint = oldPaint;\n\t\t};\n\t}\n\n\t// Overrides validateCellState to ignore invisible cells\n\tview.validateCellState = function(cell, resurse)\n\t{\n\t\tif (cell == null || isCellVisibleFn == null || isCellVisibleFn(cell))\n\t\t{\n\t\t\treturn self.oldValidateCellState.apply(view, arguments);\n\t\t}\n\t\t\n\t\treturn null;\n\t};\n\t\n\t// Creates space for new states\n\tview.setStates(new mxDictionary());\n\tview.setScale(scale);\n\t\n\tif (cells != null)\n\t{\n\t\tview.resetValidationState();\n\t\tvar bbox = null;\n\n\t\t// Validates the vertices and edges without adding them to\n\t\t// the model so that the original cells are not modified\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tvar bounds = view.getBoundingBox(view.validateCellState(view.validateCell(cells[i])));\n\t\t\t\n\t\t\tif (bbox == null)\n\t\t\t{\n\t\t\t\tbbox = bounds;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbbox.add(bounds);\n\t\t\t}\n\t\t}\n\n\t\tview.setGraphBounds(bbox || new mxRectangle());\n\t}\n};\n\n/**\n * Variable: view\n *\n * Holds the width of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.view = null;\n\n/**\n * Variable: oldStates\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldStates = null;\n\n/**\n * Variable: oldBounds\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldBounds = null;\n\n/**\n * Variable: oldScale\n *\n * Holds the height of the rectangle. Default is 0.\n */\nmxTemporaryCellStates.prototype.oldScale = null;\n\n/**\n * Function: destroy\n * \n * Returns the top, left corner as a new <mxPoint>.\n */\nmxTemporaryCellStates.prototype.destroy = function()\n{\n\tthis.view.setScale(this.oldScale);\n\tthis.view.setStates(this.oldStates);\n\tthis.view.setGraphBounds(this.oldBounds);\n\tthis.view.validateCellState = this.oldValidateCellState;\n\tthis.view.graph.cellRenderer.doRedrawShape = this.oldDoRedrawShape;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n *\n * Class: mxCellStatePreview\n * \n * Implements a live preview for moving cells.\n * \n * Constructor: mxCellStatePreview\n * \n * Constructs a move preview for the given graph.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxCellStatePreview(graph)\n{\n\tthis.deltas = new mxDictionary();\n\tthis.graph = graph;\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.graph = null;\n\n/**\n * Variable: deltas\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellStatePreview.prototype.deltas = null;\n\n/**\n * Variable: count\n * \n * Contains the number of entries in the map.\n */\nmxCellStatePreview.prototype.count = 0;\n\n/**\n * Function: isEmpty\n * \n * Returns true if this contains no entries.\n */\nmxCellStatePreview.prototype.isEmpty = function()\n{\n\treturn this.count == 0;\n};\n\n/**\n * Function: moveState\n */\nmxCellStatePreview.prototype.moveState = function(state, dx, dy, add, includeEdges)\n{\n\tadd = (add != null) ? add : true;\n\tincludeEdges = (includeEdges != null) ? includeEdges : true;\n\t\n\tvar delta = this.deltas.get(state.cell);\n\n\tif (delta == null)\n\t{\n\t\t// Note: Deltas stores the point and the state since the key is a string.\n\t\tdelta = {point: new mxPoint(dx, dy), state: state};\n\t\tthis.deltas.put(state.cell, delta);\n\t\tthis.count++;\n\t}\n\telse if (add)\n\t{\n\t\tdelta.point.x += dx;\n\t\tdelta.point.y += dy;\n\t}\n\telse\n\t{\n\t\tdelta.point.x = dx;\n\t\tdelta.point.y = dy;\n\t}\n\t\n\tif (includeEdges)\n\t{\n\t\tthis.addEdges(state);\n\t}\n\t\n\treturn delta.point;\n};\n\n/**\n * Function: show\n */\nmxCellStatePreview.prototype.show = function(visitor)\n{\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.translateState(delta.state, delta.point.x, delta.point.y);\n\t}));\n\t\n\tthis.deltas.visit(mxUtils.bind(this, function(key, delta)\n\t{\n\t\tthis.revalidateState(delta.state, delta.point.x, delta.point.y, visitor);\n\t}));\n};\n\n/**\n * Function: translateState\n */\nmxCellStatePreview.prototype.translateState = function(state, dx, dy)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tif (model.isVertex(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t\tvar geo = model.getGeometry(state.cell);\n\t\t\t\n\t\t\t// Moves selection cells and non-relative vertices in\n\t\t\t// the first phase so that edge terminal points will\n\t\t\t// be updated in the second phase\n\t\t\tif ((dx != 0 || dy != 0) && geo != null && (!geo.relative || this.deltas.get(state.cell) != null))\n\t\t\t{\n\t\t\t\tstate.x += dx;\n\t\t\t\tstate.y += dy;\n\t\t\t}\n\t\t}\n\t    \n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.translateState(state.view.getState(model.getChildAt(state.cell, i)), dx, dy);\n\t    }\n\t}\n};\n\n/**\n * Function: revalidateState\n */\nmxCellStatePreview.prototype.revalidateState = function(state, dx, dy, visitor)\n{\n\tif (state != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\t// Updates the edge terminal points and restores the\n\t\t// (relative) positions of any (relative) children\n\t\tif (model.isEdge(state.cell))\n\t\t{\n\t\t\tstate.view.updateCellState(state);\n\t\t}\n\n\t\tvar geo = this.graph.getCellGeometry(state.cell);\n\t\tvar pState = state.view.getState(model.getParent(state.cell));\n\t\t\n\t\t// Moves selection vertices which are relative\n\t\tif ((dx != 0 || dy != 0) && geo != null && geo.relative &&\n\t\t\tmodel.isVertex(state.cell) && (pState == null ||\n\t\t\tmodel.isVertex(pState.cell) || this.deltas.get(state.cell) != null))\n\t\t{\n\t\t\tstate.x += dx;\n\t\t\tstate.y += dy;\n\t\t}\n\t\t\n\t\tthis.graph.cellRenderer.redraw(state);\n\t\n\t\t// Invokes the visitor on the given state\n\t\tif (visitor != null)\n\t\t{\n\t\t\tvisitor(state);\n\t\t}\n\t\t\t\t\t\t\n\t    var childCount = model.getChildCount(state.cell);\n\t    \n\t    for (var i = 0; i < childCount; i++)\n\t    {\n\t    \tthis.revalidateState(this.graph.view.getState(model.getChildAt(state.cell, i)), dx, dy, visitor);\n\t    }\n\t}\n};\n\n/**\n * Function: addEdges\n */\nmxCellStatePreview.prototype.addEdges = function(state)\n{\n\tvar model = this.graph.getModel();\n\tvar edgeCount = model.getEdgeCount(state.cell);\n\n\tfor (var i = 0; i < edgeCount; i++)\n\t{\n\t\tvar s = state.view.getState(model.getEdgeAt(state.cell, i));\n\n\t\tif (s != null)\n\t\t{\n\t\t\tthis.moveState(s, 0, 0);\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConnectionConstraint\n * \n * Defines an object that contains the constraints about how to connect one\n * side of an edge to its terminal.\n * \n * Constructor: mxConnectionConstraint\n * \n * Constructs a new connection constraint for the given point and boolean\n * arguments.\n * \n * Parameters:\n * \n * point - Optional <mxPoint> that specifies the fixed location of the point\n * in relative coordinates. Default is null.\n * perimeter - Optional boolean that specifies if the fixed point should be\n * projected onto the perimeter of the terminal. Default is true.\n */\nfunction mxConnectionConstraint(point, perimeter, name)\n{\n\tthis.point = point;\n\tthis.perimeter = (perimeter != null) ? perimeter : true;\n\tthis.name = name;\n};\n\n/**\n * Variable: point\n * \n * <mxPoint> that specifies the fixed location of the connection point.\n */\nmxConnectionConstraint.prototype.point = null;\n\n/**\n * Variable: perimeter\n * \n * Boolean that specifies if the point should be projected onto the perimeter\n * of the terminal.\n */\nmxConnectionConstraint.prototype.perimeter = null;\n\n/**\n * Variable: name\n * \n * Optional string that specifies the name of the constraint.\n */\nmxConnectionConstraint.prototype.name = null;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGraphHandler\n * \n * Graph event handler that handles selection. Individual cells are handled\n * separately using <mxVertexHandler> or one of the edge handlers. These\n * handlers are created using <mxGraph.createHandler> in\n * <mxGraphSelectionModel.cellAdded>.\n * \n * To avoid the container to scroll a moved cell into view, set\n * <scrollAfterMove> to false.\n * \n * Constructor: mxGraphHandler\n * \n * Constructs an event handler that creates handles for the\n * selection cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxGraphHandler(graph)\n{\n\tthis.graph = graph;\n\tthis.graph.addMouseListener(this);\n\t\n\t// Repaints the handler after autoscroll\n\tthis.panHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.updatePreviewShape();\n\t\tthis.updateHint();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\n\t// Handles escape keystrokes\n\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t\n\t// Updates the preview box for remote changes\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.first != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\t\t\t\tthis.pBounds = this.getPreviewBounds(this.cells);\n\t\t\t\tthis.updatePreviewShape();\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// Resets the handler if cells have vanished\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxGraphHandler.prototype.graph = null;\n\n/**\n * Variable: maxCells\n * \n * Defines the maximum number of cells to paint subhandles\n * for. Default is 50 for Firefox and 20 for IE. Set this\n * to 0 if you want an unlimited number of handles to be\n * displayed. This is only recommended if the number of\n * cells in the graph is limited to a small number, eg.\n * 500.\n */\nmxGraphHandler.prototype.maxCells = (mxClient.IS_IE) ? 20 : 50;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxGraphHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightEnabled\n * \n * Specifies if drop targets under the mouse should be enabled. Default is\n * true.\n */\nmxGraphHandler.prototype.highlightEnabled = true;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxGraphHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: moveEnabled\n * \n * Specifies if moving is enabled. Default is true.\n */\nmxGraphHandler.prototype.moveEnabled = true;\n\n/**\n * Variable: guidesEnabled\n * \n * Specifies if other cells should be used for snapping the right, center or\n * left side of the current selection. Default is false.\n */\nmxGraphHandler.prototype.guidesEnabled = false;\n\n/**\n * Variable: guide\n * \n * Holds the <mxGuide> instance that is used for alignment.\n */\nmxGraphHandler.prototype.guide = null;\n\n/**\n * Variable: currentDx\n * \n * Stores the x-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDx = null;\n\n/**\n * Variable: currentDy\n * \n * Stores the y-coordinate of the current mouse move.\n */\nmxGraphHandler.prototype.currentDy = null;\n\n/**\n * Variable: updateCursor\n * \n * Specifies if a move cursor should be shown if the mouse is over a movable\n * cell. Default is true.\n */\nmxGraphHandler.prototype.updateCursor = true;\n\n/**\n * Variable: selectEnabled\n * \n * Specifies if selecting is enabled. Default is true.\n */\nmxGraphHandler.prototype.selectEnabled = true;\n\n/**\n * Variable: removeCellsFromParent\n * \n * Specifies if cells may be moved out of their parents. Default is true.\n */\nmxGraphHandler.prototype.removeCellsFromParent = true;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if drop events are interpreted as new connections if no other\n * drop action is defined. Default is false.\n */\nmxGraphHandler.prototype.connectOnDrop = false;\n\n/**\n * Variable: scrollOnMove\n * \n * Specifies if the view should be scrolled so that a moved cell is\n * visible. Default is true.\n */\nmxGraphHandler.prototype.scrollOnMove = true;\n\n/**\n * Variable: minimumSize\n * \n * Specifies the minimum number of pixels for the width and height of a\n * selection border. Default is 6.\n */\nmxGraphHandler.prototype.minimumSize = 6;\n\n/**\n * Variable: previewColor\n * \n * Specifies the color of the preview shape. Default is black.\n */\nmxGraphHandler.prototype.previewColor = 'black';\n\n/**\n * Variable: htmlPreview\n * \n * Specifies if the graph container should be used for preview. If this is used\n * then drop target detection relies entirely on <mxGraph.getCellAt> because\n * the HTML preview does not \"let events through\". Default is false.\n */\nmxGraphHandler.prototype.htmlPreview = false;\n\n/**\n * Variable: shape\n * \n * Reference to the <mxShape> that represents the preview.\n */\nmxGraphHandler.prototype.shape = null;\n\n/**\n * Variable: scaleGrid\n * \n * Specifies if the grid should be scaled. Default is false.\n */\nmxGraphHandler.prototype.scaleGrid = false;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if the bounding box should allow for rotation. Default is true.\n */\nmxGraphHandler.prototype.rotationEnabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxGraphHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxGraphHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: isCloneEnabled\n * \n * Returns <cloneEnabled>.\n */\nmxGraphHandler.prototype.isCloneEnabled = function()\n{\n\treturn this.cloneEnabled;\n};\n\n/**\n * Function: setCloneEnabled\n * \n * Sets <cloneEnabled>.\n * \n * Parameters:\n * \n * value - Boolean that specifies the new clone enabled state.\n */\nmxGraphHandler.prototype.setCloneEnabled = function(value)\n{\n\tthis.cloneEnabled = value;\n};\n\n/**\n * Function: isMoveEnabled\n * \n * Returns <moveEnabled>.\n */\nmxGraphHandler.prototype.isMoveEnabled = function()\n{\n\treturn this.moveEnabled;\n};\n\n/**\n * Function: setMoveEnabled\n * \n * Sets <moveEnabled>.\n */\nmxGraphHandler.prototype.setMoveEnabled = function(value)\n{\n\tthis.moveEnabled = value;\n};\n\n/**\n * Function: isSelectEnabled\n * \n * Returns <selectEnabled>.\n */\nmxGraphHandler.prototype.isSelectEnabled = function()\n{\n\treturn this.selectEnabled;\n};\n\n/**\n * Function: setSelectEnabled\n * \n * Sets <selectEnabled>.\n */\nmxGraphHandler.prototype.setSelectEnabled = function(value)\n{\n\tthis.selectEnabled = value;\n};\n\n/**\n * Function: isRemoveCellsFromParent\n * \n * Returns <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.isRemoveCellsFromParent = function()\n{\n\treturn this.removeCellsFromParent;\n};\n\n/**\n * Function: setRemoveCellsFromParent\n * \n * Sets <removeCellsFromParent>.\n */\nmxGraphHandler.prototype.setRemoveCellsFromParent = function(value)\n{\n\tthis.removeCellsFromParent = value;\n};\n\n/**\n * Function: getInitialCellForEvent\n * \n * Hook to return initial cell for the given event.\n */\nmxGraphHandler.prototype.getInitialCellForEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: isDelayedSelection\n * \n * Hook to return true for delayed selections.\n */\nmxGraphHandler.prototype.isDelayedSelection = function(cell, me)\n{\n\treturn this.graph.isCellSelected(cell);\n};\n\n/**\n * Function: consumeMouseEvent\n * \n * Consumes the given mouse event. NOTE: This may be used to enable click\n * events for links in labels on iOS as follows as consuming the initial\n * touchStart disables firing the subsequent click evnent on the link.\n * \n * <code>\n * mxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n * {\n *   var source = mxEvent.getSource(me.getEvent());\n *   \n *   if (!mxEvent.isTouchEvent(me.getEvent()) || source.nodeName != 'A')\n *   {\n *     me.consume();\n *   }\n * }\n * </code>\n */\nmxGraphHandler.prototype.consumeMouseEvent = function(evtName, me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by selecing the given cell and creating a handle for\n * it. By consuming the event all subsequent events of the gesture are\n * redirected to this handler.\n */\nmxGraphHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() != null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar cell = this.getInitialCellForEvent(me);\n\t\tthis.delayedSelection = this.isDelayedSelection(cell, me);\n\t\tthis.cell = null;\n\t\t\n\t\tif (this.isSelectEnabled() && !this.delayedSelection)\n\t\t{\n\t\t\tthis.graph.selectCellForEvent(cell, me.getEvent());\n\t\t}\n\n\t\tif (this.isMoveEnabled())\n\t\t{\n\t\t\tvar model = this.graph.model;\n\t\t\tvar geo = model.getGeometry(cell);\n\n\t\t\tif (this.graph.isCellMovable(cell) && ((!model.isEdge(cell) || this.graph.getSelectionCount() > 1 ||\n\t\t\t\t(geo.points != null && geo.points.length > 0) || model.getTerminal(cell, true) == null ||\n\t\t\t\tmodel.getTerminal(cell, false) == null) || this.graph.allowDanglingEdges || \n\t\t\t\t(this.graph.isCloneEvent(me.getEvent()) && this.graph.isCellsCloneable())))\n\t\t\t{\n\t\t\t\tthis.start(cell, me.getX(), me.getY());\n\t\t\t}\n\t\t\telse if (this.delayedSelection)\n\t\t\t{\n\t\t\t\tthis.cell = cell;\n\t\t\t}\n\n\t\t\tthis.cellWasClicked = true;\n\t\t\tthis.consumeMouseEvent(mxEvent.MOUSE_DOWN, me);\n\t\t}\n\t}\n};\n\n/**\n * Function: getGuideStates\n * \n * Creates an array of cell states which should be used as guides.\n */\nmxGraphHandler.prototype.getGuideStates = function()\n{\n\tvar parent = this.graph.getDefaultParent();\n\tvar model = this.graph.getModel();\n\t\n\tvar filter = mxUtils.bind(this, function(cell)\n\t{\n\t\treturn this.graph.view.getState(cell) != null &&\n\t\t\tmodel.isVertex(cell) &&\n\t\t\tmodel.getGeometry(cell) != null &&\n\t\t\t!model.getGeometry(cell).relative;\n\t});\n\t\n\treturn this.graph.view.getCellStates(model.filterDescendants(filter, parent));\n};\n\n/**\n * Function: getCells\n * \n * Returns the cells to be modified by this handler. This implementation\n * returns all selection cells that are movable, or the given initial cell if\n * the given cell is not selected and movable. This handles the case of moving\n * unselectable or unselected cells.\n * \n * Parameters:\n * \n * initialCell - <mxCell> that triggered this handler.\n */\nmxGraphHandler.prototype.getCells = function(initialCell)\n{\n\tif (!this.delayedSelection && this.graph.isCellMovable(initialCell))\n\t{\n\t\treturn [initialCell];\n\t}\n\telse\n\t{\n\t\treturn this.graph.getMovableCells(this.graph.getSelectionCells());\n\t}\n};\n\n/**\n * Function: getPreviewBounds\n * \n * Returns the <mxRectangle> used as the preview bounds for\n * moving the given cells.\n */\nmxGraphHandler.prototype.getPreviewBounds = function(cells)\n{\n\tvar bounds = this.getBoundingBox(cells);\n\t\n\tif (bounds != null)\n\t{\n\t\t// Corrects width and height\n\t\tbounds.width = Math.max(0, bounds.width - 1);\n\t\tbounds.height = Math.max(0, bounds.height - 1);\n\t\t\n\t\tif (bounds.width < this.minimumSize)\n\t\t{\n\t\t\tvar dx = this.minimumSize - bounds.width;\n\t\t\tbounds.x -= dx / 2;\n\t\t\tbounds.width = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.x = Math.round(bounds.x);\n\t\t\tbounds.width = Math.ceil(bounds.width);\n\t\t}\n\t\t\n\t\tvar tr = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (bounds.height < this.minimumSize)\n\t\t{\n\t\t\tvar dy = this.minimumSize - bounds.height;\n\t\t\tbounds.y -= dy / 2;\n\t\t\tbounds.height = this.minimumSize;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tbounds.y = Math.round(bounds.y);\n\t\t\tbounds.height = Math.ceil(bounds.height);\n\t\t}\n\t}\n\t\n\treturn bounds;\n};\n\n/**\n * Function: getBoundingBox\n * \n * Returns the union of the <mxCellStates> for the given array of <mxCells>.\n * For vertices, this method uses the bounding box of the corresponding shape\n * if one exists. The bounding box of the corresponding text label and all\n * controls and overlays are ignored. See also: <mxGraphView.getBounds> and\n * <mxGraph.getBoundingBox>.\n *\n * Parameters:\n *\n * cells - Array of <mxCells> whose bounding box should be returned.\n */\nmxGraphHandler.prototype.getBoundingBox = function(cells)\n{\n\tvar result = null;\n\t\n\tif (cells != null && cells.length > 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\t\n\t\tfor (var i = 0; i < cells.length; i++)\n\t\t{\n\t\t\tif (model.isVertex(cells[i]) || model.isEdge(cells[i]))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cells[i]);\n\t\t\t\n\t\t\t\tif (state != null)\n\t\t\t\t{\n\t\t\t\t\tvar bbox = state;\n\t\t\t\t\t\n\t\t\t\t\tif (model.isVertex(cells[i]) && state.shape != null && state.shape.boundingBox != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tbbox = state.shape.boundingBox;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (result == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tresult = mxRectangle.fromRectangle(bbox);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresult.add(bbox);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: createPreviewShape\n * \n * Creates the shape used to draw the preview for the given bounds.\n */\nmxGraphHandler.prototype.createPreviewShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.previewColor);\n\tshape.isDashed = true;\n\t\n\tif (this.htmlPreview)\n\t{\n\t\tshape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tshape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\t// Makes sure to use either VML or SVG shapes in order to implement\n\t\t// event-transparency on the background area of the rectangle since\n\t\t// HTML shapes do not let mouseevents through even when transparent\n\t\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\tshape.init(this.graph.getView().getOverlayPane());\n\t\tshape.pointerEvents = false;\n\t\t\n\t\t// Workaround for artifacts on iOS\n\t\tif (mxClient.IS_IOS)\n\t\t{\n\t\t\tshape.getSvgScreenOffset = function()\n\t\t\t{\n\t\t\t\treturn 0;\n\t\t\t};\n\t\t}\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxGraphHandler.prototype.start = function(cell, x, y)\n{\n\tthis.cell = cell;\n\tthis.first = mxUtils.convertPoint(this.graph.container, x, y);\n\tthis.cells = this.getCells(this.cell);\n\tthis.bounds = this.graph.getView().getBounds(this.cells);\n\tthis.pBounds = this.getPreviewBounds(this.cells);\n\n\tif (this.guidesEnabled)\n\t{\n\t\tthis.guide = new mxGuide(this.graph, this.getGuideStates());\n\t}\n};\n\n/**\n * Function: useGuidesForEvent\n * \n * Returns true if the guides should be used for the given <mxMouseEvent>.\n * This implementation returns <mxGuide.isEnabledForEvent>.\n */\nmxGraphHandler.prototype.useGuidesForEvent = function(me)\n{\n\treturn (this.guide != null) ? this.guide.isEnabledForEvent(me.getEvent()) : true;\n};\n\n\n/**\n * Function: snap\n * \n * Snaps the given vector to the grid and returns the given mxPoint instance.\n */\nmxGraphHandler.prototype.snap = function(vector)\n{\n\tvar scale = (this.scaleGrid) ? this.graph.view.scale : 1;\n\t\n\tvector.x = this.graph.snap(vector.x / scale) * scale;\n\tvector.y = this.graph.snap(vector.y / scale) * scale;\n\t\n\treturn vector;\n};\n\n/**\n * Function: getDelta\n * \n * Returns an <mxPoint> that represents the vector for moving the cells\n * for the given <mxMouseEvent>.\n */\nmxGraphHandler.prototype.getDelta = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar s = this.graph.view.scale;\n\t\n\treturn new mxPoint(this.roundLength((point.x - this.first.x) / s) * s,\n\t\tthis.roundLength((point.y - this.first.y) / s) * s);\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxGraphHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxGraphHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled vector. This uses Math.round.\n */\nmxGraphHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length * 2) / 2;\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting possible drop targets and updating the\n * preview.\n */\nmxGraphHandler.prototype.mouseMove = function(sender, me)\n{\n\tvar graph = this.graph;\n\n\tif (!me.isConsumed() && graph.isMouseDown && this.cell != null &&\n\t\tthis.first != null && this.bounds != null)\n\t{\n\t\t// Stops moving if a multi touch event is received\n\t\tif (mxEvent.isMultiTouchEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.reset();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar delta = this.getDelta(me);\n\t\tvar dx = delta.x;\n\t\tvar dy = delta.y;\n\t\tvar tol = graph.tolerance;\n\n\t\tif (this.shape != null || Math.abs(dx) > tol || Math.abs(dy) > tol)\n\t\t{\n\t\t\t// Highlight is used for highlighting drop targets\n\t\t\tif (this.highlight == null)\n\t\t\t{\n\t\t\t\tthis.highlight = new mxCellHighlight(this.graph,\n\t\t\t\t\tmxConstants.DROP_TARGET_COLOR, 3);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tthis.shape = this.createPreviewShape(this.bounds);\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\tvar gridEnabled = graph.isGridEnabledEvent(me.getEvent());\n\t\t\tvar hideGuide = true;\n\t\t\t\n\t\t\tif (this.guide != null && this.useGuidesForEvent(me))\n\t\t\t{\n\t\t\t\tdelta = this.guide.move(this.bounds, new mxPoint(dx, dy), gridEnabled, clone);\n\t\t\t\thideGuide = false;\n\t\t\t\tdx = delta.x;\n\t\t\t\tdy = delta.y;\n\t\t\t}\n\t\t\telse if (gridEnabled)\n\t\t\t{\n\t\t\t\tvar trx = graph.getView().translate;\n\t\t\t\tvar scale = graph.getView().scale;\t\t\t\t\n\t\t\t\t\n\t\t\t\tvar tx = this.bounds.x - (graph.snap(this.bounds.x / scale - trx.x) + trx.x) * scale;\n\t\t\t\tvar ty = this.bounds.y - (graph.snap(this.bounds.y / scale - trx.y) + trx.y) * scale;\n\t\t\t\tvar v = this.snap(new mxPoint(dx, dy));\n\t\t\t\n\t\t\t\tdx = v.x - tx;\n\t\t\t\tdy = v.y - ty;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.guide != null && hideGuide)\n\t\t\t{\n\t\t\t\tthis.guide.hide();\n\t\t\t}\n\n\t\t\t// Constrained movement if shift key is pressed\n\t\t\tif (graph.isConstrainedEvent(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(dx) > Math.abs(dy))\n\t\t\t\t{\n\t\t\t\t\tdy = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdx = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.currentDx = dx;\n\t\t\tthis.currentDy = dy;\n\t\t\tthis.updatePreviewShape();\n\n\t\t\tvar target = null;\n\t\t\tvar cell = me.getCell();\n\n\t\t\tif (graph.isDropEnabled() && this.highlightEnabled)\n\t\t\t{\n\t\t\t\t// Contains a call to getCellAt to find the cell under the mouse\n\t\t\t\ttarget = graph.getDropTarget(this.cells, me.getEvent(), cell, clone);\n\t\t\t}\n\n\t\t\tvar state = graph.getView().getState(target);\n\t\t\tvar highlight = false;\n\t\t\t\n\t\t\tif (state != null && (graph.model.getParent(this.cell) != target || clone))\n\t\t\t{\n\t\t\t    if (this.target != target)\n\t\t\t    {\n\t\t\t\t    this.target = target;\n\t\t\t\t    this.setHighlightColor(mxConstants.DROP_TARGET_COLOR);\n\t\t\t\t}\n\t\t\t    \n\t\t\t    highlight = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.target = null;\n\n\t\t\t\tif (this.connectOnDrop && cell != null && this.cells.length == 1 &&\n\t\t\t\t\tgraph.getModel().isVertex(cell) && graph.isCellConnectable(cell))\n\t\t\t\t{\n\t\t\t\t\tstate = graph.getView().getState(cell);\n\t\t\t\t\t\n\t\t\t\t\tif (state != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar error = graph.getEdgeValidationError(null, this.cell, cell);\n\t\t\t\t\t\tvar color = (error == null) ?\n\t\t\t\t\t\t\tmxConstants.VALID_COLOR :\n\t\t\t\t\t\t\tmxConstants.INVALID_CONNECT_TARGET_COLOR;\n\t\t\t\t\t\tthis.setHighlightColor(color);\n\t\t\t\t\t\thighlight = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (state != null && highlight)\n\t\t\t{\n\t\t\t\tthis.highlight.highlight(state);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.highlight.hide();\n\t\t\t}\n\t\t}\n\n\t\tthis.updateHint(me);\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_MOVE, me);\n\t\t\n\t\t// Cancels the bubbling of events to the container so\n\t\t// that the droptarget is not reset due to an mouseMove\n\t\t// fired on the container with no associated state.\n\t\tmxEvent.consume(me.getEvent());\n\t}\n\telse if ((this.isMoveEnabled() || this.isCloneEnabled()) && this.updateCursor && !me.isConsumed() &&\n\t\t(me.getState() != null || me.sourceState != null) && !graph.isMouseDown)\n\t{\n\t\tvar cursor = graph.getCursorForMouseEvent(me);\n\t\t\n\t\tif (cursor == null && graph.isEnabled() && graph.isCellMovable(me.getCell()))\n\t\t{\n\t\t\tif (graph.getModel().isEdge(me.getCell()))\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_EDGE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcursor = mxConstants.CURSOR_MOVABLE_VERTEX;\n\t\t\t}\n\t\t}\n\n\t\t// Sets the cursor on the original source state under the mouse\n\t\t// instead of the event source state which can be the parent\n\t\tif (cursor != null && me.sourceState != null)\n\t\t{\n\t\t\tme.sourceState.setCursor(cursor);\n\t\t}\n\t}\n};\n\n/**\n * Function: updatePreviewShape\n * \n * Updates the bounds of the preview shape.\n */\nmxGraphHandler.prototype.updatePreviewShape = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.bounds = new mxRectangle(Math.round(this.pBounds.x + this.currentDx - this.graph.panDx),\n\t\t\t\tMath.round(this.pBounds.y + this.currentDy - this.graph.panDy), this.pBounds.width, this.pBounds.height);\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxGraphHandler.prototype.setHighlightColor = function(color)\n{\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.setHighlightColor(color);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the selection cells.\n */\nmxGraphHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed())\n\t{\n\t\tvar graph = this.graph;\n\t\t\n\t\tif (this.cell != null && this.first != null && this.shape != null &&\n\t\t\tthis.currentDx != null && this.currentDy != null)\n\t\t{\n\t\t\tvar cell = me.getCell();\n\t\t\t\n\t\t\tif (this.connectOnDrop && this.target == null && cell != null && graph.getModel().isVertex(cell) &&\n\t\t\t\tgraph.isCellConnectable(cell) && graph.isEdgeValid(null, this.cell, cell))\n\t\t\t{\n\t\t\t\tgraph.connectionHandler.connect(this.cell, cell, me.getEvent());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar clone = graph.isCloneEvent(me.getEvent()) && graph.isCellsCloneable() && this.isCloneEnabled();\n\t\t\t\tvar scale = graph.getView().scale;\n\t\t\t\tvar dx = this.roundLength(this.currentDx / scale);\n\t\t\t\tvar dy = this.roundLength(this.currentDy / scale);\n\t\t\t\tvar target = this.target;\n\t\t\t\t\n\t\t\t\tif (graph.isSplitEnabled() && graph.isSplitTarget(target, this.cells, me.getEvent()))\n\t\t\t\t{\n\t\t\t\t\tgraph.splitEdge(target, this.cells, null, dx, dy);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.moveCells(this.cells, dx, dy, clone, this.target, me.getEvent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.isSelectEnabled() && this.delayedSelection && this.cell != null)\n\t\t{\n\t\t\tthis.selectDelayed(me);\n\t\t}\n\t}\n\n\t// Consumes the event if a cell was initially clicked\n\tif (this.cellWasClicked)\n\t{\n\t\tthis.consumeMouseEvent(mxEvent.MOUSE_UP, me);\n\t}\n\n\tthis.reset();\n};\n\n/**\n * Function: selectDelayed\n * \n * Implements the delayed selection for the given mouse event.\n */\nmxGraphHandler.prototype.selectDelayed = function(me)\n{\n\tif (!this.graph.isCellSelected(this.cell) || !this.graph.popupMenuHandler.isPopupTrigger(me))\n\t{\n\t\tthis.graph.selectCellForEvent(this.cell, me.getEvent());\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxGraphHandler.prototype.reset = function()\n{\n\tthis.destroyShapes();\n\tthis.removeHint();\n\t\n\tthis.cellWasClicked = false;\n\tthis.delayedSelection = false;\n\tthis.currentDx = null;\n\tthis.currentDy = null;\n\tthis.guides = null;\n\tthis.first = null;\n\tthis.cell = null;\n\tthis.target = null;\n};\n\n/**\n * Function: shouldRemoveCellsFromParent\n * \n * Returns true if the given cells should be removed from the parent for the specified\n * mousereleased event.\n */\nmxGraphHandler.prototype.shouldRemoveCellsFromParent = function(parent, cells, evt)\n{\n\tif (this.graph.getModel().isVertex(parent))\n\t{\n\t\tvar pState = this.graph.getView().getState(parent);\n\t\t\n\t\tif (pState != null)\n\t\t{\n\t\t\tvar pt = mxUtils.convertPoint(this.graph.container,\n\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(pState.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\t\n\t\t\tif (alpha != 0)\n\t\t\t{\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\tvar cx = new mxPoint(pState.getCenterX(), pState.getCenterY());\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, cx);\n\t\t\t}\n\t\t\n\t\t\treturn !mxUtils.contains(pState, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: moveCells\n * \n * Moves the given cells by the specified amount.\n */\nmxGraphHandler.prototype.moveCells = function(cells, dx, dy, clone, target, evt)\n{\n\tif (clone)\n\t{\n\t\tcells = this.graph.getCloneableCells(cells);\n\t}\n\t\n\t// Removes cells from parent\n\tif (target == null && this.isRemoveCellsFromParent() &&\n\t\tthis.shouldRemoveCellsFromParent(this.graph.getModel().getParent(this.cell), cells, evt))\n\t{\n\t\ttarget = this.graph.getDefaultParent();\n\t}\n\t\n\t// Cloning into locked cells is not allowed\n\tclone = clone && !this.graph.isCellLocked(target || this.graph.getDefaultParent());\n\t\n\t// Passes all selected cells in order to correctly clone or move into\n\t// the target cell. The method checks for each cell if its movable.\n\tcells = this.graph.moveCells(cells, dx - this.graph.panDx / this.graph.view.scale,\n\t\t\tdy - this.graph.panDy / this.graph.view.scale, clone, target, evt);\n\t\n\tif (this.isSelectEnabled() && this.scrollOnMove)\n\t{\n\t\tthis.graph.scrollCellToVisible(cells[0]);\n\t}\n\t\t\t\n\t// Selects the new cells if cells have been cloned\n\tif (clone)\n\t{\n\t\tthis.graph.setSelectionCells(cells);\n\t}\n};\n\n/**\n * Function: destroyShapes\n * \n * Destroy the preview and highlight shapes.\n */\nmxGraphHandler.prototype.destroyShapes = function()\n{\n\t// Destroys the preview dashed rectangle\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.guide != null)\n\t{\n\t\tthis.guide.destroy();\n\t\tthis.guide = null;\n\t}\n\t\n\t// Destroys the drop target highlight\n\tif (this.highlight != null)\n\t{\n\t\tthis.highlight.destroy();\n\t\tthis.highlight = null;\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxGraphHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.panHandler);\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n\t\n\tthis.destroyShapes();\n\tthis.removeHint();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPanningHandler\n * \n * Event handler that pans and creates popupmenus. To use the left\n * mousebutton for panning without interfering with cell moving and\n * resizing, use <isUseLeftButton> and <isIgnoreCell>. For grid size\n * steps while panning, use <useGrid>. This handler is built-into\n * <mxGraph.panningHandler> and enabled using <mxGraph.setPanning>.\n * \n * Constructor: mxPanningHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>\n * and pans the graph.\n *\n * Event: mxEvent.PAN_START\n *\n * Fires when the panning handler changes its <active> state to true. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN\n *\n * Fires while handle is processing events. The <code>event</code> property contains\n * the corresponding <mxMouseEvent>.\n *\n * Event: mxEvent.PAN_END\n *\n * Fires when the panning handler changes its <active> state to false. The\n * <code>event</code> property contains the corresponding <mxMouseEvent>.\n */\nfunction mxPanningHandler(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force panning event\n\t\tthis.forcePanningHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForcePanningEvent(me))\n\t\t\t{\n\t\t\t\tthis.start(me);\n\t\t\t\tthis.active = true;\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forcePanningHandler);\n\t\t\n\t\t// Handles pinch gestures\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.isPinchEnabled())\n\t\t\t{\n\t\t\t\tvar evt = eo.getProperty('event');\n\t\t\t\t\n\t\t\t\tif (!mxEvent.isConsumed(evt) && evt.type == 'gesturestart')\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\t\t// Forces start of panning when pinch gesture starts\n\t\t\t\t\tif (!this.active && this.mouseDownEvent != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.start(this.mouseDownEvent);\n\t\t\t\t\t\tthis.mouseDownEvent = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (evt.type == 'gestureend' && this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tthis.initialScale = null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (this.initialScale != null)\n\t\t\t\t{\n\t\t\t\t\tvar value = Math.round(this.initialScale * evt.scale * 100) / 100;\n\t\t\t\t\t\n\t\t\t\t\tif (this.minScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.max(this.minScale, value);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif (this.maxScale != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue = Math.min(this.maxScale, value);\n\t\t\t\t\t}\n\t\n\t\t\t\t\tif (this.graph.view.scale != value)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.graph.zoomTo(value);\n\t\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.mouseUpListener = mxUtils.bind(this, function()\n\t\t{\n\t\t    \tif (this.active)\n\t\t    \t{\n\t\t    \t\tthis.reset();\n\t\t    \t}\n\t\t});\n\t\t\n\t\t// Stops scrolling on every mouseup anywhere in the document\n\t\tmxEvent.addListener(document, 'mouseup', this.mouseUpListener);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxPanningHandler.prototype = new mxEventSource();\nmxPanningHandler.prototype.constructor = mxPanningHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPanningHandler.prototype.graph = null;\n\n/**\n * Variable: useLeftButtonForPanning\n * \n * Specifies if panning should be active for the left mouse button.\n * Setting this to true may conflict with <mxRubberband>. Default is false.\n */\nmxPanningHandler.prototype.useLeftButtonForPanning = false;\n\n/**\n * Variable: usePopupTrigger\n * \n * Specifies if <mxEvent.isPopupTrigger> should also be used for panning.\n */\nmxPanningHandler.prototype.usePopupTrigger = true;\n\n/**\n * Variable: ignoreCell\n * \n * Specifies if panning should be active even if there is a cell under the\n * mousepointer. Default is false.\n */\nmxPanningHandler.prototype.ignoreCell = false;\n\n/**\n * Variable: previewEnabled\n * \n * Specifies if the panning should be previewed. Default is true.\n */\nmxPanningHandler.prototype.previewEnabled = true;\n\n/**\n * Variable: useGrid\n * \n * Specifies if the panning steps should be aligned to the grid size.\n * Default is false.\n */\nmxPanningHandler.prototype.useGrid = false;\n\n/**\n * Variable: panningEnabled\n * \n * Specifies if panning should be enabled. Default is true.\n */\nmxPanningHandler.prototype.panningEnabled = true;\n\n/**\n * Variable: pinchEnabled\n * \n * Specifies if pinch gestures should be handled as zoom. Default is true.\n */\nmxPanningHandler.prototype.pinchEnabled = true;\n\n/**\n * Variable: maxScale\n * \n * Specifies the maximum scale. Default is 8.\n */\nmxPanningHandler.prototype.maxScale = 8;\n\n/**\n * Variable: minScale\n * \n * Specifies the minimum scale. Default is 0.01.\n */\nmxPanningHandler.prototype.minScale = 0.01;\n\n/**\n * Variable: dx\n * \n * Holds the current horizontal offset.\n */\nmxPanningHandler.prototype.dx = null;\n\n/**\n * Variable: dy\n * \n * Holds the current vertical offset.\n */\nmxPanningHandler.prototype.dy = null;\n\n/**\n * Variable: startX\n * \n * Holds the x-coordinate of the start point.\n */\nmxPanningHandler.prototype.startX = 0;\n\n/**\n * Variable: startY\n * \n * Holds the y-coordinate of the start point.\n */\nmxPanningHandler.prototype.startY = 0;\n\n/**\n * Function: isActive\n * \n * Returns true if the handler is currently active.\n */\nmxPanningHandler.prototype.isActive = function()\n{\n\treturn this.active || this.initialScale != null;\n};\n\n/**\n * Function: isPanningEnabled\n * \n * Returns <panningEnabled>.\n */\nmxPanningHandler.prototype.isPanningEnabled = function()\n{\n\treturn this.panningEnabled;\n};\n\n/**\n * Function: setPanningEnabled\n * \n * Sets <panningEnabled>.\n */\nmxPanningHandler.prototype.setPanningEnabled = function(value)\n{\n\tthis.panningEnabled = value;\n};\n\n/**\n * Function: isPinchEnabled\n * \n * Returns <pinchEnabled>.\n */\nmxPanningHandler.prototype.isPinchEnabled = function()\n{\n\treturn this.pinchEnabled;\n};\n\n/**\n * Function: setPinchEnabled\n * \n * Sets <pinchEnabled>.\n */\nmxPanningHandler.prototype.setPinchEnabled = function(value)\n{\n\tthis.pinchEnabled = value;\n};\n\n/**\n * Function: isPanningTrigger\n * \n * Returns true if the given event is a panning trigger for the optional\n * given cell. This returns true if control-shift is pressed or if\n * <usePopupTrigger> is true and the event is a popup trigger.\n */\nmxPanningHandler.prototype.isPanningTrigger = function(me)\n{\n\tvar evt = me.getEvent();\n\t\n\treturn (this.useLeftButtonForPanning && me.getState() == null &&\n\t\t\tmxEvent.isLeftMouseButton(evt)) || (mxEvent.isControlDown(evt) &&\n\t\t\tmxEvent.isShiftDown(evt)) || (this.usePopupTrigger && mxEvent.isPopupTrigger(evt));\n};\n\n/**\n * Function: isForcePanningEvent\n * \n * Returns true if the given <mxMouseEvent> should start panning. This\n * implementation always returns true if <ignoreCell> is true or for\n * multi touch events.\n */\nmxPanningHandler.prototype.isForcePanningEvent = function(me)\n{\n\treturn this.ignoreCell || mxEvent.isMultiTouchEvent(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPanningHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownEvent = me;\n\t\n\tif (!me.isConsumed() && this.isPanningEnabled() && !this.active && this.isPanningTrigger(me))\n\t{\n\t\tthis.start(me);\n\t\tthis.consumePanningTrigger(me);\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts panning at the given event.\n */\nmxPanningHandler.prototype.start = function(me)\n{\n\tthis.dx0 = -this.graph.container.scrollLeft;\n\tthis.dy0 = -this.graph.container.scrollTop;\n\n\t// Stores the location of the trigger event\n\tthis.startX = me.getX();\n\tthis.startY = me.getY();\n\tthis.dx = null;\n\tthis.dy = null;\n\t\n\tthis.panningTrigger = true;\n};\n\n/**\n * Function: consumePanningTrigger\n * \n * Consumes the given <mxMouseEvent> if it was a panning trigger in\n * <mouseDown>. The default is to invoke <mxMouseEvent.consume>. Note that this\n * will block any further event processing. If you haven't disabled built-in\n * context menus and require immediate selection of the cell on mouseDown in\n * Safari and/or on the Mac, then use the following code:\n * \n * (code)\n * mxPanningHandler.prototype.consumePanningTrigger = function(me)\n * {\n *   if (me.evt.preventDefault)\n *   {\n *     me.evt.preventDefault();\n *   }\n *   \n *   // Stops event processing in IE\n *   me.evt.returnValue = false;\n *   \n *   // Sets local consumed state\n *   if (!mxClient.IS_SF && !mxClient.IS_MAC)\n *   {\n *     me.consumed = true;\n *   }\n * };\n * (end)\n */\nmxPanningHandler.prototype.consumePanningTrigger = function(me)\n{\n\tme.consume();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPanningHandler.prototype.mouseMove = function(sender, me)\n{\n\tthis.dx = me.getX() - this.startX;\n\tthis.dy = me.getY() - this.startY;\n\t\n\tif (this.active)\n\t{\n\t\tif (this.previewEnabled)\n\t\t{\n\t\t\t// Applies the grid to the panning steps\n\t\t\tif (this.useGrid)\n\t\t\t{\n\t\t\t\tthis.dx = this.graph.snap(this.dx);\n\t\t\t\tthis.dy = this.graph.snap(this.dy);\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.panGraph(this.dx + this.dx0, this.dy + this.dy0);\n\t\t}\n\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN, 'event', me));\n\t}\n\telse if (this.panningTrigger)\n\t{\n\t\tvar tmp = this.active;\n\n\t\t// Panning is activated only if the mouse is moved\n\t\t// beyond the graph tolerance\n\t\tthis.active = Math.abs(this.dx) > this.graph.tolerance || Math.abs(this.dy) > this.graph.tolerance;\n\n\t\tif (!tmp && this.active)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_START, 'event', me));\n\t\t}\n\t}\n\t\n\tif (this.active || this.panningTrigger)\n\t{\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.active)\n\t{\n\t\tif (this.dx != null && this.dy != null)\n\t\t{\n\t\t\t// Ignores if scrollbars have been used for panning\n\t\t\tif (!this.graph.useScrollbarsForPanning || !mxUtils.hasScrollbars(this.graph.container))\n\t\t\t{\n\t\t\t\tvar scale = this.graph.getView().scale;\n\t\t\t\tvar t = this.graph.getView().translate;\n\t\t\t\tthis.graph.panGraph(0, 0);\n\t\t\t\tthis.panGraph(t.x + this.dx / scale, t.y + this.dy / scale);\n\t\t\t}\n\t\t\t\n\t\t\tme.consume();\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.PAN_END, 'event', me));\n\t}\n\t\n\tthis.reset();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPanningHandler.prototype.reset = function()\n{\n\tthis.panningTrigger = false;\n\tthis.mouseDownEvent = null;\n\tthis.active = false;\n\tthis.dx = null;\n\tthis.dy = null;\n};\n\n/**\n * Function: panGraph\n * \n * Pans <graph> by the given amount.\n */\nmxPanningHandler.prototype.panGraph = function(dx, dy)\n{\n\tthis.graph.getView().setTranslate(dx, dy);\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPanningHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.forcePanningHandler);\n\tthis.graph.removeListener(this.gestureHandler);\n\tmxEvent.removeListener(document, 'mouseup', this.mouseUpListener);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxPopupMenuHandler\n * \n * Event handler that creates popupmenus.\n * \n * Constructor: mxPopupMenuHandler\n * \n * Constructs an event handler that creates a <mxPopupMenu>.\n */\nfunction mxPopupMenuHandler(graph, factoryMethod)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.graph.addMouseListener(this);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\tthis.init();\n\t}\n};\n\n/**\n * Extends mxPopupMenu.\n */\nmxPopupMenuHandler.prototype = new mxPopupMenu();\nmxPopupMenuHandler.prototype.constructor = mxPopupMenuHandler;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxPopupMenuHandler.prototype.graph = null;\n\n/**\n * Variable: selectOnPopup\n * \n * Specifies if cells should be selected if a popupmenu is displayed for\n * them. Default is true.\n */\nmxPopupMenuHandler.prototype.selectOnPopup = true;\n\n/**\n * Variable: clearSelectionOnBackground\n * \n * Specifies if cells should be deselected if a popupmenu is displayed for\n * the diagram background. Default is true.\n */\nmxPopupMenuHandler.prototype.clearSelectionOnBackground = true;\n\n/**\n * Variable: triggerX\n * \n * X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerX = null;\n\n/**\n * Variable: triggerY\n * \n * Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.triggerY = null;\n\n/**\n * Variable: screenX\n * \n * Screen X-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenX = null;\n\n/**\n * Variable: screenY\n * \n * Screen Y-coordinate of the mouse down event.\n */\nmxPopupMenuHandler.prototype.screenY = null;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxPopupMenuHandler.prototype.init = function()\n{\n\t// Supercall\n\tmxPopupMenu.prototype.init.apply(this);\n\n\t// Hides the tooltip if the mouse is over\n\t// the context menu\n\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.graph.tooltipHandler.hide();\n\t}));\n};\n\n/**\n * Function: isSelectOnPopup\n * \n * Hook for returning if a cell should be selected for a given <mxMouseEvent>.\n * This implementation returns <selectOnPopup>.\n */\nmxPopupMenuHandler.prototype.isSelectOnPopup = function(me)\n{\n\treturn this.selectOnPopup;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating the panning. By consuming the event all\n * subsequent events of the gesture are redirected to this handler.\n */\nmxPopupMenuHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.isEnabled() && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\t// Hides the popupmenu if is is being displayed\n\t\tthis.hideMenu();\n\t\tthis.triggerX = me.getGraphX();\n\t\tthis.triggerY = me.getGraphY();\n\t\tthis.screenX = mxEvent.getMainEvent(me.getEvent()).screenX;\n\t\tthis.screenY = mxEvent.getMainEvent(me.getEvent()).screenY;\n\t\tthis.popupTrigger = this.isPopupTrigger(me);\n\t\tthis.inTolerance = true;\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the panning on the graph.\n */\nmxPopupMenuHandler.prototype.mouseMove = function(sender, me)\n{\n\t// Popup trigger may change on mouseUp so ignore it\n\tif (this.inTolerance && this.screenX != null && this.screenY != null)\n\t{\n\t\tif (Math.abs(mxEvent.getMainEvent(me.getEvent()).screenX - this.screenX) > this.graph.tolerance ||\n\t\t\tMath.abs(mxEvent.getMainEvent(me.getEvent()).screenY - this.screenY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by setting the translation on the view or showing the\n * popupmenu.\n */\nmxPopupMenuHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.popupTrigger && this.inTolerance && this.triggerX != null && this.triggerY != null)\n\t{\n\t\tvar cell = this.getCellForPopupEvent(me);\n\n\t\t// Selects the cell for which the context menu is being displayed\n\t\tif (this.graph.isEnabled() && this.isSelectOnPopup(me) &&\n\t\t\tcell != null && !this.graph.isCellSelected(cell))\n\t\t{\n\t\t\tthis.graph.setSelectionCell(cell);\n\t\t}\n\t\telse if (this.clearSelectionOnBackground && cell == null)\n\t\t{\n\t\t\tthis.graph.clearSelection();\n\t\t}\n\t\t\n\t\t// Hides the tooltip if there is one\n\t\tthis.graph.tooltipHandler.hide();\n\n\t\t// Menu is shifted by 1 pixel so that the mouse up event\n\t\t// is routed via the underlying shape instead of the DIV\n\t\tvar origin = mxUtils.getScrollOrigin();\n\t\tthis.popup(me.getX() + origin.x + 1, me.getY() + origin.y + 1, cell, me.getEvent());\n\t\tme.consume();\n\t}\n\t\n\tthis.popupTrigger = false;\n\tthis.inTolerance = false;\n};\n\n/**\n * Function: getCellForPopupEvent\n * \n * Hook to return the cell for the mouse up popup trigger handling.\n */\nmxPopupMenuHandler.prototype.getCellForPopupEvent = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxPopupMenuHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\tthis.graph.removeListener(this.gestureHandler);\n\t\n\t// Supercall\n\tmxPopupMenu.prototype.destroy.apply(this);\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellMarker\n * \n * A helper class to process mouse locations and highlight cells.\n * \n * Helper class to highlight cells. To add a cell marker to an existing graph\n * for highlighting all cells, the following code is used:\n * \n * (code)\n * var marker = new mxCellMarker(graph);\n * graph.addMouseListener({\n *   mouseDown: function() {},\n *   mouseMove: function(sender, me)\n *   {\n *     marker.process(me);\n *   },\n *   mouseUp: function() {}\n * });\n * (end)\n *\n * Event: mxEvent.MARK\n * \n * Fires after a cell has been marked or unmarked. The <code>state</code>\n * property contains the marked <mxCellState> or null if no state is marked.\n * \n * Constructor: mxCellMarker\n * \n * Constructs a new cell marker.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * validColor - Optional marker color for valid states. Default is\n * <mxConstants.DEFAULT_VALID_COLOR>.\n * invalidColor - Optional marker color for invalid states. Default is\n * <mxConstants.DEFAULT_INVALID_COLOR>.\n * hotspot - Portion of the width and hight where a state intersects a\n * given coordinate pair. A value of 0 means always highlight. Default is\n * <mxConstants.DEFAULT_HOTSPOT>.\n */\nfunction mxCellMarker(graph, validColor, invalidColor, hotspot)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.validColor = (validColor != null) ? validColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.invalidColor = (invalidColor != null) ? invalidColor : mxConstants.DEFAULT_INVALID_COLOR;\n\t\tthis.hotspot = (hotspot != null) ? hotspot : mxConstants.DEFAULT_HOTSPOT;\n\t\t\n\t\tthis.highlight = new mxCellHighlight(graph);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxCellMarker, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellMarker.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if the marker is enabled. Default is true.\n */\nmxCellMarker.prototype.enabled = true;\n\n/**\n * Variable: hotspot\n * \n * Specifies the portion of the width and height that should trigger\n * a highlight. The area around the center of the cell to be marked is used\n * as the hotspot. Possible values are between 0 and 1. Default is\n * mxConstants.DEFAULT_HOTSPOT.\n */\nmxCellMarker.prototype.hotspot = mxConstants.DEFAULT_HOTSPOT; \n\n/**\n * Variable: hotspotEnabled\n * \n * Specifies if the hotspot is enabled. Default is false.\n */\nmxCellMarker.prototype.hotspotEnabled = false;\n\n/**\n * Variable: validColor\n * \n * Holds the valid marker color.\n */\nmxCellMarker.prototype.validColor = null;\n\n/**\n * Variable: invalidColor\n * \n * Holds the invalid marker color.\n */\nmxCellMarker.prototype.invalidColor = null;\n\n/**\n * Variable: currentColor\n * \n * Holds the current marker color.\n */\nmxCellMarker.prototype.currentColor = null;\n\n/**\n * Variable: validState\n * \n * Holds the marked <mxCellState> if it is valid.\n */\nmxCellMarker.prototype.validState = null; \n\n/**\n * Variable: markedState\n * \n * Holds the marked <mxCellState>.\n */\nmxCellMarker.prototype.markedState = null;\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxCellMarker.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxCellMarker.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setHotspot\n * \n * Sets the <hotspot>.\n */\nmxCellMarker.prototype.setHotspot = function(hotspot)\n{\n\tthis.hotspot = hotspot;\n};\n\n/**\n * Function: getHotspot\n * \n * Returns the <hotspot>.\n */\nmxCellMarker.prototype.getHotspot = function()\n{\n\treturn this.hotspot;\n};\n\n/**\n * Function: setHotspotEnabled\n * \n * Specifies whether the hotspot should be used in <intersects>.\n */\nmxCellMarker.prototype.setHotspotEnabled = function(enabled)\n{\n\tthis.hotspotEnabled = enabled;\n};\n\n/**\n * Function: isHotspotEnabled\n * \n * Returns true if hotspot is used in <intersects>.\n */\nmxCellMarker.prototype.isHotspotEnabled = function()\n{\n\treturn this.hotspotEnabled;\n};\n\n/**\n * Function: hasValidState\n * \n * Returns true if <validState> is not null.\n */\nmxCellMarker.prototype.hasValidState = function()\n{\n\treturn this.validState != null;\n};\n\n/**\n * Function: getValidState\n * \n * Returns the <validState>.\n */\nmxCellMarker.prototype.getValidState = function()\n{\n\treturn this.validState;\n};\n\n/**\n * Function: getMarkedState\n * \n * Returns the <markedState>.\n */\nmxCellMarker.prototype.getMarkedState = function()\n{\n\treturn this.markedState;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the cell marker.\n */\nmxCellMarker.prototype.reset = function()\n{\n\tthis.validState = null;\n\t\n\tif (this.markedState != null)\n\t{\n\t\tthis.markedState = null;\n\t\tthis.unmark();\n\t}\n};\n\n/**\n * Function: process\n * \n * Processes the given event and cell and marks the state returned by\n * <getState> with the color returned by <getMarkerColor>. If the\n * markerColor is not null, then the state is stored in <markedState>. If\n * <isValidState> returns true, then the state is stored in <validState>\n * regardless of the marker color. The state is returned regardless of the\n * marker color and valid state. \n */\nmxCellMarker.prototype.process = function(me)\n{\n\tvar state = null;\n\t\n\tif (this.isEnabled())\n\t{\n\t\tstate = this.getState(me);\n\t\tthis.setCurrentState(state, me);\n\t}\n\t\n\treturn state;\n};\n\n/**\n * Function: setCurrentState\n * \n * Sets and marks the current valid state.\n */\nmxCellMarker.prototype.setCurrentState = function(state, me, color)\n{\n\tvar isValid = (state != null) ? this.isValidState(state) : false;\n\tcolor = (color != null) ? color : this.getMarkerColor(me.getEvent(), state, isValid);\n\t\n\tif (isValid)\n\t{\n\t\tthis.validState = state;\n\t}\n\telse\n\t{\n\t\tthis.validState = null;\n\t}\n\t\n\tif (state != this.markedState || color != this.currentColor)\n\t{\n\t\tthis.currentColor = color;\n\t\t\n\t\tif (state != null && this.currentColor != null)\n\t\t{\n\t\t\tthis.markedState = state;\n\t\t\tthis.mark();\t\t\n\t\t}\n\t\telse if (this.markedState != null)\n\t\t{\n\t\t\tthis.markedState = null;\n\t\t\tthis.unmark();\n\t\t}\n\t}\n};\n\n/**\n * Function: markCell\n * \n * Marks the given cell using the given color, or <validColor> if no color is specified.\n */\nmxCellMarker.prototype.markCell = function(cell, color)\n{\n\tvar state = this.graph.getView().getState(cell);\n\t\n\tif (state != null)\n\t{\n\t\tthis.currentColor = (color != null) ? color : this.validColor;\n\t\tthis.markedState = state;\n\t\tthis.mark();\n\t}\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellMarker.prototype.mark = function()\n{\n\tthis.highlight.setHighlightColor(this.currentColor);\n\tthis.highlight.highlight(this.markedState);\n\tthis.fireEvent(new mxEventObject(mxEvent.MARK, 'state', this.markedState));\n};\n\n/**\n * Function: unmark\n * \n * Hides the marker and fires a <mark> event.\n */\nmxCellMarker.prototype.unmark = function()\n{\n\tthis.mark();\n};\n\n/**\n * Function: isValidState\n * \n * Returns true if the given <mxCellState> is a valid state. If this\n * returns true, then the state is stored in <validState>. The return value\n * of this method is used as the argument for <getMarkerColor>.\n */\nmxCellMarker.prototype.isValidState = function(state)\n{\n\treturn true;\n};\n\n/**\n * Function: getMarkerColor\n * \n * Returns the valid- or invalidColor depending on the value of isValid.\n * The given <mxCellState> is ignored by this implementation.\n */\nmxCellMarker.prototype.getMarkerColor = function(evt, state, isValid)\n{\n\treturn (isValid) ? this.validColor : this.invalidColor;\n};\n\n/**\n * Function: getState\n * \n * Uses <getCell>, <getStateToMark> and <intersects> to return the\n * <mxCellState> for the given <mxMouseEvent>.\n */\nmxCellMarker.prototype.getState = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar cell = this.getCell(me);\n\tvar state = this.getStateToMark(view.getState(cell));\n\n\treturn (state != null && this.intersects(state, me)) ? state : null;\n};\n\n/**\n * Function: getCell\n * \n * Returns the <mxCell> for the given event and cell. This returns the\n * given cell.\n */\nmxCellMarker.prototype.getCell = function(me)\n{\n\treturn me.getCell();\n};\n\n/**\n * Function: getStateToMark\n * \n * Returns the <mxCellState> to be marked for the given <mxCellState> under\n * the mouse. This returns the given state.\n */\nmxCellMarker.prototype.getStateToMark = function(state)\n{\n\treturn state;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given coordinate pair intersects the given state.\n * This returns true if the <hotspot> is 0 or the coordinates are inside\n * the hotspot for the given cell state.\n */\nmxCellMarker.prototype.intersects = function(state, me)\n{\n\tif (this.hotspotEnabled)\n\t{\n\t\treturn mxUtils.intersectsHotspot(state, me.getGraphX(), me.getGraphY(),\n\t\t\tthis.hotspot, mxConstants.MIN_HOTSPOT_SIZE,\n\t\t\tmxConstants.MAX_HOTSPOT_SIZE);\n\t}\n\t\n\treturn true;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellMarker.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getModel().removeListener(this.resetHandler);\n\tthis.highlight.destroy();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxSelectionCellsHandler\n * \n * An event handler that manages cell handlers and invokes their mouse event\n * processing functions.\n * \n * Group: Events\n * \n * Event: mxEvent.ADD\n * \n * Fires if a cell has been added to the selection. The <code>state</code>\n * property contains the <mxCellState> that has been added.\n * \n * Event: mxEvent.REMOVE\n * \n * Fires if a cell has been remove from the selection. The <code>state</code>\n * property contains the <mxCellState> that has been removed.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n */\nfunction mxSelectionCellsHandler(graph)\n{\n\tmxEventSource.call(this);\n\t\n\tthis.graph = graph;\n\tthis.handlers = new mxDictionary();\n\tthis.graph.addMouseListener(this);\n\t\n\tthis.refreshHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.isEnabled())\n\t\t{\n\t\t\tthis.refresh();\n\t\t}\n\t});\n\t\n\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.refreshHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.refreshHandler);\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxSelectionCellsHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxSelectionCellsHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxSelectionCellsHandler.prototype.enabled = true;\n\n/**\n * Variable: refreshHandler\n * \n * Keeps a reference to an event listener for later removal.\n */\nmxSelectionCellsHandler.prototype.refreshHandler = null;\n\n/**\n * Variable: maxHandlers\n * \n * Defines the maximum number of handlers to paint individually. Default is 100.\n */\nmxSelectionCellsHandler.prototype.maxHandlers = 100;\n\n/**\n * Variable: handlers\n * \n * <mxDictionary> that maps from cells to handlers.\n */\nmxSelectionCellsHandler.prototype.handlers = null;\n\n/**\n * Function: isEnabled\n * \n * Returns <enabled>.\n */\nmxSelectionCellsHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Sets <enabled>.\n */\nmxSelectionCellsHandler.prototype.setEnabled = function(value)\n{\n\tthis.enabled = value;\n};\n\n/**\n * Function: getHandler\n * \n * Returns the handler for the given cell.\n */\nmxSelectionCellsHandler.prototype.getHandler = function(cell)\n{\n\treturn this.handlers.get(cell);\n};\n\n/**\n * Function: reset\n * \n * Resets all handlers.\n */\nmxSelectionCellsHandler.prototype.reset = function()\n{\n\tthis.handlers.visit(function(key, handler)\n\t{\n\t\thandler.reset.apply(handler);\n\t});\n};\n\n/**\n * Function: refresh\n * \n * Reloads or updates all handlers.\n */\nmxSelectionCellsHandler.prototype.refresh = function()\n{\n\t// Removes all existing handlers\n\tvar oldHandlers = this.handlers;\n\tthis.handlers = new mxDictionary();\n\t\n\t// Creates handles for all selection cells\n\tvar tmp = this.graph.getSelectionCells();\n\n\tfor (var i = 0; i < tmp.length; i++)\n\t{\n\t\tvar state = this.graph.view.getState(tmp[i]);\n\n\t\tif (state != null)\n\t\t{\n\t\t\tvar handler = oldHandlers.remove(tmp[i]);\n\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tif (handler.state != state)\n\t\t\t\t{\n\t\t\t\t\thandler.destroy();\n\t\t\t\t\thandler = null;\n\t\t\t\t}\n\t\t\t\telse if (!this.isHandlerActive(handler))\n\t\t\t\t{\n\t\t\t\t\tif (handler.refresh != null)\n\t\t\t\t\t{\n\t\t\t\t\t\thandler.refresh();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\thandler.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (handler == null)\n\t\t\t{\n\t\t\t\thandler = this.graph.createHandler(state);\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD, 'state', state));\n\t\t\t}\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.handlers.put(tmp[i], handler);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Destroys all unused handlers\n\toldHandlers.visit(mxUtils.bind(this, function(key, handler)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.REMOVE, 'state', handler.state));\n\t\thandler.destroy();\n\t}));\n};\n\n/**\n * Function: isHandlerActive\n * \n * Returns true if the given handler is active and should not be redrawn.\n */\nmxSelectionCellsHandler.prototype.isHandlerActive = function(handler)\n{\n\treturn handler.index != null;\n};\n\n/**\n * Function: updateHandler\n * \n * Updates the handler for the given shape if one exists.\n */\nmxSelectionCellsHandler.prototype.updateHandler = function(state)\n{\n\tvar handler = this.handlers.remove(state.cell);\n\t\n\tif (handler != null)\n\t{\n\t\thandler.destroy();\n\t\thandler = this.graph.createHandler(state);\n\t\t\n\t\tif (handler != null)\n\t\t{\n\t\t\tthis.handlers.put(state.cell, handler);\n\t\t}\n\t}\n};\n\n/**\n * Function: mouseDown\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseDown = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseDown.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseMove.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Redirects the given event to the handlers.\n */\nmxSelectionCellsHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.graph.isEnabled() && this.isEnabled())\n\t{\n\t\tvar args = [sender, me];\n\n\t\tthis.handlers.visit(function(key, handler)\n\t\t{\n\t\t\thandler.mouseUp.apply(handler, args);\n\t\t});\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxSelectionCellsHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.refreshHandler != null)\n\t{\n\t\tthis.graph.getSelectionModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getModel().removeListener(this.refreshHandler);\n\t\tthis.graph.getView().removeListener(this.refreshHandler);\n\t\tthis.refreshHandler = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxConnectionHandler\n *\n * Graph event handler that creates new connections. Uses <mxTerminalMarker>\n * for finding and highlighting the source and target vertices and\n * <factoryMethod> to create the edge instance. This handler is built-into\n * <mxGraph.connectionHandler> and enabled using <mxGraph.setConnectable>.\n *\n * Example:\n * \n * (code)\n * new mxConnectionHandler(graph, function(source, target, style)\n * {\n *   edge = new mxCell('', new mxGeometry());\n *   edge.setEdge(true);\n *   edge.setStyle(style);\n *   edge.geometry.relative = true;\n *   return edge;\n * });\n * (end)\n * \n * Here is an alternative solution that just sets a specific user object for\n * new edges by overriding <insertEdge>.\n *\n * (code)\n * mxConnectionHandlerInsertEdge = mxConnectionHandler.prototype.insertEdge;\n * mxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n * {\n *   value = 'Test';\n * \n *   return mxConnectionHandlerInsertEdge.apply(this, arguments);\n * };\n * (end)\n * \n * Using images to trigger connections:\n * \n * This handler uses mxTerminalMarker to find the source and target cell for\n * the new connection and creates a new edge using <connect>. The new edge is\n * created using <createEdge> which in turn uses <factoryMethod> or creates a\n * new default edge.\n * \n * The handler uses a \"highlight-paradigm\" for indicating if a cell is being\n * used as a source or target terminal, as seen in other diagramming products.\n * In order to allow both, moving and connecting cells at the same time,\n * <mxConstants.DEFAULT_HOTSPOT> is used in the handler to determine the hotspot\n * of a cell, that is, the region of the cell which is used to trigger a new\n * connection. The constant is a value between 0 and 1 that specifies the\n * amount of the width and height around the center to be used for the hotspot\n * of a cell and its default value is 0.5. In addition,\n * <mxConstants.MIN_HOTSPOT_SIZE> defines the minimum number of pixels for the\n * width and height of the hotspot.\n * \n * This solution, while standards compliant, may be somewhat confusing because\n * there is no visual indicator for the hotspot and the highlight is seen to\n * switch on and off while the mouse is being moved in and out. Furthermore,\n * this paradigm does not allow to create different connections depending on\n * the highlighted hotspot as there is only one hotspot per cell and it\n * normally does not allow cells to be moved and connected at the same time as\n * there is no clear indication of the connectable area of the cell.\n * \n * To come across these issues, the handle has an additional <createIcons> hook\n * with a default implementation that allows to create one icon to be used to\n * trigger new connections. If this icon is specified, then new connections can\n * only be created if the image is clicked while the cell is being highlighted.\n * The <createIcons> hook may be overridden to create more than one\n * <mxImageShape> for creating new connections, but the default implementation\n * supports one image and is used as follows:\n * \n * In order to display the \"connect image\" whenever the mouse is over the cell,\n * an DEFAULT_HOTSPOT of 1 should be used:\n * \n * (code)\n * mxConstants.DEFAULT_HOTSPOT = 1;\n * (end)\n * \n * In order to avoid confusion with the highlighting, the highlight color\n * should not be used with a connect image:\n * \n * (code)\n * mxConstants.HIGHLIGHT_COLOR = null;\n * (end)\n * \n * To install the image, the connectImage field of the mxConnectionHandler must\n * be assigned a new <mxImage> instance:\n * \n * (code)\n * mxConnectionHandler.prototype.connectImage = new mxImage('images/green-dot.gif', 14, 14);\n * (end)\n * \n * This will use the green-dot.gif with a width and height of 14 pixels as the\n * image to trigger new connections. In createIcons the icon field of the\n * handler will be set in order to remember the icon that has been clicked for\n * creating the new connection. This field will be available under selectedIcon\n * in the connect method, which may be overridden to take the icon that\n * triggered the new connection into account. This is useful if more than one\n * icon may be used to create a connection.\n *\n * Group: Events\n * \n * Event: mxEvent.START\n * \n * Fires when a new connection is being created by the user. The <code>state</code>\n * property contains the state of the source cell.\n * \n * Event: mxEvent.CONNECT\n * \n * Fires between begin- and endUpdate in <connect>. The <code>cell</code>\n * property contains the inserted edge, the <code>event</code> and <code>target</code> \n * properties contain the respective arguments that were passed to <connect> (where\n * target corresponds to the dropTarget argument). Finally, the <code>terminal</code>\n * property corresponds to the target argument in <connect> or the clone of the source\n * terminal if <createTarget> is enabled.\n * \n * Note that the target is the cell under the mouse where the mouse button was released.\n * Depending on the logic in the handler, this doesn't necessarily have to be the target\n * of the inserted edge. To print the source, target or any optional ports IDs that the\n * edge is connected to, the following code can be used. To get more details about the\n * actual connection point, <mxGraph.getConnectionConstraint> can be used. To resolve\n * the port IDs, use <mxGraphModel.getCell>.\n * \n * (code)\n * graph.connectionHandler.addListener(mxEvent.CONNECT, function(sender, evt)\n * {\n *   var edge = evt.getProperty('cell');\n *   var source = graph.getModel().getTerminal(edge, true);\n *   var target = graph.getModel().getTerminal(edge, false);\n *   \n *   var style = graph.getCellStyle(edge);\n *   var sourcePortId = style[mxConstants.STYLE_SOURCE_PORT];\n *   var targetPortId = style[mxConstants.STYLE_TARGET_PORT];\n *   \n *   mxLog.show();\n *   mxLog.debug('connect', edge, source.id, target.id, sourcePortId, targetPortId);\n * });\n * (end)\n *\n * Event: mxEvent.RESET\n * \n * Fires when the <reset> method is invoked.\n *\n * Constructor: mxConnectionHandler\n *\n * Constructs an event handler that connects vertices using the specified\n * factory method to create the new edges. Modify\n * <mxConstants.ACTIVE_REGION> to setup the region on a cell which triggers\n * the creation of a new connection or use connect icons as explained\n * above.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and an\n * optional cell style from the preview as the third argument. It returns\n * the <mxCell> that represents the new edge.\n */\nfunction mxConnectionHandler(graph, factoryMethod)\n{\n\tmxEventSource.call(this);\n\t\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.factoryMethod = factoryMethod;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Extends mxEventSource.\n */\nmxUtils.extend(mxConnectionHandler, mxEventSource);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConnectionHandler.prototype.graph = null;\n\n/**\n * Variable: factoryMethod\n * \n * Function that is used for creating new edges. The function takes the\n * source and target <mxCell> as the first and second argument and returns\n * a new <mxCell> that represents the edge. This is used in <createEdge>.\n */\nmxConnectionHandler.prototype.factoryMethod = true;\n\n/**\n * Variable: moveIconFront\n * \n * Specifies if icons should be displayed inside the graph container instead\n * of the overlay pane. This is used for HTML labels on vertices which hide\n * the connect icon. This has precendence over <moveIconBack> when set\n * to true. Default is false.\n */\nmxConnectionHandler.prototype.moveIconFront = false;\n\n/**\n * Variable: moveIconBack\n * \n * Specifies if icons should be moved to the back of the overlay pane. This can\n * be set to true if the icons of the connection handler conflict with other\n * handles, such as the vertex label move handle. Default is false.\n */\nmxConnectionHandler.prototype.moveIconBack = false;\n\n/**\n * Variable: connectImage\n * \n * <mxImage> that is used to trigger the creation of a new connection. This\n * is used in <createIcons>. Default is null.\n */\nmxConnectionHandler.prototype.connectImage = null;\n\n/**\n * Variable: targetConnectImage\n * \n * Specifies if the connect icon should be centered on the target state\n * while connections are being previewed. Default is false.\n */\nmxConnectionHandler.prototype.targetConnectImage = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConnectionHandler.prototype.enabled = true;\n\n/**\n * Variable: select\n * \n * Specifies if new edges should be selected. Default is true.\n */\nmxConnectionHandler.prototype.select = true;\n\n/**\n * Variable: createTarget\n * \n * Specifies if <createTargetVertex> should be called if no target was under the\n * mouse for the new connection. Setting this to true means the connection\n * will be drawn as valid if no target is under the mouse, and\n * <createTargetVertex> will be called before the connection is created between\n * the source cell and the newly created vertex in <createTargetVertex>, which\n * can be overridden to create a new target. Default is false.\n */\nmxConnectionHandler.prototype.createTarget = false;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> used for finding source and target cells.\n */\nmxConnectionHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxConnectionHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while connections are being created.\n */\nmxConnectionHandler.prototype.error = null;\n\n/**\n * Variable: waypointsEnabled\n * \n * Specifies if single clicks should add waypoints on the new edge. Default is\n * false.\n */\nmxConnectionHandler.prototype.waypointsEnabled = false;\n\n/**\n * Variable: ignoreMouseDown\n * \n * Specifies if the connection handler should ignore the state of the mouse\n * button when highlighting the source. Default is false, that is, the\n * handler only highlights the source if no button is being pressed.\n */\nmxConnectionHandler.prototype.ignoreMouseDown = false;\n\n/**\n * Variable: first\n * \n * Holds the <mxPoint> where the mouseDown took place while the handler is\n * active.\n */\nmxConnectionHandler.prototype.first = null;\n\n/**\n * Variable: connectIconOffset\n * \n * Holds the offset for connect icons during connection preview.\n * Default is mxPoint(0, <mxConstants.TOOLTIP_VERTICAL_OFFSET>).\n * Note that placing the icon under the mouse pointer with an\n * offset of (0,0) will affect hit detection.\n */\nmxConnectionHandler.prototype.connectIconOffset = new mxPoint(0, mxConstants.TOOLTIP_VERTICAL_OFFSET);\n\n/**\n * Variable: edgeState\n * \n * Optional <mxCellState> that represents the preview edge while the\n * handler is active. This is created in <createEdgeState>.\n */\nmxConnectionHandler.prototype.edgeState = null;\n\n/**\n * Variable: changeHandler\n * \n * Holds the change event listener for later removal.\n */\nmxConnectionHandler.prototype.changeHandler = null;\n\n/**\n * Variable: drillHandler\n * \n * Holds the drill event listener for later removal.\n */\nmxConnectionHandler.prototype.drillHandler = null;\n\n/**\n * Variable: mouseDownCounter\n * \n * Counts the number of mouseDown events since the start. The initial mouse\n * down event counts as 1.\n */\nmxConnectionHandler.prototype.mouseDownCounter = 0;\n\n/**\n * Variable: movePreviewAway\n * \n * Switch to enable moving the preview away from the mousepointer. This is required in browsers\n * where the preview cannot be made transparent to events and if the built-in hit detection on\n * the HTML elements in the page should be used. Default is the value of <mxClient.IS_VML>.\n */\nmxConnectionHandler.prototype.movePreviewAway = mxClient.IS_VML;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxConnectionHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: livePreview\n * \n * Specifies if the actual shape of the edge state should be used for the preview.\n * Default is false. (Ignored if no edge state is created in <createEdgeState>.)\n */\nmxConnectionHandler.prototype.livePreview = false;\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used while the handler is active. Default is null.\n */\nmxConnectionHandler.prototype.cursor = null;\n\n/**\n * Variable: insertBeforeSource\n * \n * Specifies if new edges should be inserted before the source vertex in the\n * cell hierarchy. Default is false for backwards compatibility.\n */\nmxConnectionHandler.prototype.insertBeforeSource = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConnectionHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConnectionHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isInsertBefore\n * \n * Returns <insertBeforeSource> for non-loops and false for loops.\n *\n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be inserted.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.isInsertBefore = function(edge, source, target, evt, dropTarget)\n{\n\treturn this.insertBeforeSource && source != target;\n};\n\n/**\n * Function: isCreateTarget\n * \n * Returns <createTarget>.\n *\n * Parameters:\n *\n * evt - Current active native pointer event.\n */\nmxConnectionHandler.prototype.isCreateTarget = function(evt)\n{\n\treturn this.createTarget;\n};\n\n/**\n * Function: setCreateTarget\n * \n * Sets <createTarget>.\n */\nmxConnectionHandler.prototype.setCreateTarget = function(value)\n{\n\tthis.createTarget = value;\n};\n\n/**\n * Function: createShape\n * \n * Creates the preview shape for new connections.\n */\nmxConnectionHandler.prototype.createShape = function()\n{\n\t// Creates the edge preview\n\tvar shape = (this.livePreview && this.edgeState != null) ?\n\t\tthis.graph.cellRenderer.createShape(this.edgeState) :\n\t\tnew mxPolyline([], mxConstants.INVALID_COLOR);\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.scale = this.graph.view.scale;\n\tshape.pointerEvents = false;\n\tshape.isDashed = true;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, null);\n\n\treturn shape;\n};\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this connection handler. This should\n * be invoked if <mxGraph.container> is assigned after the connection\n * handler has been created.\n */\nmxConnectionHandler.prototype.init = function()\n{\n\tthis.graph.addMouseListener(this);\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\n\t// Redraws the icons if the graph changes\n\tthis.changeHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.iconState = this.graph.getView().getState(this.iconState.cell);\n\t\t}\n\t\t\n\t\tif (this.iconState != null)\n\t\t{\n\t\t\tthis.redrawIcons(this.icons, this.iconState);\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != null && this.graph.view.getState(this.previous.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t});\n\t\n\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.changeHandler);\n\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.changeHandler);\n\t\n\t// Removes the icon if we step into/up or start editing\n\tthis.drillHandler = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.reset();\n\t});\n\t\n\tthis.graph.addListener(mxEvent.START_EDITING, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.DOWN, this.drillHandler);\n\tthis.graph.getView().addListener(mxEvent.UP, this.drillHandler);\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxConnectionHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxConnectionHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tmarker.hotspotEnabled = true;\n\n\t// Overrides to return cell at location only if valid (so that\n\t// there is no highlight for invalid cells)\n\tmarker.getCell = mxUtils.bind(this, function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(marker, arguments);\n\t\tthis.error = null;\n\t\t\n\t\t// Checks for cell at preview point (with grid)\n\t\tif (cell == null && this.currentPoint != null)\n\t\t{\n\t\t\tcell = this.graph.getCellAt(this.currentPoint.x, this.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && this.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, this.currentPoint.x, this.currentPoint.y)) ||\n\t\t\t!this.isConnectableCell(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (cell != null)\n\t\t{\n\t\t\tif (this.isConnecting())\n\t\t\t{\n\t\t\t\tif (this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tthis.error = this.validateConnection(this.previous.cell, cell);\n\t\t\t\t\t\n\t\t\t\t\tif (this.error != null && this.error.length == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tcell = null;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Enables create target inside groups\n\t\t\t\t\t\tif (this.isCreateTarget(me.getEvent()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.error = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (!this.isValidSource(cell, me))\n\t\t\t{\n\t\t\t\tcell = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.isConnecting() && !this.isCreateTarget(me.getEvent()) &&\n\t\t\t\t!this.graph.allowDanglingEdges)\n\t\t{\n\t\t\tthis.error = '';\n\t\t}\n\n\t\treturn cell;\n\t});\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = mxUtils.bind(this, function(state)\n\t{\n\t\tif (this.isConnecting())\n\t\t{\n\t\t\treturn this.error == null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn mxCellMarker.prototype.isValidState.apply(marker, arguments);\n\t\t}\n\t});\n\n\t// Overrides to use marker color only in highlight mode or for\n\t// target selection\n\tmarker.getMarkerColor = mxUtils.bind(this, function(evt, state, isValid)\n\t{\n\t\treturn (this.connectImage == null || this.isConnecting()) ?\n\t\t\tmxCellMarker.prototype.getMarkerColor.apply(marker, arguments) :\n\t\t\tnull;\n\t});\n\n\t// Overrides to use hotspot only for source selection otherwise\n\t// intersects always returns true when over a cell\n\tmarker.intersects = mxUtils.bind(this, function(state, evt)\n\t{\n\t\tif (this.connectImage != null || this.isConnecting())\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxCellMarker.prototype.intersects.apply(marker, arguments);\n\t});\n\n\treturn marker;\n};\n\n/**\n * Function: start\n * \n * Starts a new connection for the given state and coordinates.\n */\nmxConnectionHandler.prototype.start = function(state, x, y, edgeState)\n{\n\tthis.previous = state;\n\tthis.first = new mxPoint(x, y);\n\tthis.edgeState = (edgeState != null) ? edgeState : this.createEdgeState(null);\n\t\n\t// Marks the source state\n\tthis.marker.currentColor = this.marker.validColor;\n\tthis.marker.markedState = state;\n\tthis.marker.mark();\n\n\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n};\n\n/**\n * Function: isConnecting\n * \n * Returns true if the source terminal has been clicked and a new\n * connection is currently being previewed.\n */\nmxConnectionHandler.prototype.isConnecting = function()\n{\n\treturn this.first != null && this.shape != null;\n};\n\n/**\n * Function: isValidSource\n * \n * Returns <mxGraph.isValidSource> for the given source terminal.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the source terminal.\n * me - <mxMouseEvent> that is associated with this call.\n */\nmxConnectionHandler.prototype.isValidSource = function(cell, me)\n{\n\treturn this.graph.isValidSource(cell);\n};\n\n/**\n * Function: isValidTarget\n * \n * Returns true. The call to <mxGraph.isValidTarget> is implicit by calling\n * <mxGraph.getEdgeValidationError> in <validateConnection>. This is an\n * additional hook for disabling certain targets in this specific handler.\n * \n * Parameters:\n * \n * cell - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.isValidTarget = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxConnectionHandler.prototype.validateConnection = function(source, target)\n{\n\tif (!this.isValidTarget(target))\n\t{\n\t\treturn '';\n\t}\n\t\n\treturn this.graph.getEdgeValidationError(null, source, target);\n};\n\n/**\n * Function: getConnectImage\n * \n * Hook to return the <mxImage> used for the connection icon of the given\n * <mxCellState>. This implementation returns <connectImage>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect image should be returned.\n */\nmxConnectionHandler.prototype.getConnectImage = function(state)\n{\n\treturn this.connectImage;\n};\n\n/**\n * Function: isMoveIconToFrontForState\n * \n * Returns true if the state has a HTML label in the graph's container, otherwise\n * it returns <moveIconFront>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.isMoveIconToFrontForState = function(state)\n{\n\tif (state.text != null && state.text.node.parentNode == this.graph.container)\n\t{\n\t\treturn true;\n\t}\n\t\n\treturn this.moveIconFront;\n};\n\n/**\n * Function: createIcons\n * \n * Creates the array <mxImageShapes> that represent the connect icons for\n * the given <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> whose connect icons should be returned.\n */\nmxConnectionHandler.prototype.createIcons = function(state)\n{\n\tvar image = this.getConnectImage(state);\n\t\n\tif (image != null && state != null)\n\t{\n\t\tthis.iconState = state;\n\t\tvar icons = [];\n\n\t\t// Cannot use HTML for the connect icons because the icon receives all\n\t\t// mouse move events in IE, must use VML and SVG instead even if the\n\t\t// connect-icon appears behind the selection border and the selection\n\t\t// border consumes the events before the icon gets a chance\n\t\tvar bounds = new mxRectangle(0, 0, image.width, image.height);\n\t\tvar icon = new mxImageShape(bounds, image.src, null, null, 0);\n\t\ticon.preserveImageAspect = false;\n\t\t\n\t\tif (this.isMoveIconToFrontForState(state))\n\t\t{\n\t\t\ticon.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\ticon.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\ticon.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\ticon.init(this.graph.getView().getOverlayPane());\n\n\t\t\t// Move the icon back in the overlay pane\n\t\t\tif (this.moveIconBack && icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\t\t}\n\n\t\ticon.node.style.cursor = mxConstants.CURSOR_CONNECT;\n\n\t\t// Events transparency\n\t\tvar getState = mxUtils.bind(this, function()\n\t\t{\n\t\t\treturn (this.currentState != null) ? this.currentState : state;\n\t\t});\n\t\t\n\t\t// Updates the local icon before firing the mouse down event.\n\t\tvar mouseDown = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tif (!mxEvent.isConsumed(evt))\n\t\t\t{\n\t\t\t\tthis.icon = icon;\n\t\t\t\tthis.graph.fireMouseEvent(mxEvent.MOUSE_DOWN,\n\t\t\t\t\tnew mxMouseEvent(evt, getState()));\n\t\t\t}\n\t\t});\n\n\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState, mouseDown);\n\t\t\n\t\ticons.push(icon);\n\t\tthis.redrawIcons(icons, this.iconState);\n\t\t\n\t\treturn icons;\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.redrawIcons = function(icons, state)\n{\n\tif (icons != null && icons[0] != null && state != null)\n\t{\n\t\tvar pos = this.getIconPosition(icons[0], state);\n\t\ticons[0].bounds.x = pos.x;\n\t\ticons[0].bounds.y = pos.y;\n\t\ticons[0].redraw();\n\t}\n};\n\n/**\n * Function: redrawIcons\n * \n * Redraws the given array of <mxImageShapes>.\n * \n * Parameters:\n * \n * icons - Optional array of <mxImageShapes> to be redrawn.\n */\nmxConnectionHandler.prototype.getIconPosition = function(icon, state)\n{\n\tvar scale = this.graph.getView().scale;\n\tvar cx = state.getCenterX();\n\tvar cy = state.getCenterY();\n\t\n\tif (this.graph.isSwimlane(state.cell))\n\t{\n\t\tvar size = this.graph.getStartSize(state.cell);\n\t\t\n\t\tcx = (size.width != 0) ? state.x + size.width * scale / 2 : cx;\n\t\tcy = (size.height != 0) ? state.y + size.height * scale / 2 : cy;\n\t\t\n\t\tvar alpha = mxUtils.toRadians(mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION) || 0);\n\t\t\n\t\tif (alpha != 0)\n\t\t{\n\t\t\tvar cos = Math.cos(alpha);\n\t\t\tvar sin = Math.sin(alpha);\n\t\t\tvar ct = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(cx, cy), cos, sin, ct);\n\t\t\tcx = pt.x;\n\t\t\tcy = pt.y;\n\t\t}\n\t}\n\n\treturn new mxPoint(cx - icon.bounds.width / 2,\n\t\t\tcy - icon.bounds.height / 2);\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the connect icons and resets the respective state.\n */\nmxConnectionHandler.prototype.destroyIcons = function()\n{\n\tif (this.icons != null)\n\t{\n\t\tfor (var i = 0; i < this.icons.length; i++)\n\t\t{\n\t\t\tthis.icons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.icons = null;\n\t\tthis.icon = null;\n\t\tthis.selectedIcon = null;\n\t\tthis.iconState = null;\n\t}\n};\n\n/**\n * Function: isStartEvent\n * \n * Returns true if the given mouse down event should start this handler. The\n * This implementation returns true if the event does not force marquee\n * selection, and the currentConstraint and currentFocus of the\n * <constraintHandler> are not null, or <previous> and <error> are not null and\n * <icons> is null or <icons> and <icon> are not null.\n */\nmxConnectionHandler.prototype.isStartEvent = function(me)\n{\n\treturn ((this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null) ||\n\t\t(this.previous != null && this.error == null && (this.icons == null || (this.icons != null &&\n\t\tthis.icon != null))));\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a new connection.\n */\nmxConnectionHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.mouseDownCounter++;\n\t\n\tif (this.isEnabled() && this.graph.isEnabled() && !me.isConsumed() &&\n\t\t!this.isConnecting() && this.isStartEvent(me))\n\t{\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t{\n\t\t\tthis.sourceConstraint = this.constraintHandler.currentConstraint;\n\t\t\tthis.previous = this.constraintHandler.currentFocus;\n\t\t\tthis.first = this.constraintHandler.currentPoint.clone();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Stores the location of the initial mousedown\n\t\t\tthis.first = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t}\n\t\n\t\tthis.edgeState = this.createEdgeState(me);\n\t\tthis.mouseDownCounter = 1;\n\t\t\n\t\tif (this.waypointsEnabled && this.shape == null)\n\t\t{\n\t\t\tthis.waypoints = null;\n\t\t\tthis.shape = this.createShape();\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t}\n\t\t}\n\n\t\t// Stores the starting point in the geometry of the preview\n\t\tif (this.previous == null && this.edgeState != null)\n\t\t{\n\t\t\tvar pt = this.graph.getPointForEvent(me.getEvent());\n\t\t\tthis.edgeState.cell.geometry.setTerminalPoint(pt, true);\n\t\t}\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.START, 'state', this.previous));\n\n\t\tme.consume();\n\t}\n\n\tthis.selectedIcon = this.icon;\n\tthis.icon = null;\n};\n\n/**\n * Function: isImmediateConnectSource\n * \n * Returns true if a tap on the given source state should immediately start\n * connecting. This implementation returns true if the state is not movable\n * in the graph. \n */\nmxConnectionHandler.prototype.isImmediateConnectSource = function(state)\n{\n\treturn !this.graph.isCellMovable(state.cell);\n};\n\n/**\n * Function: createEdgeState\n * \n * Hook to return an <mxCellState> which may be used during the preview.\n * This implementation returns null.\n * \n * Use the following code to create a preview for an existing edge style:\n * \n * (code)\n * graph.connectionHandler.createEdgeState = function(me)\n * {\n *   var edge = graph.createEdge(null, null, null, null, null, 'edgeStyle=elbowEdgeStyle');\n *   \n *   return new mxCellState(this.graph.view, edge, this.graph.getCellStyle(edge));\n * };\n * (end)\n */\nmxConnectionHandler.prototype.createEdgeState = function(me)\n{\n\treturn null;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxConnectionHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updateCurrentState\n * \n * Updates the current state for a given mouse move event by using\n * the <marker>.\n */\nmxConnectionHandler.prototype.updateCurrentState = function(me, point)\n{\n\tthis.constraintHandler.update(me, this.first == null, false, (this.first == null ||\n\t\tme.isSource(this.marker.highlight.shape)) ? null : point);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\n\t\t// Updates validation state\n\t\tif (this.previous != null)\n\t\t{\n\t\t\tthis.error = this.validateConnection(this.previous.cell, this.constraintHandler.currentFocus.cell);\n\t\t\t\n\t\t\tif (this.error == null)\n\t\t\t{\n\t\t\t\tthis.currentState = this.constraintHandler.currentFocus;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.constraintHandler.reset();\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t\tthis.currentState = null;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.process(me);\n\t\t\tthis.currentState = this.marker.getValidState();\n\t\t\t\n\t\t\tif (this.currentState != null && !this.isCellEnabled(this.currentState.cell))\n\t\t\t{\n\t\t\t\tthis.currentState = null;\n\t\t\t}\n\t\t}\n\n\t\tvar outline = this.isOutlineConnectEvent(me);\n\t\t\n\t\tif (this.currentState != null && outline)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tvar constraint = this.graph.getOutlineConstraint(point, this.currentState, me);\n\t\t\tthis.constraintHandler.setFocus(me, this.currentState, false);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\n\t\tif (this.outlineConnect)\n\t\t{\n\t\t\tif (this.marker.highlight != null && this.marker.highlight.shape != null)\n\t\t\t{\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.OUTLINE_HIGHLIGHT_COLOR;\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t} \n\t\t\t\telse if (this.marker.hasValidState())\n\t\t\t\t{\n\t\t\t\t\t// Handles special case where actual end point of edge and current mouse point\n\t\t\t\t\t// are not equal (due to grid snapping) and there is no hit on shape or highlight\n\t\t\t\t\tif (this.marker.getValidState() != me.getState())\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\t\tthis.currentState = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.marker.highlight.shape.stroke = mxConstants.DEFAULT_VALID_COLOR;\n\t\t\t\t\t}\n\t\n\t\t\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellEnabled\n * \n * Returns true if the given cell does not allow new connections to be created.\n */\nmxConnectionHandler.prototype.isCellEnabled = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: convertWaypoint\n * \n * Converts the given point from screen coordinates to model coordinates.\n */\nmxConnectionHandler.prototype.convertWaypoint = function(point)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\n\tpoint.x = point.x / scale - tr.x;\n\tpoint.y = point.y / scale - tr.y;\n};\n\n/**\n * Function: snapToPreview\n * \n * Called to snap the given point to the current preview. This snaps to the\n * first point of the preview if alt is not pressed.\n */\nmxConnectionHandler.prototype.snapToPreview = function(me, point)\n{\n\tif (!mxEvent.isAltDown(me.getEvent()) && this.previous != null)\n\t{\n\t\tvar tol = this.graph.gridSize * this.graph.view.scale / 2;\t\n\t\tvar tmp = (this.sourceConstraint != null) ? this.first :\n\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\n\t\tif (Math.abs(tmp.x - me.getGraphX()) < tol)\n\t\t{\n\t\t\tpoint.x = tmp.x;\n\t\t}\n\t\t\n\t\tif (Math.abs(tmp.y - me.getGraphY()) < tol)\n\t\t{\n\t\t\tpoint.y = tmp.y;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview edge or by highlighting\n * a possible source or target terminal.\n */\nmxConnectionHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && (this.ignoreMouseDown || this.first != null || !this.graph.isMouseDown))\n\t{\n\t\t// Handles special case when handler is disabled during highlight\n\t\tif (!this.isEnabled() && this.currentState != null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\tthis.currentState = null;\n\t\t}\n\n\t\tvar view = this.graph.getView();\n\t\tvar scale = view.scale;\n\t\tvar tr = view.translate;\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\tthis.error = null;\n\n\t\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t\t{\n\t\t\tpoint = new mxPoint((this.graph.snap(point.x / scale - tr.x) + tr.x) * scale,\n\t\t\t\t(this.graph.snap(point.y / scale - tr.y) + tr.y) * scale);\n\t\t}\n\t\t\n\t\tthis.snapToPreview(me, point);\n\t\tthis.currentPoint = point;\n\t\t\n\t\tif ((this.first != null || (this.isEnabled() && this.graph.isEnabled())) &&\n\t\t\t(this.shape != null || this.first == null ||\n\t\t\tMath.abs(me.getGraphX() - this.first.x) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.first.y) > this.graph.tolerance))\n\t\t{\n\t\t\tthis.updateCurrentState(me, point);\n\t\t}\n\n\t\tif (this.first != null)\n\t\t{\n\t\t\tvar constraint = null;\n\t\t\tvar current = point;\n\t\t\t\n\t\t\t// Uses the current point from the constraint handler if available\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tconstraint = this.constraintHandler.currentConstraint;\n\t\t\t\tcurrent = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.previous != null && !this.graph.isIgnoreTerminalEvent(me.getEvent()) &&\n\t\t\t\tmxEvent.isShiftDown(me.getEvent()))\n\t\t\t{\n\t\t\t\tif (Math.abs(this.previous.getCenterX() - point.x) <\n\t\t\t\t\tMath.abs(this.previous.getCenterY() - point.y))\n\t\t\t\t{\n\t\t\t\t\tpoint.x = this.previous.getCenterX();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tpoint.y = this.previous.getCenterY();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar pt2 = this.first;\n\t\t\t\n\t\t\t// Moves the connect icon with the mouse\n\t\t\tif (this.selectedIcon != null)\n\t\t\t{\n\t\t\t\tvar w = this.selectedIcon.bounds.width;\n\t\t\t\tvar h = this.selectedIcon.bounds.height;\n\t\t\t\t\n\t\t\t\tif (this.currentState != null && this.targetConnectImage)\n\t\t\t\t{\n\t\t\t\t\tvar pos = this.getIconPosition(this.selectedIcon, this.currentState);\n\t\t\t\t\tthis.selectedIcon.bounds.x = pos.x;\n\t\t\t\t\tthis.selectedIcon.bounds.y = pos.y;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar bounds = new mxRectangle(me.getGraphX() + this.connectIconOffset.x,\n\t\t\t\t\t\tme.getGraphY() + this.connectIconOffset.y, w, h);\n\t\t\t\t\tthis.selectedIcon.bounds = bounds;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.selectedIcon.redraw();\n\t\t\t}\n\n\t\t\t// Uses edge state to compute the terminal points\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tthis.updateEdgeState(current, constraint);\n\t\t\t\tcurrent = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 1];\n\t\t\t\tpt2 = this.edgeState.absolutePoints[0];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (this.currentState != null)\n\t\t\t\t{\n\t\t\t\t\tif (this.constraintHandler.currentConstraint == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = this.getTargetPerimeterPoint(this.currentState, me);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcurrent = tmp;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Computes the source perimeter point\n\t\t\t\tif (this.sourceConstraint == null && this.previous != null)\n\t\t\t\t{\n\t\t\t\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\t\t\t\tthis.waypoints[0] : current;\n\t\t\t\t\tvar tmp = this.getSourcePerimeterPoint(this.previous, next, me);\n\t\t\t\t\t\n\t\t\t\t\tif (tmp != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt2 = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Makes sure the cell under the mousepointer can be detected\n\t\t\t// by moving the preview shape away from the mouse. This\n\t\t\t// makes sure the preview shape does not prevent the detection\n\t\t\t// of the cell under the mousepointer even for slow gestures.\n\t\t\tif (this.currentState == null && this.movePreviewAway)\n\t\t\t{\n\t\t\t\tvar tmp = pt2; \n\t\t\t\t\n\t\t\t\tif (this.edgeState != null && this.edgeState.absolutePoints.length >= 2)\n\t\t\t\t{\n\t\t\t\t\tvar tmp2 = this.edgeState.absolutePoints[this.edgeState.absolutePoints.length - 2];\n\t\t\t\t\t\n\t\t\t\t\tif (tmp2 != null)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = tmp2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar dx = current.x - tmp.x;\n\t\t\t\tvar dy = current.y - tmp.y;\n\t\t\t\t\n\t\t\t\tvar len = Math.sqrt(dx * dx + dy * dy);\n\t\t\t\t\n\t\t\t\tif (len == 0)\n\t\t\t\t{\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Stores old point to reuse when creating edge\n\t\t\t\tthis.originalPoint = current.clone();\n\t\t\t\tcurrent.x -= dx * 4 / len;\n\t\t\t\tcurrent.y -= dy * 4 / len;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.originalPoint = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the preview shape (lazy)\n\t\t\tif (this.shape == null)\n\t\t\t{\n\t\t\t\tvar dx = Math.abs(me.getGraphX() - this.first.x);\n\t\t\t\tvar dy = Math.abs(me.getGraphY() - this.first.y);\n\n\t\t\t\tif (dx > this.graph.tolerance || dy > this.graph.tolerance)\n\t\t\t\t{\n\t\t\t\t\tthis.shape = this.createShape();\n\n\t\t\t\t\tif (this.edgeState != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.shape.apply(this.edgeState);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Revalidates current connection\n\t\t\t\t\tthis.updateCurrentState(me, point);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Updates the points in the preview edge\n\t\t\tif (this.shape != null)\n\t\t\t{\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tthis.shape.points = this.edgeState.absolutePoints;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar pts = [pt2];\n\t\t\t\t\t\n\t\t\t\t\tif (this.waypoints != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpts = pts.concat(this.waypoints);\n\t\t\t\t\t}\n\n\t\t\t\t\tpts.push(current);\n\t\t\t\t\tthis.shape.points = pts;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.drawPreview();\n\t\t\t}\n\t\t\t\n\t\t\t// Makes sure endpoint of edge is visible during connect\n\t\t\tif (this.cursor != null)\n\t\t\t{\n\t\t\t\tthis.graph.container.style.cursor = this.cursor;\n\t\t\t}\n\t\t\t\n\t\t\tmxEvent.consume(me.getEvent());\n\t\t\tme.consume();\n\t\t}\n\t\telse if (!this.isEnabled() || !this.graph.isEnabled())\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\telse if (this.previous != this.currentState && this.edgeState == null)\n\t\t{\n\t\t\tthis.destroyIcons();\n\t\t\t\n\t\t\t// Sets the cursor on the current shape\t\t\t\t\n\t\t\tif (this.currentState != null && this.error == null && this.constraintHandler.currentConstraint == null)\n\t\t\t{\n\t\t\t\tthis.icons = this.createIcons(this.currentState);\n\n\t\t\t\tif (this.icons == null)\n\t\t\t\t{\n\t\t\t\t\tthis.currentState.setCursor(mxConstants.CURSOR_CONNECT);\n\t\t\t\t\tme.consume();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.previous = this.currentState;\n\t\t}\n\t\telse if (this.previous == this.currentState && this.currentState != null && this.icons == null &&\n\t\t\t!this.graph.isMouseDown)\n\t\t{\n\t\t\t// Makes sure that no cursors are changed\n\t\t\tme.consume();\n\t\t}\n\n\t\tif (!this.graph.isMouseDown && this.currentState != null && this.icons != null)\n\t\t{\n\t\t\tvar hitsIcon = false;\n\t\t\tvar target = me.getSource();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.icons.length && !hitsIcon; i++)\n\t\t\t{\n\t\t\t\thitsIcon = target == this.icons[i].node || target.parentNode == this.icons[i].node;\n\t\t\t}\n\n\t\t\tif (!hitsIcon)\n\t\t\t{\n\t\t\t\tthis.updateIcons(this.currentState, this.icons, me);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n};\n\n/**\n * Function: updateEdgeState\n * \n * Updates <edgeState>.\n */\nmxConnectionHandler.prototype.updateEdgeState = function(current, constraint)\n{\n\t// TODO: Use generic method for writing constraint to style\n\tif (this.sourceConstraint != null && this.sourceConstraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_X] = this.sourceConstraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_EXIT_Y] = this.sourceConstraint.point.y;\n\t}\n\n\tif (constraint != null && constraint.point != null)\n\t{\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\tthis.edgeState.style[mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t}\n\telse\n\t{\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_X];\n\t\tdelete this.edgeState.style[mxConstants.STYLE_ENTRY_Y];\n\t}\n\t\n\tthis.edgeState.absolutePoints = [null, (this.currentState != null) ? null : current];\n\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.previous, true, this.sourceConstraint);\n\t\n\tif (this.currentState != null)\n\t{\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = this.graph.getConnectionConstraint(this.edgeState, this.previous, false);\n\t\t}\n\t\t\n\t\tthis.edgeState.setAbsoluteTerminalPoint(null, false);\n\t\tthis.graph.view.updateFixedTerminalPoint(this.edgeState, this.currentState, false, constraint);\n\t}\n\t\n\t// Scales and translates the waypoints to the model\n\tvar realPoints = null;\n\t\n\tif (this.waypoints != null)\n\t{\n\t\trealPoints = [];\n\t\t\n\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t{\n\t\t\tvar pt = this.waypoints[i].clone();\n\t\t\tthis.convertWaypoint(pt);\n\t\t\trealPoints[i] = pt;\n\t\t}\n\t}\n\t\n\tthis.graph.view.updatePoints(this.edgeState, realPoints, this.previous, this.currentState);\n\tthis.graph.view.updateFloatingTerminalPoints(this.edgeState, this.previous, this.currentState);\n};\n\n/**\n * Function: getTargetPerimeterPoint\n * \n * Returns the perimeter point for the given target state.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getTargetPerimeterPoint = function(state, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar targetPerimeter = view.getPerimeterFunction(state);\n\t\n\tif (targetPerimeter != null)\n\t{\n\t\tvar next = (this.waypoints != null && this.waypoints.length > 0) ?\n\t\t\t\tthis.waypoints[this.waypoints.length - 1] :\n\t\t\t\tnew mxPoint(this.previous.getCenterX(), this.previous.getCenterY());\n\t\tvar tmp = targetPerimeter(view.getPerimeterBounds(state),\n\t\t\tthis.edgeState, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = new mxPoint(state.getCenterX(), state.getCenterY());\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: getSourcePerimeterPoint\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> that represents the target cell state.\n * next - <mxPoint> that represents the next point along the previewed edge.\n * me - <mxMouseEvent> that represents the mouse move.\n */\nmxConnectionHandler.prototype.getSourcePerimeterPoint = function(state, next, me)\n{\n\tvar result = null;\n\tvar view = state.view;\n\tvar sourcePerimeter = view.getPerimeterFunction(state);\n\tvar c = new mxPoint(state.getCenterX(), state.getCenterY());\n\t\n\tif (sourcePerimeter != null)\n\t{\n\t\tvar theta = mxUtils.getValue(state.style, mxConstants.STYLE_ROTATION, 0);\n\t\tvar rad = -theta * (Math.PI / 180);\n\t\t\n\t\tif (theta != 0)\n\t\t{\n\t\t\tnext = mxUtils.getRotatedPoint(new mxPoint(next.x, next.y), Math.cos(rad), Math.sin(rad), c);\n\t\t}\n\t\t\n\t\tvar tmp = sourcePerimeter(view.getPerimeterBounds(state), state, next, false);\n\t\t\t\n\t\tif (tmp != null)\n\t\t{\n\t\t\tif (theta != 0)\n\t\t\t{\n\t\t\t\ttmp = mxUtils.getRotatedPoint(new mxPoint(tmp.x, tmp.y), Math.cos(-rad), Math.sin(-rad), c);\n\t\t\t}\n\t\t\t\n\t\t\tresult = tmp;\n\t\t}\n\t}\n\telse\n\t{\n\t\tresult = c;\n\t}\n\t\n\treturn result;\n};\n\n\n/**\n * Function: updateIcons\n * \n * Hook to update the icon position(s) based on a mouseOver event. This is\n * an empty implementation.\n * \n * Parameters:\n * \n * state - <mxCellState> under the mouse.\n * icons - Array of currently displayed icons.\n * me - <mxMouseEvent> that contains the mouse event.\n */\nmxConnectionHandler.prototype.updateIcons = function(state, icons, me)\n{\n\t// empty\n};\n\n/**\n * Function: isStopEvent\n * \n * Returns true if the given mouse up event should stop this handler. The\n * connection will be created if <error> is null. Note that this is only\n * called if <waypointsEnabled> is true. This implemtation returns true\n * if there is a cell state in the given event.\n */\nmxConnectionHandler.prototype.isStopEvent = function(me)\n{\n\treturn me.getState() != null;\n};\n\n/**\n * Function: addWaypoint\n * \n * Adds the waypoint for the given event to <waypoints>.\n */\nmxConnectionHandler.prototype.addWaypointForEvent = function(me)\n{\n\tvar point = mxUtils.convertPoint(this.graph.container, me.getX(), me.getY());\n\tvar dx = Math.abs(point.x - this.first.x);\n\tvar dy = Math.abs(point.y - this.first.y);\n\tvar addPoint = this.waypoints != null || (this.mouseDownCounter > 1 &&\n\t\t\t(dx > this.graph.tolerance || dy > this.graph.tolerance));\n\n\tif (addPoint)\n\t{\n\t\tif (this.waypoints == null)\n\t\t{\n\t\t\tthis.waypoints = [];\n\t\t}\n\t\t\n\t\tvar scale = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.graph.snap(me.getGraphX() / scale) * scale,\n\t\t\t\tthis.graph.snap(me.getGraphY() / scale) * scale);\n\t\tthis.waypoints.push(point);\n\t}\n};\n\n/**\n * Function: checkConstraints\n * \n * Returns true if the connection for the given constraints is valid. This\n * implementation returns true if the constraints are not pointing to the\n * same fixed connection point.\n */\nmxConnectionHandler.prototype.checkConstraints = function(c1, c2)\n{\n\treturn (c1 == null || c2 == null || c1.point == null || c2.point == null ||\n\t\t!c1.point.equals(c2.point) || c1.perimeter != c2.perimeter);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by inserting the new connection.\n */\nmxConnectionHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isConnecting())\n\t{\n\t\tif (this.waypointsEnabled && !this.isStopEvent(me))\n\t\t{\n\t\t\tthis.addWaypointForEvent(me);\n\t\t\tme.consume();\n\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tvar c1 = this.sourceConstraint;\n\t\tvar c2 = this.constraintHandler.currentConstraint;\n\n\t\tvar source = (this.previous != null) ? this.previous.cell : null;\n\t\tvar target = null;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\ttarget = this.constraintHandler.currentFocus.cell;\n\t\t}\n\t\t\n\t\tif (target == null && this.currentState != null)\n\t\t{\n\t\t\ttarget = this.currentState.cell;\n\t\t}\n\t\t\n\t\t// Inserts the edge if no validation error exists and if constraints differ\n\t\tif (this.error == null && (source == null || target == null ||\n\t\t\tsource != target || this.checkConstraints(c1, c2)))\n\t\t{\n\t\t\tthis.connect(source, target, me.getEvent(), me.getCell());\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Selects the source terminal for self-references\n\t\t\tif (this.previous != null && this.marker.validState != null &&\n\t\t\t\tthis.previous.cell == this.marker.validState.cell)\n\t\t\t{\n\t\t\t\tthis.graph.selectCellForEvent(this.marker.source, me.getEvent());\n\t\t\t}\n\t\t\t\n\t\t\t// Displays the error message if it is not an empty string,\n\t\t\t// for empty error messages, the event is silently dropped\n\t\t\tif (this.error != null && this.error.length > 0)\n\t\t\t{\n\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Redraws the connect icons and resets the handler state\n\t\tthis.destroyIcons();\n\t\tme.consume();\n\t}\n\n\tif (this.first != null)\n\t{\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConnectionHandler.prototype.reset = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\t// Resets the cursor on the container\n\tif (this.cursor != null && this.graph.container != null)\n\t{\n\t\tthis.graph.container.style.cursor = '';\n\t}\n\t\n\tthis.destroyIcons();\n\tthis.marker.reset();\n\tthis.constraintHandler.reset();\n\tthis.originalPoint = null;\n\tthis.currentPoint = null;\n\tthis.edgeState = null;\n\tthis.previous = null;\n\tthis.error = null;\n\tthis.sourceConstraint = null;\n\tthis.mouseDownCounter = 0;\n\tthis.first = null;\n\n\tthis.fireEvent(new mxEventObject(mxEvent.RESET));\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview edge using the color and width returned by\n * <getEdgeColor> and <getEdgeWidth>.\n */\nmxConnectionHandler.prototype.drawPreview = function()\n{\n\tthis.updatePreview(this.error == null);\n\tthis.shape.redraw();\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.updatePreview = function(valid)\n{\n\tthis.shape.strokewidth = this.getEdgeWidth(valid);\n\tthis.shape.stroke = this.getEdgeColor(valid);\n};\n\n/**\n * Function: getEdgeColor\n * \n * Returns the color used to draw the preview edge. This returns green if\n * there is no edge validation error and red otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the color for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeColor = function(valid)\n{\n\treturn (valid) ? mxConstants.VALID_COLOR : mxConstants.INVALID_COLOR;\n};\n\t\n/**\n * Function: getEdgeWidth\n * \n * Returns the width used to draw the preview edge. This returns 3 if\n * there is no edge validation error and 1 otherwise.\n * \n * Parameters:\n * \n * valid - Boolean indicating if the width for a valid edge should be\n * returned.\n */\nmxConnectionHandler.prototype.getEdgeWidth = function(valid)\n{\n\treturn (valid) ? 3 : 1;\n};\n\n/**\n * Function: connect\n * \n * Connects the given source and target using a new edge. This\n * implementation uses <createEdge> to create the edge.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * evt - Mousedown event of the connect gesture.\n * dropTarget - <mxCell> that represents the cell under the mouse when it was\n * released.\n */\nmxConnectionHandler.prototype.connect = function(source, target, evt, dropTarget)\n{\n\tif (target != null || this.isCreateTarget(evt) || this.graph.allowDanglingEdges)\n\t{\n\t\t// Uses the common parent of source and target or\n\t\t// the default parent to insert the edge\n\t\tvar model = this.graph.getModel();\n\t\tvar terminalInserted = false;\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (source != null && target == null && !this.graph.isIgnoreTerminalEvent(evt) && this.isCreateTarget(evt))\n\t\t\t{\n\t\t\t\ttarget = this.createTargetVertex(evt, source);\n\t\t\t\t\n\t\t\t\tif (target != null)\n\t\t\t\t{\n\t\t\t\t\tdropTarget = this.graph.getDropTarget([target], evt, dropTarget);\n\t\t\t\t\tterminalInserted = true;\n\t\t\t\t\t\n\t\t\t\t\t// Disables edges as drop targets if the target cell was created\n\t\t\t\t\t// FIXME: Should not shift if vertex was aligned (same in Java)\n\t\t\t\t\tif (dropTarget == null || !this.graph.getModel().isEdge(dropTarget))\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pstate = this.graph.getView().getState(dropTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar tmp = model.getGeometry(target);\n\t\t\t\t\t\t\ttmp.x -= pstate.origin.x;\n\t\t\t\t\t\t\ttmp.y -= pstate.origin.y;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdropTarget = this.graph.getDefaultParent();\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\tthis.graph.addCell(target, dropTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar parent = this.graph.getDefaultParent();\n\n\t\t\tif (source != null && target != null &&\n\t\t\t\tmodel.getParent(source) == model.getParent(target) &&\n\t\t\t\tmodel.getParent(model.getParent(source)) != model.getRoot())\n\t\t\t{\n\t\t\t\tparent = model.getParent(source);\n\n\t\t\t\tif ((source.geometry != null && source.geometry.relative) &&\n\t\t\t\t\t(target.geometry != null && target.geometry.relative))\n\t\t\t\t{\n\t\t\t\t\tparent = model.getParent(parent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Uses the value of the preview edge state for inserting\n\t\t\t// the new edge into the graph\n\t\t\tvar value = null;\n\t\t\tvar style = null;\n\t\t\t\n\t\t\tif (this.edgeState != null)\n\t\t\t{\n\t\t\t\tvalue = this.edgeState.cell.value;\n\t\t\t\tstyle = this.edgeState.cell.style;\n\t\t\t}\n\n\t\t\tedge = this.insertEdge(parent, null, value, source, target, style);\n\t\t\t\n\t\t\tif (edge != null)\n\t\t\t{\n\t\t\t\t// Updates the connection constraints\n\t\t\t\tthis.graph.setConnectionConstraint(edge, source, true, this.sourceConstraint);\n\t\t\t\tthis.graph.setConnectionConstraint(edge, target, false, this.constraintHandler.currentConstraint);\n\t\t\t\t\n\t\t\t\t// Uses geometry of the preview edge state\n\t\t\t\tif (this.edgeState != null)\n\t\t\t\t{\n\t\t\t\t\tmodel.setGeometry(edge, this.edgeState.cell.geometry);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar parent = model.getParent(source);\n\t\t\t\t\n\t\t\t\t// Inserts edge before source\n\t\t\t\tif (this.isInsertBefore(edge, source, target, evt, dropTarget))\n\t\t\t\t{\n\t\t\t\t\tvar index = null;\n\t\t\t\t\tvar tmp = source;\n\n\t\t\t\t\twhile (tmp.parent != null && tmp.geometry != null &&\n\t\t\t\t\t\ttmp.geometry.relative && tmp.parent != edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\ttmp = this.graph.model.getParent(tmp);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tmp != null && tmp.parent != null && tmp.parent == edge.parent)\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.add(parent, edge, tmp.parent.getIndex(tmp));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Makes sure the edge has a non-null, relative geometry\n\t\t\t\tvar geo = model.getGeometry(edge);\n\n\t\t\t\tif (geo == null)\n\t\t\t\t{\n\t\t\t\t\tgeo = new mxGeometry();\n\t\t\t\t\tgeo.relative = true;\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Uses scaled waypoints in geometry\n\t\t\t\tif (this.waypoints != null && this.waypoints.length > 0)\n\t\t\t\t{\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar tr = this.graph.view.translate;\n\t\t\t\t\tgeo.points = [];\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < this.waypoints.length; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pt = this.waypoints[i];\n\t\t\t\t\t\tgeo.points.push(new mxPoint(pt.x / s - tr.x, pt.y / s - tr.y));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (target == null)\n\t\t\t\t{\n\t\t\t\t\tvar t = this.graph.view.translate;\n\t\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\t\tvar pt = (this.originalPoint != null) ?\n\t\t\t\t\t\t\tnew mxPoint(this.originalPoint.x / s - t.x, this.originalPoint.y / s - t.y) :\n\t\t\t\t\t\tnew mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\tgeo.setTerminalPoint(pt, false);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.CONNECT, 'cell', edge, 'terminal', target,\n\t\t\t\t\t'event', evt, 'target', dropTarget, 'terminalInserted', terminalInserted));\n\t\t\t}\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxLog.show();\n\t\t\tmxLog.debug(e.message);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tif (this.select)\n\t\t{\n\t\t\tthis.selectCells(edge, (terminalInserted) ? target : null);\n\t\t}\n\t}\n};\n\n/**\n * Function: selectCells\n * \n * Selects the given edge after adding a new connection. The target argument\n * contains the target vertex if one has been inserted.\n */\nmxConnectionHandler.prototype.selectCells = function(edge, target)\n{\n\tthis.graph.setSelectionCell(edge);\n};\n\n/**\n * Function: insertEdge\n * \n * Creates, inserts and returns the new edge for the given parameters. This\n * implementation does only use <createEdge> if <factoryMethod> is defined,\n * otherwise <mxGraph.insertEdge> will be used.\n */\nmxConnectionHandler.prototype.insertEdge = function(parent, id, value, source, target, style)\n{\n\tif (this.factoryMethod == null)\n\t{\n\t\treturn this.graph.insertEdge(parent, id, value, source, target, style);\n\t}\n\telse\n\t{\n\t\tvar edge = this.createEdge(value, source, target, style);\n\t\tedge = this.graph.addEdge(edge, parent, source, target);\n\t\t\n\t\treturn edge;\n\t}\n};\n\n/**\n * Function: createTargetVertex\n * \n * Hook method for creating new vertices on the fly if no target was\n * under the mouse. This is only called if <createTarget> is true and\n * returns null.\n * \n * Parameters:\n * \n * evt - Mousedown event of the connect gesture.\n * source - <mxCell> that represents the source terminal.\n */\nmxConnectionHandler.prototype.createTargetVertex = function(evt, source)\n{\n\t// Uses the first non-relative source\n\tvar geo = this.graph.getCellGeometry(source);\n\t\n\twhile (geo != null && geo.relative)\n\t{\n\t\tsource = this.graph.getModel().getParent(source);\n\t\tgeo = this.graph.getCellGeometry(source);\n\t}\n\t\n\tvar clone = this.graph.cloneCell(source);\n\tvar geo = this.graph.getModel().getGeometry(clone);\n\t\n\tif (geo != null)\n\t{\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar point = new mxPoint(this.currentPoint.x / s - t.x, this.currentPoint.y / s - t.y);\n\t\tgeo.x = Math.round(point.x - geo.width / 2 - this.graph.panDx / s);\n\t\tgeo.y = Math.round(point.y - geo.height / 2 - this.graph.panDy / s);\n\n\t\t// Aligns with source if within certain tolerance\n\t\tvar tol = this.getAlignmentTolerance();\n\t\t\n\t\tif (tol > 0)\n\t\t{\n\t\t\tvar sourceState = this.graph.view.getState(source);\n\t\t\t\n\t\t\tif (sourceState != null)\n\t\t\t{\n\t\t\t\tvar x = sourceState.x / s - t.x;\n\t\t\t\tvar y = sourceState.y / s - t.y;\n\t\t\t\t\n\t\t\t\tif (Math.abs(x - geo.x) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.x = Math.round(x);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (Math.abs(y - geo.y) <= tol)\n\t\t\t\t{\n\t\t\t\t\tgeo.y = Math.round(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn clone;\t\t\n};\n\n/**\n * Function: getAlignmentTolerance\n * \n * Returns the tolerance for aligning new targets to sources. This returns the grid size / 2.\n */\nmxConnectionHandler.prototype.getAlignmentTolerance = function(evt)\n{\n\treturn (this.graph.isGridEnabled()) ? this.graph.gridSize / 2 : this.graph.tolerance;\n};\n\n/**\n * Function: createEdge\n * \n * Creates and returns a new edge using <factoryMethod> if one exists. If\n * no factory method is defined, then a new default edge is returned. The\n * source and target arguments are informal, the actual connection is\n * setup later by the caller of this function.\n * \n * Parameters:\n * \n * value - Value to be used for creating the edge.\n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n * style - Optional style from the preview edge.\n */\nmxConnectionHandler.prototype.createEdge = function(value, source, target, style)\n{\n\tvar edge = null;\n\t\n\t// Creates a new edge using the factoryMethod\n\tif (this.factoryMethod != null)\n\t{\n\t\tedge = this.factoryMethod(source, target, style);\n\t}\n\t\n\tif (edge == null)\n\t{\n\t\tedge = new mxCell(value || '');\n\t\tedge.setEdge(true);\n\t\tedge.setStyle(style);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\tedge.setGeometry(geo);\n\t}\n\n\treturn edge;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This should be\n * called on all instances. It is called automatically for the built-in\n * instance created for each <mxGraph>.\n */\nmxConnectionHandler.prototype.destroy = function()\n{\n\tthis.graph.removeMouseListener(this);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\n\tif (this.changeHandler != null)\n\t{\n\t\tthis.graph.getModel().removeListener(this.changeHandler);\n\t\tthis.graph.getView().removeListener(this.changeHandler);\n\t\tthis.changeHandler = null;\n\t}\n\t\n\tif (this.drillHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.drillHandler);\n\t\tthis.graph.getView().removeListener(this.drillHandler);\n\t\tthis.drillHandler = null;\n\t}\n\t\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxConstraintHandler\n *\n * Handles constraints on connection targets. This class is in charge of\n * showing fixed points when the mouse is over a vertex and handles constraints\n * to establish new connections.\n *\n * Constructor: mxConstraintHandler\n *\n * Constructs an new constraint handler.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * factoryMethod - Optional function to create the edge. The function takes\n * the source and target <mxCell> as the first and second argument and\n * returns the <mxCell> that represents the new edge.\n */\nfunction mxConstraintHandler(graph)\n{\n\tthis.graph = graph;\n\t\n\t// Adds a graph model listener to update the current focus on changes\n\tthis.resetHandler = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tif (this.currentFocus != null && this.graph.view.getState(this.currentFocus.cell) == null)\n\t\t{\n\t\t\tthis.reset();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.redraw();\n\t\t}\n\t});\n\t\n\tthis.graph.model.addListener(mxEvent.CHANGE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE_AND_TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.TRANSLATE, this.resetHandler);\n\tthis.graph.view.addListener(mxEvent.SCALE, this.resetHandler);\n\tthis.graph.addListener(mxEvent.ROOT, this.resetHandler);\n};\n\n/**\n * Variable: pointImage\n * \n * <mxImage> to be used as the image for fixed connection points.\n */\nmxConstraintHandler.prototype.pointImage = new mxImage(mxClient.imageBasePath + '/point.gif', 5, 5);\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxConstraintHandler.prototype.graph = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxConstraintHandler.prototype.enabled = true;\n\n/**\n * Variable: highlightColor\n * \n * Specifies the color for the highlight. Default is <mxConstants.DEFAULT_VALID_COLOR>.\n */\nmxConstraintHandler.prototype.highlightColor = mxConstants.DEFAULT_VALID_COLOR;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxConstraintHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxConstraintHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxConstraintHandler.prototype.reset = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t}\n\t\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n\t\n\tthis.currentConstraint = null;\n\tthis.currentFocusArea = null;\n\tthis.currentPoint = null;\n\tthis.currentFocus = null;\n\tthis.focusPoints = null;\n};\n\n/**\n * Function: getTolerance\n * \n * Returns the tolerance to be used for intersecting connection points. This\n * implementation returns <mxGraph.tolerance>.\n * \n * Parameters:\n * \n * me - <mxMouseEvent> whose tolerance should be returned.\n */\nmxConstraintHandler.prototype.getTolerance = function(me)\n{\n\treturn this.graph.getTolerance();\n};\n\n/**\n * Function: getImageForConstraint\n * \n * Returns the tolerance to be used for intersecting connection points.\n */\nmxConstraintHandler.prototype.getImageForConstraint = function(state, constraint, point)\n{\n\treturn this.pointImage;\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given <mxMouseEvent> should be ignored in <update>. This\n * implementation always returns false.\n */\nmxConstraintHandler.prototype.isEventIgnored = function(me, source)\n{\n\treturn false;\n};\n\n/**\n * Function: isStateIgnored\n * \n * Returns true if the given state should be ignored. This always returns false.\n */\nmxConstraintHandler.prototype.isStateIgnored = function(state, source)\n{\n\treturn false;\n};\n\n/**\n * Function: destroyIcons\n * \n * Destroys the <focusIcons> if they exist.\n */\nmxConstraintHandler.prototype.destroyIcons = function()\n{\n\tif (this.focusIcons != null)\n\t{\n\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t{\n\t\t\tthis.focusIcons[i].destroy();\n\t\t}\n\t\t\n\t\tthis.focusIcons = null;\n\t\tthis.focusPoints = null;\n\t}\n};\n\n/**\n * Function: destroyFocusHighlight\n * \n * Destroys the <focusHighlight> if one exists.\n */\nmxConstraintHandler.prototype.destroyFocusHighlight = function()\n{\n\tif (this.focusHighlight != null)\n\t{\n\t\tthis.focusHighlight.destroy();\n\t\tthis.focusHighlight = null;\n\t}\n};\n\n/**\n * Function: isKeepFocusEvent\n * \n * Returns true if the current focused state should not be changed for the given event.\n * This returns true if shift and alt are pressed.\n */\nmxConstraintHandler.prototype.isKeepFocusEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent());\n};\n\n/**\n * Function: getCellForEvent\n * \n * Returns the cell for the given event.\n */\nmxConstraintHandler.prototype.getCellForEvent = function(me, point)\n{\n\tvar cell = me.getCell();\n\t\n\t// Gets cell under actual point if different from event location\n\tif (cell == null && point != null && (me.getGraphX() != point.x || me.getGraphY() != point.y))\n\t{\n\t\tcell = this.graph.getCellAt(point.x, point.y);\n\t}\n\t\n\t// Uses connectable parent vertex if one exists\n\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t{\n\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\n\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t{\n\t\t\tcell = parent;\n\t\t}\n\t}\n\t\n\treturn (this.graph.isCellLocked(cell)) ? null : cell;\n};\n\n/**\n * Function: update\n * \n * Updates the state of this handler based on the given <mxMouseEvent>.\n * Source is a boolean indicating if the cell is a source or target.\n */\nmxConstraintHandler.prototype.update = function(me, source, existingEdge, point)\n{\n\tif (this.isEnabled() && !this.isEventIgnored(me))\n\t{\n\t\t// Lazy installation of mouseleave handler\n\t\tif (this.mouseleaveHandler == null && this.graph.container != null)\n\t\t{\n\t\t\tthis.mouseleaveHandler = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t});\n\n\t\t\tmxEvent.addListener(this.graph.container, 'mouseleave', this.resetHandler);\t\n\t\t}\n\t\t\n\t\tvar tol = this.getTolerance(me);\n\t\tvar x = (point != null) ? point.x : me.getGraphX();\n\t\tvar y = (point != null) ? point.y : me.getGraphY();\n\t\tvar grid = new mxRectangle(x - tol, y - tol, 2 * tol, 2 * tol);\n\t\tvar mouse = new mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol);\n\t\tvar state = this.graph.view.getState(this.getCellForEvent(me, point));\n\n\t\t// Keeps focus icons visible while over vertex bounds and no other cell under mouse or shift is pressed\n\t\tif (!this.isKeepFocusEvent(me) && (this.currentFocusArea == null || this.currentFocus == null ||\n\t\t\t(state != null) || !this.graph.getModel().isVertex(this.currentFocus.cell) ||\n\t\t\t!mxUtils.intersects(this.currentFocusArea, mouse)) && (state != this.currentFocus))\n\t\t{\n\t\t\tthis.currentFocusArea = null;\n\t\t\tthis.currentFocus = null;\n\t\t\tthis.setFocus(me, state, source);\n\t\t}\n\n\t\tthis.currentConstraint = null;\n\t\tthis.currentPoint = null;\n\t\tvar minDistSq = null;\n\t\t\n\t\tif (this.focusIcons != null && this.constraints != null &&\n\t\t\t(state == null || this.currentFocus == state))\n\t\t{\n\t\t\tvar cx = mouse.getCenterX();\n\t\t\tvar cy = mouse.getCenterY();\n\t\t\t\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tvar dx = cx - this.focusIcons[i].bounds.getCenterX();\n\t\t\t\tvar dy = cy - this.focusIcons[i].bounds.getCenterY();\n\t\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\t\n\t\t\t\tif ((this.intersects(this.focusIcons[i], mouse, source, existingEdge) || (point != null &&\n\t\t\t\t\tthis.intersects(this.focusIcons[i], grid, source, existingEdge))) &&\n\t\t\t\t\t(minDistSq == null || tmp < minDistSq))\n\t\t\t\t{\n\t\t\t\t\tthis.currentConstraint = this.constraints[i];\n\t\t\t\t\tthis.currentPoint = this.focusPoints[i];\n\t\t\t\t\tminDistSq = tmp;\n\t\t\t\t\t\n\t\t\t\t\tvar tmp = this.focusIcons[i].bounds.clone();\n\t\t\t\t\ttmp.grow(mxConstants.HIGHLIGHT_SIZE + 1);\n\t\t\t\t\ttmp.width -= 1;\n\t\t\t\t\ttmp.height -= 1;\n\t\t\t\t\t\n\t\t\t\t\tif (this.focusHighlight == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar hl = this.createHighlightShape();\n\t\t\t\t\t\thl.dialect = (this.graph.dialect == mxConstants.DIALECT_SVG) ?\n\t\t\t\t\t\t\t\tmxConstants.DIALECT_SVG : mxConstants.DIALECT_VML;\n\t\t\t\t\t\thl.pointerEvents = false;\n\n\t\t\t\t\t\thl.init(this.graph.getView().getOverlayPane());\n\t\t\t\t\t\tthis.focusHighlight = hl;\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\tmxEvent.redirectMouseEvents(hl.node, this.graph, getState);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.focusHighlight.bounds = tmp;\n\t\t\t\t\tthis.focusHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.currentConstraint == null)\n\t\t{\n\t\t\tthis.destroyFocusHighlight();\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.currentConstraint = null;\n\t\tthis.currentFocus = null;\n\t\tthis.currentPoint = null;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.redraw = function()\n{\n\tif (this.currentFocus != null && this.constraints != null && this.focusIcons != null)\n\t{\n\t\tvar state = this.graph.view.getState(this.currentFocus.cell);\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tthis.focusIcons[i].bounds = bounds;\n\t\t\tthis.focusIcons[i].redraw();\n\t\t\tthis.currentFocusArea.add(this.focusIcons[i].bounds);\n\t\t\tthis.focusPoints[i] = cp;\n\t\t}\n\t}\t\n};\n\n/**\n * Function: setFocus\n * \n * Transfers the focus to the given state as a source or target terminal. If\n * the handler is not enabled then the outline is painted, but the constraints\n * are ignored.\n */\nmxConstraintHandler.prototype.setFocus = function(me, state, source)\n{\n\tthis.constraints = (state != null && !this.isStateIgnored(state, source) &&\n\t\tthis.graph.isCellConnectable(state.cell)) ? ((this.isEnabled()) ?\n\t\t(this.graph.getAllConnectionConstraints(state, source) || []) : []) : null;\n\n\t// Only uses cells which have constraints\n\tif (this.constraints != null)\n\t{\n\t\tthis.currentFocus = state;\n\t\tthis.currentFocusArea = new mxRectangle(state.x, state.y, state.width, state.height);\n\t\t\n\t\tif (this.focusIcons != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.focusIcons.length; i++)\n\t\t\t{\n\t\t\t\tthis.focusIcons[i].destroy();\n\t\t\t}\n\t\t\t\n\t\t\tthis.focusIcons = null;\n\t\t\tthis.focusPoints = null;\n\t\t}\n\t\t\n\t\tthis.focusPoints = [];\n\t\tthis.focusIcons = [];\n\t\t\n\t\tfor (var i = 0; i < this.constraints.length; i++)\n\t\t{\n\t\t\tvar cp = this.graph.getConnectionPoint(state, this.constraints[i]);\n\t\t\tvar img = this.getImageForConstraint(state, this.constraints[i], cp);\n\n\t\t\tvar src = img.src;\n\t\t\tvar bounds = new mxRectangle(Math.round(cp.x - img.width / 2),\n\t\t\t\tMath.round(cp.y - img.height / 2), img.width, img.height);\n\t\t\tvar icon = new mxImageShape(bounds, src);\n\t\t\ticon.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\ticon.preserveImageAspect = false;\n\t\t\ticon.init(this.graph.getView().getDecoratorPane());\n\t\t\t\n\t\t\t// Fixes lost event tracking for images in quirks / IE8 standards\n\t\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t\t{\n\t\t\t\tmxEvent.addListener(icon.node, 'dragstart', function(evt)\n\t\t\t\t{\n\t\t\t\t\tmxEvent.consume(evt);\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Move the icon behind all other overlays\n\t\t\tif (icon.node.previousSibling != null)\n\t\t\t{\n\t\t\t\ticon.node.parentNode.insertBefore(icon.node, icon.node.parentNode.firstChild);\n\t\t\t}\n\n\t\t\tvar getState = mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\treturn (this.currentFocus != null) ? this.currentFocus : state;\n\t\t\t});\n\t\t\t\n\t\t\ticon.redraw();\n\n\t\t\tmxEvent.redirectMouseEvents(icon.node, this.graph, getState);\n\t\t\tthis.currentFocusArea.add(icon.bounds);\n\t\t\tthis.focusIcons.push(icon);\n\t\t\tthis.focusPoints.push(cp);\n\t\t}\n\t\t\n\t\tthis.currentFocusArea.grow(this.getTolerance(me));\n\t}\n\telse\n\t{\n\t\tthis.destroyIcons();\n\t\tthis.destroyFocusHighlight();\n\t}\n};\n\n/**\n * Function: createHighlightShape\n * \n * Create the shape used to paint the highlight.\n * \n * Returns true if the given icon intersects the given point.\n */\nmxConstraintHandler.prototype.createHighlightShape = function()\n{\n\tvar hl = new mxRectangleShape(null, this.highlightColor, this.highlightColor, mxConstants.HIGHLIGHT_STROKEWIDTH);\n\thl.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\t\n\treturn hl;\n};\n\n/**\n * Function: intersects\n * \n * Returns true if the given icon intersects the given rectangle.\n */\nmxConstraintHandler.prototype.intersects = function(icon, mouse, source, existingEdge)\n{\n\treturn mxUtils.intersects(icon.bounds, mouse);\n};\n\n/**\n * Function: destroy\n * \n * Destroy this handler.\n */\nmxConstraintHandler.prototype.destroy = function()\n{\n\tthis.reset();\n\t\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.graph.model.removeListener(this.resetHandler);\n\t\tthis.graph.view.removeListener(this.resetHandler);\n\t\tthis.graph.removeListener(this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.mouseleaveHandler != null && this.graph.container != null)\n\t{\n\t\tmxEvent.removeListener(this.graph.container, 'mouseleave', this.mouseleaveHandler);\n\t\tthis.mouseleaveHandler = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2016, JGraph Ltd\n * Copyright (c) 2006-2016, Gaudenz Alder\n */\n/**\n * Class: mxRubberband\n * \n * Event handler that selects rectangular regions. This is not built-into\n * <mxGraph>. To enable rubberband selection in a graph, use the following code.\n * \n * Example:\n * \n * (code)\n * var rubberband = new mxRubberband(graph);\n * (end)\n * \n * Constructor: mxRubberband\n * \n * Constructs an event handler that selects rectangular regions in the graph\n * using rubberband selection.\n */\nfunction mxRubberband(graph)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.graph.addMouseListener(this);\n\n\t\t// Handles force rubberband event\n\t\tthis.forceRubberbandHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar evtName = evt.getProperty('eventName');\n\t\t\tvar me = evt.getProperty('event');\n\t\t\t\n\t\t\tif (evtName == mxEvent.MOUSE_DOWN && this.isForceRubberbandEvent(me))\n\t\t\t{\n\t\t\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\t\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\t\t\torigin.x -= offset.x;\n\t\t\t\torigin.y -= offset.y;\n\t\t\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\t\t\t\tme.consume(false);\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.FIRE_MOUSE_EVENT, this.forceRubberbandHandler);\n\t\t\n\t\t// Repaints the marquee after autoscroll\n\t\tthis.panHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.repaint();\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.PAN, this.panHandler);\n\t\t\n\t\t// Does not show menu if any touch gestures take place after the trigger\n\t\tthis.gestureHandler = mxUtils.bind(this, function(sender, eo)\n\t\t{\n\t\t\tif (this.first != null)\n\t\t\t{\n\t\t\t\tthis.reset();\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.graph.addListener(mxEvent.GESTURE, this.gestureHandler);\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: defaultOpacity\n * \n * Specifies the default opacity to be used for the rubberband div. Default\n * is 20.\n */\nmxRubberband.prototype.defaultOpacity = 20;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxRubberband.prototype.enabled = true;\n\n/**\n * Variable: div\n * \n * Holds the DIV element which is currently visible.\n */\nmxRubberband.prototype.div = null;\n\n/**\n * Variable: sharedDiv\n * \n * Holds the DIV element which is used to display the rubberband.\n */\nmxRubberband.prototype.sharedDiv = null;\n\n/**\n * Variable: currentX\n * \n * Holds the value of the x argument in the last call to <update>.\n */\nmxRubberband.prototype.currentX = 0;\n\n/**\n * Variable: currentY\n * \n * Holds the value of the y argument in the last call to <update>.\n */\nmxRubberband.prototype.currentY = 0;\n\n/**\n * Variable: fadeOut\n * \n * Optional fade out effect. Default is false.\n */\nmxRubberband.prototype.fadeOut = false;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxRubberband.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\t\t\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation updates\n * <enabled>.\n */\nmxRubberband.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isForceRubberbandEvent\n * \n * Returns true if the given <mxMouseEvent> should start rubberband selection.\n * This implementation returns true if the alt key is pressed.\n */\nmxRubberband.prototype.isForceRubberbandEvent = function(me)\n{\n\treturn mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxRubberband.prototype.mouseDown = function(sender, me)\n{\n\tif (!me.isConsumed() && this.isEnabled() && this.graph.isEnabled() &&\n\t\tme.getState() == null && !mxEvent.isMultiTouchEvent(me.getEvent()))\n\t{\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tthis.start(me.getX() + origin.x, me.getY() + origin.y);\n\n\t\t// Does not prevent the default for this event so that the\n\t\t// event processing chain is still executed even if we start\n\t\t// rubberbanding. This is required eg. in ExtJs to hide the\n\t\t// current context menu. In mouseMove we'll make sure we're\n\t\t// not selecting anything while we're rubberbanding.\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: start\n * \n * Sets the start point for the rubberband selection.\n */\nmxRubberband.prototype.start = function(x, y)\n{\n\tthis.first = new mxPoint(x, y);\n\n\tvar container = this.graph.container;\n\t\n\tfunction createMouseEvent(evt)\n\t{\n\t\tvar me = new mxMouseEvent(evt);\n\t\tvar pt = mxUtils.convertPoint(container, me.getX(), me.getY());\n\t\t\n\t\tme.graphX = pt.x;\n\t\tme.graphY = pt.y;\n\t\t\n\t\treturn me;\n\t};\n\n\tthis.dragHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseMove(this.graph, createMouseEvent(evt));\n\t});\n\n\tthis.dropHandler = mxUtils.bind(this, function(evt)\n\t{\n\t\tthis.mouseUp(this.graph, createMouseEvent(evt));\n\t});\n\n\t// Workaround for rubberband stopping if the mouse leaves the container in Firefox\n\tif (mxClient.IS_FF)\n\t{\n\t\tmxEvent.addGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\t}\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating therubberband selection.\n */\nmxRubberband.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.first != null)\n\t{\n\t\tvar origin = mxUtils.getScrollOrigin(this.graph.container);\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\torigin.x -= offset.x;\n\t\torigin.y -= offset.y;\n\t\tvar x = me.getX() + origin.x;\n\t\tvar y = me.getY() + origin.y;\n\t\tvar dx = this.first.x - x;\n\t\tvar dy = this.first.y - y;\n\t\tvar tol = this.graph.tolerance;\n\t\t\n\t\tif (this.div != null || Math.abs(dx) > tol ||  Math.abs(dy) > tol)\n\t\t{\n\t\t\tif (this.div == null)\n\t\t\t{\n\t\t\t\tthis.div = this.createShape();\n\t\t\t}\n\t\t\t\n\t\t\t// Clears selection while rubberbanding. This is required because\n\t\t\t// the event is not consumed in mouseDown.\n\t\t\tmxUtils.clearSelection();\n\t\t\t\n\t\t\tthis.update(x, y);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates the rubberband selection shape.\n */\nmxRubberband.prototype.createShape = function()\n{\n\tif (this.sharedDiv == null)\n\t{\n\t\tthis.sharedDiv = document.createElement('div');\n\t\tthis.sharedDiv.className = 'mxRubberband';\n\t\tmxUtils.setOpacity(this.sharedDiv, this.defaultOpacity);\n\t}\n\n\tthis.graph.container.appendChild(this.sharedDiv);\n\tvar result = this.sharedDiv;\n\t\n\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t{\n\t\tthis.sharedDiv = null;\n\t}\n\t\t\n\treturn result;\n};\n\n/**\n * Function: isActive\n * \n * Returns true if this handler is active.\n */\nmxRubberband.prototype.isActive = function(sender, me)\n{\n\treturn this.div != null && this.div.style.display != 'none';\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by selecting the region of the rubberband using\n * <mxGraph.selectRegion>.\n */\nmxRubberband.prototype.mouseUp = function(sender, me)\n{\n\tvar active = this.isActive();\n\tthis.reset();\n\t\n\tif (active)\n\t{\n\t\tthis.execute(me.getEvent());\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: execute\n * \n * Resets the state of this handler and selects the current region\n * for the given event.\n */\nmxRubberband.prototype.execute = function(evt)\n{\n\tvar rect = new mxRectangle(this.x, this.y, this.width, this.height);\n\tthis.graph.selectRegion(rect, evt);\n};\n\n/**\n * Function: reset\n * \n * Resets the state of the rubberband selection.\n */\nmxRubberband.prototype.reset = function()\n{\n\tif (this.div != null)\n\t{\n\t\tif (mxClient.IS_SVG && (!mxClient.IS_IE || document.documentMode >= 10) && this.fadeOut)\n\t\t{\n\t\t\tvar temp = this.div;\n\t\t\tmxUtils.setPrefixedStyle(temp.style, 'transition', 'all 0.2s linear');\n\t\t\ttemp.style.pointerEvents = 'none';\n\t\t\ttemp.style.opacity = 0;\n\t\t    \n\t\t    window.setTimeout(function()\n\t\t    \t{\n\t\t    \t\ttemp.parentNode.removeChild(temp);\n\t\t    \t}, 200);\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t}\n\n\tmxEvent.removeGestureListeners(document, null, this.dragHandler, this.dropHandler);\n\tthis.dragHandler = null;\n\tthis.dropHandler = null;\n\t\n\tthis.currentX = 0;\n\tthis.currentY = 0;\n\tthis.first = null;\n\tthis.div = null;\n};\n\n/**\n * Function: update\n * \n * Sets <currentX> and <currentY> and calls <repaint>.\n */\nmxRubberband.prototype.update = function(x, y)\n{\n\tthis.currentX = x;\n\tthis.currentY = y;\n\t\n\tthis.repaint();\n};\n\n/**\n * Function: repaint\n * \n * Computes the bounding box and updates the style of the <div>.\n */\nmxRubberband.prototype.repaint = function()\n{\n\tif (this.div != null)\n\t{\n\t\tvar x = this.currentX - this.graph.panDx;\n\t\tvar y = this.currentY - this.graph.panDy;\n\t\t\n\t\tthis.x = Math.min(this.first.x, x);\n\t\tthis.y = Math.min(this.first.y, y);\n\t\tthis.width = Math.max(this.first.x, x) - this.x;\n\t\tthis.height =  Math.max(this.first.y, y) - this.y;\n\n\t\tvar dx = (mxClient.IS_VML) ? this.graph.panDx : 0;\n\t\tvar dy = (mxClient.IS_VML) ? this.graph.panDy : 0;\n\t\t\n\t\tthis.div.style.left = (this.x + dx) + 'px';\n\t\tthis.div.style.top = (this.y + dy) + 'px';\n\t\tthis.div.style.width = Math.max(1, this.width) + 'px';\n\t\tthis.div.style.height = Math.max(1, this.height) + 'px';\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called, it is called automatically when the\n * window unloads.\n */\nmxRubberband.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\t\tthis.graph.removeMouseListener(this);\n\t\tthis.graph.removeListener(this.forceRubberbandHandler);\n\t\tthis.graph.removeListener(this.panHandler);\n\t\tthis.reset();\n\t\t\n\t\tif (this.sharedDiv != null)\n\t\t{\n\t\t\tthis.sharedDiv = null;\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxHandle\n * \n * Implements a single custom handle for vertices.\n * \n * Constructor: mxHandle\n * \n * Constructs a new handle for the given state.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxHandle(state, cursor, image)\n{\n\tthis.graph = state.view.graph;\n\tthis.state = state;\n\tthis.cursor = (cursor != null) ? cursor : this.cursor;\n\tthis.image = (image != null) ? image : this.image;\n\tthis.init();\n};\n\n/**\n * Variable: cursor\n * \n * Specifies the cursor to be used for this handle. Default is 'default'.\n */\nmxHandle.prototype.cursor = 'default';\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.image = null;\n\n/**\n * Variable: image\n * \n * Specifies the <mxImage> to be used to render the handle. Default is null.\n */\nmxHandle.prototype.ignoreGrid = false;\n\n/**\n * Function: getPosition\n * \n * Hook for subclassers to return the current position of the handle.\n */\nmxHandle.prototype.getPosition = function(bounds) { };\n\n/**\n * Function: setPosition\n * \n * Hooks for subclassers to update the style in the <state>.\n */\nmxHandle.prototype.setPosition = function(bounds, pt, me) { };\n\n/**\n * Function: execute\n * \n * Hook for subclassers to execute the handle.\n */\nmxHandle.prototype.execute = function() { };\n\n/**\n * Function: copyStyle\n * \n * Sets the cell style with the given name to the corresponding value in <state>.\n */\nmxHandle.prototype.copyStyle = function(key)\n{\n\tthis.graph.setCellStyles(key, this.state.style[key], [this.state.cell]);\n};\n\n/**\n * Function: processEvent\n * \n * Processes the given <mxMouseEvent> and invokes <setPosition>.\n */\nmxHandle.prototype.processEvent = function(me)\n{\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\tvar pt = new mxPoint(me.getGraphX() / scale - tr.x, me.getGraphY() / scale - tr.y);\n\t\n\t// Center shape on mouse cursor\n\tif (this.shape != null && this.shape.bounds != null)\n\t{\n\t\tpt.x -= this.shape.bounds.width / scale / 4;\n\t\tpt.y -= this.shape.bounds.height / scale / 4;\n\t}\n\n\t// Snaps to grid for the rotated position then applies the rotation for the direction after that\n\tvar alpha1 = -mxUtils.toRadians(this.getRotation());\n\tvar alpha2 = -mxUtils.toRadians(this.getTotalRotation()) - alpha1;\n\tpt = this.flipPoint(this.rotatePoint(this.snapPoint(this.rotatePoint(pt, alpha1),\n\t\t\tthis.ignoreGrid || !this.graph.isGridEnabledEvent(me.getEvent())), alpha2));\n\tthis.setPosition(this.state.getPaintBounds(), pt, me);\n\tthis.positionChanged();\n\tthis.redraw();\n};\n\n/**\n * Function: positionChanged\n * \n * Called after <setPosition> has been called in <processEvent>. This repaints\n * the state using <mxCellRenderer>.\n */\nmxHandle.prototype.positionChanged = function()\n{\n\tif (this.state.text != null)\n\t{\n\t\tthis.state.text.apply(this.state);\n\t}\n\t\n\tif (this.state.shape != null)\n\t{\n\t\tthis.state.shape.apply(this.state);\n\t}\n\t\n\tthis.graph.cellRenderer.redraw(this.state, true);\n};\n\n/**\n * Function: getRotation\n * \n * Returns the rotation defined in the style of the cell.\n */\nmxHandle.prototype.getRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: getTotalRotation\n * \n * Returns the rotation from the style and the rotation from the direction of\n * the cell.\n */\nmxHandle.prototype.getTotalRotation = function()\n{\n\tif (this.state.shape != null)\n\t{\n\t\treturn this.state.shape.getShapeRotation();\n\t}\n\t\n\treturn 0;\n};\n\n/**\n * Function: init\n * \n * Creates and initializes the shapes required for this handle.\n */\nmxHandle.prototype.init = function()\n{\n\tvar html = this.isHtmlRequired();\n\t\n\tif (this.image != null)\n\t{\n\t\tthis.shape = new mxImageShape(new mxRectangle(0, 0, this.image.width, this.image.height), this.image.src);\n\t\tthis.shape.preserveImageAspect = false;\n\t}\n\telse\n\t{\n\t\tthis.shape = this.createShape(html);\n\t}\n\t\n\tthis.initShape(html);\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the shape for this handle.\n */\nmxHandle.prototype.createShape = function(html)\n{\n\tvar bounds = new mxRectangle(0, 0, mxConstants.HANDLE_SIZE, mxConstants.HANDLE_SIZE);\n\t\n\treturn new mxRectangleShape(bounds, mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n};\n\n/**\n * Function: initShape\n * \n * Initializes <shape> and sets its cursor.\n */\nmxHandle.prototype.initShape = function(html)\n{\n\tif (html && this.shape.isHtmlAllowed())\n\t{\n\t\tthis.shape.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tthis.shape.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\t\n\t\tif (this.cursor != null)\n\t\t{\n\t\t\tthis.shape.init(this.graph.getView().getOverlayPane());\n\t\t}\n\t}\n\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\tthis.shape.node.style.cursor = this.cursor;\n};\n\n/**\n * Function: redraw\n * \n * Renders the shape for this handle.\n */\nmxHandle.prototype.redraw = function()\n{\n\tif (this.shape != null && this.state.shape != null)\n\t{\n\t\tvar pt = this.getPosition(this.state.getPaintBounds());\n\t\t\n\t\tif (pt != null)\n\t\t{\n\t\t\tvar alpha = mxUtils.toRadians(this.getTotalRotation());\n\t\t\tpt = this.rotatePoint(this.flipPoint(pt), alpha);\n\t\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tvar tr = this.graph.view.translate;\n\t\t\tthis.shape.bounds.x = Math.floor((pt.x + tr.x) * scale - this.shape.bounds.width / 2);\n\t\t\tthis.shape.bounds.y = Math.floor((pt.y + tr.y) * scale - this.shape.bounds.height / 2);\n\t\t\t\n\t\t\t// Needed to force update of text bounds\n\t\t\tthis.shape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHtmlRequired\n * \n * Returns true if this handle should be rendered in HTML. This returns true if\n * the text node is in the graph container.\n */\nmxHandle.prototype.isHtmlRequired = function()\n{\n\treturn this.state.text != null && this.state.text.node.parentNode == this.graph.container;\n};\n\n/**\n * Function: rotatePoint\n * \n * Rotates the point by the given angle.\n */\nmxHandle.prototype.rotatePoint = function(pt, alpha)\n{\n\tvar bounds = this.state.getCellBounds();\n\tvar cx = new mxPoint(bounds.getCenterX(), bounds.getCenterY());\n\tvar cos = Math.cos(alpha);\n\tvar sin = Math.sin(alpha); \n\n\treturn mxUtils.getRotatedPoint(pt, cos, sin, cx);\n};\n\n/**\n * Function: flipPoint\n * \n * Flips the given point vertically and/or horizontally.\n */\nmxHandle.prototype.flipPoint = function(pt)\n{\n\tif (this.state.shape != null)\n\t{\n\t\tvar bounds = this.state.getCellBounds();\n\t\t\n\t\tif (this.state.shape.flipH)\n\t\t{\n\t\t\tpt.x = 2 * bounds.x + bounds.width - pt.x;\n\t\t}\n\t\t\n\t\tif (this.state.shape.flipV)\n\t\t{\n\t\t\tpt.y = 2 * bounds.y + bounds.height - pt.y;\n\t\t}\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: snapPoint\n * \n * Snaps the given point to the grid if ignore is false. This modifies\n * the given point in-place and also returns it.\n */\nmxHandle.prototype.snapPoint = function(pt, ignore)\n{\n\tif (!ignore)\n\t{\n\t\tpt.x = this.graph.snap(pt.x);\n\t\tpt.y = this.graph.snap(pt.y);\n\t}\n\t\n\treturn pt;\n};\n\n/**\n * Function: setVisible\n * \n * Shows or hides this handle.\n */\nmxHandle.prototype.setVisible = function(visible)\n{\n\tif (this.shape != null && this.shape.node != null)\n\t{\n\t\tthis.shape.node.style.display = (visible) ? '' : 'none';\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handle by setting its visibility to true.\n */\nmxHandle.prototype.reset = function()\n{\n\tthis.setVisible(true);\n\tthis.state.style = this.graph.getCellStyle(this.state.cell);\n\tthis.positionChanged();\n};\n\n/**\n * Function: destroy\n * \n * Destroys this handle.\n */\nmxHandle.prototype.destroy = function()\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxVertexHandler\n * \n * Event handler for resizing cells. This handler is automatically created in\n * <mxGraph.createHandler>.\n * \n * Constructor: mxVertexHandler\n * \n * Constructs an event handler that allows to resize vertices\n * and groups.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be resized.\n */\nfunction mxVertexHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tif (this.livePreview && this.index != null)\n\t\t\t{\n\t\t\t\t// Redraws the live preview\n\t\t\t\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\t\t\t\n\t\t\t\t// Redraws connected edges\n\t\t\t\tthis.state.view.invalidate(this.state.cell);\n\t\t\t\tthis.state.invalid = false;\n\t\t\t\tthis.state.view.validate();\n\t\t\t}\n\t\t\t\n\t\t\tthis.reset();\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxVertexHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxVertexHandler.prototype.state = null;\n\n/**\n * Variable: singleSizer\n * \n * Specifies if only one sizer handle at the bottom, right corner should be\n * used. Default is false.\n */\nmxVertexHandler.prototype.singleSizer = false;\n\n/**\n * Variable: index\n * \n * Holds the index of the current handle.\n */\nmxVertexHandler.prototype.index = null;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE or\n * if <tolerance> > 0. Default is true.\n */\nmxVertexHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxVertexHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxVertexHandler.prototype.tolerance = 0;\n\n/**\n * Variable: rotationEnabled\n * \n * Specifies if a rotation handle should be visible. Default is false.\n */\nmxVertexHandler.prototype.rotationEnabled = false;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxVertexHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: rotationRaster\n * \n * Specifies if rotation steps should be \"rasterized\" depening on the distance\n * to the handle. Default is true.\n */\nmxVertexHandler.prototype.rotationRaster = true;\n\n/**\n * Variable: rotationCursor\n * \n * Specifies the cursor for the rotation handle. Default is 'crosshair'.\n */\nmxVertexHandler.prototype.rotationCursor = 'crosshair';\n\n/**\n * Variable: livePreview\n * \n * Specifies if resize should change the cell in-place. This is an experimental\n * feature for non-touch devices. Default is false.\n */\nmxVertexHandler.prototype.livePreview = false;\n\n/**\n * Variable: manageSizers\n * \n * Specifies if sizers should be hidden and spaced if the vertex is small.\n * Default is false.\n */\nmxVertexHandler.prototype.manageSizers = false;\n\n/**\n * Variable: constrainGroupByChildren\n * \n * Specifies if the size of groups should be constrained by the children.\n * Default is false.\n */\nmxVertexHandler.prototype.constrainGroupByChildren = false;\n\n/**\n * Variable: rotationHandleVSpacing\n * \n * Vertical spacing for rotation icon. Default is -16.\n */\nmxVertexHandler.prototype.rotationHandleVSpacing = -16;\n\n/**\n * Variable: horizontalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset horizontally.\n */\nmxVertexHandler.prototype.horizontalOffset = 0;\n\n/**\n * Variable: verticalOffset\n * \n * The horizontal offset for the handles. This is updated in <redrawHandles>\n * if <manageSizers> is true and the sizers are offset vertically.\n */\nmxVertexHandler.prototype.verticalOffset = 0;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\tthis.selectionBorder = this.createSelectionShape(this.bounds);\n\t// VML dialect required here for event transparency in IE\n\tthis.selectionBorder.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tthis.selectionBorder.pointerEvents = false;\n\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tthis.selectionBorder.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(this.selectionBorder.node, this.graph, this.state);\n\t\n\tif (this.graph.isCellMovable(this.state.cell))\n\t{\n\t\tthis.selectionBorder.setCursor(mxConstants.CURSOR_MOVABLE_VERTEX);\n\t}\n\n\t// Adds the sizer handles\n\tif (mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells)\n\t{\n\t\tvar resizable = this.graph.isCellResizable(this.state.cell);\n\t\tthis.sizers = [];\n\n\t\tif (resizable || (this.graph.isLabelMovable(this.state.cell) &&\n\t\t\tthis.state.width >= 2 && this.state.height >= 2))\n\t\t{\n\t\t\tvar i = 0;\n\n\t\t\tif (resizable)\n\t\t\t{\n\t\t\t\tif (!this.singleSizer)\n\t\t\t\t{\n\t\t\t\t\tthis.sizers.push(this.createSizer('nw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('n-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('ne-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('w-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('e-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('sw-resize', i++));\n\t\t\t\t\tthis.sizers.push(this.createSizer('s-resize', i++));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.sizers.push(this.createSizer('se-resize', i++));\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.model.getGeometry(this.state.cell);\n\t\t\t\n\t\t\tif (geo != null && !geo.relative && !this.graph.isSwimlane(this.state.cell) &&\n\t\t\t\tthis.graph.isLabelMovable(this.state.cell))\n\t\t\t{\n\t\t\t\t// Marks this as the label handle for getHandleForEvent\n\t\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_LABEL_HANDLE, mxEvent.LABEL_HANDLE, mxConstants.LABEL_HANDLE_SIZE, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\t\tthis.sizers.push(this.labelShape);\n\t\t\t}\n\t\t}\n\t\telse if (this.graph.isCellMovable(this.state.cell) && !this.graph.isCellResizable(this.state.cell) &&\n\t\t\tthis.state.width < 2 && this.state.height < 2)\n\t\t{\n\t\t\tthis.labelShape = this.createSizer(mxConstants.CURSOR_MOVABLE_VERTEX,\n\t\t\t\tmxEvent.LABEL_HANDLE, null, mxConstants.LABEL_HANDLE_FILLCOLOR);\n\t\t\tthis.sizers.push(this.labelShape);\n\t\t}\n\t}\n\t\n\t// Adds the rotation handler\n\tif (this.isRotationHandleVisible())\n\t{\n\t\tthis.rotationShape = this.createSizer(this.rotationCursor, mxEvent.ROTATION_HANDLE,\n\t\t\tmxConstants.HANDLE_SIZE + 3, mxConstants.HANDLE_FILLCOLOR);\n\t\tthis.sizers.push(this.rotationShape);\n\t}\n\n\tthis.customHandles = this.createCustomHandles();\n\tthis.redraw();\n\t\n\tif (this.constrainGroupByChildren)\n\t{\n\t\tthis.updateMinBounds();\n\t}\n};\n\n/**\n * Function: isRotationHandleVisible\n * \n * Returns true if the rotation handle should be showing.\n */\nmxVertexHandler.prototype.isRotationHandleVisible = function()\n{\n\treturn this.graph.isEnabled() && this.rotationEnabled && this.graph.isCellRotatable(this.state.cell) &&\n\t\t(mxGraphHandler.prototype.maxCells <= 0 || this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells) &&\n\t\tthis.state.width >= 2 && this.state.height >= 2;\n};\n\n/**\n * Function: isConstrainedEvent\n * \n * Returns true if the aspect ratio if the cell should be maintained.\n */\nmxVertexHandler.prototype.isConstrainedEvent = function(me)\n{\n\treturn mxEvent.isShiftDown(me.getEvent()) || this.state.style[mxConstants.STYLE_ASPECT] == 'fixed';\n};\n\n/**\n * Function: isCenteredEvent\n * \n * Returns true if the center of the vertex should be maintained during the resize.\n */\nmxVertexHandler.prototype.isCenteredEvent = function(state, me)\n{\n\treturn false;\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxVertexHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: updateMinBounds\n * \n * Initializes the shapes required for this vertex handler.\n */\nmxVertexHandler.prototype.updateMinBounds = function()\n{\n\tvar children = this.graph.getChildCells(this.state.cell);\n\t\n\tif (children.length > 0)\n\t{\n\t\tthis.minBounds = this.graph.view.getBounds(children);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tvar s = this.state.view.scale;\n\t\t\tvar t = this.state.view.translate;\n\n\t\t\tthis.minBounds.x -= this.state.x;\n\t\t\tthis.minBounds.y -= this.state.y;\n\t\t\tthis.minBounds.x /= s;\n\t\t\tthis.minBounds.y /= s;\n\t\t\tthis.minBounds.width /= s;\n\t\t\tthis.minBounds.height /= s;\n\t\t\tthis.x0 = this.state.x / s - t.x;\n\t\t\tthis.y0 = this.state.y / s - t.y;\n\t\t}\n\t}\n};\n\n/**\n * Function: getSelectionBounds\n * \n * Returns the mxRectangle that defines the bounds of the selection\n * border.\n */\nmxVertexHandler.prototype.getSelectionBounds = function(state)\n{\n\treturn new mxRectangle(Math.round(state.x), Math.round(state.y), Math.round(state.width), Math.round(state.height));\n};\n\n/**\n * Function: createParentHighlightShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\treturn this.createSelectionShape(bounds);\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxVertexHandler.prototype.createSelectionShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.VERTEX_SELECTION_COLOR>.\n */\nmxVertexHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.VERTEX_SELECTION_STROKEWIDTH>.\n */\nmxVertexHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.VERTEX_SELECTION_DASHED>.\n */\nmxVertexHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.VERTEX_SELECTION_DASHED;\n};\n\n/**\n * Function: createSizer\n * \n * Creates a sizer handle for the specified cursor and index and returns\n * the new <mxRectangleShape> that represents the handle.\n */\nmxVertexHandler.prototype.createSizer = function(cursor, index, size, fillColor)\n{\n\tsize = size || mxConstants.HANDLE_SIZE;\n\t\n\tvar bounds = new mxRectangle(0, 0, size, size);\n\tvar sizer = this.createSizerShape(bounds, index, fillColor);\n\n\tif (sizer.isHtmlAllowed() && this.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t{\n\t\tsizer.bounds.height -= 1;\n\t\tsizer.bounds.width -= 1;\n\t\tsizer.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tsizer.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tsizer.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tsizer.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(sizer.node, this.graph, this.state);\n\t\n\tif (this.graph.isEnabled())\n\t{\n\t\tsizer.setCursor(cursor);\n\t}\n\t\n\tif (!this.isSizerVisible(index))\n\t{\n\t\tsizer.visible = false;\n\t}\n\t\n\treturn sizer;\n};\n\n/**\n * Function: isSizerVisible\n * \n * Returns true if the sizer for the given index is visible.\n * This returns true for all given indices.\n */\nmxVertexHandler.prototype.isSizerVisible = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: createSizerShape\n * \n * Creates the shape used for the sizer handle for the specified bounds an\n * index. Only images and rectangles should be returned if support for HTML\n * labels with not foreign objects is required.\n */\nmxVertexHandler.prototype.createSizerShape = function(bounds, index, fillColor)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tbounds = new mxRectangle(bounds.x, bounds.y, this.handleImage.width, this.handleImage.height);\n\t\tvar shape = new mxImageShape(bounds, this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse if (index == mxEvent.ROTATION_HANDLE)\n\t{\n\t\treturn new mxEllipse(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n\telse\n\t{\n\t\treturn new mxRectangleShape(bounds, fillColor || mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createBounds\n * \n * Helper method to create an <mxRectangle> around the given centerpoint\n * with a width and height of 2*s or 6, if no s is given.\n */\nmxVertexHandler.prototype.moveSizerTo = function(shape, x, y)\n{\n\tif (shape != null)\n\t{\n\t\tshape.bounds.x = Math.floor(x - shape.bounds.width / 2);\n\t\tshape.bounds.y = Math.floor(y - shape.bounds.height / 2);\n\t\t\n\t\t// Fixes visible inactive handles in VML\n\t\tif (shape.node != null && shape.node.style.display != 'none')\n\t\t{\n\t\t\tshape.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event. This returns the index\n * of the sizer from where the event originated or <mxEvent.LABEL_INDEX>.\n */\nmxVertexHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\t\n\tfunction checkShape(shape)\n\t{\n\t\treturn shape != null && (me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit) &&\n\t\t\tshape.node.style.display != 'none' && shape.node.style.visibility != 'hidden'));\n\t}\n\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (checkShape(this.rotationShape))\n\t{\n\t\treturn mxEvent.ROTATION_HANDLE;\n\t}\n\telse if (checkShape(this.labelShape))\n\t{\n\t\treturn mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.sizers[i]))\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxVertexHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event if a handle has been clicked. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxVertexHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 0;\n\t\n\tif (!me.isConsumed() && this.graph.isEnabled() && (tol > 0 || me.getState() == this.state))\n\t{\n\t\tvar handle = this.getHandleForEvent(me);\n\n\t\tif (handle != null)\n\t\t{\n\t\t\tthis.start(me.getGraphX(), me.getGraphY(), handle);\n\t\t\tme.consume();\n\t\t}\n\t}\n};\n\n/**\n * Function: isLivePreviewBorder\n * \n * Called if <livePreview> is enabled to check if a border should be painted.\n * This implementation returns true if the shape is transparent.\n */\nmxVertexHandler.prototype.isLivePreviewBorder = function()\n{\n\treturn this.state.shape != null && this.state.shape.fill == null && this.state.shape.stroke == null;\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.start = function(x, y, index)\n{\n\tthis.inTolerance = true;\n\tthis.childOffsetX = 0;\n\tthis.childOffsetY = 0;\n\tthis.index = index;\n\tthis.startX = x;\n\tthis.startY = y;\n\t\n\t// Saves reference to parent state\n\tvar model = this.state.view.graph.model;\n\tvar parent = model.getParent(this.state.cell);\n\t\n\tif (this.state.view.currentRoot != parent && (model.isVertex(parent) || model.isEdge(parent)))\n\t{\n\t\tthis.parentState = this.state.view.graph.view.getState(parent);\n\t}\n\t\n\t// Creates a preview that can be on top of any HTML label\n\tthis.selectionBorder.node.style.display = (index == mxEvent.ROTATION_HANDLE) ? 'inline' : 'none';\n\t\n\t// Creates the border that represents the new bounds\n\tif (!this.livePreview || this.isLivePreviewBorder())\n\t{\n\t\tthis.preview = this.createSelectionShape(this.bounds);\n\t\t\n\t\tif (!(mxClient.IS_SVG && Number(this.state.style[mxConstants.STYLE_ROTATION] || '0') != 0) &&\n\t\t\tthis.state.text != null && this.state.text.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\t\tthis.preview.init(this.graph.container);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.preview.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\t\t\tmxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\tthis.preview.init(this.graph.view.getOverlayPane());\n\t\t}\n\t}\n\t\n\t// Prepares the handles for live preview\n\tif (this.livePreview)\n\t{\n\t\tthis.hideSizers();\n\t\t\n\t\tif (index == mxEvent.ROTATION_HANDLE)\n\t\t{\n\t\t\tthis.rotationShape.node.style.display = '';\n\t\t}\n\t\telse if (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tthis.labelShape.node.style.display = '';\n\t\t}\n\t\telse if (this.sizers != null && this.sizers[index] != null)\n\t\t{\n\t\t\tthis.sizers[index].node.style.display = '';\n\t\t}\n\t\telse if (index <= mxEvent.CUSTOM_HANDLE && this.customHandles != null)\n\t\t{\n\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - index].setVisible(true);\n\t\t}\n\t\t\n\t\t// Gets the array of connected edge handlers for redrawing\n\t\tvar edges = this.graph.getEdges(this.state.cell);\n\t\tthis.edgeHandlers = [];\n\t\t\n\t\tfor (var i = 0; i < edges.length; i++)\n\t\t{\n\t\t\tvar handler = this.graph.selectionCellsHandler.getHandler(edges[i]);\n\t\t\t\n\t\t\tif (handler != null)\n\t\t\t{\n\t\t\t\tthis.edgeHandlers.push(handler);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxVertexHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: hideSizers\n * \n * Hides all sizers except.\n * \n * Starts the handling of the mouse gesture.\n */\nmxVertexHandler.prototype.hideSizers = function()\n{\n\tthis.setHandlesVisible(false);\n};\n\n/**\n * Function: checkTolerance\n * \n * Checks if the coordinates for the given event are within the\n * <mxGraph.tolerance>. If the event is a mouse event then the tolerance is\n * ignored.\n */\nmxVertexHandler.prototype.checkTolerance = function(me)\n{\n\tif (this.inTolerance && this.startX != null && this.startY != null)\n\t{\n\t\tif (mxEvent.isMouseEvent(me.getEvent()) ||\n\t\t\tMath.abs(me.getGraphX() - this.startX) > this.graph.tolerance ||\n\t\t\tMath.abs(me.getGraphY() - this.startY) > this.graph.tolerance)\n\t\t{\n\t\t\tthis.inTolerance = false;\n\t\t}\n\t}\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxVertexHandler.prototype.updateHint = function(me) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxVertexHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundAngle\n * \n * Hook for rounding the angle. This uses Math.round.\n */\nmxVertexHandler.prototype.roundAngle = function(angle)\n{\n\treturn Math.round(angle * 10) / 10;\n};\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxVertexHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxVertexHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (!me.isConsumed() && this.index != null)\n\t{\n\t\t// Checks tolerance for ignoring single clicks\n\t\tthis.checkTolerance(me);\n\n\t\tif (!this.inTolerance)\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.LABEL_HANDLE)\n\t\t\t{\n\t\t\t\tthis.moveLabel(me);\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tthis.rotateVertex(me);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.resizeVertex(me);\n\t\t\t}\n\n\t\t\tthis.updateHint(me);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (!this.graph.isMouseDown && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.moveLabel = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\t\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t}\n\n\tvar index = (this.rotationShape != null) ? this.sizers.length - 2 : this.sizers.length - 1;\n\tthis.moveSizerTo(this.sizers[index], point.x, point.y);\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.rotateVertex = function(me)\n{\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar dx = this.state.x + this.state.width / 2 - point.x;\n\tvar dy = this.state.y + this.state.height / 2 - point.y;\n\tthis.currentAlpha = (dx != 0) ? Math.atan(dy / dx) * 180 / Math.PI + 90 : ((dy < 0) ? 180 : 0);\n\t\n\tif (dx > 0)\n\t{\n\t\tthis.currentAlpha -= 180;\n\t}\n\n\t// Rotation raster\n\tif (this.rotationRaster && this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar dx = point.x - this.state.getCenterX();\n\t\tvar dy = point.y - this.state.getCenterY();\n\t\tvar dist = Math.abs(Math.sqrt(dx * dx + dy * dy) - 20) * 3;\n\t\tvar raster = Math.max(1, 5 * Math.min(3, Math.max(0, Math.round(80 / Math.abs(dist)))));\n\t\t\n\t\tthis.currentAlpha = Math.round(this.currentAlpha / raster) * raster;\n\t}\n\telse\n\t{\n\t\tthis.currentAlpha = this.roundAngle(this.currentAlpha);\n\t}\n\n\tthis.selectionBorder.rotation = this.currentAlpha;\n\tthis.selectionBorder.redraw();\n\t\t\t\t\t\n\tif (this.livePreview)\n\t{\n\t\tthis.redrawHandles();\n\t}\n};\n\n/**\n * Function: rotateVertex\n * \n * Rotates the vertex.\n */\nmxVertexHandler.prototype.resizeVertex = function(me)\n{\n\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\tvar tr = this.graph.view.translate;\n\tvar scale = this.graph.view.scale;\n\tvar cos = Math.cos(-alpha);\n\tvar sin = Math.sin(-alpha);\n\t\n\tvar dx = point.x - this.startX;\n\tvar dy = point.y - this.startY;\n\n\t// Rotates vector for mouse gesture\n\tvar tx = cos * dx - sin * dy;\n\tvar ty = sin * dx + cos * dy;\n\t\n\tdx = tx;\n\tdy = ty;\n\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tthis.unscaledBounds = this.union(geo, dx / scale, dy / scale, this.index,\n\t\tthis.graph.isGridEnabledEvent(me.getEvent()), 1,\n\t\tnew mxPoint(0, 0), this.isConstrainedEvent(me),\n\t\tthis.isCenteredEvent(this.state, me));\n\t\n\t// Keeps vertex within maximum graph or parent bounds\n\tif (!geo.relative)\n\t{\n\t\tvar max = this.graph.getMaximumGraphBounds();\n\t\t\n\t\t// Handles child cells\n\t\tif (max != null && this.parentState != null)\n\t\t{\n\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\n\t\t\tmax.x -= (this.parentState.x - tr.x * scale) / scale;\n\t\t\tmax.y -= (this.parentState.y - tr.y * scale) / scale;\n\t\t}\n\t\t\n\t\tif (this.graph.isConstrainChild(this.state.cell))\n\t\t{\n\t\t\tvar tmp = this.graph.getCellContainmentArea(this.state.cell);\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tvar overlap = this.graph.getOverlap(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (overlap > 0)\n\t\t\t\t{\n\t\t\t\t\ttmp = mxRectangle.fromRectangle(tmp);\n\t\t\t\t\t\n\t\t\t\t\ttmp.x -= tmp.width * overlap;\n\t\t\t\t\ttmp.y -= tmp.height * overlap;\n\t\t\t\t\ttmp.width += 2 * tmp.width * overlap;\n\t\t\t\t\ttmp.height += 2 * tmp.height * overlap;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (max == null)\n\t\t\t\t{\n\t\t\t\t\tmax = tmp;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmax = mxRectangle.fromRectangle(max);\n\t\t\t\t\tmax.intersect(tmp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (max != null)\n\t\t{\n\t\t\tif (this.unscaledBounds.x < max.x)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= max.x - this.unscaledBounds.x;\n\t\t\t\tthis.unscaledBounds.x = max.x;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y < max.y)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= max.y - this.unscaledBounds.y;\n\t\t\t\tthis.unscaledBounds.y = max.y;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.x + this.unscaledBounds.width > max.x + max.width)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.width -= this.unscaledBounds.x +\n\t\t\t\t\tthis.unscaledBounds.width - max.x - max.width;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.unscaledBounds.y + this.unscaledBounds.height > max.y + max.height)\n\t\t\t{\n\t\t\t\tthis.unscaledBounds.height -= this.unscaledBounds.y +\n\t\t\t\t\tthis.unscaledBounds.height - max.y - max.height;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tthis.bounds = new mxRectangle(((this.parentState != null) ? this.parentState.x : tr.x * scale) +\n\t\t(this.unscaledBounds.x) * scale, ((this.parentState != null) ? this.parentState.y : tr.y * scale) +\n\t\t(this.unscaledBounds.y) * scale, this.unscaledBounds.width * scale, this.unscaledBounds.height * scale);\n\n\tif (geo.relative && this.parentState != null)\n\t{\n\t\tthis.bounds.x += this.state.x - this.parentState.x;\n\t\tthis.bounds.y += this.state.y - this.parentState.y;\n\t}\n\n\tcos = Math.cos(alpha);\n\tsin = Math.sin(alpha);\n\t\n\tvar c2 = new mxPoint(this.bounds.getCenterX(), this.bounds.getCenterY());\n\n\tvar dx = c2.x - ct.x;\n\tvar dy = c2.y - ct.y;\n\t\n\tvar dx2 = cos * dx - sin * dy;\n\tvar dy2 = sin * dx + cos * dy;\n\t\n\tvar dx3 = dx2 - dx;\n\tvar dy3 = dy2 - dy;\n\t\n\tvar dx4 = this.bounds.x - this.state.x;\n\tvar dy4 = this.bounds.y - this.state.y;\n\t\n\tvar dx5 = cos * dx4 - sin * dy4;\n\tvar dy5 = sin * dx4 + cos * dy4;\n\t\n\tthis.bounds.x += dx3;\n\tthis.bounds.y += dy3;\n\t\n\t// Rounds unscaled bounds to int\n\tthis.unscaledBounds.x = this.roundLength(this.unscaledBounds.x + dx3 / scale);\n\tthis.unscaledBounds.y = this.roundLength(this.unscaledBounds.y + dy3 / scale);\n\tthis.unscaledBounds.width = this.roundLength(this.unscaledBounds.width);\n\tthis.unscaledBounds.height = this.roundLength(this.unscaledBounds.height);\n\t\n\t// Shifts the children according to parent offset\n\tif (!this.graph.isCellCollapsed(this.state.cell) && (dx3 != 0 || dy3 != 0))\n\t{\n\t\tthis.childOffsetX = this.state.x - this.bounds.x + dx5;\n\t\tthis.childOffsetY = this.state.y - this.bounds.y + dy5;\n\t}\n\telse\n\t{\n\t\tthis.childOffsetX = 0;\n\t\tthis.childOffsetY = 0;\n\t}\n\t\n\tif (this.livePreview)\n\t{\n\t\tthis.updateLivePreview(me);\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.drawPreview();\n\t}\n};\n\n/**\n * Function: updateLivePreview\n * \n * Repaints the live preview.\n */\nmxVertexHandler.prototype.updateLivePreview = function(me)\n{\n\t// TODO: Apply child offset to children in live preview\n\tvar scale = this.graph.view.scale;\n\tvar tr = this.graph.view.translate;\n\t\n\t// Saves current state\n\tvar tempState = this.state.clone();\n\n\t// Temporarily changes size and origin\n\tthis.state.x = this.bounds.x;\n\tthis.state.y = this.bounds.y;\n\tthis.state.origin = new mxPoint(this.state.x / scale - tr.x, this.state.y / scale - tr.y);\n\tthis.state.width = this.bounds.width;\n\tthis.state.height = this.bounds.height;\n\t\n\t// Needed to force update of text bounds\n\tthis.state.unscaledWidth = null;\n\t\n\t// Redraws cell and handles\n\tvar off = this.state.absoluteOffset;\n\toff = new mxPoint(off.x, off.y);\n\n\t// Required to store and reset absolute offset for updating label position\n\tthis.state.absoluteOffset.x = 0;\n\tthis.state.absoluteOffset.y = 0;\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\t\t\t\t\n\n\tif (geo != null)\n\t{\n\t\tvar offset = geo.offset || this.EMPTY_POINT;\n\n\t\tif (offset != null && !geo.relative)\n\t\t{\n\t\t\tthis.state.absoluteOffset.x = this.state.view.scale * offset.x;\n\t\t\tthis.state.absoluteOffset.y = this.state.view.scale * offset.y;\n\t\t}\n\t\t\n\t\tthis.state.view.updateVertexLabelOffset(this.state);\n\t}\n\t\n\t// Draws the live preview\n\tthis.state.view.graph.cellRenderer.redraw(this.state, true);\n\t\n\t// Redraws connected edges TODO: Include child edges\n\tthis.state.view.invalidate(this.state.cell);\n\tthis.state.invalid = false;\n\tthis.state.view.validate();\n\tthis.redrawHandles();\n\t\n\t// Restores current state\n\tthis.state.setState(tempState);\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by applying the changes to the geometry.\n */\nmxVertexHandler.prototype.mouseUp = function(sender, me)\n{\n\tif (this.index != null && this.state != null)\n\t{\n\t\tvar point = new mxPoint(me.getGraphX(), me.getGraphY());\n\n\t\tthis.graph.getModel().beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tif (this.index <= mxEvent.CUSTOM_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].active = false;\n\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].execute();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index == mxEvent.ROTATION_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.currentAlpha != null)\n\t\t\t\t{\n\t\t\t\t\tvar delta = this.currentAlpha - (this.state.style[mxConstants.STYLE_ROTATION] || 0);\n\t\t\t\t\t\n\t\t\t\t\tif (delta != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(this.state.cell, delta);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.rotateClick();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar gridEnabled = this.graph.isGridEnabledEvent(me.getEvent());\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(-alpha);\n\t\t\t\tvar sin = Math.sin(-alpha);\n\t\t\t\t\n\t\t\t\tvar dx = point.x - this.startX;\n\t\t\t\tvar dy = point.y - this.startY;\n\t\t\t\t\n\t\t\t\t// Rotates vector for mouse gesture\n\t\t\t\tvar tx = cos * dx - sin * dy;\n\t\t\t\tvar ty = sin * dx + cos * dy;\n\t\t\t\t\n\t\t\t\tdx = tx;\n\t\t\t\tdy = ty;\n\t\t\t\t\n\t\t\t\tvar s = this.graph.view.scale;\n\t\t\t\tvar recurse = this.isRecursiveResize(this.state, me);\n\t\t\t\tthis.resizeCell(this.state.cell, this.roundLength(dx / s), this.roundLength(dy / s),\n\t\t\t\t\tthis.index, gridEnabled, this.isConstrainedEvent(me), recurse);\n\t\t\t}\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tthis.graph.getModel().endUpdate();\n\t\t}\n\n\t\tme.consume();\n\t\tthis.reset();\n\t}\n};\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell to the given rotation.\n */\nmxVertexHandler.prototype.isRecursiveResize = function(state, me)\n{\n\treturn this.graph.isRecursiveResize(this.state);\n};\n\n/**\n * Function: rotateClick\n * \n * Hook for subclassers to implement a single click on the rotation handle.\n * This code is executed as part of the model transaction. This implementation\n * is empty.\n */\nmxVertexHandler.prototype.rotateClick = function() { };\n\n/**\n * Function: rotateCell\n * \n * Rotates the given cell and its children by the given angle in degrees.\n * \n * Parameters:\n * \n * cell - <mxCell> to be rotated.\n * angle - Angle in degrees.\n */\nmxVertexHandler.prototype.rotateCell = function(cell, angle, parent)\n{\n\tif (angle != 0)\n\t{\n\t\tvar model = this.graph.getModel();\n\n\t\tif (model.isVertex(cell) || model.isEdge(cell))\n\t\t{\n\t\t\tif (!model.isEdge(cell))\n\t\t\t{\n\t\t\t\tvar state = this.graph.view.getState(cell);\n\t\t\t\tvar style = (state != null) ? state.style : this.graph.getCellStyle(cell);\n\t\t\n\t\t\t\tif (style != null)\n\t\t\t\t{\n\t\t\t\t\tvar total = (style[mxConstants.STYLE_ROTATION] || 0) + angle;\n\t\t\t\t\tthis.graph.setCellStyles(mxConstants.STYLE_ROTATION, total, [cell]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar geo = this.graph.getCellGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar pgeo = this.graph.getCellGeometry(parent);\n\t\t\t\t\n\t\t\t\tif (pgeo != null && !model.isEdge(parent))\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\tgeo.rotate(angle, new mxPoint(pgeo.width / 2, pgeo.height / 2));\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ((model.isVertex(cell) && !geo.relative) || model.isEdge(cell))\n\t\t\t\t{\n\t\t\t\t\t// Recursive rotation\n\t\t\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\t\t\t\n\t\t\t\t\tfor (var i = 0; i < childCount; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rotateCell(model.getChildAt(cell, i), angle, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxVertexHandler.prototype.reset = function()\n{\n\tif (this.sizers != null && this.index != null && this.sizers[this.index] != null &&\n\t\tthis.sizers[this.index].node.style.display == 'none')\n\t{\n\t\tthis.sizers[this.index].node.style.display = '';\n\t}\n\n\tthis.currentAlpha = null;\n\tthis.inTolerance = null;\n\tthis.index = null;\n\n\t// TODO: Reset and redraw cell states for live preview\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tif (this.customHandles[i].active)\n\t\t\t{\n\t\t\t\tthis.customHandles[i].active = false;\n\t\t\t\tthis.customHandles[i].reset();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.customHandles[i].setVisible(true);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Checks if handler has been destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.node.style.display = 'inline';\n\t\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\t\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y,\n\t\t\tthis.selectionBounds.width, this.selectionBounds.height);\n\t\tthis.drawPreview();\n\t}\n\n\tthis.removeHint();\n\tthis.redrawHandles();\n\tthis.edgeHandlers = null;\n\tthis.unscaledBounds = null;\n};\n\n/**\n * Function: resizeCell\n * \n * Uses the given vector to change the bounds of the given cell\n * in the graph using <mxGraph.resizeCell>.\n */\nmxVertexHandler.prototype.resizeCell = function(cell, dx, dy, index, gridEnabled, constrained, recurse)\n{\n\tvar geo = this.graph.model.getGeometry(cell);\n\t\n\tif (geo != null)\n\t{\n\t\tif (index == mxEvent.LABEL_HANDLE)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\t\t\tdx = Math.round((this.labelShape.bounds.getCenterX() - this.startX) / scale);\n\t\t\tdy = Math.round((this.labelShape.bounds.getCenterY() - this.startY) / scale);\n\t\t\t\n\t\t\tgeo = geo.clone();\n\t\t\t\n\t\t\tif (geo.offset == null)\n\t\t\t{\n\t\t\t\tgeo.offset = new mxPoint(dx, dy);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgeo.offset.x += dx;\n\t\t\t\tgeo.offset.y += dy;\n\t\t\t}\n\t\t\t\n\t\t\tthis.graph.model.setGeometry(cell, geo);\n\t\t}\n\t\telse if (this.unscaledBounds != null)\n\t\t{\n\t\t\tvar scale = this.graph.view.scale;\n\n\t\t\tif (this.childOffsetX != 0 || this.childOffsetY != 0)\n\t\t\t{\n\t\t\t\tthis.moveChildren(cell, Math.round(this.childOffsetX / scale), Math.round(this.childOffsetY / scale));\n\t\t\t}\n\n\t\t\tthis.graph.resizeCell(cell, this.unscaledBounds, recurse);\n\t\t}\n\t}\n};\n\n/**\n * Function: moveChildren\n * \n * Moves the children of the given cell by the given vector.\n */\nmxVertexHandler.prototype.moveChildren = function(cell, dx, dy)\n{\n\tvar model = this.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\tfor (var i = 0; i < childCount; i++)\n\t{\n\t\tvar child = model.getChildAt(cell, i);\n\t\tvar geo = this.graph.getCellGeometry(child);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.translate(dx, dy);\n\t\t\tmodel.setGeometry(child, geo);\n\t\t}\n\t}\n};\n/**\n * Function: union\n * \n * Returns the union of the given bounds and location for the specified\n * handle index.\n * \n * To override this to limit the size of vertex via a minWidth/-Height style,\n * the following code can be used.\n * \n * (code)\n * var vertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = vertexHandlerUnion.apply(this, arguments);\n *   \n *   result.width = Math.max(result.width, mxUtils.getNumber(this.state.style, 'minWidth', 0));\n *   result.height = Math.max(result.height, mxUtils.getNumber(this.state.style, 'minHeight', 0));\n *   \n *   return result;\n * };\n * (end)\n * \n * The minWidth/-Height style can then be used as follows:\n * \n * (code)\n * graph.insertVertex(parent, null, 'Hello,', 20, 20, 80, 30, 'minWidth=100;minHeight=100;');\n * (end)\n * \n * To override this to update the height for a wrapped text if the width of a vertex is\n * changed, the following can be used.\n * \n * (code)\n * var mxVertexHandlerUnion = mxVertexHandler.prototype.union;\n * mxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained)\n * {\n *   var result = mxVertexHandlerUnion.apply(this, arguments);\n *   var s = this.state;\n *   \n *   if (this.graph.isHtmlLabel(s.cell) && (index == 3 || index == 4) &&\n *       s.text != null && s.style[mxConstants.STYLE_WHITE_SPACE] == 'wrap')\n *   {\n *     var label = this.graph.getLabel(s.cell);\n *     var fontSize = mxUtils.getNumber(s.style, mxConstants.STYLE_FONTSIZE, mxConstants.DEFAULT_FONTSIZE);\n *     var ww = result.width / s.view.scale - s.text.spacingRight - s.text.spacingLeft\n *     \n *     result.height = mxUtils.getSizeForString(label, fontSize, s.style[mxConstants.STYLE_FONTFAMILY], ww).height;\n *   }\n *   \n *   return result;\n * };\n * (end)\n */\nmxVertexHandler.prototype.union = function(bounds, dx, dy, index, gridEnabled, scale, tr, constrained, centered)\n{\n\tif (this.singleSizer)\n\t{\n\t\tvar x = bounds.x + bounds.width + dx;\n\t\tvar y = bounds.y + bounds.height + dy;\n\t\t\n\t\tif (gridEnabled)\n\t\t{\n\t\t\tx = this.graph.snap(x / scale) * scale;\n\t\t\ty = this.graph.snap(y / scale) * scale;\n\t\t}\n\t\t\n\t\tvar rect = new mxRectangle(bounds.x, bounds.y, 0, 0);\n\t\trect.add(new mxRectangle(x, y, 0, 0));\n\t\t\n\t\treturn rect;\n\t}\n\telse\n\t{\n\t\tvar w0 = bounds.width;\n\t\tvar h0 = bounds.height;\n\t\tvar left = bounds.x - tr.x * scale;\n\t\tvar right = left + w0;\n\t\tvar top = bounds.y - tr.y * scale;\n\t\tvar bottom = top + h0;\n\t\t\n\t\tvar cx = left + w0 / 2;\n\t\tvar cy = top + h0 / 2;\n\t\t\n\t\tif (index > 4 /* Bottom Row */)\n\t\t{\n\t\t\tbottom = bottom + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tbottom = this.graph.snap(bottom / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index < 3 /* Top Row */)\n\t\t{\n\t\t\ttop = top + dy;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\ttop = this.graph.snap(top / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (index == 0 || index == 3 || index == 5 /* Left */)\n\t\t{\n\t\t\tleft += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tleft = this.graph.snap(left / scale) * scale;\n\t\t\t}\n\t\t}\n\t\telse if (index == 2 || index == 4 || index == 7 /* Right */)\n\t\t{\n\t\t\tright += dx;\n\t\t\t\n\t\t\tif (gridEnabled)\n\t\t\t{\n\t\t\t\tright = this.graph.snap(right / scale) * scale;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar width = right - left;\n\t\tvar height = bottom - top;\n\n\t\tif (constrained)\n\t\t{\n\t\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tvar aspect = geo.width / geo.height;\n\t\t\t\t\n\t\t\t\tif (index== 1 || index== 2 || index == 7 || index == 6)\n\t\t\t\t{\n\t\t\t\t\twidth = height * aspect;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\theight = width / aspect;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (index == 0)\n\t\t\t\t{\n\t\t\t\t\tleft = right - width;\n\t\t\t\t\ttop = bottom - height;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (centered)\n\t\t{\n\t\t\twidth += (width - w0);\n\t\t\theight += (height - h0);\n\t\t\t\n\t\t\tvar cdx = cx - (left + width / 2);\n\t\t\tvar cdy = cy - (top + height / 2);\n\n\t\t\tleft += cdx;\n\t\t\ttop += cdy;\n\t\t\tright += cdx;\n\t\t\tbottom += cdy;\n\t\t}\n\n\t\t// Flips over left side\n\t\tif (width < 0)\n\t\t{\n\t\t\tleft += width;\n\t\t\twidth = Math.abs(width);\n\t\t}\n\t\t\n\t\t// Flips over top side\n\t\tif (height < 0)\n\t\t{\n\t\t\ttop += height;\n\t\t\theight = Math.abs(height);\n\t\t}\n\n\t\tvar result = new mxRectangle(left + tr.x * scale, top + tr.y * scale, width, height);\n\t\t\n\t\tif (this.minBounds != null)\n\t\t{\n\t\t\tresult.width = Math.max(result.width, this.minBounds.x * scale + this.minBounds.width * scale +\n\t\t\t\tMath.max(0, this.x0 * scale - result.x));\n\t\t\tresult.height = Math.max(result.height, this.minBounds.y * scale + this.minBounds.height * scale +\n\t\t\t\tMath.max(0, this.y0 * scale - result.y));\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: redraw\n * \n * Redraws the handles and the preview.\n */\nmxVertexHandler.prototype.redraw = function()\n{\n\tthis.selectionBounds = this.getSelectionBounds(this.state);\n\tthis.bounds = new mxRectangle(this.selectionBounds.x, this.selectionBounds.y, this.selectionBounds.width, this.selectionBounds.height);\n\t\n\tthis.redrawHandles();\n\tthis.drawPreview();\n};\n\n/**\n * Returns the padding to be used for drawing handles for the current <bounds>.\n */\nmxVertexHandler.prototype.getHandlePadding = function()\n{\n\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\tvar result = new mxPoint(0, 0);\n\tvar tol = this.tolerance;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null &&\n\t\t(this.bounds.width < 2 * this.sizers[0].bounds.width + 2 * tol ||\n\t\tthis.bounds.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t{\n\t\ttol /= 2;\n\t\t\n\t\tresult.x = this.sizers[0].bounds.width + tol;\n\t\tresult.y = this.sizers[0].bounds.height + tol;\n\t}\n\t\n\treturn result;\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles. To hide certain handles the following code can be used.\n * \n * (code)\n * mxVertexHandler.prototype.redrawHandles = function()\n * {\n *   mxVertexHandlerRedrawHandles.apply(this, arguments);\n *   \n *   if (this.sizers != null && this.sizers.length > 7)\n *   {\n *     this.sizers[1].node.style.display = 'none';\n *     this.sizers[6].node.style.display = 'none';\n *   }\n * };\n * (end)\n */\nmxVertexHandler.prototype.redrawHandles = function()\n{\n\tvar tol = this.tolerance;\n\tthis.horizontalOffset = 0;\n\tthis.verticalOffset = 0;\n\tvar s = this.bounds;\n\n\tif (this.sizers != null && this.sizers.length > 0 && this.sizers[0] != null)\n\t{\n\t\tif (this.index == null && this.manageSizers && this.sizers.length >= 8)\n\t\t{\n\t\t\t// KNOWN: Tolerance depends on event type (eg. 0 for mouse events)\n\t\t\tvar padding = this.getHandlePadding();\n\t\t\tthis.horizontalOffset = padding.x;\n\t\t\tthis.verticalOffset = padding.y;\n\t\t\t\n\t\t\tif (this.horizontalOffset != 0 || this.verticalOffset != 0)\n\t\t\t{\n\t\t\t\ts = new mxRectangle(s.x, s.y, s.width, s.height);\n\n\t\t\t\ts.x -= this.horizontalOffset / 2;\n\t\t\t\ts.width += this.horizontalOffset;\n\t\t\t\ts.y -= this.verticalOffset / 2;\n\t\t\t\ts.height += this.verticalOffset;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tif ((s.width < 2 * this.sizers[0].bounds.width + 2 * tol) ||\n\t\t\t\t\t(s.height < 2 * this.sizers[0].bounds.height + 2 * tol))\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[2].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[5].node.style.display = 'none';\n\t\t\t\t\tthis.sizers[7].node.style.display = 'none';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.sizers[0].node.style.display = '';\n\t\t\t\t\tthis.sizers[2].node.style.display = '';\n\t\t\t\t\tthis.sizers[5].node.style.display = '';\n\t\t\t\t\tthis.sizers[7].node.style.display = '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar r = s.x + s.width;\n\t\tvar b = s.y + s.height;\n\t\t\n\t\tif (this.singleSizer)\n\t\t{\n\t\t\tthis.moveSizerTo(this.sizers[0], r, b);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar cx = s.x + s.width / 2;\n\t\t\tvar cy = s.y + s.height / 2;\n\t\t\t\n\t\t\tif (this.sizers.length >= 8)\n\t\t\t{\n\t\t\t\tvar crs = ['nw-resize', 'n-resize', 'ne-resize', 'e-resize', 'se-resize', 's-resize', 'sw-resize', 'w-resize'];\n\t\t\t\t\n\t\t\t\tvar alpha = mxUtils.toRadians(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tvar cos = Math.cos(alpha);\n\t\t\t\tvar sin = Math.sin(alpha);\n\t\t\t\t\n\t\t\t\tvar da = Math.round(alpha * 4 / Math.PI);\n\t\t\t\t\n\t\t\t\tvar ct = new mxPoint(s.getCenterX(), s.getCenterY());\n\t\t\t\tvar pt = mxUtils.getRotatedPoint(new mxPoint(s.x, s.y), cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[0], pt.x, pt.y);\n\t\t\t\tthis.sizers[0].setCursor(crs[mxUtils.mod(0 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[1], pt.x, pt.y);\n\t\t\t\tthis.sizers[1].setCursor(crs[mxUtils.mod(1 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = s.y;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[2], pt.x, pt.y);\n\t\t\t\tthis.sizers[2].setCursor(crs[mxUtils.mod(2 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[3], pt.x, pt.y);\n\t\t\t\tthis.sizers[3].setCursor(crs[mxUtils.mod(7 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = cy;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[4], pt.x, pt.y);\n\t\t\t\tthis.sizers[4].setCursor(crs[mxUtils.mod(3 + da, crs.length)]);\n\n\t\t\t\tpt.x = s.x;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[5], pt.x, pt.y);\n\t\t\t\tthis.sizers[5].setCursor(crs[mxUtils.mod(6 + da, crs.length)]);\n\n\t\t\t\tpt.x = cx;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[6], pt.x, pt.y);\n\t\t\t\tthis.sizers[6].setCursor(crs[mxUtils.mod(5 + da, crs.length)]);\n\n\t\t\t\tpt.x = r;\n\t\t\t\tpt.y = b;\n\t\t\t\tpt = mxUtils.getRotatedPoint(pt, cos, sin, ct);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[7], pt.x, pt.y);\n\t\t\t\tthis.sizers[7].setCursor(crs[mxUtils.mod(4 + da, crs.length)]);\n\t\t\t\t\n\t\t\t\tthis.moveSizerTo(this.sizers[8], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse if (this.state.width >= 2 && this.state.height >= 2)\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], cx + this.state.absoluteOffset.x, cy + this.state.absoluteOffset.y);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.moveSizerTo(this.sizers[0], this.state.x, this.state.y);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.rotationShape != null)\n\t{\n\t\tvar alpha = mxUtils.toRadians((this.currentAlpha != null) ? this.currentAlpha : this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tvar cos = Math.cos(alpha);\n\t\tvar sin = Math.sin(alpha);\n\t\t\n\t\tvar ct = new mxPoint(this.state.getCenterX(), this.state.getCenterY());\n\t\tvar pt = mxUtils.getRotatedPoint(this.getRotationHandlePosition(), cos, sin, ct);\n\n\t\tif (this.rotationShape.node != null)\n\t\t{\n\t\t\tthis.moveSizerTo(this.rotationShape, pt.x, pt.y);\n\n\t\t\t// Hides rotation handle during text editing\n\t\t\tthis.rotationShape.node.style.visibility = (this.state.view.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t}\n\t\n\tif (this.edgeHandlers != null)\n\t{\t\t\n\t\tfor (var i = 0; i < this.edgeHandlers.length; i++)\n\t\t{\n\t\t\tthis.edgeHandlers[i].redraw();\n\t\t}\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tvar temp = this.customHandles[i].shape.node.style.display;\n\t\t\tthis.customHandles[i].redraw();\n\t\t\tthis.customHandles[i].shape.node.style.display = temp;\n\n\t\t\t// Hides custom handles during text editing\n\t\t\tthis.customHandles[i].shape.node.style.visibility = (this.graph.isEditing()) ? 'hidden' : '';\n\t\t}\n\t}\n\n\tthis.updateParentHighlight();\n};\n\n/**\n * Function: getRotationHandlePosition\n * \n * Returns an <mxPoint> that defines the rotation handle position.\n */\nmxVertexHandler.prototype.getRotationHandlePosition = function()\n{\n\treturn new mxPoint(this.bounds.x + this.bounds.width / 2, this.bounds.y + this.rotationHandleVSpacing)\n};\n\n/**\n * Function: updateParentHighlight\n * \n * Updates the highlight of the parent if <parentHighlightEnabled> is true.\n */\nmxVertexHandler.prototype.updateParentHighlight = function()\n{\n\t// If not destroyed\n\tif (this.selectionBorder != null)\n\t{\n\t\tif (this.parentHighlight != null)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\tvar b = this.parentHighlight.bounds;\n\t\t\t\t\n\t\t\t\tif (pstate != null && (b.x != pstate.x || b.y != pstate.y ||\n\t\t\t\t\tb.width != pstate.width || b.height != pstate.height))\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight.bounds = pstate;\n\t\t\t\t\tthis.parentHighlight.redraw();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.parentHighlight.destroy();\n\t\t\t\tthis.parentHighlight = null;\n\t\t\t}\n\t\t}\n\t\telse if (this.parentHighlightEnabled)\n\t\t{\n\t\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\t\n\t\t\tif (this.graph.model.isVertex(parent))\n\t\t\t{\n\t\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\t\n\t\t\t\tif (pstate != null)\n\t\t\t\t{\n\t\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxVertexHandler.prototype.drawPreview = function()\n{\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.bounds = this.bounds;\n\t\t\n\t\tif (this.preview.node.parentNode == this.graph.container)\n\t\t{\n\t\t\tthis.preview.bounds.width = Math.max(0, this.preview.bounds.width - 1);\n\t\t\tthis.preview.bounds.height = Math.max(0, this.preview.bounds.height - 1);\n\t\t}\n\t\n\t\tthis.preview.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\tthis.preview.redraw();\n\t}\n\t\n\tthis.selectionBorder.bounds = this.bounds;\n\tthis.selectionBorder.redraw();\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxVertexHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.preview != null)\n\t{\n\t\tthis.preview.destroy();\n\t\tthis.preview = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.selectionBorder != null)\n\t{\n\t\tthis.selectionBorder.destroy();\n\t\tthis.selectionBorder = null;\n\t}\n\t\n\tthis.labelShape = null;\n\tthis.removeHint();\n\n\tif (this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tthis.sizers[i].destroy();\n\t\t}\n\t\t\n\t\tthis.sizers = null;\n\t}\n\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].destroy();\n\t\t}\n\t\t\n\t\tthis.customHandles = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler> for each selected edge.\n * \n * To enable adding/removing control points, the following code can be used:\n * \n * (code)\n * mxEdgeHandler.prototype.addEnabled = true;\n * mxEdgeHandler.prototype.removeEnabled = true;\n * (end)\n * \n * Note: This experimental feature is not recommended for production use.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be handled.\n */\nfunction mxEdgeHandler(state)\n{\n\tif (state != null)\n\t{\n\t\tthis.state = state;\n\t\tthis.init();\n\t\t\n\t\t// Handles escape keystrokes\n\t\tthis.escapeHandler = mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar dirty = this.index != null;\n\t\t\tthis.reset();\n\t\t\t\n\t\t\tif (dirty)\n\t\t\t{\n\t\t\t\tthis.graph.cellRenderer.redraw(this.state, false, state.view.isRendering());\n\t\t\t}\n\t\t});\n\t\t\n\t\tthis.state.view.graph.addListener(mxEvent.ESCAPE, this.escapeHandler);\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxEdgeHandler.prototype.graph = null;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState> being modified.\n */\nmxEdgeHandler.prototype.state = null;\n\n/**\n * Variable: marker\n * \n * Holds the <mxTerminalMarker> which is used for highlighting terminals.\n */\nmxEdgeHandler.prototype.marker = null;\n\n/**\n * Variable: constraintHandler\n * \n * Holds the <mxConstraintHandler> used for drawing and highlighting\n * constraints.\n */\nmxEdgeHandler.prototype.constraintHandler = null;\n\n/**\n * Variable: error\n * \n * Holds the current validation error while a connection is being changed.\n */\nmxEdgeHandler.prototype.error = null;\n\n/**\n * Variable: shape\n * \n * Holds the <mxShape> that represents the preview edge.\n */\nmxEdgeHandler.prototype.shape = null;\n\n/**\n * Variable: bends\n * \n * Holds the <mxShapes> that represent the points.\n */\nmxEdgeHandler.prototype.bends = null;\n\n/**\n * Variable: labelShape\n * \n * Holds the <mxShape> that represents the label position.\n */\nmxEdgeHandler.prototype.labelShape = null;\n\n/**\n * Variable: cloneEnabled\n * \n * Specifies if cloning by control-drag is enabled. Default is true.\n */\nmxEdgeHandler.prototype.cloneEnabled = true;\n\n/**\n * Variable: addEnabled\n * \n * Specifies if adding bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.addEnabled = false;\n\n/**\n * Variable: removeEnabled\n * \n * Specifies if removing bends by shift-click is enabled. Default is false.\n * Note: This experimental feature is not recommended for production use.\n */\nmxEdgeHandler.prototype.removeEnabled = false;\n\n/**\n * Variable: dblClickRemoveEnabled\n * \n * Specifies if removing bends by double click is enabled. Default is false.\n */\nmxEdgeHandler.prototype.dblClickRemoveEnabled = false;\n\n/**\n * Variable: mergeRemoveEnabled\n * \n * Specifies if removing bends by dropping them on other bends is enabled.\n * Default is false.\n */\nmxEdgeHandler.prototype.mergeRemoveEnabled = false;\n\n/**\n * Variable: straightRemoveEnabled\n * \n * Specifies if removing bends by creating straight segments should be enabled.\n * If enabled, this can be overridden by holding down the alt key while moving.\n * Default is false.\n */\nmxEdgeHandler.prototype.straightRemoveEnabled = false;\n\n/**\n * Variable: virtualBendsEnabled\n * \n * Specifies if virtual bends should be added in the center of each\n * segments. These bends can then be used to add new waypoints.\n * Default is false.\n */\nmxEdgeHandler.prototype.virtualBendsEnabled = false;\n\n/**\n * Variable: virtualBendOpacity\n * \n * Opacity to be used for virtual bends (see <virtualBendsEnabled>).\n * Default is 20.\n */\nmxEdgeHandler.prototype.virtualBendOpacity = 20;\n\n/**\n * Variable: parentHighlightEnabled\n * \n * Specifies if the parent should be highlighted if a child cell is selected.\n * Default is false.\n */\nmxEdgeHandler.prototype.parentHighlightEnabled = false;\n\n/**\n * Variable: preferHtml\n * \n * Specifies if bends should be added to the graph container. This is updated\n * in <init> based on whether the edge or one of its terminals has an HTML\n * label in the container.\n */\nmxEdgeHandler.prototype.preferHtml = false;\n\n/**\n * Variable: allowHandleBoundsCheck\n * \n * Specifies if the bounds of handles should be used for hit-detection in IE\n * Default is true.\n */\nmxEdgeHandler.prototype.allowHandleBoundsCheck = true;\n\n/**\n * Variable: snapToTerminals\n * \n * Specifies if waypoints should snap to the routing centers of terminals.\n * Default is false.\n */\nmxEdgeHandler.prototype.snapToTerminals = false;\n\n/**\n * Variable: handleImage\n * \n * Optional <mxImage> to be used as handles. Default is null.\n */\nmxEdgeHandler.prototype.handleImage = null;\n\n/**\n * Variable: tolerance\n * \n * Optional tolerance for hit-detection in <getHandleForEvent>. Default is 0.\n */\nmxEdgeHandler.prototype.tolerance = 0;\n\n/**\n * Variable: outlineConnect\n * \n * Specifies if connections to the outline of a highlighted target should be\n * enabled. This will allow to place the connection point along the outline of\n * the highlighted target. Default is false.\n */\nmxEdgeHandler.prototype.outlineConnect = false;\n\n/**\n * Variable: manageLabelHandle\n * \n * Specifies if the label handle should be moved if it intersects with another\n * handle. Uses <checkLabelHandle> for checking and moving. Default is false.\n */\nmxEdgeHandler.prototype.manageLabelHandle = false;\n\n/**\n * Function: init\n * \n * Initializes the shapes required for this edge handler.\n */\nmxEdgeHandler.prototype.init = function()\n{\n\tthis.graph = this.state.view.graph;\n\tthis.marker = this.createMarker();\n\tthis.constraintHandler = new mxConstraintHandler(this.graph);\n\t\n\t// Clones the original points from the cell\n\t// and makes sure at least one point exists\n\tthis.points = [];\n\t\n\t// Uses the absolute points of the state\n\t// for the initial configuration and preview\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.shape = this.createSelectionShape(this.abspoints);\n\tthis.shape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\tthis.shape.init(this.graph.getView().getOverlayPane());\n\tthis.shape.pointerEvents = false;\n\tthis.shape.setCursor(mxConstants.CURSOR_MOVABLE_EDGE);\n\tmxEvent.redirectMouseEvents(this.shape.node, this.graph, this.state);\n\n\t// Updates preferHtml\n\tthis.preferHtml = this.state.text != null &&\n\t\tthis.state.text.node.parentNode == this.graph.container;\n\t\n\tif (!this.preferHtml)\n\t{\n\t\t// Checks source terminal\n\t\tvar sourceState = this.state.getVisibleTerminalState(true);\n\t\t\n\t\tif (sourceState != null)\n\t\t{\n\t\t\tthis.preferHtml = sourceState.text != null &&\n\t\t\t\tsourceState.text.node.parentNode == this.graph.container;\n\t\t}\n\t\t\n\t\tif (!this.preferHtml)\n\t\t{\n\t\t\t// Checks target terminal\n\t\t\tvar targetState = this.state.getVisibleTerminalState(false);\n\t\t\t\n\t\t\tif (targetState != null)\n\t\t\t{\n\t\t\t\tthis.preferHtml = targetState.text != null &&\n\t\t\t\ttargetState.text.node.parentNode == this.graph.container;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Adds highlight for parent group\n\tif (this.parentHighlightEnabled)\n\t{\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pstate = this.graph.view.getState(parent);\n\t\t\t\n\t\t\tif (pstate != null)\n\t\t\t{\n\t\t\t\tthis.parentHighlight = this.createParentHighlightShape(pstate);\n\t\t\t\t// VML dialect required here for event transparency in IE\n\t\t\t\tthis.parentHighlight.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\t\t\t\tthis.parentHighlight.pointerEvents = false;\n\t\t\t\tthis.parentHighlight.rotation = Number(pstate.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\t\tthis.parentHighlight.init(this.graph.getView().getOverlayPane());\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Creates bends for the non-routed absolute points\n\t// or bends that don't correspond to points\n\tif (this.graph.getSelectionCount() < mxGraphHandler.prototype.maxCells ||\n\t\tmxGraphHandler.prototype.maxCells <= 0)\n\t{\n\t\tthis.bends = this.createBends();\n\n\t\tif (this.isVirtualBendsEnabled())\n\t\t{\n\t\t\tthis.virtualBends = this.createVirtualBends();\n\t\t}\n\t}\n\n\t// Adds a rectangular handle for the label position\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape = this.createLabelHandleShape();\n\tthis.initBend(this.labelShape);\n\tthis.labelShape.setCursor(mxConstants.CURSOR_LABEL_HANDLE);\n\t\n\tthis.customHandles = this.createCustomHandles();\n\t\n\tthis.redraw();\n};\n\n/**\n * Function: createCustomHandles\n * \n * Returns an array of custom handles. This implementation returns null.\n */\nmxEdgeHandler.prototype.createCustomHandles = function()\n{\n\treturn null;\n};\n\n/**\n * Function: isVirtualBendsEnabled\n * \n * Returns true if virtual bends should be added. This returns true if\n * <virtualBendsEnabled> is true and the current style allows and\n * renders custom waypoints.\n */\nmxEdgeHandler.prototype.isVirtualBendsEnabled = function(evt)\n{\n\treturn this.virtualBendsEnabled && (this.state.style[mxConstants.STYLE_EDGE] == null ||\n\t\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.NONE ||\n\t\t\tthis.state.style[mxConstants.STYLE_NOEDGESTYLE] == 1)  &&\n\t\t\tmxUtils.getValue(this.state.style, mxConstants.STYLE_SHAPE, null) != 'arrow';\n};\n\n/**\n * Function: isAddPointEvent\n * \n * Returns true if the given event is a trigger to add a new point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isAddPointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: isRemovePointEvent\n * \n * Returns true if the given event is a trigger to remove a point. This\n * implementation returns true if shift is pressed.\n */\nmxEdgeHandler.prototype.isRemovePointEvent = function(evt)\n{\n\treturn mxEvent.isShiftDown(evt);\n};\n\n/**\n * Function: getSelectionPoints\n * \n * Returns the list of points that defines the selection stroke.\n */\nmxEdgeHandler.prototype.getSelectionPoints = function(state)\n{\n\treturn state.absolutePoints;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createParentHighlightShape = function(bounds)\n{\n\tvar shape = new mxRectangleShape(bounds, null, this.getSelectionColor());\n\tshape.strokewidth = this.getSelectionStrokeWidth();\n\tshape.isDashed = this.isSelectionDashed();\n\t\n\treturn shape;\n};\n\n/**\n * Function: createSelectionShape\n * \n * Creates the shape used to draw the selection border.\n */\nmxEdgeHandler.prototype.createSelectionShape = function(points)\n{\n\tvar shape = new this.state.shape.constructor();\n\tshape.outline = true;\n\tshape.apply(this.state);\n\t\n\tshape.isDashed = this.isSelectionDashed();\n\tshape.stroke = this.getSelectionColor();\n\tshape.isShadow = false;\n\t\n\treturn shape;\n};\n\n/**\n * Function: getSelectionColor\n * \n * Returns <mxConstants.EDGE_SELECTION_COLOR>.\n */\nmxEdgeHandler.prototype.getSelectionColor = function()\n{\n\treturn mxConstants.EDGE_SELECTION_COLOR;\n};\n\n/**\n * Function: getSelectionStrokeWidth\n * \n * Returns <mxConstants.EDGE_SELECTION_STROKEWIDTH>.\n */\nmxEdgeHandler.prototype.getSelectionStrokeWidth = function()\n{\n\treturn mxConstants.EDGE_SELECTION_STROKEWIDTH;\n};\n\n/**\n * Function: isSelectionDashed\n * \n * Returns <mxConstants.EDGE_SELECTION_DASHED>.\n */\nmxEdgeHandler.prototype.isSelectionDashed = function()\n{\n\treturn mxConstants.EDGE_SELECTION_DASHED;\n};\n\n/**\n * Function: isConnectableCell\n * \n * Returns true if the given cell is connectable. This is a hook to\n * disable floating connections. This implementation returns true.\n */\nmxEdgeHandler.prototype.isConnectableCell = function(cell)\n{\n\treturn true;\n};\n\n/**\n * Function: getCellAt\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.getCellAt = function(x, y)\n{\n\treturn (!this.outlineConnect) ? this.graph.getCellAt(x, y) : null;\n};\n\n/**\n * Function: createMarker\n * \n * Creates and returns the <mxCellMarker> used in <marker>.\n */\nmxEdgeHandler.prototype.createMarker = function()\n{\n\tvar marker = new mxCellMarker(this.graph);\n\tvar self = this; // closure\n\n\t// Only returns edges if they are connectable and never returns\n\t// the edge that is currently being modified\n\tmarker.getCell = function(me)\n\t{\n\t\tvar cell = mxCellMarker.prototype.getCell.apply(this, arguments);\n\n\t\t// Checks for cell at preview point (with grid)\n\t\tif ((cell == self.state.cell || cell == null) && self.currentPoint != null)\n\t\t{\n\t\t\tcell = self.graph.getCellAt(self.currentPoint.x, self.currentPoint.y);\n\t\t}\n\t\t\n\t\t// Uses connectable parent vertex if one exists\n\t\tif (cell != null && !this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tvar parent = this.graph.getModel().getParent(cell);\n\t\t\t\n\t\t\tif (this.graph.getModel().isVertex(parent) && this.graph.isCellConnectable(parent))\n\t\t\t{\n\t\t\t\tcell = parent;\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif ((this.graph.isSwimlane(cell) && self.currentPoint != null &&\n\t\t\tthis.graph.hitsSwimlaneContent(cell, self.currentPoint.x, self.currentPoint.y)) ||\n\t\t\t(!self.isConnectableCell(cell)) || (cell == self.state.cell ||\n\t\t\t(cell != null && !self.graph.connectableEdges && model.isEdge(cell))) ||\n\t\t\tmodel.isAncestor(self.state.cell, cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\tif (!this.graph.isCellConnectable(cell))\n\t\t{\n\t\t\tcell = null;\n\t\t}\n\t\t\n\t\treturn cell;\n\t};\n\n\t// Sets the highlight color according to validateConnection\n\tmarker.isValidState = function(state)\n\t{\n\t\tvar model = self.graph.getModel();\n\t\tvar other = self.graph.view.getTerminalPort(state,\n\t\t\tself.graph.view.getState(model.getTerminal(self.state.cell,\n\t\t\t!self.isSource)), !self.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (self.isSource) ? state.cell : otherCell;\n\t\tvar target = (self.isSource) ? otherCell : state.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tself.error = self.validateConnection(source, target);\n\n\t\treturn self.error == null;\n\t};\n\t\n\treturn marker;\n};\n\n/**\n * Function: validateConnection\n * \n * Returns the error message or an empty string if the connection for the\n * given source, target pair is not valid. Otherwise it returns null. This\n * implementation uses <mxGraph.getEdgeValidationError>.\n * \n * Parameters:\n * \n * source - <mxCell> that represents the source terminal.\n * target - <mxCell> that represents the target terminal.\n */\nmxEdgeHandler.prototype.validateConnection = function(source, target)\n{\n\treturn this.graph.getEdgeValidationError(this.state.cell, source, target);\n};\n\n/**\n * Function: createBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar bends = [];\n\n\tfor (var i = 0; i < this.abspoints.length; i++)\n\t{\n\t\tif (this.isHandleVisible(i))\n\t\t{\n\t\t\tvar source = i == 0;\n\t\t\tvar target = i == this.abspoints.length - 1;\n\t\t\tvar terminal = source || target;\n\n\t\t\tif (terminal || this.graph.isCellBendable(cell))\n\t\t\t{\n\t\t\t\t(mxUtils.bind(this, function(index)\n\t\t\t\t{\n\t\t\t\t\tvar bend = this.createHandleShape(index);\n\t\t\t\t\tthis.initBend(bend, mxUtils.bind(this, mxUtils.bind(this, function()\n\t\t\t\t\t{\n\t\t\t\t\t\tif (this.dblClickRemoveEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.removePoint(this.state, index);\n\t\t\t\t\t\t}\n\t\t\t\t\t})));\n\t\n\t\t\t\t\tif (this.isHandleEnabled(i))\n\t\t\t\t\t{\n\t\t\t\t\t\tbend.setCursor((terminal) ? mxConstants.CURSOR_TERMINAL_HANDLE : mxConstants.CURSOR_BEND_HANDLE);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tbends.push(bend);\n\t\t\t\t\n\t\t\t\t\tif (!terminal)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t\t\t\t\tbend.node.style.visibility = 'hidden';\n\t\t\t\t\t}\n\t\t\t\t}))(i);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: createVirtualBends\n * \n * Creates and returns the bends used for modifying the edge. This is\n * typically an array of <mxRectangleShapes>.\n */\n mxEdgeHandler.prototype.createVirtualBends = function()\n {\n\tvar cell = this.state.cell;\n\tvar last = this.abspoints[0];\n\tvar bends = [];\n\n\tif (this.graph.isCellBendable(cell))\n\t{\n\t\tfor (var i = 1; i < this.abspoints.length; i++)\n\t\t{\n\t\t\t(mxUtils.bind(this, function(bend)\n\t\t\t{\n\t\t\t\tthis.initBend(bend);\n\t\t\t\tbend.setCursor(mxConstants.CURSOR_VIRTUAL_BEND_HANDLE);\n\t\t\t\tbends.push(bend);\n\t\t\t}))(this.createHandleShape());\n\t\t}\n\t}\n\n\treturn bends;\n};\n\n/**\n * Function: isHandleEnabled\n * \n * Creates the shape used to display the given bend.\n */\nmxEdgeHandler.prototype.isHandleEnabled = function(index)\n{\n\treturn true;\n};\n\n/**\n * Function: isHandleVisible\n * \n * Returns true if the handle at the given index is visible.\n */\nmxEdgeHandler.prototype.isHandleVisible = function(index)\n{\n\tvar source = this.state.getVisibleTerminalState(true);\n\tvar target = this.state.getVisibleTerminalState(false);\n\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\tvar edgeStyle = (geo != null) ? this.graph.view.getEdgeStyle(this.state, geo.points, source, target) : null;\n\n\treturn edgeStyle != mxEdgeStyle.EntityRelation || index == 0 || index == this.abspoints.length - 1;\n};\n\n/**\n * Function: createHandleShape\n * \n * Creates the shape used to display the given bend. Note that the index may be\n * null for special cases, such as when called from\n * <mxElbowEdgeHandler.createVirtualBend>. Only images and rectangles should be\n * returned if support for HTML labels with not foreign objects is required.\n * Index if null for virtual handles.\n */\nmxEdgeHandler.prototype.createHandleShape = function(index)\n{\n\tif (this.handleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.handleImage.width, this.handleImage.height), this.handleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.HANDLE_SIZE;\n\t\t\n\t\tif (this.preferHtml)\n\t\t{\n\t\t\ts -= 1;\n\t\t}\n\t\t\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: createLabelHandleShape\n * \n * Creates the shape used to display the the label handle.\n */\nmxEdgeHandler.prototype.createLabelHandleShape = function()\n{\n\tif (this.labelHandleImage != null)\n\t{\n\t\tvar shape = new mxImageShape(new mxRectangle(0, 0, this.labelHandleImage.width, this.labelHandleImage.height), this.labelHandleImage.src);\n\t\t\n\t\t// Allows HTML rendering of the images\n\t\tshape.preserveImageAspect = false;\n\n\t\treturn shape;\n\t}\n\telse\n\t{\n\t\tvar s = mxConstants.LABEL_HANDLE_SIZE;\n\t\treturn new mxRectangleShape(new mxRectangle(0, 0, s, s), mxConstants.LABEL_HANDLE_FILLCOLOR, mxConstants.HANDLE_STROKECOLOR);\n\t}\n};\n\n/**\n * Function: initBend\n * \n * Helper method to initialize the given bend.\n * \n * Parameters:\n * \n * bend - <mxShape> that represents the bend to be initialized.\n */\nmxEdgeHandler.prototype.initBend = function(bend, dblClick)\n{\n\tif (this.preferHtml)\n\t{\n\t\tbend.dialect = mxConstants.DIALECT_STRICTHTML;\n\t\tbend.init(this.graph.container);\n\t}\n\telse\n\t{\n\t\tbend.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ?\n\t\t\tmxConstants.DIALECT_MIXEDHTML : mxConstants.DIALECT_SVG;\n\t\tbend.init(this.graph.getView().getOverlayPane());\n\t}\n\n\tmxEvent.redirectMouseEvents(bend.node, this.graph, this.state,\n\t\t\tnull, null, null, dblClick);\n\t\n\t// Fixes lost event tracking for images in quirks / IE8 standards\n\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t{\n\t\tmxEvent.addListener(bend.node, 'dragstart', function(evt)\n\t\t{\n\t\t\tmxEvent.consume(evt);\n\t\t\t\n\t\t\treturn false;\n\t\t});\n\t}\n\t\n\tif (mxClient.IS_TOUCH)\n\t{\n\t\tbend.node.setAttribute('pointer-events', 'none');\n\t}\n};\n\n/**\n * Function: getHandleForEvent\n * \n * Returns the index of the handle for the given event.\n */\nmxEdgeHandler.prototype.getHandleForEvent = function(me)\n{\n\t// Connection highlight may consume events before they reach sizer handle\n\tvar tol = (!mxEvent.isMouseEvent(me.getEvent())) ? this.tolerance : 1;\n\tvar hit = (this.allowHandleBoundsCheck && (mxClient.IS_IE || tol > 0)) ?\n\t\tnew mxRectangle(me.getGraphX() - tol, me.getGraphY() - tol, 2 * tol, 2 * tol) : null;\n\tvar minDistSq = null;\n\tvar result = null;\n\n\tfunction checkShape(shape)\n\t{\n\t\tif (shape != null && shape.node.style.display != 'none' && shape.node.style.visibility != 'hidden' &&\n\t\t\t(me.isSource(shape) || (hit != null && mxUtils.intersects(shape.bounds, hit))))\n\t\t{\n\t\t\tvar dx = me.getGraphX() - shape.bounds.getCenterX();\n\t\t\tvar dy = me.getGraphY() - shape.bounds.getCenterY();\n\t\t\tvar tmp = dx * dx + dy * dy;\n\t\t\t\n\t\t\tif (minDistSq == null || tmp <= minDistSq)\n\t\t\t{\n\t\t\t\tminDistSq = tmp;\n\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\tif (this.customHandles != null && this.isCustomHandleEvent(me))\n\t{\n\t\t// Inverse loop order to match display order\n\t\tfor (var i = this.customHandles.length - 1; i >= 0; i--)\n\t\t{\n\t\t\tif (checkShape(this.customHandles[i].shape))\n\t\t\t{\n\t\t\t\t// LATER: Return reference to active shape\n\t\t\t\treturn mxEvent.CUSTOM_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (me.isSource(this.state.text) || checkShape(this.labelShape))\n\t{\n\t\tresult = mxEvent.LABEL_HANDLE;\n\t}\n\t\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.bends[i]))\n\t\t\t{\n\t\t\t\tresult = i;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null && this.isAddVirtualBendEvent(me))\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (checkShape(this.virtualBends[i]))\n\t\t\t{\n\t\t\t\tresult = mxEvent.VIRTUAL_HANDLE - i;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\n/**\n * Function: isAddVirtualBendEvent\n * \n * Returns true if the given event allows virtual bends to be added. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isAddVirtualBendEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: isCustomHandleEvent\n * \n * Returns true if the given event allows custom handles to be changed. This\n * implementation returns true.\n */\nmxEdgeHandler.prototype.isCustomHandleEvent = function(me)\n{\n\treturn true;\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by checking if a special element of the handler\n * was clicked, in which case the index parameter is non-null. The\n * indices may be one of <LABEL_HANDLE> or the number of the respective\n * control point. The source and target points are used for reconnecting\n * the edge.\n */\nmxEdgeHandler.prototype.mouseDown = function(sender, me)\n{\n\tvar handle = this.getHandleForEvent(me);\n\t\n\tif (this.bends != null && this.bends[handle] != null)\n\t{\n\t\tvar b = this.bends[handle].bounds;\n\t\tthis.snapPoint = new mxPoint(b.getCenterX(), b.getCenterY());\n\t}\n\t\n\tif (this.addEnabled && handle == null && this.isAddPointEvent(me.getEvent()))\n\t{\n\t\tthis.addPoint(this.state, me.getEvent());\n\t\tme.consume();\n\t}\n\telse if (handle != null && !me.isConsumed() && this.graph.isEnabled())\n\t{\n\t\tif (this.removeEnabled && this.isRemovePointEvent(me.getEvent()))\n\t\t{\n\t\t\tthis.removePoint(this.state, handle);\n\t\t}\n\t\telse if (handle != mxEvent.LABEL_HANDLE || this.graph.isLabelMovable(me.getCell()))\n\t\t{\n\t\t\tif (handle <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.virtualBends[mxEvent.VIRTUAL_HANDLE - handle].node, 100);\n\t\t\t}\n\t\t\t\n\t\t\tthis.start(me.getX(), me.getY(), handle);\n\t\t}\n\t\t\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: start\n * \n * Starts the handling of the mouse gesture.\n */\nmxEdgeHandler.prototype.start = function(x, y, index)\n{\n\tthis.startX = x;\n\tthis.startY = y;\n\n\tthis.isSource = (this.bends == null) ? false : index == 0;\n\tthis.isTarget = (this.bends == null) ? false : index == this.bends.length - 1;\n\tthis.isLabel = index == mxEvent.LABEL_HANDLE;\n\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tvar cell = this.state.cell;\n\t\tvar terminal = this.graph.model.getTerminal(cell, this.isSource);\n\n\t\tif ((terminal == null && this.graph.isTerminalPointMovable(cell, this.isSource)) ||\n\t\t\t(terminal != null && this.graph.isCellDisconnectable(cell, terminal, this.isSource)))\n\t\t{\n\t\t\tthis.index = index;\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.index = index;\n\t}\n\t\n\t// Hides other custom handles\n\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t{\n\t\tif (this.customHandles != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t\t{\n\t\t\t\tif (i != mxEvent.CUSTOM_HANDLE - this.index)\n\t\t\t\t{\n\t\t\t\t\tthis.customHandles[i].setVisible(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: clonePreviewState\n * \n * Returns a clone of the current preview state for the given point and terminal.\n */\nmxEdgeHandler.prototype.clonePreviewState = function(point, terminal)\n{\n\treturn this.state.clone();\n};\n\n/**\n * Function: getSnapToTerminalTolerance\n * \n * Returns the tolerance for the guides. Default value is\n * gridSize * scale / 2.\n */\nmxEdgeHandler.prototype.getSnapToTerminalTolerance = function()\n{\n\treturn this.graph.gridSize * this.graph.view.scale / 2;\n};\n\n/**\n * Function: updateHint\n * \n * Hook for subclassers do show details while the handler is active.\n */\nmxEdgeHandler.prototype.updateHint = function(me, point) { };\n\n/**\n * Function: removeHint\n * \n * Hooks for subclassers to hide details when the handler gets inactive.\n */\nmxEdgeHandler.prototype.removeHint = function() { };\n\n/**\n * Function: roundLength\n * \n * Hook for rounding the unscaled width or height. This uses Math.round.\n */\nmxEdgeHandler.prototype.roundLength = function(length)\n{\n\treturn Math.round(length);\n};\n\n/**\n * Function: isSnapToTerminalsEvent\n * \n * Returns true if <snapToTerminals> is true and if alt is not pressed.\n */\nmxEdgeHandler.prototype.isSnapToTerminalsEvent = function(me)\n{\n\treturn this.snapToTerminals && !mxEvent.isAltDown(me.getEvent());\n};\n\n/**\n * Function: getPointForEvent\n * \n * Returns the point for the given event.\n */\nmxEdgeHandler.prototype.getPointForEvent = function(me)\n{\n\tvar view = this.graph.getView();\n\tvar scale = view.scale;\n\tvar point = new mxPoint(this.roundLength(me.getGraphX() / scale) * scale,\n\t\tthis.roundLength(me.getGraphY() / scale) * scale);\n\t\n\tvar tt = this.getSnapToTerminalTolerance();\n\tvar overrideX = false;\n\tvar overrideY = false;\t\t\n\t\n\tif (tt > 0 && this.isSnapToTerminalsEvent(me))\n\t{\n\t\tfunction snapToPoint(pt)\n\t\t{\n\t\t\tif (pt != null)\n\t\t\t{\n\t\t\t\tvar x = pt.x;\n\n\t\t\t\tif (Math.abs(point.x - x) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.x = x;\n\t\t\t\t\toverrideX = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar y = pt.y;\n\n\t\t\t\tif (Math.abs(point.y - y) < tt)\n\t\t\t\t{\n\t\t\t\t\tpoint.y = y;\n\t\t\t\t\toverrideY = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Temporary function\n\t\tfunction snapToTerminal(terminal)\n\t\t{\n\t\t\tif (terminal != null)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, new mxPoint(view.getRoutingCenterX(terminal),\n\t\t\t\t\t\tview.getRoutingCenterY(terminal)));\n\t\t\t}\n\t\t};\n\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(true));\n\t\tsnapToTerminal.call(this, this.state.getVisibleTerminalState(false));\n\n\t\tif (this.state.absolutePoints != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.state.absolutePoints.length; i++)\n\t\t\t{\n\t\t\t\tsnapToPoint.call(this, this.state.absolutePoints[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.graph.isGridEnabledEvent(me.getEvent()))\n\t{\n\t\tvar tr = view.translate;\n\t\t\n\t\tif (!overrideX)\n\t\t{\n\t\t\tpoint.x = (this.graph.snap(point.x / scale - tr.x) + tr.x) * scale;\n\t\t}\n\t\t\n\t\tif (!overrideY)\n\t\t{\n\t\t\tpoint.y = (this.graph.snap(point.y / scale - tr.y) + tr.y) * scale;\n\t\t}\n\t}\n\t\n\treturn point;\n};\n\n/**\n * Function: getPreviewTerminalState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.getPreviewTerminalState = function(me)\n{\n\tthis.constraintHandler.update(me, this.isSource, true, me.isSource(this.marker.highlight.shape) ? null : this.currentPoint);\n\t\n\tif (this.constraintHandler.currentFocus != null && this.constraintHandler.currentConstraint != null)\n\t{\n\t\t// Handles special case where grid is large and connection point is at actual point in which\n\t\t// case the outline is not followed as long as we're < gridSize / 2 away from that point\n\t\tif (this.marker.highlight != null && this.marker.highlight.state != null &&\n\t\t\tthis.marker.highlight.state.cell == this.constraintHandler.currentFocus.cell)\n\t\t{\n\t\t\t// Direct repaint needed if cell already highlighted\n\t\t\tif (this.marker.highlight.shape.stroke != 'transparent')\n\t\t\t{\n\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.marker.markCell(this.constraintHandler.currentFocus.cell, 'transparent');\n\t\t}\n\t\t\n\t\tvar model = this.graph.getModel();\n\t\tvar other = this.graph.view.getTerminalPort(this.state,\n\t\t\t\tthis.graph.view.getState(model.getTerminal(this.state.cell,\n\t\t\t!this.isSource)), !this.isSource);\n\t\tvar otherCell = (other != null) ? other.cell : null;\n\t\tvar source = (this.isSource) ? this.constraintHandler.currentFocus.cell : otherCell;\n\t\tvar target = (this.isSource) ? otherCell : this.constraintHandler.currentFocus.cell;\n\t\t\n\t\t// Updates the error message of the handler\n\t\tthis.error = this.validateConnection(source, target);\n\t\tvar result = null;\n\t\t\n\t\tif (this.error == null)\n\t\t{\n\t\t\tresult = this.constraintHandler.currentFocus;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.constraintHandler.reset();\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n\telse if (!this.graph.isIgnoreTerminalEvent(me.getEvent()))\n\t{\n\t\tthis.marker.process(me);\n\t\tvar state = this.marker.getValidState();\n\t\t\n\t\tif (state != null && this.graph.isCellLocked(state.cell))\n\t\t{\n\t\t\tthis.marker.reset();\n\t\t}\n\t\t\n\t\treturn this.marker.getValidState();\n\t}\n\telse\n\t{\n\t\tthis.marker.reset();\n\t\t\n\t\treturn null;\n\t}\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n * \n * Parameters:\n * \n * pt - <mxPoint> that contains the current pointer position.\n * me - Optional <mxMouseEvent> that contains the current event.\n */\nmxEdgeHandler.prototype.getPreviewPoints = function(pt, me)\n{\n\tvar geometry = this.graph.getCellGeometry(this.state.cell);\n\tvar points = (geometry.points != null) ? geometry.points.slice() : null;\n\tvar point = new mxPoint(pt.x, pt.y);\n\tvar result = null;\n\t\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tthis.convertPoint(point, false);\n\t\t\n\t\tif (points == null)\n\t\t{\n\t\t\tpoints = [point];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Adds point from virtual bend\n\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 0, point);\n\t\t\t}\n\n\t\t\t// Removes point if dragged on terminal point\n\t\t\tif (!this.isSource && !this.isTarget)\n\t\t\t{\n\t\t\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (i != this.index)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar bend = this.bends[i];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (bend != null && mxUtils.contains(bend.bounds, pt.x, pt.y))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (this.index <= mxEvent.VIRTUAL_HANDLE)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(mxEvent.VIRTUAL_HANDLE - this.index, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpoints.splice(this.index - 1, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Removes point if user tries to straighten a segment\n\t\t\t\tif (result == null && this.straightRemoveEnabled && (me == null || !mxEvent.isAltDown(me.getEvent())))\n\t\t\t\t{\n\t\t\t\t\tvar tol = this.graph.tolerance * this.graph.tolerance;\n\t\t\t\t\tvar abs = this.state.absolutePoints.slice();\n\t\t\t\t\tabs[this.index] = pt;\n\t\t\t\t\t\n\t\t\t\t\t// Handes special case where removing waypoint affects tolerance (flickering)\n\t\t\t\t\tvar src = this.state.getVisibleTerminalState(true);\n\t\t\t\t\t\n\t\t\t\t\tif (src != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, src, true);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(src, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[0] = new mxPoint(src.view.getRoutingCenterX(src), src.view.getRoutingCenterY(src));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar trg = this.state.getVisibleTerminalState(false);\n\t\t\t\t\t\n\t\t\t\t\tif (trg != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar c = this.graph.getConnectionConstraint(this.state, trg, false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Checks if point is not fixed\n\t\t\t\t\t\tif (c == null || this.graph.getConnectionPoint(trg, c) == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tabs[abs.length - 1] = new mxPoint(trg.view.getRoutingCenterX(trg), trg.view.getRoutingCenterY(trg));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfunction checkRemove(idx, tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (idx > 0 && idx < abs.length - 1 &&\n\t\t\t\t\t\t\tmxUtils.ptSegDistSq(abs[idx - 1].x, abs[idx - 1].y,\n\t\t\t\t\t\t\t\tabs[idx + 1].x, abs[idx + 1].y, tmp.x, tmp.y) < tol)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpoints.splice(idx - 1, 1);\n\t\t\t\t\t\t\tresult = points;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\t// LATER: Check if other points can be removed if a segment is made straight\n\t\t\t\t\tcheckRemove(this.index, pt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Updates existing point\n\t\t\tif (result == null && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tpoints[this.index - 1] = point;\n\t\t\t}\n\t\t}\n\t}\n\telse if (this.graph.resetEdgesOnConnect)\n\t{\n\t\tpoints = null;\n\t}\n\t\n\treturn (result != null) ? result : points;\n};\n\n/**\n * Function: isOutlineConnectEvent\n * \n * Returns true if <outlineConnect> is true and the source of the event is the outline shape\n * or shift is pressed.\n */\nmxEdgeHandler.prototype.isOutlineConnectEvent = function(me)\n{\n\tvar offset = mxUtils.getOffset(this.graph.container);\n\tvar evt = me.getEvent();\n\t\n\tvar clientX = mxEvent.getClientX(evt);\n\tvar clientY = mxEvent.getClientY(evt);\n\t\n\tvar doc = document.documentElement;\n\tvar left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n\tvar top = (window.pageYOffset || doc.scrollTop)  - (doc.clientTop || 0);\n\t\n\tvar gridX = this.currentPoint.x - this.graph.container.scrollLeft + offset.x - left;\n\tvar gridY = this.currentPoint.y - this.graph.container.scrollTop + offset.y - top;\n\n\treturn this.outlineConnect && !mxEvent.isShiftDown(me.getEvent()) &&\n\t\t(me.isSource(this.marker.highlight.shape) ||\n\t\t(mxEvent.isAltDown(me.getEvent()) && me.getState() != null) ||\n\t\tthis.marker.highlight.isHighlightAt(clientX, clientY) ||\n\t\t((gridX != clientX || gridY != clientY) && me.getState() == null &&\n\t\tthis.marker.highlight.isHighlightAt(gridX, gridY)));\n};\n\n/**\n * Function: updatePreviewState\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeHandler.prototype.updatePreviewState = function(edge, point, terminalState, me, outline)\n{\n\t// Computes the points for the edge style and terminals\n\tvar sourceState = (this.isSource) ? terminalState : this.state.getVisibleTerminalState(true);\n\tvar targetState = (this.isTarget) ? terminalState : this.state.getVisibleTerminalState(false);\n\t\n\tvar sourceConstraint = this.graph.getConnectionConstraint(edge, sourceState, true);\n\tvar targetConstraint = this.graph.getConnectionConstraint(edge, targetState, false);\n\n\tvar constraint = this.constraintHandler.currentConstraint;\n\n\tif (constraint == null && outline)\n\t{\n\t\tif (terminalState != null)\n\t\t{\n\t\t\t// Handles special case where mouse is on outline away from actual end point\n\t\t\t// in which case the grid is ignored and mouse point is used instead\n\t\t\tif (me.isSource(this.marker.highlight.shape))\n\t\t\t{\n\t\t\t\tpoint = new mxPoint(me.getGraphX(), me.getGraphY());\n\t\t\t}\n\t\t\t\n\t\t\tconstraint = this.graph.getOutlineConstraint(point, terminalState, me);\n\t\t\tthis.constraintHandler.setFocus(me, terminalState, this.isSource);\n\t\t\tthis.constraintHandler.currentConstraint = constraint;\n\t\t\tthis.constraintHandler.currentPoint = point;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\t}\n\t\n\tif (this.outlineConnect && this.marker.highlight != null && this.marker.highlight.shape != null)\n\t{\n\t\tvar s = this.graph.view.scale;\n\t\t\n\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (outline) ? mxConstants.OUTLINE_HIGHLIGHT_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.OUTLINE_HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t\telse if (this.marker.hasValidState())\n\t\t{\n\t\t\tthis.marker.highlight.shape.stroke = (this.marker.getValidState() == me.getState()) ?\n\t\t\t\tmxConstants.DEFAULT_VALID_COLOR : 'transparent';\n\t\t\tthis.marker.highlight.shape.strokewidth = mxConstants.HIGHLIGHT_STROKEWIDTH / s / s;\n\t\t\tthis.marker.highlight.repaint();\n\t\t}\n\t}\n\t\n\tif (this.isSource)\n\t{\n\t\tsourceConstraint = constraint;\n\t}\n\telse if (this.isTarget)\n\t{\n\t\ttargetConstraint = constraint;\n\t}\n\t\n\tif (this.isSource || this.isTarget)\n\t{\n\t\tif (constraint != null && constraint.point != null)\n\t\t{\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X] = constraint.point.x;\n\t\t\tedge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y] = constraint.point.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_X : mxConstants.STYLE_ENTRY_X];\n\t\t\tdelete edge.style[(this.isSource) ? mxConstants.STYLE_EXIT_Y : mxConstants.STYLE_ENTRY_Y];\n\t\t}\n\t}\n\t\n\tedge.setVisibleTerminalState(sourceState, true);\n\tedge.setVisibleTerminalState(targetState, false);\n\t\n\tif (!this.isSource || sourceState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, sourceState, true, sourceConstraint);\n\t}\n\t\n\tif (!this.isTarget || targetState != null)\n\t{\n\t\tedge.view.updateFixedTerminalPoint(edge, targetState, false, targetConstraint);\n\t}\n\t\n\tif ((this.isSource || this.isTarget) && terminalState == null)\n\t{\n\t\tedge.setAbsoluteTerminalPoint(point, this.isSource);\n\n\t\tif (this.marker.getMarkedState() == null)\n\t\t{\n\t\t\tthis.error = (this.graph.allowDanglingEdges) ? null : '';\n\t\t}\n\t}\n\t\n\tedge.view.updatePoints(edge, this.points, sourceState, targetState);\n\tedge.view.updateFloatingTerminalPoints(edge, sourceState, targetState);\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the preview.\n */\nmxEdgeHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tthis.currentPoint = this.getPointForEvent(me);\n\t\tthis.error = null;\n\t\t\n\t\t// Uses the current point from the constraint handler if available\n\t\tif (!this.graph.isIgnoreTerminalEvent(me.getEvent()) && mxEvent.isShiftDown(me.getEvent()) && this.snapPoint != null)\n\t\t{\n\t\t\tif (Math.abs(this.snapPoint.x - this.currentPoint.x) < Math.abs(this.snapPoint.y - this.currentPoint.y))\n\t\t\t{\n\t\t\t\tthis.currentPoint.x = this.snapPoint.x;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.currentPoint.y = this.snapPoint.y;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t{\n\t\t\tif (this.customHandles != null)\n\t\t\t{\n\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].processEvent(me);\n\t\t\t}\n\t\t}\n\t\telse if (this.isLabel)\n\t\t{\n\t\t\tthis.label.x = this.currentPoint.x;\n\t\t\tthis.label.y = this.currentPoint.y;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.points = this.getPreviewPoints(this.currentPoint, me);\n\t\t\tvar terminalState = (this.isSource || this.isTarget) ? this.getPreviewTerminalState(me) : null;\n\n\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\tthis.constraintHandler.currentFocus != null &&\n\t\t\t\tthis.constraintHandler.currentPoint != null)\n\t\t\t{\n\t\t\t\tthis.currentPoint = this.constraintHandler.currentPoint.clone();\n\t\t\t}\n\t\t\telse if (this.outlineConnect)\n\t\t\t{\n\t\t\t\t// Need to check outline before cloning terminal state\n\t\t\t\tvar outline = (this.isSource || this.isTarget) ? this.isOutlineConnectEvent(me) : false\n\t\t\t\t\t\t\n\t\t\t\tif (outline)\n\t\t\t\t{\n\t\t\t\t\tterminalState = this.marker.highlight.state;\n\t\t\t\t}\n\t\t\t\telse if (terminalState != null && terminalState != me.getState() && this.marker.highlight.shape != null)\n\t\t\t\t{\n\t\t\t\t\tthis.marker.highlight.shape.stroke = 'transparent';\n\t\t\t\t\tthis.marker.highlight.repaint();\n\t\t\t\t\tterminalState = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (terminalState != null && this.graph.isCellLocked(terminalState.cell))\n\t\t\t{\n\t\t\t\tterminalState = null;\n\t\t\t\tthis.marker.reset();\n\t\t\t}\n\t\t\t\n\t\t\tvar clone = this.clonePreviewState(this.currentPoint, (terminalState != null) ? terminalState.cell : null);\n\t\t\tthis.updatePreviewState(clone, this.currentPoint, terminalState, me, outline);\n\n\t\t\t// Sets the color of the preview to valid or invalid, updates the\n\t\t\t// points of the preview and redraws\n\t\t\tvar color = (this.error == null) ? this.marker.validColor : this.marker.invalidColor;\n\t\t\tthis.setPreviewColor(color);\n\t\t\tthis.abspoints = clone.absolutePoints;\n\t\t\tthis.active = true;\n\t\t}\n\n\t\t// This should go before calling isOutlineConnectEvent above. As a workaround\n\t\t// we add an offset of gridSize to the hint to avoid problem with hit detection\n\t\t// in highlight.isHighlightAt (which uses comonentFromPoint)\n\t\tthis.updateHint(me, this.currentPoint);\n\t\tthis.drawPreview();\n\t\tmxEvent.consume(me.getEvent());\n\t\tme.consume();\n\t}\n\t// Workaround for disabling the connect highlight when over handle\n\telse if (mxClient.IS_IE && this.getHandleForEvent(me) != null)\n\t{\n\t\tme.consume(false);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event to applying the previewed changes on the edge by\n * using <moveLabel>, <connect> or <changePoints>.\n */\nmxEdgeHandler.prototype.mouseUp = function(sender, me)\n{\n\t// Workaround for wrong event source in Webkit\n\tif (this.index != null && this.marker != null)\n\t{\n\t\tvar edge = this.state.cell;\n\t\t\n\t\t// Ignores event if mouse has not been moved\n\t\tif (me.getX() != this.startX || me.getY() != this.startY)\n\t\t{\n\t\t\tvar clone = !this.graph.isIgnoreTerminalEvent(me.getEvent()) && this.graph.isCloneEvent(me.getEvent()) &&\n\t\t\t\tthis.cloneEnabled && this.graph.isCellsCloneable();\n\t\t\t\n\t\t\t// Displays the reason for not carriying out the change\n\t\t\t// if there is an error message with non-zero length\n\t\t\tif (this.error != null)\n\t\t\t{\n\t\t\t\tif (this.error.length > 0)\n\t\t\t\t{\n\t\t\t\t\tthis.graph.validationAlert(this.error);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.index <= mxEvent.CUSTOM_HANDLE && this.index > mxEvent.VIRTUAL_HANDLE)\n\t\t\t{\n\t\t\t\tif (this.customHandles != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.customHandles[mxEvent.CUSTOM_HANDLE - this.index].execute();\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.isLabel)\n\t\t\t{\n\t\t\t\tthis.moveLabel(this.state, this.label.x, this.label.y);\n\t\t\t}\n\t\t\telse if (this.isSource || this.isTarget)\n\t\t\t{\n\t\t\t\tvar terminal = null;\n\t\t\t\t\n\t\t\t\tif (this.constraintHandler.currentConstraint != null &&\n\t\t\t\t\tthis.constraintHandler.currentFocus != null)\n\t\t\t\t{\n\t\t\t\t\tterminal = this.constraintHandler.currentFocus.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal == null && this.marker.hasValidState() && this.marker.highlight != null &&\n\t\t\t\t\tthis.marker.highlight.shape != null &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'transparent' &&\n\t\t\t\t\tthis.marker.highlight.shape.stroke != 'white')\n\t\t\t\t{\n\t\t\t\t\tterminal = this.marker.validState.cell;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (terminal != null)\n\t\t\t\t{\n\t\t\t\t\tvar model = this.graph.getModel();\n\t\t\t\t\tvar parent = model.getParent(edge);\n\t\t\t\t\t\n\t\t\t\t\tmodel.beginUpdate();\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clones and adds the cell\n\t\t\t\t\t\tif (clone)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\t\t\t\tvar clone = this.graph.cloneCell(edge);\n\t\t\t\t\t\t\tmodel.add(parent, clone, model.getChildCount(parent));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (geo != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\t\t\tmodel.setGeometry(clone, geo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tvar other = model.getTerminal(edge, !this.isSource);\n\t\t\t\t\t\t\tthis.graph.connectCell(clone, other, !this.isSource);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tedge = clone;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tedge = this.connect(edge, terminal, this.isSource, clone, me);\n\t\t\t\t\t}\n\t\t\t\t\tfinally\n\t\t\t\t\t{\n\t\t\t\t\t\tmodel.endUpdate();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (this.graph.isAllowDanglingEdges())\n\t\t\t\t{\n\t\t\t\t\tvar pt = this.abspoints[(this.isSource) ? 0 : this.abspoints.length - 1];\n\t\t\t\t\tpt.x = this.roundLength(pt.x / this.graph.view.scale - this.graph.view.translate.x);\n\t\t\t\t\tpt.y = this.roundLength(pt.y / this.graph.view.scale - this.graph.view.translate.y);\n\n\t\t\t\t\tvar pstate = this.graph.getView().getState(\n\t\t\t\t\t\t\tthis.graph.getModel().getParent(edge));\n\t\t\t\t\t\t\t\n\t\t\t\t\tif (pstate != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpt.x -= pstate.origin.x;\n\t\t\t\t\t\tpt.y -= pstate.origin.y;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tpt.x -= this.graph.panDx / this.graph.view.scale;\n\t\t\t\t\tpt.y -= this.graph.panDy / this.graph.view.scale;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// Destroys and recreates this handler\n\t\t\t\t\tedge = this.changeTerminalPoint(edge, pt, this.isSource, clone);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (this.active)\n\t\t\t{\n\t\t\t\tedge = this.changePoints(edge, this.points, clone);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.graph.getView().invalidate(this.state.cell);\n\t\t\t\tthis.graph.getView().validate(this.state.cell);\t\t\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Resets the preview color the state of the handler if this\n\t\t// handler has not been recreated\n\t\tif (this.marker != null)\n\t\t{\n\t\t\tthis.reset();\n\n\t\t\t// Updates the selection if the edge has been cloned\n\t\t\tif (edge != this.state.cell)\n\t\t\t{\n\t\t\t\tthis.graph.setSelectionCell(edge);\n\t\t\t}\n\t\t}\n\n\t\tme.consume();\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets the state of this handler.\n */\nmxEdgeHandler.prototype.reset = function()\n{\n\tif (this.active)\n\t{\n\t\tthis.refresh();\n\t}\n\t\n\tthis.error = null;\n\tthis.index = null;\n\tthis.label = null;\n\tthis.points = null;\n\tthis.snapPoint = null;\n\tthis.isLabel = false;\n\tthis.isSource = false;\n\tthis.isTarget = false;\n\tthis.active = false;\n\t\n\tif (this.livePreview && this.sizers != null)\n\t{\n\t\tfor (var i = 0; i < this.sizers.length; i++)\n\t\t{\n\t\t\tif (this.sizers[i] != null)\n\t\t\t{\n\t\t\t\tthis.sizers[i].node.style.display = '';\n\t\t\t}\n\t\t}\n\t}\n\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.reset();\n\t}\n\t\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.reset();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].reset();\n\t\t}\n\t}\n\n\tthis.setPreviewColor(mxConstants.EDGE_SELECTION_COLOR);\n\tthis.removeHint();\n\tthis.redraw();\n};\n\n/**\n * Function: setPreviewColor\n * \n * Sets the color of the preview to the given value.\n */\nmxEdgeHandler.prototype.setPreviewColor = function(color)\n{\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid. Returns the given, modified\n * point instance.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\t\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x);\n\tpoint.y = Math.round(point.y / scale - tr.y);\n\n\tvar pstate = this.graph.getView().getState(\n\t\tthis.graph.getModel().getParent(this.state.cell));\n\n\tif (pstate != null)\n\t{\n\t\tpoint.x -= pstate.origin.x;\n\t\tpoint.y -= pstate.origin.y;\n\t}\n\n\treturn point;\n};\n\n/**\n * Function: moveLabel\n * \n * Changes the coordinates for the label of the given edge.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge.\n * x - Integer that specifies the x-coordinate of the new location.\n * y - Integer that specifies the y-coordinate of the new location.\n */\nmxEdgeHandler.prototype.moveLabel = function(edgeState, x, y)\n{\n\tvar model = this.graph.getModel();\n\tvar geometry = model.getGeometry(edgeState.cell);\n\t\n\tif (geometry != null)\n\t{\n\t\tvar scale = this.graph.getView().scale;\n\t\tgeometry = geometry.clone();\n\t\t\n\t\tif (geometry.relative)\n\t\t{\n\t\t\t// Resets the relative location stored inside the geometry\n\t\t\tvar pt = this.graph.getView().getRelativePoint(edgeState, x, y);\n\t\t\tgeometry.x = Math.round(pt.x * 10000) / 10000;\n\t\t\tgeometry.y = Math.round(pt.y);\n\t\t\t\n\t\t\t// Resets the offset inside the geometry to find the offset\n\t\t\t// from the resulting point\n\t\t\tgeometry.offset = new mxPoint(0, 0);\n\t\t\tvar pt = this.graph.view.getPoint(edgeState, geometry);\n\t\t\tgeometry.offset = new mxPoint(Math.round((x - pt.x) / scale), Math.round((y - pt.y) / scale));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar points = edgeState.absolutePoints;\n\t\t\tvar p0 = points[0];\n\t\t\tvar pe = points[points.length - 1];\n\t\t\t\n\t\t\tif (p0 != null && pe != null)\n\t\t\t{\n\t\t\t\tvar cx = p0.x + (pe.x - p0.x) / 2;\n\t\t\t\tvar cy = p0.y + (pe.y - p0.y) / 2;\n\t\t\t\t\n\t\t\t\tgeometry.offset = new mxPoint(Math.round((x - cx) / scale), Math.round((y - cy) / scale));\n\t\t\t\tgeometry.x = 0;\n\t\t\t\tgeometry.y = 0;\n\t\t\t}\n\t\t}\n\n\t\tmodel.setGeometry(edgeState.cell, geometry);\n\t}\n};\n\n/**\n * Function: connect\n * \n * Changes the terminal or terminal point of the given edge in the graph\n * model.\n * \n * Parameters:\n * \n * edge - <mxCell> that represents the edge to be reconnected.\n * terminal - <mxCell> that represents the new terminal.\n * isSource - Boolean indicating if the new terminal is the source or\n * target terminal.\n * isClone - Boolean indicating if the new connection should be a clone of\n * the old edge.\n * me - <mxMouseEvent> that contains the mouse up event.\n */\nmxEdgeHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar parent = model.getParent(edge);\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvar constraint = this.constraintHandler.currentConstraint;\n\t\t\n\t\tif (constraint == null)\n\t\t{\n\t\t\tconstraint = new mxConnectionConstraint();\n\t\t}\n\n\t\tthis.graph.connectCell(edge, terminal, isSource, constraint);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changeTerminalPoint\n * \n * Changes the terminal point of the given edge.\n */\nmxEdgeHandler.prototype.changeTerminalPoint = function(edge, point, isSource, clone)\n{\n\tvar model = this.graph.getModel();\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar terminal = model.getTerminal(edge, !isSource);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, terminal, !isSource);\n\t\t}\n\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.setTerminalPoint(point, isSource);\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t\tthis.graph.connectCell(edge, null, isSource, new mxConnectionConstraint());\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: changePoints\n * \n * Changes the control points of the given edge in the graph model.\n */\nmxEdgeHandler.prototype.changePoints = function(edge, points, clone)\n{\n\tvar model = this.graph.getModel();\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (clone)\n\t\t{\n\t\t\tvar parent = model.getParent(edge);\n\t\t\tvar source = model.getTerminal(edge, true);\n\t\t\tvar target = model.getTerminal(edge, false);\n\t\t\tedge = this.graph.cloneCell(edge);\n\t\t\tmodel.add(parent, edge, model.getChildCount(parent));\n\t\t\tmodel.setTerminal(edge, source, true);\n\t\t\tmodel.setTerminal(edge, target, false);\n\t\t}\n\t\t\n\t\tvar geo = model.getGeometry(edge);\n\t\t\n\t\tif (geo != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points = points;\n\t\t\t\n\t\t\tmodel.setGeometry(edge, geo);\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: addPoint\n * \n * Adds a control point for the given state and event.\n */\nmxEdgeHandler.prototype.addPoint = function(state, evt)\n{\n\tvar pt = mxUtils.convertPoint(this.graph.container, mxEvent.getClientX(evt),\n\t\t\tmxEvent.getClientY(evt));\n\tvar gridEnabled = this.graph.isGridEnabledEvent(evt);\n\tthis.convertPoint(pt, gridEnabled);\n\tthis.addPointAt(state, pt.x, pt.y);\n\tmxEvent.consume(evt);\n};\n\n/**\n * Function: addPointAt\n * \n * Adds a control point at the given point.\n */\nmxEdgeHandler.prototype.addPointAt = function(state, x, y)\n{\n\tvar geo = this.graph.getCellGeometry(state.cell);\n\tvar pt = new mxPoint(x, y);\n\t\n\tif (geo != null)\n\t{\n\t\tgeo = geo.clone();\n\t\tvar t = this.graph.view.translate;\n\t\tvar s = this.graph.view.scale;\n\t\tvar offset = new mxPoint(t.x * s, t.y * s);\n\t\t\n\t\tvar parent = this.graph.model.getParent(this.state.cell);\n\t\t\n\t\tif (this.graph.model.isVertex(parent))\n\t\t{\n\t\t\tvar pState = this.graph.view.getState(parent);\n\t\t\toffset = new mxPoint(pState.x, pState.y);\n\t\t}\n\t\t\n\t\tvar index = mxUtils.findNearestSegment(state, pt.x * s + offset.x, pt.y * s + offset.y);\n\n\t\tif (geo.points == null)\n\t\t{\n\t\t\tgeo.points = [pt];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tgeo.points.splice(index, 0, pt);\n\t\t}\n\t\t\n\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\tthis.refresh();\t\n\t\tthis.redraw();\n\t}\n};\n\n/**\n * Function: removePoint\n * \n * Removes the control point at the given index from the given state.\n */\nmxEdgeHandler.prototype.removePoint = function(state, index)\n{\n\tif (index > 0 && index < this.abspoints.length - 1)\n\t{\n\t\tvar geo = this.graph.getCellGeometry(this.state.cell);\n\t\t\n\t\tif (geo != null && geo.points != null)\n\t\t{\n\t\t\tgeo = geo.clone();\n\t\t\tgeo.points.splice(index - 1, 1);\n\t\t\tthis.graph.getModel().setGeometry(state.cell, geo);\n\t\t\tthis.refresh();\n\t\t\tthis.redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: getHandleFillColor\n * \n * Returns the fillcolor for the handle at the given index.\n */\nmxEdgeHandler.prototype.getHandleFillColor = function(index)\n{\n\tvar isSource = index == 0;\n\tvar cell = this.state.cell;\n\tvar terminal = this.graph.getModel().getTerminal(cell, isSource);\n\tvar color = mxConstants.HANDLE_FILLCOLOR;\n\t\n\tif ((terminal != null && !this.graph.isCellDisconnectable(cell, terminal, isSource)) ||\n\t\t(terminal == null && !this.graph.isTerminalPointMovable(cell, isSource)))\n\t{\n\t\tcolor = mxConstants.LOCKED_HANDLE_FILLCOLOR;\n\t}\n\telse if (terminal != null && this.graph.isCellDisconnectable(cell, terminal, isSource))\n\t{\n\t\tcolor = mxConstants.CONNECT_HANDLE_FILLCOLOR;\n\t}\n\t\n\treturn color;\n};\n\n/**\n * Function: redraw\n * \n * Redraws the preview, and the bends- and label control points.\n */\nmxEdgeHandler.prototype.redraw = function()\n{\n\tthis.abspoints = this.state.absolutePoints.slice();\n\tthis.redrawHandles();\n\t\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = g.points;\n\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tif (pts != null)\n\t\t{\n\t\t\tif (this.points == null)\n\t\t\t{\n\t\t\t\tthis.points = [];\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i] != null && this.abspoints[i] != null)\n\t\t\t\t{\n\t\t\t\t\tthis.points[i - 1] = pts[i - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.drawPreview();\n};\n\n/**\n * Function: redrawHandles\n * \n * Redraws the handles.\n */\nmxEdgeHandler.prototype.redrawHandles = function()\n{\n\tvar cell = this.state.cell;\n\n\t// Updates the handle for the label position\n\tvar b = this.labelShape.bounds;\n\tthis.label = new mxPoint(this.state.absoluteOffset.x, this.state.absoluteOffset.y);\n\tthis.labelShape.bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\n\t// Shows or hides the label handle depending on the label\n\tvar lab = this.graph.getLabel(cell);\n\tthis.labelShape.visible = (lab != null && lab.length > 0 && this.graph.isLabelMovable(cell));\n\t\n\tif (this.bends != null && this.bends.length > 0)\n\t{\n\t\tvar n = this.abspoints.length - 1;\n\t\t\n\t\tvar p0 = this.abspoints[0];\n\t\tvar x0 = p0.x;\n\t\tvar y0 = p0.y;\n\t\t\n\t\tb = this.bends[0].bounds;\n\t\tthis.bends[0].bounds = new mxRectangle(Math.floor(x0 - b.width / 2),\n\t\t\t\tMath.floor(y0 - b.height / 2), b.width, b.height);\n\t\tthis.bends[0].fill = this.getHandleFillColor(0);\n\t\tthis.bends[0].redraw();\n\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[0].bounds);\n\t\t}\n\t\t\t\t\n\t\tvar pe = this.abspoints[n];\n\t\tvar xn = pe.x;\n\t\tvar yn = pe.y;\n\t\t\n\t\tvar bn = this.bends.length - 1;\n\t\tb = this.bends[bn].bounds;\n\t\tthis.bends[bn].bounds = new mxRectangle(Math.floor(xn - b.width / 2),\n\t\t\t\tMath.floor(yn - b.height / 2), b.width, b.height);\n\t\tthis.bends[bn].fill = this.getHandleFillColor(bn);\n\t\tthis.bends[bn].redraw();\n\t\t\t\t\n\t\tif (this.manageLabelHandle)\n\t\t{\n\t\t\tthis.checkLabelHandle(this.bends[bn].bounds);\n\t\t}\n\t\t\n\t\tthis.redrawInnerBends(p0, pe);\n\t}\n\n\tif (this.abspoints != null && this.virtualBends != null && this.virtualBends.length > 0)\n\t{\n\t\tvar last = this.abspoints[0];\n\t\t\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tif (this.virtualBends[i] != null && this.abspoints[i + 1] != null)\n\t\t\t{\n\t\t\t\tvar pt = this.abspoints[i + 1];\n\t\t\t\tvar b = this.virtualBends[i];\n\t\t\t\tvar x = last.x + (pt.x - last.x) / 2;\n\t\t\t\tvar y = last.y + (pt.y - last.y) / 2;\n\t\t\t\tb.bounds = new mxRectangle(Math.floor(x - b.bounds.width / 2),\n\t\t\t\t\t\tMath.floor(y - b.bounds.height / 2), b.bounds.width, b.bounds.height);\n\t\t\t\tb.redraw();\n\t\t\t\tmxUtils.setOpacity(b.node, this.virtualBendOpacity);\n\t\t\t\tlast = pt;\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(b.bounds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.redraw();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].redraw();\n\t\t}\n\t}\n};\n\n/**\n * Function: hideHandles\n * \n * Shortcut to <hideSizers>.\n */\nmxEdgeHandler.prototype.setHandlesVisible = function(visible)\n{\n\tif (this.bends != null)\n\t{\n\t\tfor (var i = 0; i < this.bends.length; i++)\n\t\t{\n\t\t\tthis.bends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tfor (var i = 0; i < this.virtualBends.length; i++)\n\t\t{\n\t\t\tthis.virtualBends[i].node.style.display = (visible) ? '' : 'none';\n\t\t}\n\t}\n\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.node.style.display = (visible) ? '' : 'none';\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tfor (var i = 0; i < this.customHandles.length; i++)\n\t\t{\n\t\t\tthis.customHandles[i].setVisible(visible);\n\t\t}\n\t}\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tfor (var i = 1; i < this.bends.length - 1; i++)\n\t{\n\t\tif (this.bends[i] != null)\n\t\t{\n\t\t\tif (this.abspoints[i] != null)\n\t\t\t{\n\t\t\t\tvar x = this.abspoints[i].x;\n\t\t\t\tvar y = this.abspoints[i].y;\n\t\t\t\t\n\t\t\t\tvar b = this.bends[i].bounds;\n\t\t\t\tthis.bends[i].node.style.visibility = 'visible';\n\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - b.width / 2),\n\t\t\t\t\t\tMath.round(y - b.height / 2), b.width, b.height);\n\t\t\t\t\n\t\t\t\tif (this.manageLabelHandle)\n\t\t\t\t{\n\t\t\t\t\tthis.checkLabelHandle(this.bends[i].bounds);\n\t\t\t\t}\n\t\t\t\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(this.bends[i].bounds, this.labelShape.bounds))\n\t\t\t\t{\n\t\t\t\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\t\t\t\tthis.bends[i].bounds = new mxRectangle(Math.round(x - w / 2), Math.round(y - h / 2), w, h);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.bends[i].redraw();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.bends[i].destroy();\n\t\t\t\tthis.bends[i] = null;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: checkLabelHandle\n * \n * Checks if the label handle intersects the given bounds and moves it if it\n * intersects.\n */\nmxEdgeHandler.prototype.checkLabelHandle = function(b)\n{\n\tif (this.labelShape != null)\n\t{\n\t\tvar b2 = this.labelShape.bounds;\n\t\t\n\t\tif (mxUtils.intersects(b, b2))\n\t\t{\n\t\t\tif (b.getCenterY() < b2.getCenterY())\n\t\t\t{\n\t\t\t\tb2.y = b.y + b.height;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tb2.y = b.y - b2.height;\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: drawPreview\n * \n * Redraws the preview.\n */\nmxEdgeHandler.prototype.drawPreview = function()\n{\n\tif (this.isLabel)\n\t{\n\t\tvar b = this.labelShape.bounds;\n\t\tvar bounds = new mxRectangle(Math.round(this.label.x - b.width / 2),\n\t\t\t\tMath.round(this.label.y - b.height / 2), b.width, b.height);\n\t\tthis.labelShape.bounds = bounds;\n\t\tthis.labelShape.redraw();\n\t}\n\telse if (this.shape != null)\n\t{\n\t\tthis.shape.apply(this.state);\n\t\tthis.shape.points = this.abspoints;\n\t\tthis.shape.scale = this.state.view.scale;\n\t\tthis.shape.isDashed = this.isSelectionDashed();\n\t\tthis.shape.stroke = this.getSelectionColor();\n\t\tthis.shape.strokewidth = this.getSelectionStrokeWidth() / this.shape.scale / this.shape.scale;\n\t\tthis.shape.isShadow = false;\n\t\tthis.shape.redraw();\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.redraw();\n\t}\n};\n\n/**\n * Function: refresh\n * \n * Refreshes the bends of this handler.\n */\nmxEdgeHandler.prototype.refresh = function()\n{\n\tthis.abspoints = this.getSelectionPoints(this.state);\n\tthis.points = [];\n\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.points = this.abspoints;\n\t}\n\t\n\tif (this.bends != null)\n\t{\n\t\tthis.destroyBends(this.bends);\n\t\tthis.bends = this.createBends();\n\t}\n\t\n\tif (this.virtualBends != null)\n\t{\n\t\tthis.destroyBends(this.virtualBends);\n\t\tthis.virtualBends = this.createVirtualBends();\n\t}\n\t\n\tif (this.customHandles != null)\n\t{\n\t\tthis.destroyBends(this.customHandles);\n\t\tthis.customHandles = this.createCustomHandles();\n\t}\n\t\n\t// Puts label node on top of bends\n\tif (this.labelShape != null && this.labelShape.node != null && this.labelShape.node.parentNode != null)\n\t{\n\t\tthis.labelShape.node.parentNode.appendChild(this.labelShape.node);\n\t}\n};\n\n/**\n * Function: destroyBends\n * \n * Destroys all elements in <bends>.\n */\nmxEdgeHandler.prototype.destroyBends = function(bends)\n{\n\tif (bends != null)\n\t{\n\t\tfor (var i = 0; i < bends.length; i++)\n\t\t{\n\t\t\tif (bends[i] != null)\n\t\t\t{\n\t\t\t\tbends[i].destroy();\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes. This does\n * normally not need to be called as handlers are destroyed automatically\n * when the corresponding cell is deselected.\n */\nmxEdgeHandler.prototype.destroy = function()\n{\n\tif (this.escapeHandler != null)\n\t{\n\t\tthis.state.view.graph.removeListener(this.escapeHandler);\n\t\tthis.escapeHandler = null;\n\t}\n\t\n\tif (this.marker != null)\n\t{\n\t\tthis.marker.destroy();\n\t\tthis.marker = null;\n\t}\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n\t\n\tif (this.parentHighlight != null)\n\t{\n\t\tthis.parentHighlight.destroy();\n\t\tthis.parentHighlight = null;\n\t}\n\t\n\tif (this.labelShape != null)\n\t{\n\t\tthis.labelShape.destroy();\n\t\tthis.labelShape = null;\n\t}\n\n\tif (this.constraintHandler != null)\n\t{\n\t\tthis.constraintHandler.destroy();\n\t\tthis.constraintHandler = null;\n\t}\n\t\n\tthis.destroyBends(this.virtualBends);\n\tthis.virtualBends = null;\n\t\n\tthis.destroyBends(this.customHandles);\n\tthis.customHandles = null;\n\n\tthis.destroyBends(this.bends);\n\tthis.bends = null;\n\t\n\tthis.removeHint();\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxElbowEdgeHandler\n *\n * Graph event handler that reconnects edges and modifies control points and\n * the edge label location. Uses <mxTerminalMarker> for finding and\n * highlighting new source and target vertices. This handler is automatically\n * created in <mxGraph.createHandler>. It extends <mxEdgeHandler>.\n * \n * Constructor: mxEdgeHandler\n *\n * Constructs an edge handler for the specified <mxCellState>.\n * \n * Parameters:\n * \n * state - <mxCellState> of the cell to be modified.\n */\nfunction mxElbowEdgeHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxElbowEdgeHandler, mxEdgeHandler);\n\n/**\n * Specifies if a double click on the middle handle should call\n * <mxGraph.flipEdge>. Default is true.\n */\nmxElbowEdgeHandler.prototype.flipEnabled = true;\n\n/**\n * Variable: doubleClickOrientationResource\n * \n * Specifies the resource key for the tooltip to be displayed on the single\n * control point for routed edges. If the resource for this key does not\n * exist then the value is used as the error message. Default is\n * 'doubleClickOrientation'.\n */\nmxElbowEdgeHandler.prototype.doubleClickOrientationResource =\n\t(mxClient.language != 'none') ? 'doubleClickOrientation' : '';\n\n/**\n * Function: createBends\n * \n * Overrides <mxEdgeHandler.createBends> to create custom bends.\n */\n mxElbowEdgeHandler.prototype.createBends = function()\n {\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\t// Virtual\n\tbends.push(this.createVirtualBend(mxUtils.bind(this, function(evt)\n\t{\n\t\tif (!mxEvent.isConsumed(evt) && this.flipEnabled)\n\t\t{\n\t\t\tthis.graph.flipEdge(this.state.cell, evt);\n\t\t\tmxEvent.consume(evt);\n\t\t}\n\t})));\n\tthis.points.push(new mxPoint(0,0));\n\n\t// Target\n\tbend = this.createHandleShape(2);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\t\n\treturn bends;\n };\n\n/**\n * Function: createVirtualBend\n * \n * Creates a virtual bend that supports double clicking and calls\n * <mxGraph.flipEdge>.\n */\nmxElbowEdgeHandler.prototype.createVirtualBend = function(dblClickHandler)\n{\n\tvar bend = this.createHandleShape();\n\tthis.initBend(bend, dblClickHandler);\n\n\tbend.setCursor(this.getCursorForBend());\n\n\tif (!this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tbend.node.style.display = 'none';\n\t}\n\n\treturn bend;\n};\n\n/**\n * Function: getCursorForBend\n * \n * Returns the cursor to be used for the bend.\n */\nmxElbowEdgeHandler.prototype.getCursorForBend = function()\n{\n\treturn (this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.TopToBottom ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_TOPTOBOTTOM ||\n\t\t((this.state.style[mxConstants.STYLE_EDGE] == mxEdgeStyle.ElbowConnector ||\n\t\tthis.state.style[mxConstants.STYLE_EDGE] == mxConstants.EDGESTYLE_ELBOW)&&\n\t\tthis.state.style[mxConstants.STYLE_ELBOW] == mxConstants.ELBOW_VERTICAL)) ? \n\t\t'row-resize' : 'col-resize';\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns the tooltip for the given node.\n */\nmxElbowEdgeHandler.prototype.getTooltipForNode = function(node)\n{\n\tvar tip = null;\n\t\n\tif (this.bends != null && this.bends[1] != null && (node == this.bends[1].node ||\n\t\tnode.parentNode == this.bends[1].node))\n\t{\n\t\ttip = this.doubleClickOrientationResource;\n\t\ttip = mxResources.get(tip) || tip; // translate\n\t}\n\n\treturn tip;\n};\n\n/**\n * Function: convertPoint\n * \n * Converts the given point in-place from screen to unscaled, untranslated\n * graph coordinates and applies the grid.\n * \n * Parameters:\n * \n * point - <mxPoint> to be converted.\n * gridEnabled - Boolean that specifies if the grid should be applied.\n */\nmxElbowEdgeHandler.prototype.convertPoint = function(point, gridEnabled)\n{\n\tvar scale = this.graph.getView().getScale();\n\tvar tr = this.graph.getView().getTranslate();\n\tvar origin = this.state.origin;\n\t\n\tif (gridEnabled)\n\t{\n\t\tpoint.x = this.graph.snap(point.x);\n\t\tpoint.y = this.graph.snap(point.y);\n\t}\n\t\n\tpoint.x = Math.round(point.x / scale - tr.x - origin.x);\n\tpoint.y = Math.round(point.y / scale - tr.y - origin.y);\n\t\n\treturn point;\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates and redraws the inner bends.\n * \n * Parameters:\n * \n * p0 - <mxPoint> that represents the location of the first point.\n * pe - <mxPoint> that represents the location of the last point.\n */\nmxElbowEdgeHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tvar g = this.graph.getModel().getGeometry(this.state.cell);\n\tvar pts = this.state.absolutePoints;\n\tvar pt = null;\n\n\t// Keeps the virtual bend on the edge shape\n\tif (pts.length > 1)\n\t{\n\t\tp0 = pts[1];\n\t\tpe = pts[pts.length - 2];\n\t}\n\telse if (g.points != null && g.points.length > 0)\n\t{\n\t\tpt = pts[0];\n\t}\n\t\n\tif (pt == null)\n\t{\n\t\tpt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t}\n\telse\n\t{\n\t\tpt = new mxPoint(this.graph.getView().scale * (pt.x + this.graph.getView().translate.x + this.state.origin.x),\n\t\t\t\tthis.graph.getView().scale * (pt.y + this.graph.getView().translate.y + this.state.origin.y));\n\t}\n\n\t// Makes handle slightly bigger if the yellow  label handle\n\t// exists and intersects this green handle\n\tvar b = this.bends[1].bounds;\n\tvar w = b.width;\n\tvar h = b.height;\n\tvar bounds = new mxRectangle(Math.round(pt.x - w / 2), Math.round(pt.y - h / 2), w, h);\n\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(bounds);\n\t}\n\telse if (this.handleImage == null && this.labelShape.visible && mxUtils.intersects(bounds, this.labelShape.bounds))\n\t{\n\t\tw = mxConstants.HANDLE_SIZE + 3;\n\t\th = mxConstants.HANDLE_SIZE + 3;\n\t\tbounds = new mxRectangle(Math.floor(pt.x - w / 2), Math.floor(pt.y - h / 2), w, h);\n\t}\n\n\tthis.bends[1].bounds = bounds;\n\tthis.bends[1].redraw();\n\t\n\tif (this.manageLabelHandle)\n\t{\n\t\tthis.checkLabelHandle(this.bends[1].bounds);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nfunction mxEdgeSegmentHandler(state)\n{\n\tmxEdgeHandler.call(this, state);\n};\n\n/**\n * Extends mxEdgeHandler.\n */\nmxUtils.extend(mxEdgeSegmentHandler, mxElbowEdgeHandler);\n\n/**\n * Function: getCurrentPoints\n * \n * Returns the current absolute points.\n */\nmxEdgeSegmentHandler.prototype.getCurrentPoints = function()\n{\n\tvar pts = this.state.absolutePoints;\n\t\n\tif (pts != null)\n\t{\n\t\t// Special case for straight edges where we add a virtual middle handle for moving the edge\n\t\tvar tol = Math.max(1, this.graph.view.scale);\n\t\t\n\t\tif (pts.length == 2 || (pts.length == 3 &&\n\t\t\t(Math.abs(pts[0].x - pts[1].x) < tol && Math.abs(pts[1].x - pts[2].x) < tol ||\n\t\t\tMath.abs(pts[0].y - pts[1].y) < tol && Math.abs(pts[1].y - pts[2].y) < tol)))\n\t\t{\n\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\n\t\t\tpts = [pts[0], new mxPoint(cx, cy), new mxPoint(cx, cy), pts[pts.length - 1]];\t\n\t\t}\n\t}\n\n\treturn pts;\n};\n\n/**\n * Function: getPreviewPoints\n * \n * Updates the given preview state taking into account the state of the constraint handler.\n */\nmxEdgeSegmentHandler.prototype.getPreviewPoints = function(point)\n{\n\tif (this.isSource || this.isTarget)\n\t{\n\t\treturn mxElbowEdgeHandler.prototype.getPreviewPoints.apply(this, arguments);\n\t}\n\telse\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\tvar last = this.convertPoint(pts[0].clone(), false);\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar result = [];\n\n\t\tfor (var i = 1; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt = this.convertPoint(pts[i].clone(), false);\n\t\t\t\n\t\t\tif (i == this.index)\n\t\t\t{\n\t\t\t\tif (Math.round(last.x - pt.x) == 0)\n\t\t \t\t{\n\t\t\t\t\tlast.x = point.x;\n\t\t\t\t\tpt.x = point.x;\n\t\t \t\t}\n\t\t \t\t\n\t\t\t\tif (Math.round(last.y - pt.y) == 0)\n\t\t \t\t{\n\t\t \t\t\tlast.y = point.y;\n\t\t \t\t\tpt.y = point.y;\n\t\t \t\t}\n\t\t\t}\n\n\t\t\tif (i < pts.length - 1)\n\t\t\t{\n\t\t\t\tresult.push(pt);\n\t\t\t}\n\n\t\t\tlast = pt;\n\t\t}\n\t\t\n\t\t// Replaces single point that intersects with source or target\n\t\tif (result.length == 1)\n\t\t{\n\t\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\t\tvar scale = this.state.view.getScale();\n\t\t\tvar tr = this.state.view.getTranslate();\n\t\t\t\n\t\t\tvar x = result[0].x * scale + tr.x;\n\t\t\tvar y = result[0].y * scale + tr.y;\n\t\t\t\n\t\t\tif ((source != null && mxUtils.contains(source, x, y)) ||\n\t\t\t\t(target != null && mxUtils.contains(target, x, y)))\n\t\t\t{\n\t\t\t\tresult = [point, point];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n};\n\n/**\n * Function: updatePreviewState\n * \n * Overridden to perform optimization of the edge style result.\n */\nmxEdgeSegmentHandler.prototype.updatePreviewState = function(edge, point, terminalState, me)\n{\n\tmxEdgeHandler.prototype.updatePreviewState.apply(this, arguments);\n\n\t// Checks and corrects preview by running edge style again\n\tif (!this.isSource && !this.isTarget)\n\t{\n\t\tpoint = this.convertPoint(point.clone(), false);\n\t\tvar pts = edge.absolutePoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\n\t\tvar result = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t\t\n\t\tvar source = this.state.getVisibleTerminalState(true);\n\t\tvar target = this.state.getVisibleTerminalState(false);\n\t\tvar rpts = this.state.absolutePoints;\n\t\t\n\t\t// A straight line is represented by 3 handles\n\t\tif (result.length == 0 && (Math.round(pts[0].x - pts[pts.length - 1].x) == 0 ||\n\t\t\tMath.round(pts[0].y - pts[pts.length - 1].y) == 0))\n\t\t{\n\t\t\tresult = [point, point];\n\t\t}\n\t\t// Handles special case of transitions from straight vertical to routed\n\t\telse if (pts.length == 5 && result.length == 2 && source != null && target != null &&\n\t\t\t\trpts != null && Math.round(rpts[0].x - rpts[rpts.length - 1].x) == 0)\n\t\t{\n\t\t\tvar view = this.graph.getView();\n\t\t\tvar scale = view.getScale();\n\t\t\tvar tr = view.getTranslate();\n\t\t\t\n\t\t\tvar y0 = view.getRoutingCenterY(source) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar sc = this.graph.getConnectionConstraint(edge, source, true);\n\t\t\t\n\t\t\tif (sc != null)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(source, sc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\ty0 = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tvar ye = view.getRoutingCenterY(target) / scale - tr.y;\n\t\t\t\n\t\t\t// Use fixed connection point y-coordinate if one exists\n\t\t\tvar tc = this.graph.getConnectionConstraint(edge, target, false);\n\t\t\t\n\t\t\tif (tc)\n\t\t\t{\n\t\t\t\tvar pt = this.graph.getConnectionPoint(target, tc);\n\t\t\t\t\n\t\t\t\tif (pt != null)\n\t\t\t\t{\n\t\t\t\t\tthis.convertPoint(pt, false);\n\t\t\t\t\tye = pt.y;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tresult = [new mxPoint(point.x, y0), new mxPoint(point.x, ye)];\n\t\t}\n\n\t\tthis.points = result;\n\n\t\t// LATER: Check if points and result are different\n\t\tedge.view.updateFixedTerminalPoints(edge, source, target);\n\t\tedge.view.updatePoints(edge, this.points, source, target);\n\t\tedge.view.updateFloatingTerminalPoints(edge, source, target);\n\t}\n};\n\n/**\n * Overriden to merge edge segments.\n */\nmxEdgeSegmentHandler.prototype.connect = function(edge, terminal, isSource, isClone, me)\n{\n\tvar model = this.graph.getModel();\n\tvar geo = model.getGeometry(edge);\n\tvar result = null;\n\t\n\t// Merges adjacent edge segments\n\tif (geo != null && geo.points != null && geo.points.length > 0)\n\t{\n\t\tvar pts = this.abspoints;\n\t\tvar pt0 = pts[0];\n\t\tvar pt1 = pts[1];\n\t\tresult = [];\n\t\t\n\t\tfor (var i = 2; i < pts.length; i++)\n\t\t{\n\t\t\tvar pt2 = pts[i];\n\t\t\n\t\t\t// Merges adjacent segments only if more than 2 to allow for straight edges\n\t\t\tif ((Math.round(pt0.x - pt1.x) != 0 || Math.round(pt1.x - pt2.x) != 0) &&\n\t\t\t\t(Math.round(pt0.y - pt1.y) != 0 || Math.round(pt1.y - pt2.y) != 0))\n\t\t\t{\n\t\t\t\tresult.push(this.convertPoint(pt1.clone(), false));\n\t\t\t}\n\t\n\t\t\tpt0 = pt1;\n\t\t\tpt1 = pt2;\n\t\t}\n\t}\n\t\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tif (result != null)\n\t\t{\n\t\t\tvar geo = model.getGeometry(edge);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tgeo = geo.clone();\n\t\t\t\tgeo.points = result;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, geo);\n\t\t\t}\n\t\t}\n\t\t\n\t\tedge = mxEdgeHandler.prototype.connect.apply(this, arguments);\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\treturn edge;\n};\n\n/**\n * Function: getTooltipForNode\n * \n * Returns no tooltips.\n */\nmxEdgeSegmentHandler.prototype.getTooltipForNode = function(node)\n{\n\treturn null;\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.start = function(x, y, index)\n{\n\tmxEdgeHandler.prototype.start.apply(this, arguments);\n\t\n\tif (this.bends != null && this.bends[index] != null &&\n\t\t!this.isSource && !this.isTarget)\n\t{\n\t\tmxUtils.setOpacity(this.bends[index].node, 100);\n\t}\n};\n\n/**\n * Function: createBends\n * \n * Adds custom bends for the center of each segment.\n */\nmxEdgeSegmentHandler.prototype.createBends = function()\n{\n\tvar bends = [];\n\t\n\t// Source\n\tvar bend = this.createHandleShape(0);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\tvar pts = this.getCurrentPoints();\n\n\t// Waypoints (segment handles)\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tif (this.points == null)\n\t\t{\n\t\t\tthis.points = [];\n\t\t}\n\n\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t{\n\t\t\tbend = this.createVirtualBend();\n\t\t\tbends.push(bend);\n\t\t\tvar horizontal = Math.round(pts[i].x - pts[i + 1].x) == 0;\n\t\t\t\n\t\t\t// Special case where dy is 0 as well\n\t\t\tif (Math.round(pts[i].y - pts[i + 1].y) == 0 && i < pts.length - 2)\n\t\t\t{\n\t\t\t\thorizontal = Math.round(pts[i].x - pts[i + 2].x) == 0;\n\t\t\t}\n\t\t\t\n\t\t\tbend.setCursor((horizontal) ? 'col-resize' : 'row-resize');\n\t\t\tthis.points.push(new mxPoint(0,0));\n\t\t}\n\t}\n\n\t// Target\n\tvar bend = this.createHandleShape(pts.length);\n\tthis.initBend(bend);\n\tbend.setCursor(mxConstants.CURSOR_TERMINAL_HANDLE);\n\tbends.push(bend);\n\n\treturn bends;\n};\n\n/**\n * Function: redraw\n * \n * Overridden to invoke <refresh> before the redraw.\n */\nmxEdgeSegmentHandler.prototype.redraw = function()\n{\n\tthis.refresh();\n\tmxEdgeHandler.prototype.redraw.apply(this, arguments);\n};\n\n/**\n * Function: redrawInnerBends\n * \n * Updates the position of the custom bends.\n */\nmxEdgeSegmentHandler.prototype.redrawInnerBends = function(p0, pe)\n{\n\tif (this.graph.isCellBendable(this.state.cell))\n\t{\n\t\tvar pts = this.getCurrentPoints();\n\t\t\n\t\tif (pts != null && pts.length > 1)\n\t\t{\n\t\t\tvar straight = false;\n\t\t\t\n\t\t\t// Puts handle in the center of straight edges\n\t\t\tif (pts.length == 4 && Math.round(pts[1].x - pts[2].x) == 0 && Math.round(pts[1].y - pts[2].y) == 0)\n\t\t\t{\n\t\t\t\tstraight = true;\n\t\t\t\t\n\t\t\t\tif (Math.round(pts[0].y - pts[pts.length - 1].y) == 0)\n\t\t\t\t{\n\t\t\t\t\tvar cx = pts[0].x + (pts[pts.length - 1].x - pts[0].x) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(cx, pts[1].y);\n\t\t\t\t\tpts[2] = new mxPoint(cx, pts[2].y);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar cy = pts[0].y + (pts[pts.length - 1].y - pts[0].y) / 2;\n\t\t\t\t\tpts[1] = new mxPoint(pts[1].x, cy);\n\t\t\t\t\tpts[2] = new mxPoint(pts[2].x, cy);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tfor (var i = 0; i < pts.length - 1; i++)\n\t\t\t{\n\t\t\t\tif (this.bends[i + 1] != null)\n\t\t\t\t{\n\t\t \t\t\tvar p0 = pts[i];\n\t \t\t\t\tvar pe = pts[i + 1];\n\t\t\t \t\tvar pt = new mxPoint(p0.x + (pe.x - p0.x) / 2, p0.y + (pe.y - p0.y) / 2);\n\t\t\t \t\tvar b = this.bends[i + 1].bounds;\n\t\t\t \t\tthis.bends[i + 1].bounds = new mxRectangle(Math.floor(pt.x - b.width / 2),\n\t\t\t \t\t\t\tMath.floor(pt.y - b.height / 2), b.width, b.height);\n\t\t\t\t \tthis.bends[i + 1].redraw();\n\t\t\t\t \t\n\t\t\t\t \tif (this.manageLabelHandle)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.checkLabelHandle(this.bends[i + 1].bounds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (straight)\n\t\t\t{\n\t\t\t\tmxUtils.setOpacity(this.bends[1].node, this.virtualBendOpacity);\n\t\t\t\tmxUtils.setOpacity(this.bends[3].node, this.virtualBendOpacity);\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxKeyHandler\n *\n * Event handler that listens to keystroke events. This is not a singleton,\n * however, it is normally only required once if the target is the document\n * element (default).\n * \n * This handler installs a key event listener in the topmost DOM node and\n * processes all events that originate from descandants of <mxGraph.container>\n * or from the topmost DOM node. The latter means that all unhandled keystrokes\n * are handled by this object regardless of the focused state of the <graph>.\n * \n * Example:\n * \n * The following example creates a key handler that listens to the delete key\n * (46) and deletes the selection cells if the graph is enabled.\n * \n * (code)\n * var keyHandler = new mxKeyHandler(graph);\n * keyHandler.bindKey(46, function(evt)\n * {\n *   if (graph.isEnabled())\n *   {\n *     graph.removeCells();\n *   }\n * });\n * (end)\n * \n * Keycodes:\n * \n * See http://tinyurl.com/yp8jgl or http://tinyurl.com/229yqw for a list of\n * keycodes or install a key event listener into the document element and print\n * the key codes of the respective events to the console.\n * \n * To support the Command key and the Control key on the Mac, the following\n * code can be used.\n *\n * (code)\n * keyHandler.getFunction = function(evt)\n * {\n *   if (evt != null)\n *   {\n *     return (mxEvent.isControlDown(evt) || (mxClient.IS_MAC && evt.metaKey)) ? this.controlKeys[evt.keyCode] : this.normalKeys[evt.keyCode];\n *   }\n *   \n *   return null;\n * };\n * (end)\n * \n * Constructor: mxKeyHandler\n *\n * Constructs an event handler that executes functions bound to specific\n * keystrokes.\n * \n * Parameters:\n * \n * graph - Reference to the associated <mxGraph>.\n * target - Optional reference to the event target. If null, the document\n * element is used as the event target, that is, the object where the key\n * event listener is installed.\n */\nfunction mxKeyHandler(graph, target)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.target = target || document.documentElement;\n\t\t\n\t\t// Creates the arrays to map from keycodes to functions\n\t\tthis.normalKeys = [];\n\t\tthis.shiftKeys = [];\n\t\tthis.controlKeys = [];\n\t\tthis.controlShiftKeys = [];\n\t\t\n\t\tthis.keydownHandler = mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.keyDown(evt);\n\t\t});\n\n\t\t// Installs the keystroke listener in the target\n\t\tmxEvent.addListener(this.target, 'keydown', this.keydownHandler);\n\t\t\n\t\t// Automatically deallocates memory in IE\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload',\n\t\t\t\tmxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tthis.destroy();\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n};\n\n/**\n * Variable: graph\n * \n * Reference to the <mxGraph> associated with this handler.\n */\nmxKeyHandler.prototype.graph = null;\n\n/**\n * Variable: target\n * \n * Reference to the target DOM, that is, the DOM node where the key event\n * listeners are installed.\n */\nmxKeyHandler.prototype.target = null;\n\n/**\n * Variable: normalKeys\n * \n * Maps from keycodes to functions for non-pressed control keys.\n */\nmxKeyHandler.prototype.normalKeys = null;\n\n/**\n * Variable: shiftKeys\n * \n * Maps from keycodes to functions for pressed shift keys.\n */\nmxKeyHandler.prototype.shiftKeys = null;\n\n/**\n * Variable: controlKeys\n * \n * Maps from keycodes to functions for pressed control keys.\n */\nmxKeyHandler.prototype.controlKeys = null;\n\n/**\n * Variable: controlShiftKeys\n * \n * Maps from keycodes to functions for pressed control and shift keys.\n */\nmxKeyHandler.prototype.controlShiftKeys = null;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxKeyHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation returns\n * <enabled>.\n */\nmxKeyHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling by updating <enabled>.\n * \n * Parameters:\n * \n * enabled - Boolean that specifies the new enabled state.\n */\nmxKeyHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: bindKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is not pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindKey = function(code, funct)\n{\n\tthis.normalKeys[code] = funct;\n};\n\n/**\n * Function: bindShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the shift key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindShiftKey = function(code, funct)\n{\n\tthis.shiftKeys[code] = funct;\n};\n\n/**\n * Function: bindControlKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control key is pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlKey = function(code, funct)\n{\n\tthis.controlKeys[code] = funct;\n};\n\n/**\n * Function: bindControlShiftKey\n * \n * Binds the specified keycode to the given function. This binding is used\n * if the control and shift key are pressed.\n * \n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * funct - JavaScript function that takes the key event as an argument.\n */\nmxKeyHandler.prototype.bindControlShiftKey = function(code, funct)\n{\n\tthis.controlShiftKeys[code] = funct;\n};\n\n/**\n * Function: isControlDown\n * \n * Returns true if the control key is pressed. This uses <mxEvent.isControlDown>.\n * \n * Parameters:\n * \n * evt - Key event whose control key pressed state should be returned.\n */\nmxKeyHandler.prototype.isControlDown = function(evt)\n{\n\treturn mxEvent.isControlDown(evt);\n};\n\n/**\n * Function: getFunction\n * \n * Returns the function associated with the given key event or null if no\n * function is associated with the given event.\n * \n * Parameters:\n * \n * evt - Key event whose associated function should be returned.\n */\nmxKeyHandler.prototype.getFunction = function(evt)\n{\n\tif (evt != null && !mxEvent.isAltDown(evt))\n\t{\n\t\tif (this.isControlDown(evt))\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.controlShiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.controlKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxEvent.isShiftDown(evt))\n\t\t\t{\n\t\t\t\treturn this.shiftKeys[evt.keyCode];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn this.normalKeys[evt.keyCode];\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\t\n/**\n * Function: isGraphEvent\n * \n * Returns true if the event should be processed by this handler, that is,\n * if the event source is either the target, one of its direct children, a\n * descendant of the <mxGraph.container>, or the <mxGraph.cellEditor> of the\n * <graph>.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isGraphEvent = function(evt)\n{\n\tvar source = mxEvent.getSource(evt);\n\t\n\t// Accepts events from the target object or\n\t// in-place editing inside graph\n\tif ((source == this.target || source.parentNode == this.target) ||\n\t\t(this.graph.cellEditor != null && this.graph.cellEditor.isEventSource(evt)))\n\t{\n\t\treturn true;\n\t}\n\t\n\t// Accepts events from inside the container\n\treturn mxUtils.isAncestorNode(this.graph.container, source);\n};\n\n/**\n * Function: keyDown\n * \n * Handles the event by invoking the function bound to the respective keystroke\n * if <isEnabledForEvent> returns true for the given event and if\n * <isEventIgnored> returns false, except for escape for which\n * <isEventIgnored> is not invoked.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.keyDown = function(evt)\n{\n\tif (this.isEnabledForEvent(evt))\n\t{\n\t\t// Cancels the editing if escape is pressed\n\t\tif (evt.keyCode == 27 /* Escape */)\n\t\t{\n\t\t\tthis.escape(evt);\n\t\t}\n\t\t\n\t\t// Invokes the function for the keystroke\n\t\telse if (!this.isEventIgnored(evt))\n\t\t{\n\t\t\tvar boundFunction = this.getFunction(evt);\n\t\t\t\n\t\t\tif (boundFunction != null)\n\t\t\t{\n\t\t\t\tboundFunction(evt);\n\t\t\t\tmxEvent.consume(evt);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * Function: isEnabledForEvent\n * \n * Returns true if the given event should be handled. <isEventIgnored> is\n * called later if the event is not an escape key stroke, in which case\n * <escape> is called. This implementation returns true if <isEnabled>\n * returns true for both, this handler and <graph>, if the event is not\n * consumed and if <isGraphEvent> returns true.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEnabledForEvent = function(evt)\n{\n\treturn (this.graph.isEnabled() && !mxEvent.isConsumed(evt) &&\n\t\tthis.isGraphEvent(evt) && this.isEnabled());\n};\n\n/**\n * Function: isEventIgnored\n * \n * Returns true if the given keystroke should be ignored. This returns\n * graph.isEditing().\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke.\n */\nmxKeyHandler.prototype.isEventIgnored = function(evt)\n{\n\treturn this.graph.isEditing();\n};\n\n/**\n * Function: escape\n * \n * Hook to process ESCAPE keystrokes. This implementation invokes\n * <mxGraph.stopEditing> to cancel the current editing, connecting\n * and/or other ongoing modifications.\n * \n * Parameters:\n * \n * evt - Key event that represents the keystroke. Possible keycode in this\n * case is 27 (ESCAPE).\n */\nmxKeyHandler.prototype.escape = function(evt)\n{\n\tif (this.graph.isEscapeEnabled())\n\t{\n\t\tthis.graph.escape(evt);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its references into the DOM. This does\n * normally not need to be called, it is called automatically when the\n * window unloads (in IE).\n */\nmxKeyHandler.prototype.destroy = function()\n{\n\tif (this.target != null && this.keydownHandler != null)\n\t{\n\t\tmxEvent.removeListener(this.target, 'keydown', this.keydownHandler);\n\t\tthis.keydownHandler = null;\n\t}\n\t\n\tthis.target = null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxTooltipHandler\n * \n * Graph event handler that displays tooltips. <mxGraph.getTooltip> is used to\n * get the tooltip for a cell or handle. This handler is built-into\n * <mxGraph.tooltipHandler> and enabled using <mxGraph.setTooltips>.\n *\n * Example:\n * \n * (code>\n * new mxTooltipHandler(graph);\n * (end)\n * \n * Constructor: mxTooltipHandler\n * \n * Constructs an event handler that displays tooltips with the specified\n * delay (in milliseconds). If no delay is specified then a default delay\n * of 500 ms (0.5 sec) is used.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * delay - Optional delay in milliseconds.\n */\nfunction mxTooltipHandler(graph, delay)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.delay = delay || 500;\n\t\tthis.graph.addMouseListener(this);\n\t}\n};\n\n/**\n * Variable: zIndex\n * \n * Specifies the zIndex for the tooltip and its shadow. Default is 10005.\n */\nmxTooltipHandler.prototype.zIndex = 10005;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxTooltipHandler.prototype.graph = null;\n\n/**\n * Variable: delay\n * \n * Delay to show the tooltip in milliseconds. Default is 500.\n */\nmxTooltipHandler.prototype.delay = null;\n\n/**\n * Variable: ignoreTouchEvents\n * \n * Specifies if touch and pen events should be ignored. Default is true.\n */\nmxTooltipHandler.prototype.ignoreTouchEvents = true;\n\n/**\n * Variable: hideOnHover\n * \n * Specifies if the tooltip should be hidden if the mouse is moved over the\n * current cell. Default is false.\n */\nmxTooltipHandler.prototype.hideOnHover = false;\n\n/**\n * Variable: destroyed\n * \n * True if this handler was destroyed using <destroy>.\n */\nmxTooltipHandler.prototype.destroyed = false;\n\n/**\n * Variable: enabled\n * \n * Specifies if events are handled. Default is true.\n */\nmxTooltipHandler.prototype.enabled = true;\n\n/**\n * Function: isEnabled\n * \n * Returns true if events are handled. This implementation\n * returns <enabled>.\n */\nmxTooltipHandler.prototype.isEnabled = function()\n{\n\treturn this.enabled;\n};\n\n/**\n * Function: setEnabled\n * \n * Enables or disables event handling. This implementation\n * updates <enabled>.\n */\nmxTooltipHandler.prototype.setEnabled = function(enabled)\n{\n\tthis.enabled = enabled;\n};\n\n/**\n * Function: isHideOnHover\n * \n * Returns <hideOnHover>.\n */\nmxTooltipHandler.prototype.isHideOnHover = function()\n{\n\treturn this.hideOnHover;\n};\n\n/**\n * Function: setHideOnHover\n * \n * Sets <hideOnHover>.\n */\nmxTooltipHandler.prototype.setHideOnHover = function(value)\n{\n\tthis.hideOnHover = value;\n};\n\n/**\n * Function: init\n * \n * Initializes the DOM nodes required for this tooltip handler.\n */\nmxTooltipHandler.prototype.init = function()\n{\n\tif (document.body != null)\n\t{\n\t\tthis.div = document.createElement('div');\n\t\tthis.div.className = 'mxTooltip';\n\t\tthis.div.style.visibility = 'hidden';\n\n\t\tdocument.body.appendChild(this.div);\n\n\t\tmxEvent.addGestureListeners(this.div, mxUtils.bind(this, function(evt)\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}));\n\t}\n};\n\n/**\n * Function: getStateForEvent\n * \n * Returns the <mxCellState> to be used for showing a tooltip for this event.\n */\nmxTooltipHandler.prototype.getStateForEvent = function(me)\n{\n\treturn me.getState();\n};\n\n/**\n * Function: mouseDown\n * \n * Handles the event by initiating a rubberband selection. By consuming the\n * event all subsequent events of the gesture are redirected to this\n * handler.\n */\nmxTooltipHandler.prototype.mouseDown = function(sender, me)\n{\n\tthis.reset(me, false);\n\tthis.hideTooltip();\n};\n\n/**\n * Function: mouseMove\n * \n * Handles the event by updating the rubberband selection.\n */\nmxTooltipHandler.prototype.mouseMove = function(sender, me)\n{\n\tif (me.getX() != this.lastX || me.getY() != this.lastY)\n\t{\n\t\tthis.reset(me, true);\n\t\tvar state = this.getStateForEvent(me);\n\t\t\n\t\tif (this.isHideOnHover() || state != this.state || (me.getSource() != this.node &&\n\t\t\t(!this.stateSource || (state != null && this.stateSource ==\n\t\t\t(me.isSource(state.shape) || !me.isSource(state.text))))))\n\t\t{\n\t\t\tthis.hideTooltip();\n\t\t}\n\t}\n\t\n\tthis.lastX = me.getX();\n\tthis.lastY = me.getY();\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by resetting the tooltip timer or hiding the existing\n * tooltip.\n */\nmxTooltipHandler.prototype.mouseUp = function(sender, me)\n{\n\tthis.reset(me, true);\n\tthis.hideTooltip();\n};\n\n\n/**\n * Function: resetTimer\n * \n * Resets the timer.\n */\nmxTooltipHandler.prototype.resetTimer = function()\n{\n\tif (this.thread != null)\n\t{\n\t\twindow.clearTimeout(this.thread);\n\t\tthis.thread = null;\n\t}\n};\n\n/**\n * Function: reset\n * \n * Resets and/or restarts the timer to trigger the display of the tooltip.\n */\nmxTooltipHandler.prototype.reset = function(me, restart, state)\n{\n\tif (!this.ignoreTouchEvents || mxEvent.isMouseEvent(me.getEvent()))\n\t{\n\t\tthis.resetTimer();\n\t\tstate = (state != null) ? state : this.getStateForEvent(me);\n\t\t\n\t\tif (restart && this.isEnabled() && state != null && (this.div == null ||\n\t\t\tthis.div.style.visibility == 'hidden'))\n\t\t{\n\t\t\tvar node = me.getSource();\n\t\t\tvar x = me.getX();\n\t\t\tvar y = me.getY();\n\t\t\tvar stateSource = me.isSource(state.shape) || me.isSource(state.text);\n\t\n\t\t\tthis.thread = window.setTimeout(mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tif (!this.graph.isEditing() && !this.graph.popupMenuHandler.isMenuShowing() && !this.graph.isMouseDown)\n\t\t\t\t{\n\t\t\t\t\t// Uses information from inside event cause using the event at\n\t\t\t\t\t// this (delayed) point in time is not possible in IE as it no\n\t\t\t\t\t// longer contains the required information (member not found)\n\t\t\t\t\tvar tip = this.graph.getTooltip(state, node, x, y);\n\t\t\t\t\tthis.show(tip, x, y);\n\t\t\t\t\tthis.state = state;\n\t\t\t\t\tthis.node = node;\n\t\t\t\t\tthis.stateSource = stateSource;\n\t\t\t\t}\n\t\t\t}), this.delay);\n\t\t}\n\t}\n};\n\n/**\n * Function: hide\n * \n * Hides the tooltip and resets the timer.\n */\nmxTooltipHandler.prototype.hide = function()\n{\n\tthis.resetTimer();\n\tthis.hideTooltip();\n};\n\n/**\n * Function: hideTooltip\n * \n * Hides the tooltip.\n */\nmxTooltipHandler.prototype.hideTooltip = function()\n{\n\tif (this.div != null)\n\t{\n\t\tthis.div.style.visibility = 'hidden';\n\t\tthis.div.innerHTML = '';\n\t}\n};\n\n/**\n * Function: show\n * \n * Shows the tooltip for the specified cell and optional index at the\n * specified location (with a vertical offset of 10 pixels).\n */\nmxTooltipHandler.prototype.show = function(tip, x, y)\n{\n\tif (!this.destroyed && tip != null && tip.length > 0)\n\t{\n\t\t// Initializes the DOM nodes if required\n\t\tif (this.div == null)\n\t\t{\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\tvar origin = mxUtils.getScrollOrigin();\n\n\t\tthis.div.style.zIndex = this.zIndex;\n\t\tthis.div.style.left = (x + origin.x) + 'px';\n\t\tthis.div.style.top = (y + mxConstants.TOOLTIP_VERTICAL_OFFSET +\n\t\t\torigin.y) + 'px';\n\n\t\tif (!mxUtils.isNode(tip))\n\t\t{\t\n\t\t\tthis.div.innerHTML = tip.replace(/\\n/g, '<br>');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.div.innerHTML = '';\n\t\t\tthis.div.appendChild(tip);\n\t\t}\n\t\t\n\t\tthis.div.style.visibility = '';\n\t\tmxUtils.fit(this.div);\n\t}\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxTooltipHandler.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxEvent.release(this.div);\n\t\t\n\t\tif (this.div != null && this.div.parentNode != null)\n\t\t{\n\t\t\tthis.div.parentNode.removeChild(this.div);\n\t\t}\n\t\t\n\t\tthis.destroyed = true;\n\t\tthis.div = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellTracker\n * \n * Event handler that highlights cells. Inherits from <mxCellMarker>.\n * \n * Example:\n * \n * (code)\n * new mxCellTracker(graph, '#00FF00');\n * (end)\n * \n * For detecting dragEnter, dragOver and dragLeave on cells, the following\n * code can be used:\n * \n * (code)\n * graph.addMouseListener(\n * {\n *   cell: null,\n *   mouseDown: function(sender, me) { },\n *   mouseMove: function(sender, me)\n *   {\n *     var tmp = me.getCell();\n *     \n *     if (tmp != this.cell)\n *     {\n *       if (this.cell != null)\n *       {\n *         this.dragLeave(me.getEvent(), this.cell);\n *       }\n *       \n *       this.cell = tmp;\n *       \n *       if (this.cell != null)\n *       {\n *         this.dragEnter(me.getEvent(), this.cell);\n *       }\n *     }\n *     \n *     if (this.cell != null)\n *     {\n *       this.dragOver(me.getEvent(), this.cell);\n *     }\n *   },\n *   mouseUp: function(sender, me) { },\n *   dragEnter: function(evt, cell)\n *   {\n *     mxLog.debug('dragEnter', cell.value);\n *   },\n *   dragOver: function(evt, cell)\n *   {\n *     mxLog.debug('dragOver', cell.value);\n *   },\n *   dragLeave: function(evt, cell)\n *   {\n *     mxLog.debug('dragLeave', cell.value);\n *   }\n * });\n * (end)\n * \n * Constructor: mxCellTracker\n * \n * Constructs an event handler that highlights cells.\n * \n * Parameters:\n * \n * graph - Reference to the enclosing <mxGraph>.\n * color - Color of the highlight. Default is blue.\n * funct - Optional JavaScript function that is used to override\n * <mxCellMarker.getCell>.\n */\nfunction mxCellTracker(graph, color, funct)\n{\n\tmxCellMarker.call(this, graph, color);\n\n\tthis.graph.addMouseListener(this);\n\t\n\tif (funct != null)\n\t{\n\t\tthis.getCell = funct;\n\t}\n\t\n\t// Automatic deallocation of memory\n\tif (mxClient.IS_IE)\n\t{\n\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.destroy();\n\t\t}));\n\t}\n};\n\n/**\n * Extends mxCellMarker.\n */\nmxUtils.extend(mxCellTracker, mxCellMarker);\n\n/**\n * Function: mouseDown\n * \n * Ignores the event. The event is not consumed.\n */\nmxCellTracker.prototype.mouseDown = function(sender, me) { };\n\n/**\n * Function: mouseMove\n * \n * Handles the event by highlighting the cell under the mousepointer if it\n * is over the hotspot region of the cell.\n */\nmxCellTracker.prototype.mouseMove = function(sender, me)\n{\n\tif (this.isEnabled())\n\t{\n\t\tthis.process(me);\n\t}\n};\n\n/**\n * Function: mouseUp\n * \n * Handles the event by reseting the highlight.\n */\nmxCellTracker.prototype.mouseUp = function(sender, me) { };\n\n/**\n * Function: destroy\n * \n * Destroys the object and all its resources and DOM nodes. This doesn't\n * normally need to be called. It is called automatically when the window\n * unloads.\n */\nmxCellTracker.prototype.destroy = function()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tthis.graph.removeMouseListener(this);\n\t\tmxCellMarker.prototype.destroy.apply(this);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCellHighlight\n * \n * A helper class to highlight cells. Here is an example for a given cell.\n * \n * (code)\n * var highlight = new mxCellHighlight(graph, '#ff0000', 2);\n * highlight.highlight(graph.view.getState(cell)));\n * (end)\n * \n * Constructor: mxCellHighlight\n * \n * Constructs a cell highlight.\n */\nfunction mxCellHighlight(graph, highlightColor, strokeWidth, dashed)\n{\n\tif (graph != null)\n\t{\n\t\tthis.graph = graph;\n\t\tthis.highlightColor = (highlightColor != null) ? highlightColor : mxConstants.DEFAULT_VALID_COLOR;\n\t\tthis.strokeWidth = (strokeWidth != null) ? strokeWidth : mxConstants.HIGHLIGHT_STROKEWIDTH;\n\t\tthis.dashed = (dashed != null) ? dashed : false;\n\t\tthis.opacity = mxConstants.HIGHLIGHT_OPACITY;\n\n\t\t// Updates the marker if the graph changes\n\t\tthis.repaintHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Updates reference to state\n\t\t\tif (this.state != null)\n\t\t\t{\n\t\t\t\tvar tmp = this.graph.view.getState(this.state.cell);\n\t\t\t\t\n\t\t\t\tif (tmp == null)\n\t\t\t\t{\n\t\t\t\t\tthis.hide();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.state = tmp;\n\t\t\t\t\tthis.repaint();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.SCALE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getView().addListener(mxEvent.SCALE_AND_TRANSLATE, this.repaintHandler);\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, this.repaintHandler);\n\t\t\n\t\t// Hides the marker if the current root changes\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.hide();\n\t\t});\n\n\t\tthis.graph.getView().addListener(mxEvent.DOWN, this.resetHandler);\n\t\tthis.graph.getView().addListener(mxEvent.UP, this.resetHandler);\n\t}\n};\n\n/**\n * Variable: keepOnTop\n * \n * Specifies if the highlights should appear on top of everything\n * else in the overlay pane. Default is false.\n */\nmxCellHighlight.prototype.keepOnTop = false;\n\n/**\n * Variable: graph\n * \n * Reference to the enclosing <mxGraph>.\n */\nmxCellHighlight.prototype.graph = true;\n\n/**\n * Variable: state\n * \n * Reference to the <mxCellState>.\n */\nmxCellHighlight.prototype.state = null;\n\n/**\n * Variable: spacing\n * \n * Specifies the spacing between the highlight for vertices and the vertex.\n * Default is 2.\n */\nmxCellHighlight.prototype.spacing = 2;\n\n/**\n * Variable: resetHandler\n * \n * Holds the handler that automatically invokes reset if the highlight\n * should be hidden.\n */\nmxCellHighlight.prototype.resetHandler = null;\n\n/**\n * Function: setHighlightColor\n * \n * Sets the color of the rectangle used to highlight drop targets.\n * \n * Parameters:\n * \n * color - String that represents the new highlight color.\n */\nmxCellHighlight.prototype.setHighlightColor = function(color)\n{\n\tthis.highlightColor = color;\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.stroke = color;\n\t}\n};\n\n/**\n * Function: drawHighlight\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.drawHighlight = function()\n{\n\tthis.shape = this.createShape();\n\tthis.repaint();\n\n\tif (!this.keepOnTop && this.shape.node.parentNode.firstChild != this.shape.node)\n\t{\n\t\tthis.shape.node.parentNode.insertBefore(this.shape.node, this.shape.node.parentNode.firstChild);\n\t}\n};\n\n/**\n * Function: createShape\n * \n * Creates and returns the highlight shape for the given state.\n */\nmxCellHighlight.prototype.createShape = function()\n{\n\tvar shape = this.graph.cellRenderer.createShape(this.state);\n\t\n\tshape.svgStrokeTolerance = this.graph.tolerance;\n\tshape.points = this.state.absolutePoints;\n\tshape.apply(this.state);\n\tshape.stroke = this.highlightColor;\n\tshape.opacity = this.opacity;\n\tshape.isDashed = this.dashed;\n\tshape.isShadow = false;\n\t\n\tshape.dialect = (this.graph.dialect != mxConstants.DIALECT_SVG) ? mxConstants.DIALECT_VML : mxConstants.DIALECT_SVG;\n\tshape.init(this.graph.getView().getOverlayPane());\n\tmxEvent.redirectMouseEvents(shape.node, this.graph, this.state);\n\t\n\tif (this.graph.dialect != mxConstants.DIALECT_SVG)\n\t{\n\t\tshape.pointerEvents = false;\n\t}\n\telse\n\t{\n\t\tshape.svgPointerEvents = 'stroke';\n\t}\n\t\n\treturn shape;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.getStrokeWidth = function(state)\n{\n\treturn this.strokeWidth;\n};\n\n/**\n * Function: repaint\n * \n * Updates the highlight after a change of the model or view.\n */\nmxCellHighlight.prototype.repaint = function()\n{\n\tif (this.state != null && this.shape != null)\n\t{\n\t\tthis.shape.scale = this.state.view.scale;\n\t\t\n\t\tif (this.graph.model.isEdge(this.state.cell))\n\t\t{\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth();\n\t\t\tthis.shape.points = this.state.absolutePoints;\n\t\t\tthis.shape.outline = false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.shape.bounds = new mxRectangle(this.state.x - this.spacing, this.state.y - this.spacing,\n\t\t\t\t\tthis.state.width + 2 * this.spacing, this.state.height + 2 * this.spacing);\n\t\t\tthis.shape.rotation = Number(this.state.style[mxConstants.STYLE_ROTATION] || '0');\n\t\t\tthis.shape.strokewidth = this.getStrokeWidth() / this.state.view.scale;\n\t\t\tthis.shape.outline = true;\n\t\t}\n\n\t\t// Uses cursor from shape in highlight\n\t\tif (this.state.shape != null)\n\t\t{\n\t\t\tthis.shape.setCursor(this.state.shape.getCursor());\n\t\t}\n\t\t\n\t\t// Workaround for event transparency in VML with transparent color\n\t\t// is to use a non-transparent color with near zero opacity\n\t\tif (mxClient.IS_QUIRKS || document.documentMode == 8)\n\t\t{\n\t\t\tif (this.shape.stroke == 'transparent')\n\t\t\t{\n\t\t\t\t// KNOWN: Quirks mode does not seem to catch events if\n\t\t\t\t// we do not force an update of the DOM via a change such\n\t\t\t\t// as mxLog.debug. Since IE6 is EOL we do not add a fix.\n\t\t\t\tthis.shape.stroke = 'white';\n\t\t\t\tthis.shape.opacity = 1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.shape.opacity = this.opacity;\n\t\t\t}\n\t\t}\n\t\t\n\t\tthis.shape.redraw();\n\t}\n};\n\n/**\n * Function: hide\n * \n * Resets the state of the cell marker.\n */\nmxCellHighlight.prototype.hide = function()\n{\n\tthis.highlight(null);\n};\n\n/**\n * Function: mark\n * \n * Marks the <markedState> and fires a <mark> event.\n */\nmxCellHighlight.prototype.highlight = function(state)\n{\n\tif (this.state != state)\n\t{\n\t\tif (this.shape != null)\n\t\t{\n\t\t\tthis.shape.destroy();\n\t\t\tthis.shape = null;\n\t\t}\n\n\t\tthis.state = state;\n\t\t\n\t\tif (this.state != null)\n\t\t{\n\t\t\tthis.drawHighlight();\n\t\t}\n\t}\n};\n\n/**\n * Function: isHighlightAt\n * \n * Returns true if this highlight is at the given position.\n */\nmxCellHighlight.prototype.isHighlightAt = function(x, y)\n{\n\tvar hit = false;\n\t\n\t// Quirks mode is currently not supported as it used a different coordinate system\n\tif (this.shape != null && document.elementFromPoint != null && !mxClient.IS_QUIRKS)\n\t{\n\t\tvar elt = document.elementFromPoint(x, y);\n\n\t\twhile (elt != null)\n\t\t{\n\t\t\tif (elt == this.shape.node)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\telt = elt.parentNode;\n\t\t}\n\t}\n\t\n\treturn hit;\n};\n\n/**\n * Function: destroy\n * \n * Destroys the handler and all its resources and DOM nodes.\n */\nmxCellHighlight.prototype.destroy = function()\n{\n\tthis.graph.getView().removeListener(this.resetHandler);\n\tthis.graph.getView().removeListener(this.repaintHandler);\n\tthis.graph.getModel().removeListener(this.repaintHandler);\n\t\n\tif (this.shape != null)\n\t{\n\t\tthis.shape.destroy();\n\t\tthis.shape = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultKeyHandler\n *\n * Binds keycodes to actionnames in an editor. This aggregates an internal\n * <handler> and extends the implementation of <mxKeyHandler.escape> to not\n * only cancel the editing, but also hide the properties dialog and fire an\n * <mxEditor.escape> event via <editor>. An instance of this class is created\n * by <mxEditor> and stored in <mxEditor.keyHandler>.\n * \n * Example:\n * \n * Bind the delete key to the delete action in an existing editor.\n * \n * (code)\n * var keyHandler = new mxDefaultKeyHandler(editor);\n * keyHandler.bindAction(46, 'delete');\n * (end)\n *\n * Codec:\n * \n * This class uses the <mxDefaultKeyHandlerCodec> to read configuration\n * data into an existing instance. See <mxDefaultKeyHandlerCodec> for a\n * description of the configuration format.\n * \n * Keycodes:\n * \n * See <mxKeyHandler>.\n * \n * An <mxEvent.ESCAPE> event is fired via the editor if the escape key is\n * pressed.\n * \n * Constructor: mxDefaultKeyHandler\n *\n * Constructs a new default key handler for the <mxEditor.graph> in the\n * given <mxEditor>. (The editor may be null if a prototypical instance for\n * a <mxDefaultKeyHandlerCodec> is created.)\n * \n * Parameters:\n * \n * editor - Reference to the enclosing <mxEditor>.\n */\nfunction mxDefaultKeyHandler(editor)\n{\n\tif (editor != null)\n\t{\n\t\tthis.editor = editor;\n\t\tthis.handler = new mxKeyHandler(editor.graph);\n\t\t\n\t\t// Extends the escape function of the internal key\n\t\t// handle to hide the properties dialog and fire\n\t\t// the escape event via the editor instance\n\t\tvar old = this.handler.escape;\n\t\t\n\t\tthis.handler.escape = function(evt)\n\t\t{\n\t\t\told.apply(this, arguments);\n\t\t\teditor.hideProperties();\n\t\t\teditor.fireEvent(new mxEventObject(mxEvent.ESCAPE, 'event', evt));\n\t\t};\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.editor = null;\n\n/**\n * Variable: handler\n *\n * Holds the <mxKeyHandler> for key event handling.\n */\nmxDefaultKeyHandler.prototype.handler = null;\n\n/**\n * Function: bindAction\n *\n * Binds the specified keycode to the given action in <editor>. The\n * optional control flag specifies if the control key must be pressed\n * to trigger the action.\n *\n * Parameters:\n *\n * code - Integer that specifies the keycode.\n * action - Name of the action to execute in <editor>.\n * control - Optional boolean that specifies if control must be pressed.\n * Default is false.\n */\nmxDefaultKeyHandler.prototype.bindAction = function (code, action, control)\n{\n\tvar keyHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\n\t// Binds the function to control-down keycode\n\tif (control)\n\t{\n\t\tthis.handler.bindControlKey(code, keyHandler);\n\t}\n\n\t// Binds the function to the normal keycode\n\telse\n\t{\n\t\tthis.handler.bindKey(code, keyHandler);\t\t\t\t\n\t}\n};\n\n/**\n * Function: destroy\n *\n * Destroys the <handler> associated with this object. This does normally\n * not need to be called, the <handler> is destroyed automatically when the\n * window unloads (in IE) by <mxEditor>.\n */\nmxDefaultKeyHandler.prototype.destroy = function ()\n{\n\tthis.handler.destroy();\n\tthis.handler = null;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultPopupMenu\n *\n * Creates popupmenus for mouse events. This object holds an XML node\n * which is a description of the popup menu to be created. In\n * <createMenu>, the configuration is applied to the context and\n * the resulting menu items are added to the menu dynamically. See\n * <createMenu> for a description of the configuration format.\n * \n * This class does not create the DOM nodes required for the popup menu, it\n * only parses an XML description to invoke the respective methods on an\n * <mxPopupMenu> each time the menu is displayed.\n *\n * Codec:\n * \n * This class uses the <mxDefaultPopupMenuCodec> to read configuration\n * data into an existing instance, however, the actual parsing is done\n * by this class during program execution, so the format is described\n * below.\n * \n * Constructor: mxDefaultPopupMenu\n *\n * Constructs a new popupmenu-factory based on given configuration.\n *\n * Paramaters:\n *\n * config - XML node that contains the configuration data.\n */\nfunction mxDefaultPopupMenu(config)\n{\n\tthis.config = config;\n};\n\n/**\n * Variable: imageBasePath\n *\n * Base path for all icon attributes in the config. Default is null.\n */\nmxDefaultPopupMenu.prototype.imageBasePath = null;\n\n/**\n * Variable: config\n *\n * XML node used as the description of new menu items. This node is\n * used in <createMenu> to dynamically create the menu items if their\n * respective conditions evaluate to true for the given arguments.\n */\nmxDefaultPopupMenu.prototype.config = null;\n\n/**\n * Function: createMenu\n *\n * This function is called from <mxEditor> to add items to the\n * given menu based on <config>. The config is a sequence of\n * the following nodes and attributes.\n *\n * Child Nodes: \n *\n * add - Adds a new menu item. See below for attributes.\n * separator - Adds a separator. No attributes.\n * condition - Adds a custom condition. Name attribute.\n * \n * The add-node may have a child node that defines a function to be invoked\n * before the action is executed (or instead of an action to be executed).\n *\n * Attributes:\n *\n * as - Resource key for the label (needs entry in property file).\n * action - Name of the action to execute in enclosing editor.\n * icon - Optional icon (relative/absolute URL).\n * iconCls - Optional CSS class for the icon.\n * if - Optional name of condition that must be true (see below).\n * enabled-if - Optional name of condition that specifies if the menu item\n * should be enabled.\n * name - Name of custom condition. Only for condition nodes.\n *\n * Conditions:\n *\n * nocell - No cell under the mouse.\n * ncells - More than one cell selected.\n * notRoot - Drilling position is other than home.\n * cell - Cell under the mouse.\n * notEmpty - Exactly one cell with children under mouse.\n * expandable - Exactly one expandable cell under mouse.\n * collapsable - Exactly one collapsable cell under mouse.\n * validRoot - Exactly one cell which is a possible root under mouse.\n * swimlane - Exactly one cell which is a swimlane under mouse.\n *\n * Example:\n *\n * To add a new item for a given action to the popupmenu:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"delete\" action=\"delete\" icon=\"images/delete.gif\" if=\"cell\"/>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * To add a new item for a custom function:\n * \n * (code)\n * <mxDefaultPopupMenu as=\"popupHandler\">\n *   <add as=\"action1\"><![CDATA[\n *\t\tfunction (editor, cell, evt)\n *\t\t{\n *\t\t\teditor.execute('action1', cell, 'myArg');\n *\t\t}\n *   ]]></add>\n * </mxDefaultPopupMenu>\n * (end)\n * \n * The above example invokes action1 with an additional third argument via\n * the editor instance. The third argument is passed to the function that\n * defines action1. If the add-node has no action-attribute, then only the\n * function defined in the text content is executed, otherwise first the\n * function and then the action defined in the action-attribute is\n * executed. The function in the text content has 3 arguments, namely the\n * <mxEditor> instance, the <mxCell> instance under the mouse, and the\n * native mouse event.\n *\n * Custom Conditions:\n *\n * To add a new condition for popupmenu items:\n *  \n * (code)\n * <condition name=\"condition1\"><![CDATA[\n *   function (editor, cell, evt)\n *   {\n *     return cell != null;\n *   }\n * ]]></condition>\n * (end)\n * \n * The new condition can then be used in any item as follows:\n * \n * (code)\n * <add as=\"action1\" action=\"action1\" icon=\"action1.gif\" if=\"condition1\"/>\n * (end)\n * \n * The order in which the items and conditions appear is not significant as\n * all connditions are evaluated before any items are created.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu. \n */\nmxDefaultPopupMenu.prototype.createMenu = function(editor, menu, cell, evt)\n{\n\tif (this.config != null)\n\t{\n\t\tvar conditions = this.createConditions(editor, cell, evt);\n\t\tvar item = this.config.firstChild;\n\n\t\tthis.addItems(editor, menu, cell, evt, conditions, item, null);\n\t}\n};\n\n/**\n * Function: addItems\n * \n * Recursively adds the given items and all of its children into the given menu.\n * \n * Parameters:\n *\n * editor - Enclosing <mxEditor> instance.\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * cell - Optional <mxCell> which is under the mousepointer.\n * evt - Optional mouse event which triggered the menu.\n * conditions - Array of names boolean conditions.\n * item - XML node that represents the current menu item.\n * parent - DOM node that represents the parent menu item.\n */\nmxDefaultPopupMenu.prototype.addItems = function(editor, menu, cell, evt, conditions, item, parent)\n{\n\tvar addSeparator = false;\n\t\n\twhile (item != null)\n\t{\n\t\tif (item.nodeName == 'add')\n\t\t{\n\t\t\tvar condition = item.getAttribute('if');\n\t\t\t\n\t\t\tif (condition == null || conditions[condition])\n\t\t\t{\n\t\t\t\tvar as = item.getAttribute('as');\n\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(item));\n\t\t\t\tvar action = item.getAttribute('action');\n\t\t\t\tvar icon = item.getAttribute('icon');\n\t\t\t\tvar iconCls = item.getAttribute('iconCls');\n\t\t\t\tvar enabledCond = item.getAttribute('enabled-if');\n\t\t\t\tvar enabled = enabledCond == null || conditions[enabledCond];\n\t\t\t\t\n\t\t\t\tif (addSeparator)\n\t\t\t\t{\n\t\t\t\t\tmenu.addSeparator(parent);\n\t\t\t\t\taddSeparator = false;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (icon != null && this.imageBasePath)\n\t\t\t\t{\n\t\t\t\t\ticon = this.imageBasePath + icon;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar row = this.addAction(menu, editor, as, icon, funct, action, cell, parent, iconCls, enabled);\n\t\t\t\tthis.addItems(editor, menu, cell, evt, conditions, item.firstChild, row);\n\t\t\t}\n\t\t}\n\t\telse if (item.nodeName == 'separator')\n\t\t{\n\t\t\taddSeparator = true;\n\t\t}\n\t\t\n\t\titem = item.nextSibling;\n\t}\n};\n\n/**\n * Function: addAction\n *\n * Helper method to bind an action to a new menu item.\n * \n * Parameters:\n *\n * menu - <mxPopupMenu> that is used for adding items and separators.\n * editor - Enclosing <mxEditor> instance.\n * lab - String that represents the label of the menu item.\n * icon - Optional URL that represents the icon of the menu item.\n * action - Optional name of the action to execute in the given editor.\n * funct - Optional function to execute before the optional action. The\n * function takes an <mxEditor>, the <mxCell> under the mouse and the\n * mouse event that triggered the call.\n * cell - Optional <mxCell> to use as an argument for the action.\n * parent - DOM node that represents the parent menu item.\n * iconCls - Optional CSS class for the menu icon.\n * enabled - Optional boolean that specifies if the menu item is enabled.\n * Default is true.\n */\nmxDefaultPopupMenu.prototype.addAction = function(menu, editor, lab, icon, funct, action, cell, parent, iconCls, enabled)\n{\n\tvar clickHandler = function(evt)\n\t{\n\t\tif (typeof(funct) == 'function')\n\t\t{\n\t\t\tfunct.call(editor, editor, cell, evt);\n\t\t}\n\t\t\n\t\tif (action != null)\n\t\t{\n\t\t\teditor.execute(action, cell, evt);\n\t\t}\n\t};\n\t\n\treturn menu.addItem(lab, icon, clickHandler, parent, iconCls, enabled);\n};\n\n/**\n * Function: createConditions\n * \n * Evaluates the default conditions for the given context.\n */\nmxDefaultPopupMenu.prototype.createConditions = function(editor, cell, evt)\n{\n\t// Creates array with conditions\n\tvar model = editor.graph.getModel();\n\tvar childCount = model.getChildCount(cell);\n\t\n\t// Adds some frequently used conditions\n\tvar conditions = [];\n\tconditions['nocell'] = cell == null;\n\tconditions['ncells'] = editor.graph.getSelectionCount() > 1;\n\tconditions['notRoot'] = model.getRoot() !=\n\t\tmodel.getParent(editor.graph.getDefaultParent());\n\tconditions['cell'] = cell != null;\n\t\n\tvar isCell = cell != null && editor.graph.getSelectionCount() == 1;\n\tconditions['nonEmpty'] = isCell && childCount > 0;\n\tconditions['expandable'] = isCell && editor.graph.isCellFoldable(cell, false);\n\tconditions['collapsable'] = isCell && editor.graph.isCellFoldable(cell, true);\n\tconditions['validRoot'] = isCell && editor.graph.isValidRoot(cell);\n\tconditions['emptyValidRoot'] = conditions['validRoot'] && childCount == 0;\n\tconditions['swimlane'] = isCell && editor.graph.isSwimlane(cell);\n\n\t// Evaluates dynamic conditions from config file\n\tvar condNodes = this.config.getElementsByTagName('condition');\n\t\n\tfor (var i=0; i<condNodes.length; i++)\n\t{\n\t\tvar funct = mxUtils.eval(mxUtils.getTextContent(condNodes[i]));\n\t\tvar name = condNodes[i].getAttribute('name');\n\t\t\n\t\tif (name != null && typeof(funct) == 'function')\n\t\t{\n\t\t\tconditions[name] = funct(editor, cell, evt);\n\t\t}\n\t}\n\t\n\treturn conditions;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbar\n *\n * Toolbar for the editor. This modifies the state of the graph\n * or inserts new cells upon mouse clicks.\n * \n * Example:\n * \n * Create a toolbar with a button to copy the selection into the clipboard,\n * and a combo box with one action to paste the selection from the clipboard\n * into the graph.\n * \n * (code)\n * var toolbar = new mxDefaultToolbar(container, editor);\n * toolbar.addItem('Copy', null, 'copy');\n * \n * var combo = toolbar.addActionCombo('More actions...');\n * toolbar.addActionOption(combo, 'Paste', 'paste');\n * (end) \n *\n * Codec:\n * \n * This class uses the <mxDefaultToolbarCodec> to read configuration\n * data into an existing instance. See <mxDefaultToolbarCodec> for a\n * description of the configuration format.\n * \n * Constructor: mxDefaultToolbar\n *\n * Constructs a new toolbar for the given container and editor. The\n * container and editor may be null if a prototypical instance for a\n * <mxDefaultKeyHandlerCodec> is created.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n * editor - Reference to the enclosing <mxEditor>. \n */\nfunction mxDefaultToolbar(container, editor)\n{\n\tthis.editor = editor;\n\n\tif (container != null && editor != null)\n\t{\n\t\tthis.init(container);\n\t}\n};\n\t\n/**\n * Variable: editor\n *\n * Reference to the enclosing <mxEditor>.\n */\nmxDefaultToolbar.prototype.editor = null;\n\n/**\n * Variable: toolbar\n *\n * Holds the internal <mxToolbar>.\n */\nmxDefaultToolbar.prototype.toolbar = null;\n\n/**\n * Variable: resetHandler\n *\n * Reference to the function used to reset the <toolbar>.\n */\nmxDefaultToolbar.prototype.resetHandler = null;\n\n/**\n * Variable: spacing\n *\n * Defines the spacing between existing and new vertices in\n * gridSize units when a new vertex is dropped on an existing\n * cell. Default is 4 (40 pixels).\n */\nmxDefaultToolbar.prototype.spacing = 4;\n\n/**\n * Variable: connectOnDrop\n * \n * Specifies if elements should be connected if new cells are dropped onto\n * connectable elements. Default is false.\n */\nmxDefaultToolbar.prototype.connectOnDrop = false;\n\n/**\n * Variable: init\n * \n * Constructs the <toolbar> for the given container and installs a listener\n * that updates the <mxEditor.insertFunction> on <editor> if an item is\n * selected in the toolbar. This assumes that <editor> is not null.\n *\n * Parameters:\n *\n * container - DOM node that contains the toolbar.\n */\nmxDefaultToolbar.prototype.init = function(container)\n{\n\tif (container != null)\n\t{\n\t\tthis.toolbar = new mxToolbar(container);\n\t\t\n\t\t// Installs the insert function in the editor if an item is\n\t\t// selected in the toolbar\n\t\tthis.toolbar.addListener(mxEvent.SELECT, mxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar funct = evt.getProperty('function');\n\t\t\t\n\t\t\tif (funct != null)\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = mxUtils.bind(this, function()\n\t\t\t\t{\n\t\t\t\t\tfunct.apply(this, arguments);\n\t\t\t\t\tthis.toolbar.resetMode();\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.editor.insertFunction = null;\n\t\t\t}\n\t\t}));\n\t\t\n\t\t// Resets the selected tool after a doubleclick or escape keystroke\n\t\tthis.resetHandler = mxUtils.bind(this, function()\n\t\t{\n\t\t\tif (this.toolbar != null)\n\t\t\t{\n\t\t\t\tthis.toolbar.resetMode(true);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.graph.addListener(mxEvent.DOUBLE_CLICK, this.resetHandler);\n\t\tthis.editor.addListener(mxEvent.ESCAPE, this.resetHandler);\n\t}\n};\n\n/**\n * Function: addItem\n *\n * Adds a new item that executes the given action in <editor>. The title,\n * icon and pressedIcon are used to display the toolbar item.\n * \n * Parameters:\n *\n * title - String that represents the title (tooltip) for the item.\n * icon - URL of the icon to be used for displaying the item.\n * action - Name of the action to execute when the item is clicked.\n * pressed - Optional URL of the icon for the pressed state.\n */\nmxDefaultToolbar.prototype.addItem = function(title, icon, action, pressed)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tif (action != null && action.length > 0)\n\t\t{\n\t\t\tthis.editor.execute(action);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addItem(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addSeparator\n *\n * Adds a vertical separator using the optional icon.\n * \n * Parameters:\n * \n * icon - Optional URL of the icon that represents the vertical separator.\n * Default is <mxClient.imageBasePath> + '/separator.gif'.\n */\nmxDefaultToolbar.prototype.addSeparator = function(icon)\n{\n\ticon = icon || mxClient.imageBasePath + '/separator.gif';\n\tthis.toolbar.addSeparator(icon);\n};\n\t\n/**\n * Function: addCombo\n *\n * Helper method to invoke <mxToolbar.addCombo> on <toolbar> and return the\n * resulting DOM node.\n */\nmxDefaultToolbar.prototype.addCombo = function()\n{\n\treturn this.toolbar.addCombo();\n};\n\t\t\n/**\n * Function: addActionCombo\n *\n * Helper method to invoke <mxToolbar.addActionCombo> on <toolbar> using\n * the given title and return the resulting DOM node.\n * \n * Parameters:\n * \n * title - String that represents the title of the combo.\n */\nmxDefaultToolbar.prototype.addActionCombo = function(title)\n{\n\treturn this.toolbar.addActionCombo(title);\n};\n\n/**\n * Function: addActionOption\n *\n * Binds the given action to a option with the specified label in the\n * given combo. Combo is an object returned from an earlier call to\n * <addCombo> or <addActionCombo>.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * action - Name of the action to execute in <editor>.\n */\nmxDefaultToolbar.prototype.addActionOption = function(combo, title, action)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.execute(action);\n\t});\n\t\n\tthis.addOption(combo, title, clickHandler);\n};\n\n/**\n * Function: addOption\n *\n * Helper method to invoke <mxToolbar.addOption> on <toolbar> and return\n * the resulting DOM node that represents the option.\n * \n * Parameters:\n * \n * combo - DOM node that represents the combo box.\n * title - String that represents the title of the combo.\n * value - Object that represents the value of the option.\n */\nmxDefaultToolbar.prototype.addOption = function(combo, title, value)\n{\n\treturn this.toolbar.addOption(combo, title, value);\n};\n\t\n/**\n * Function: addMode\n *\n * Creates an item for selecting the given mode in the <editor>'s graph.\n * Supported modenames are select, connect and pan.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * mode - String that represents the mode name to be used in\n * <mxEditor.setMode>.\n * pressed - Optional URL of the icon that represents the pressed state.\n * funct - Optional JavaScript function that takes the <mxEditor> as the\n * first and only argument that is executed after the mode has been\n * selected.\n */\nmxDefaultToolbar.prototype.addMode = function(title, icon, mode, pressed, funct)\n{\n\tvar clickHandler = mxUtils.bind(this, function()\n\t{\n\t\tthis.editor.setMode(mode);\n\t\t\n\t\tif (funct != null)\n\t\t{\n\t\t\tfunct(this.editor);\n\t\t}\n\t});\n\t\n\treturn this.toolbar.addSwitchMode(title, icon, clickHandler, pressed);\n};\n\n/**\n * Function: addPrototype\n *\n * Creates an item for inserting a clone of the specified prototype cell into\n * the <editor>'s graph. The ptype may either be a cell or a function that\n * returns a cell.\n * \n * Parameters:\n * \n * title - String that represents the title of the item.\n * icon - URL of the icon that represents the item.\n * ptype - Function or object that represents the prototype cell. If ptype\n * is a function then it is invoked with no arguments to create new\n * instances.\n * pressed - Optional URL of the icon that represents the pressed state.\n * insert - Optional JavaScript function that handles an insert of the new\n * cell. This function takes the <mxEditor>, new cell to be inserted, mouse\n * event and optional <mxCell> under the mouse pointer as arguments.\n * toggle - Optional boolean that specifies if the item can be toggled.\n * Default is true.\n */\nmxDefaultToolbar.prototype.addPrototype = function(title, icon, ptype, pressed, insert, toggle)\n{\n\t// Creates a wrapper function that is in charge of constructing\n\t// the new cell instance to be inserted into the graph\n\tvar factory = mxUtils.bind(this, function()\n\t{\n\t\tif (typeof(ptype) == 'function')\n\t\t{\n\t\t\treturn ptype();\n\t\t}\n\t\telse if (ptype != null)\n\t\t{\n\t\t\treturn this.editor.graph.cloneCell(ptype);\n\t\t}\n\t\t\n\t\treturn null;\n\t});\n\t\n\t// Defines the function for a click event on the graph\n\t// after this item has been selected in the toolbar\n\tvar clickHandler = mxUtils.bind(this, function(evt, cell)\n\t{\n\t\tif (typeof(insert) == 'function')\n\t\t{\n\t\t\tinsert(this.editor, factory(), evt, cell);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.drop(factory(), evt, cell);\n\t\t}\n\t\t\n\t\tthis.toolbar.resetMode();\n\t\tmxEvent.consume(evt);\n\t});\n\t\n\tvar img = this.toolbar.addMode(title, icon, clickHandler, pressed, null, toggle);\n\t\t\t\t\n\t// Creates a wrapper function that calls the click handler without\n\t// the graph argument\n\tvar dropHandler = function(graph, evt, cell)\n\t{\n\t\tclickHandler(evt, cell);\n\t};\n\t\n\tthis.installDropHandler(img, dropHandler);\n\t\n\treturn img;\n};\n\n/**\n * Function: drop\n * \n * Handles a drop from a toolbar item to the graph. The given vertex\n * represents the new cell to be inserted. This invokes <insert> or\n * <connect> depending on the given target cell.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * target - Optional <mxCell> that represents the drop target.\n */\nmxDefaultToolbar.prototype.drop = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (target == null ||\n\t\tmodel.isEdge(target) ||\n\t\t!this.connectOnDrop ||\n\t\t!graph.isCellConnectable(target))\n\t{\n\t\twhile (target != null &&\n\t\t\t!graph.isValidDropTarget(target, [vertex], evt))\n\t\t{\n\t\t\ttarget = model.getParent(target);\n\t\t}\n\t\t\n\t\tthis.insert(vertex, evt, target);\n\t}\n\telse\n\t{\n\t\tthis.connect(vertex, evt, target);\n\t}\n};\n\n/**\n * Function: insert\n *\n * Handles a drop by inserting the given vertex into the given parent cell\n * or the default parent if no parent is specified.\n * \n * Parameters:\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * parent - Optional <mxCell> that represents the parent.\n */\nmxDefaultToolbar.prototype.insert = function(vertex, evt, target)\n{\n\tvar graph = this.editor.graph;\n\t\n\tif (graph.canImportCell(vertex))\n\t{\n\t\tvar x = mxEvent.getClientX(evt);\n\t\tvar y = mxEvent.getClientY(evt);\n\t\tvar pt = mxUtils.convertPoint(graph.container, x, y);\n\t\t\n\t\t// Splits the target edge or inserts into target group\n\t\tif (graph.isSplitEnabled() &&\n\t\t\tgraph.isSplitTarget(target, [vertex], evt))\n\t\t{\n\t\t\treturn graph.splitEdge(target, [vertex], null, pt.x, pt.y);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn this.editor.addVertex(target, vertex, pt.x, pt.y);\n\t\t}\n\t}\n\t\n\treturn null;\n};\n\n/**\n * Function: connect\n * \n * Handles a drop by connecting the given vertex to the given source cell.\n * \n * vertex - <mxCell> to be inserted.\n * evt - Mouse event that represents the drop.\n * source - Optional <mxCell> that represents the source terminal.\n */\nmxDefaultToolbar.prototype.connect = function(vertex, evt, source)\n{\n\tvar graph = this.editor.graph;\n\tvar model = graph.getModel();\n\t\n\tif (source != null &&\n\t\tgraph.isCellConnectable(vertex) &&\n\t\tgraph.isEdgeValid(null, source, vertex))\n\t{\n\t\tvar edge = null;\n\n\t\tmodel.beginUpdate();\n\t\ttry\n\t\t{\n\t\t\tvar geo = model.getGeometry(source);\n\t\t\tvar g = model.getGeometry(vertex).clone();\n\t\t\t\n\t\t\t// Moves the vertex away from the drop target that will\n\t\t\t// be used as the source for the new connection\n\t\t\tg.x = geo.x + (geo.width - g.width) / 2;\n\t\t\tg.y = geo.y + (geo.height - g.height) / 2;\n\t\t\t\n\t\t\tvar step = this.spacing * graph.gridSize;\n\t\t\tvar dist = model.getDirectedEdgeCount(source, true) * 20;\n\t\t\t\n\t\t\tif (this.editor.horizontalFlow)\n\t\t\t{\n\t\t\t\tg.x += (g.width + geo.width) / 2 + step + dist;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tg.y += (g.height + geo.height) / 2 + step + dist;\n\t\t\t}\n\t\t\t\n\t\t\tvertex.setGeometry(g);\n\t\t\t\n\t\t\t// Fires two add-events with the code below - should be fixed\n\t\t\t// to only fire one add event for both inserts\n\t\t\tvar parent = model.getParent(source);\n\t\t\tgraph.addCell(vertex, parent);\n\t\t\tgraph.constrainChild(vertex);\n\n\t\t\t// Creates the edge using the editor instance and calls\n\t\t\t// the second function that fires an add event\n\t\t\tedge = this.editor.createEdge(source, vertex);\n\t\t\t\n\t\t\tif (model.getGeometry(edge) == null)\n\t\t\t{\n\t\t\t\tvar edgeGeometry = new mxGeometry();\n\t\t\t\tedgeGeometry.relative = true;\n\t\t\t\t\n\t\t\t\tmodel.setGeometry(edge, edgeGeometry);\n\t\t\t}\n\t\t\t\n\t\t\tgraph.addEdge(edge, parent, source, vertex);\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\tmodel.endUpdate();\n\t\t}\n\t\t\n\t\tgraph.setSelectionCells([vertex, edge]);\n\t\tgraph.scrollCellToVisible(vertex);\n\t}\n};\n\n/**\n * Function: installDropHandler\n * \n * Makes the given img draggable using the given function for handling a\n * drop event.\n * \n * Parameters:\n * \n * img - DOM node that represents the image.\n * dropHandler - Function that handles a drop of the image.\n */\nmxDefaultToolbar.prototype.installDropHandler = function (img, dropHandler)\n{\n\tvar sprite = document.createElement('img');\n\tsprite.setAttribute('src', img.getAttribute('src'));\n\n\t// Handles delayed loading of the images\n\tvar loader = mxUtils.bind(this, function(evt)\n\t{\n\t\t// Preview uses the image node with double size. Later this can be\n\t\t// changed to use a separate preview and guides, but for this the\n\t\t// dropHandler must use the additional x- and y-arguments and the\n\t\t// dragsource which makeDraggable returns much be configured to\n\t\t// use guides via mxDragSource.isGuidesEnabled.\n\t\tsprite.style.width = (2 * img.offsetWidth) + 'px';\n\t\tsprite.style.height = (2 * img.offsetHeight) + 'px';\n\n\t\tmxUtils.makeDraggable(img, this.editor.graph, dropHandler,\n\t\t\tsprite);\n\t\tmxEvent.removeListener(sprite, 'load', loader);\n\t});\n\n\tif (mxClient.IS_IE)\n\t{\n\t\tloader();\n\t}\n\telse\n\t{\n\t\tmxEvent.addListener(sprite, 'load', loader);\n\t}\t\n};\n\n/**\n * Function: destroy\n * \n * Destroys the <toolbar> associated with this object and removes all\n * installed listeners. This does normally not need to be called, the\n * <toolbar> is destroyed automatically when the window unloads (in IE) by\n * <mxEditor>.\n */\nmxDefaultToolbar.prototype.destroy = function ()\n{\n\tif (this.resetHandler != null)\n\t{\n\t\tthis.editor.graph.removeListener('dblclick', this.resetHandler);\n\t\tthis.editor.removeListener('escape', this.resetHandler);\n\t\tthis.resetHandler = null;\n\t}\n\t\n\tif (this.toolbar != null)\n\t{\n\t\tthis.toolbar.destroy();\n\t\tthis.toolbar = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxEditor\n *\n * Extends <mxEventSource> to implement a application wrapper for a graph that\n * adds <actions>, I/O using <mxCodec>, auto-layout using <mxLayoutManager>,\n * command history using <undoManager>, and standard dialogs and widgets, eg.\n * properties, help, outline, toolbar, and popupmenu. It also adds <templates>\n * to be used as cells in toolbars, auto-validation using the <validation>\n * flag, attribute cycling using <cycleAttributeValues>, higher-level events\n * such as <root>, and backend integration using <urlPost> and <urlImage>. \n * \n * Actions:\n * \n * Actions are functions stored in the <actions> array under their names. The\n * functions take the <mxEditor> as the first, and an optional <mxCell> as the\n * second argument and are invoked using <execute>. Any additional arguments\n * passed to execute are passed on to the action as-is.\n * \n * A list of built-in actions is available in the <addActions> description.\n * \n * Read/write Diagrams:\n * \n * To read a diagram from an XML string, for example from a textfield within the \n * page, the following code is used:\n * \n * (code)\n * var doc = mxUtils.parseXML(xmlString);\n * var node = doc.documentElement;\n * editor.readGraphModel(node);\n * (end)\n * \n * For reading a diagram from a remote location, use the <open> method.\n * \n * To save diagrams in XML on a server, you can set the <urlPost> variable. \n * This variable will be used in <getUrlPost> to construct a URL for the post \n * request that is issued in the <save> method. The post request contains the \n * XML representation of the diagram as returned by <writeGraphModel> in the \n * xml parameter.\n * \n * On the server side, the post request is processed using standard\n * technologies such as Java Servlets, CGI, .NET or ASP.\n * \n * Here are some examples of processing a post request in various languages.\n * \n * - Java: URLDecoder.decode(request.getParameter(\"xml\"), \"UTF-8\").replace(\"\\n\", \"&#xa;\")\n * \n * Note that the linefeeds should only be replaced if the XML is\n * processed in Java, for example when creating an image, but not\n * if the XML is passed back to the client-side.\n * \n * - .NET: HttpUtility.UrlDecode(context.Request.Params[\"xml\"])\n * - PHP: urldecode($_POST[\"xml\"])\n * \n * Creating images:\n * \n * A backend (Java, PHP or C#) is required for creating images. The\n * distribution contains an example for each backend (ImageHandler.java,\n * ImageHandler.cs and graph.php). More information about using a backend\n * to create images can be found in the readme.html files. Note that the\n * preview is implemented using VML/SVG in the browser and does not require\n * a backend. The backend is only required to creates images (bitmaps).\n * \n * Special characters:\n * \n * Note There are five characters that should always appear in XML content as\n * escapes, so that they do not interact with the syntax of the markup. These\n * are part of the language for all documents based on XML and for HTML.\n * \n * - &lt; (<)\n * - &gt; (>)\n * - &amp; (&)\n * - &quot; (\")\n * - &apos; (')\n * \n * Although it is part of the XML language, &apos; is not defined in HTML.\n * For this reason the XHTML specification recommends instead the use of\n * &#39; if text may be passed to a HTML user agent.\n * \n * If you are having problems with special characters on the server-side then\n * you may want to try the <escapePostData> flag.\n * \n * For converting decimal escape sequences inside strings, a user has provided\n * us with the following function:\n * \n * (code)\n * function html2js(text)\n * {\n *   var entitySearch = /&#[0-9]+;/;\n *   var entity;\n *   \n *   while (entity = entitySearch.exec(text))\n *   {\n *     var charCode = entity[0].substring(2, entity[0].length -1);\n *     text = text.substring(0, entity.index)\n *            + String.fromCharCode(charCode)\n *            + text.substring(entity.index + entity[0].length);\n *   }\n *   \n *   return text;\n * }\n * (end)\n * \n * Otherwise try using hex escape sequences and the built-in unescape function\n * for converting such strings.\n * \n * Local Files:\n * \n * For saving and opening local files, no standardized method exists that\n * works across all browsers. The recommended way of dealing with local files\n * is to create a backend that streams the XML data back to the browser (echo)\n * as an attachment so that a Save-dialog is displayed on the client-side and\n * the file can be saved to the local disk.\n * \n * For example, in PHP the code that does this looks as follows.\n * \n * (code)\n * $xml = stripslashes($_POST[\"xml\"]);\n * header(\"Content-Disposition: attachment; filename=\\\"diagram.xml\\\"\");\n * echo($xml);\n * (end)\n * \n * To open a local file, the file should be uploaded via a form in the browser\n * and then opened from the server in the editor.\n * \n * Cell Properties:\n * \n * The properties displayed in the properties dialog are the attributes and \n * values of the cell's user object, which is an XML node. The XML node is \n * defined in the templates section of the config file.\n * \n * The templates are stored in <mxEditor.templates> and contain cells which\n * are cloned at insertion time to create new vertices by use of drag and\n * drop from the toolbar. Each entry in the toolbar for adding a new vertex\n * must refer to an existing template.\n * \n * In the following example, the task node is a business object and only the \n * mxCell node and its mxGeometry child contain graph information:\n * \n * (code)\n * <Task label=\"Task\" description=\"\">\n *   <mxCell vertex=\"true\">\n *     <mxGeometry as=\"geometry\" width=\"72\" height=\"32\"/>\n *   </mxCell>\n * </Task> \n * (end)\n * \n * The idea is that the XML representation is inverse from the in-memory \n * representation: The outer XML node is the user object and the inner node is \n * the cell. This means the user object of the cell is the Task node with no \n * children for the above example:\n * \n * (code)\n * <Task label=\"Task\" description=\"\"/>\n * (end)\n * \n * The Task node can have any tag name, attributes and child nodes. The \n * <mxCodec> will use the XML hierarchy as the user object, while removing the \n * \"known annotations\", such as the mxCell node. At save-time the cell data \n * will be \"merged\" back into the user object. The user object is only modified \n * via the properties dialog during the lifecycle of the cell.\n * \n * In the default implementation of <createProperties>, the user object's\n * attributes are put into a form for editing. Attributes are changed using\n * the <mxCellAttributeChange> action in the model. The dialog can be replaced \n * by overriding the <createProperties> hook or by replacing the showProperties\n * action in <actions>. Alternatively, the entry in the config file's popupmenu\n * section can be modified to invoke a different action.\n * \n * If you want to displey the properties dialog on a doubleclick, you can set\n * <mxEditor.dblClickAction> to showProperties as follows:\n * \n * (code)\n * editor.dblClickAction = 'showProperties';\n * (end)\n * \n * Popupmenu and Toolbar:\n * \n * The toolbar and popupmenu are typically configured using the respective\n * sections in the config file, that is, the popupmenu is defined as follows:\n * \n * (code)\n * <mxEditor>\n *   <mxDefaultPopupMenu as=\"popupHandler\">\n * \t\t<add as=\"cut\" action=\"cut\" icon=\"images/cut.gif\"/>\n *      ...\n * (end)\n * \n * New entries can be added to the toolbar by inserting an add-node into the\n * above configuration. Existing entries may be removed and changed by\n * modifying or removing the respective entries in the configuration.\n * The configuration is read by the <mxDefaultPopupMenuCodec>, the format of the\n * configuration is explained in <mxDefaultPopupMenu.decode>.\n * \n * The toolbar is defined in the mxDefaultToolbar section. Items can be added\n * and removed in this section.\n * \n * (code)\n * <mxEditor>\n *   <mxDefaultToolbar>\n *     <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n *     <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"/>\n *     ...\n * (end)\n * \n * The format of the configuration is described in\n * <mxDefaultToolbarCodec.decode>.\n * \n * Ids:\n * \n * For the IDs, there is an implicit behaviour in <mxCodec>: It moves the Id\n * from the cell to the user object at encoding time and vice versa at decoding\n * time. For example, if the Task node from above has an id attribute, then\n * the <mxCell.id> of the corresponding cell will have this value. If there\n * is no Id collision in the model, then the cell may be retrieved using this\n * Id with the <mxGraphModel.getCell> function. If there is a collision, a new\n * Id will be created for the cell using <mxGraphModel.createId>. At encoding\n * time, this new Id will replace the value previously stored under the id\n * attribute in the Task node.\n * \n * See <mxEditorCodec>, <mxDefaultToolbarCodec> and <mxDefaultPopupMenuCodec>\n * for information about configuring the editor and user interface.\n * \n * Programmatically inserting cells:\n * \n * For inserting a new cell, say, by clicking a button in the document,\n * the following code can be used. This requires an reference to the editor.\n * \n * (code)\n * var userObject = new Object();\n * var parent = editor.graph.getDefaultParent();\n * var model = editor.graph.model;\n * model.beginUpdate();\n * try\n * {\n *   editor.graph.insertVertex(parent, null, userObject, 20, 20, 80, 30);\n * }\n * finally\n * {\n *   model.endUpdate();\n * }\n * (end)\n * \n * If a template cell from the config file should be inserted, then a clone\n * of the template can be created as follows. The clone is then inserted using\n * the add function instead of addVertex.\n * \n * (code)\n * var template = editor.templates['task'];\n * var clone = editor.graph.model.cloneCell(template);\n * (end)\n * \n * Resources:\n *\n * resources/editor - Language resources for mxEditor\n *\n * Callback: onInit\n *\n * Called from within the constructor. In the callback,\n * \"this\" refers to the editor instance.\n *\n * Cookie: mxgraph=seen\n *\n * Set when the editor is started. Never expires. Use\n * <resetFirstTime> to reset this cookie. This cookie\n * only exists if <onInit> is implemented.\n *\n * Event: mxEvent.OPEN\n *\n * Fires after a file was opened in <open>. The <code>filename</code> property\n * contains the filename that was used. The same value is also available in\n * <filename>.\n *\n * Event: mxEvent.SAVE\n *\n * Fires after the current file was saved in <save>. The <code>url</code>\n * property contains the URL that was used for saving.\n *\n * Event: mxEvent.POST\n * \n * Fires if a successful response was received in <postDiagram>. The\n * <code>request</code> property contains the <mxXmlRequest>, the\n * <code>url</code> and <code>data</code> properties contain the URL and the\n * data that were used in the post request. \n *\n * Event: mxEvent.ROOT\n *\n * Fires when the current root has changed, or when the title of the current\n * root has changed. This event has no properties.\n *\n * Event: mxEvent.BEFORE_ADD_VERTEX\n * \n * Fires before a vertex is added in <addVertex>. The <code>vertex</code>\n * property contains the new vertex and the <code>parent</code> property\n * contains its parent.\n * \n * Event: mxEvent.ADD_VERTEX\n * \n * Fires between begin- and endUpdate in <addVertex>. The <code>vertex</code>\n * property contains the vertex that is being inserted.\n * \n * Event: mxEvent.AFTER_ADD_VERTEX\n * \n * Fires after a vertex was inserted and selected in <addVertex>. The\n * <code>vertex</code> property contains the new vertex.\n * \n * Example:\n * \n * For starting an in-place edit after a new vertex has been added to the\n * graph, the following code can be used.\n * \n * (code)\n * editor.addListener(mxEvent.AFTER_ADD_VERTEX, function(sender, evt)\n * {\n *   var vertex = evt.getProperty('vertex');\n * \n *   if (editor.graph.isCellEditable(vertex))\n *   {\n *   \teditor.graph.startEditingAtCell(vertex);\n *   }\n * });\n * (end)\n * \n * Event: mxEvent.ESCAPE\n * \n * Fires when the escape key is pressed. The <code>event</code> property\n * contains the key event.\n * \n * Constructor: mxEditor\n *\n * Constructs a new editor. This function invokes the <onInit> callback\n * upon completion.\n *\n * Example:\n *\n * (code)\n * var config = mxUtils.load('config/diagrameditor.xml').getDocumentElement();\n * var editor = new mxEditor(config);\n * (end)\n * \n * Parameters:\n * \n * config - Optional XML node that contains the configuration.\n */\nfunction mxEditor(config)\n{\n\tthis.actions = [];\n\tthis.addActions();\n\n\t// Executes the following only if a document has been instanciated.\n\t// That is, don't execute when the editorcodec is setup.\n\tif (document.body != null)\n\t{\n\t\t// Defines instance fields\n\t\tthis.cycleAttributeValues = [];\n\t\tthis.popupHandler = new mxDefaultPopupMenu();\n\t\tthis.undoManager = new mxUndoManager();\n\n\t\t// Creates the graph and toolbar without the containers\n\t\tthis.graph = this.createGraph();\n\t\tthis.toolbar = this.createToolbar();\n\n\t\t// Creates the global keyhandler (requires graph instance)\n\t\tthis.keyHandler = new mxDefaultKeyHandler(this);\n\n\t\t// Configures the editor using the URI\n\t\t// which was passed to the ctor\n\t\tthis.configure(config);\n\t\t\n\t\t// Assigns the swimlaneIndicatorColorAttribute on the graph\n\t\tthis.graph.swimlaneIndicatorColorAttribute = this.cycleAttributeName;\n\n\t\t// Checks if the <onInit> hook has been set\n\t\tif (this.onInit != null)\n\t\t{\n\t\t\t// Invokes the <onInit> hook\n\t\t\tthis.onInit();\n\t\t}\n\t\t\n\t\t// Automatic deallocation of memory\n\t\tif (mxClient.IS_IE)\n\t\t{\n\t\t\tmxEvent.addListener(window, 'unload', mxUtils.bind(this, function()\n\t\t\t{\n\t\t\t\tthis.destroy();\n\t\t\t}));\n\t\t}\n\t}\n};\n\n/**\n * Installs the required language resources at class\n * loading time.\n */\nif (mxLoadResources)\n{\n\tmxResources.add(mxClient.basePath + '/resources/editor');\n}\nelse\n{\n\tmxClient.defaultBundles.push(mxClient.basePath + '/resources/editor');\n}\n\n/**\n * Extends mxEventSource.\n */\nmxEditor.prototype = new mxEventSource();\nmxEditor.prototype.constructor = mxEditor;\n\n/**\n * Group: Controls and Handlers\n */\n\t\n/**\n * Variable: askZoomResource\n * \n * Specifies the resource key for the zoom dialog. If the resource for this\n * key does not exist then the value is used as the error message. Default\n * is 'askZoom'.\n */\nmxEditor.prototype.askZoomResource = (mxClient.language != 'none') ? 'askZoom' : '';\n\t\n/**\n * Variable: lastSavedResource\n * \n * Specifies the resource key for the last saved info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.lastSavedResource = (mxClient.language != 'none') ? 'lastSaved' : '';\n\t\n/**\n * Variable: currentFileResource\n * \n * Specifies the resource key for the current file info. If the resource for\n * this key does not exist then the value is used as the error message.\n * Default is 'lastSaved'.\n */\nmxEditor.prototype.currentFileResource = (mxClient.language != 'none') ? 'currentFile' : '';\n\t\n/**\n * Variable: propertiesResource\n * \n * Specifies the resource key for the properties window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'properties'.\n */\nmxEditor.prototype.propertiesResource = (mxClient.language != 'none') ? 'properties' : '';\n\t\n/**\n * Variable: tasksResource\n * \n * Specifies the resource key for the tasks window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'tasks'.\n */\nmxEditor.prototype.tasksResource = (mxClient.language != 'none') ? 'tasks' : '';\n\t\n/**\n * Variable: helpResource\n * \n * Specifies the resource key for the help window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'help'.\n */\nmxEditor.prototype.helpResource = (mxClient.language != 'none') ? 'help' : '';\n\t\n/**\n * Variable: outlineResource\n * \n * Specifies the resource key for the outline window title. If the\n * resource for this key does not exist then the value is used as the\n * error message. Default is 'outline'.\n */\nmxEditor.prototype.outlineResource = (mxClient.language != 'none') ? 'outline' : '';\n\t\n/**\n * Variable: outline\n * \n * Reference to the <mxWindow> that contains the outline. The <mxOutline>\n * is stored in outline.outline.\n */\nmxEditor.prototype.outline = null;\n\n/**\n * Variable: graph\n *\n * Holds a <mxGraph> for displaying the diagram. The graph\n * is created in <setGraphContainer>.\n */\nmxEditor.prototype.graph = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Holds the render hint used for creating the\n * graph in <setGraphContainer>. See <mxGraph>.\n * Default is null.\n */\nmxEditor.prototype.graphRenderHint = null;\n\n/**\n * Variable: toolbar\n *\n * Holds a <mxDefaultToolbar> for displaying the toolbar. The\n * toolbar is created in <setToolbarContainer>.\n */\nmxEditor.prototype.toolbar = null;\n\n/**\n * Variable: status\n *\n * DOM container that holds the statusbar. Default is null.\n * Use <setStatusContainer> to set this value.\n */\nmxEditor.prototype.status = null;\n\n/**\n * Variable: popupHandler\n *\n * Holds a <mxDefaultPopupMenu> for displaying\n * popupmenus.\n */\nmxEditor.prototype.popupHandler = null;\n\n/**\n * Variable: undoManager\n *\n * Holds an <mxUndoManager> for the command history.\n */\nmxEditor.prototype.undoManager = null;\n\n/**\n * Variable: keyHandler\n *\n * Holds a <mxDefaultKeyHandler> for handling keyboard events.\n * The handler is created in <setGraphContainer>.\n */\nmxEditor.prototype.keyHandler = null;\n\n/**\n * Group: Actions and Options\n */\n\n/**\n * Variable: actions\n *\n * Maps from actionnames to actions, which are functions taking\n * the editor and the cell as arguments. Use <addAction>\n * to add or replace an action and <execute> to execute an action\n * by name, passing the cell to be operated upon as the second\n * argument.\n */\nmxEditor.prototype.actions = null;\n\n/**\n * Variable: dblClickAction\n *\n * Specifies the name of the action to be executed\n * when a cell is double clicked. Default is edit.\n * \n * To handle a singleclick, use the following code.\n * \n * (code)\n * editor.graph.addListener(mxEvent.CLICK, function(sender, evt)\n * {\n *   var e = evt.getProperty('event');\n *   var cell = evt.getProperty('cell');\n * \n *   if (cell != null && !e.isConsumed())\n *   {\n *     // Do something useful with cell...\n *     e.consume();\n *   }\n * });\n * (end)\n */\nmxEditor.prototype.dblClickAction = 'edit';\n\n/**\n * Variable: swimlaneRequired\n * \n * Specifies if new cells must be inserted\n * into an existing swimlane. Otherwise, cells\n * that are not swimlanes can be inserted as\n * top-level cells. Default is false.\n */\nmxEditor.prototype.swimlaneRequired = false;\n\n/**\n * Variable: disableContextMenu\n *\n * Specifies if the context menu should be disabled in the graph container.\n * Default is true.\n */\nmxEditor.prototype.disableContextMenu = true;\n\n/**\n * Group: Templates\n */\n\n/**\n * Variable: insertFunction\n *\n * Specifies the function to be used for inserting new\n * cells into the graph. This is assigned from the\n * <mxDefaultToolbar> if a vertex-tool is clicked.\n */\nmxEditor.prototype.insertFunction = null;\n\n/**\n * Variable: forcedInserting\n *\n * Specifies if a new cell should be inserted on a single\n * click even using <insertFunction> if there is a cell \n * under the mousepointer, otherwise the cell under the \n * mousepointer is selected. Default is false.\n */\nmxEditor.prototype.forcedInserting = false;\n\n/**\n * Variable: templates\n * \n * Maps from names to protoype cells to be used\n * in the toolbar for inserting new cells into\n * the diagram.\n */\nmxEditor.prototype.templates = null;\n\n/**\n * Variable: defaultEdge\n * \n * Prototype edge cell that is used for creating\n * new edges.\n */\nmxEditor.prototype.defaultEdge = null;\n\n/**\n * Variable: defaultEdgeStyle\n * \n * Specifies the edge style to be returned in <getEdgeStyle>.\n * Default is null.\n */\nmxEditor.prototype.defaultEdgeStyle = null;\n\n/**\n * Variable: defaultGroup\n * \n * Prototype group cell that is used for creating\n * new groups.\n */\nmxEditor.prototype.defaultGroup = null;\n\n/**\n * Variable: graphRenderHint\n *\n * Default size for the border of new groups. If null,\n * then then <mxGraph.gridSize> is used. Default is\n * null.\n */\nmxEditor.prototype.groupBorderSize = null;\n\n/**\n * Group: Backend Integration\n */\n\n/**\n * Variable: filename\n *\n * Contains the URL of the last opened file as a string.\n * Default is null.\n */\nmxEditor.prototype.filename = null;\n\n/**\n * Variable: lineFeed\n *\n * Character to be used for encoding linefeeds in <save>. Default is '&#xa;'.\n */\nmxEditor.prototype.linefeed = '&#xa;';\n\n/**\n * Variable: postParameterName\n *\n * Specifies if the name of the post parameter that contains the diagram\n * data in a post request to the server. Default is xml.\n */\nmxEditor.prototype.postParameterName = 'xml';\n\n/**\n * Variable: escapePostData\n *\n * Specifies if the data in the post request for saving a diagram\n * should be converted using encodeURIComponent. Default is true.\n */\nmxEditor.prototype.escapePostData = true;\n\n/**\n * Variable: urlPost\n *\n * Specifies the URL to be used for posting the diagram\n * to a backend in <save>.\n */\nmxEditor.prototype.urlPost = null;\n\n/**\n * Variable: urlImage\n *\n * Specifies the URL to be used for creating a bitmap of\n * the graph in the image action.\n */\nmxEditor.prototype.urlImage = null;\n\n/**\n * Group: Autolayout\n */\n\n/**\n * Variable: horizontalFlow\n *\n * Specifies the direction of the flow\n * in the diagram. This is used in the\n * layout algorithms. Default is false,\n * ie. vertical flow.\n */\nmxEditor.prototype.horizontalFlow = false;\n\n/**\n * Variable: layoutDiagram\n *\n * Specifies if the top-level elements in the\n * diagram should be layed out using a vertical\n * or horizontal stack depending on the setting\n * of <horizontalFlow>. The spacing between the\n * swimlanes is specified by <swimlaneSpacing>.\n * Default is false.\n * \n * If the top-level elements are swimlanes, then\n * the intra-swimlane layout is activated by\n * the <layoutSwimlanes> switch.\n */\nmxEditor.prototype.layoutDiagram = false;\n\n/**\n * Variable: swimlaneSpacing\n *\n * Specifies the spacing between swimlanes if\n * automatic layout is turned on in\n * <layoutDiagram>. Default is 0.\n */\nmxEditor.prototype.swimlaneSpacing = 0;\n\n/**\n * Variable: maintainSwimlanes\n * \n * Specifies if the swimlanes should be kept at the same\n * width or height depending on the setting of\n * <horizontalFlow>.  Default is false.\n * \n * For horizontal flows, all swimlanes\n * have the same height and for vertical flows, all swimlanes\n * have the same width. Furthermore, the swimlanes are\n * automatically \"stacked\" if <layoutDiagram> is true.\n */\nmxEditor.prototype.maintainSwimlanes = false;\n\n/**\n * Variable: layoutSwimlanes\n *\n * Specifies if the children of swimlanes should\n * be layed out, either vertically or horizontally\n * depending on <horizontalFlow>.\n * Default is false.\n */\nmxEditor.prototype.layoutSwimlanes = false;\n\n/**\n * Group: Attribute Cycling\n */\n \n/**\n * Variable: cycleAttributeValues\n * \n * Specifies the attribute values to be cycled when\n * inserting new swimlanes. Default is an empty\n * array.\n */\nmxEditor.prototype.cycleAttributeValues = null;\n\n/**\n * Variable: cycleAttributeIndex\n * \n * Index of the last consumed attribute index. If a new\n * swimlane is inserted, then the <cycleAttributeValues>\n * at this index will be used as the value for\n * <cycleAttributeName>. Default is 0.\n */\nmxEditor.prototype.cycleAttributeIndex = 0;\n\n/**\n * Variable: cycleAttributeName\n * \n * Name of the attribute to be assigned a <cycleAttributeValues>\n * when inserting new swimlanes. Default is fillColor.\n */\nmxEditor.prototype.cycleAttributeName = 'fillColor';\n\n/**\n * Group: Windows\n */\n\n/**\n * Variable: tasks\n * \n * Holds the <mxWindow> created in <showTasks>.\n */\nmxEditor.prototype.tasks = null;\n\n/**\n * Variable: tasksWindowImage\n *\n * Icon for the tasks window.\n */\nmxEditor.prototype.tasksWindowImage = null;\n\n/**\n * Variable: tasksTop\n * \n * Specifies the top coordinate of the tasks window in pixels.\n * Default is 20.\n */\nmxEditor.prototype.tasksTop = 20;\n\n/**\n * Variable: help\n * \n * Holds the <mxWindow> created in <showHelp>.\n */\nmxEditor.prototype.help = null;\n\n/**\n * Variable: helpWindowImage\n *\n * Icon for the help window.\n */\nmxEditor.prototype.helpWindowImage = null;\n\n/**\n * Variable: urlHelp\n *\n * Specifies the URL to be used for the contents of the\n * Online Help window. This is usually specified in the\n * resources file under urlHelp for language-specific\n * online help support.\n */\nmxEditor.prototype.urlHelp = null;\n\n/**\n * Variable: helpWidth\n * \n * Specifies the width of the help window in pixels.\n * Default is 300.\n */\nmxEditor.prototype.helpWidth = 300;\n\t\n/**\n * Variable: helpWidth\n * \n * Specifies the width of the help window in pixels.\n * Default is 260.\n */\nmxEditor.prototype.helpHeight = 260;\n\n/**\n * Variable: propertiesWidth\n * \n * Specifies the width of the properties window in pixels.\n * Default is 240.\n */\nmxEditor.prototype.propertiesWidth = 240;\n\t\t\n/**\n * Variable: propertiesHeight\n * \n * Specifies the height of the properties window in pixels.\n * If no height is specified then the window will be automatically\n * sized to fit its contents. Default is null.\n */\nmxEditor.prototype.propertiesHeight = null;\n\t\t\n/**\n * Variable: movePropertiesDialog\n *\n * Specifies if the properties dialog should be automatically\n * moved near the cell it is displayed for, otherwise the\n * dialog is not moved. This value is only taken into \n * account if the dialog is already visible. Default is false.\n */\nmxEditor.prototype.movePropertiesDialog = false;\n\n/**\n * Variable: validating\n *\n * Specifies if <mxGraph.validateGraph> should automatically be invoked after\n * each change. Default is false.\n */\nmxEditor.prototype.validating = false;\n\n/**\n * Variable: modified\n *\n * True if the graph has been modified since it was last saved.\n */\nmxEditor.prototype.modified = false;\n\n/**\n * Function: isModified\n * \n * Returns <modified>.\n */\nmxEditor.prototype.isModified = function ()\n{\n\treturn this.modified;\n};\n\n/**\n * Function: setModified\n * \n * Sets <modified> to the specified boolean value.\n */\nmxEditor.prototype.setModified = function (value)\n{\n\tthis.modified = value;\n};\n\n/**\n * Function: addActions\n *\n * Adds the built-in actions to the editor instance.\n *\n * save - Saves the graph using <urlPost>.\n * print - Shows the graph in a new print preview window.\n * show - Shows the graph in a new window.\n * exportImage - Shows the graph as a bitmap image using <getUrlImage>.\n * refresh - Refreshes the graph's display.\n * cut - Copies the current selection into the clipboard\n * and removes it from the graph.\n * copy - Copies the current selection into the clipboard.\n * paste - Pastes the clipboard into the graph.\n * delete - Removes the current selection from the graph.\n * group - Puts the current selection into a new group.\n * ungroup - Removes the selected groups and selects the children.\n * undo - Undoes the last change on the graph model.\n * redo - Redoes the last change on the graph model.\n * zoom - Sets the zoom via a dialog.\n * zoomIn - Zooms into the graph.\n * zoomOut - Zooms out of the graph\n * actualSize - Resets the scale and translation on the graph.\n * fit - Changes the scale so that the graph fits into the window.\n * showProperties - Shows the properties dialog.\n * selectAll - Selects all cells.\n * selectNone - Clears the selection.\n * selectVertices - Selects all vertices.\n * selectEdges = Selects all edges.\n * edit - Starts editing the current selection cell.\n * enterGroup - Drills down into the current selection cell.\n * exitGroup - Moves up in the drilling hierachy\n * home - Moves to the topmost parent in the drilling hierarchy\n * selectPrevious - Selects the previous cell.\n * selectNext - Selects the next cell.\n * selectParent - Selects the parent of the selection cell.\n * selectChild - Selects the first child of the selection cell.\n * collapse - Collapses the currently selected cells.\n * expand - Expands the currently selected cells.\n * bold - Toggle bold text style.\n * italic - Toggle italic text style.\n * underline - Toggle underline text style.\n * alignCellsLeft - Aligns the selection cells at the left.\n * alignCellsCenter - Aligns the selection cells in the center.\n * alignCellsRight - Aligns the selection cells at the right.\n * alignCellsTop - Aligns the selection cells at the top.\n * alignCellsMiddle - Aligns the selection cells in the middle.\n * alignCellsBottom - Aligns the selection cells at the bottom.\n * alignFontLeft - Sets the horizontal text alignment to left.\n * alignFontCenter - Sets the horizontal text alignment to center.\n * alignFontRight - Sets the horizontal text alignment to right.\n * alignFontTop - Sets the vertical text alignment to top.\n * alignFontMiddle - Sets the vertical text alignment to middle.\n * alignFontBottom - Sets the vertical text alignment to bottom.\n * toggleTasks - Shows or hides the tasks window.\n * toggleHelp - Shows or hides the help window.\n * toggleOutline - Shows or hides the outline window.\n * toggleConsole - Shows or hides the console window.\n */\nmxEditor.prototype.addActions = function ()\n{\n\tthis.addAction('save', function(editor)\n\t{\n\t\teditor.save();\n\t});\n\t\n\tthis.addAction('print', function(editor)\n\t{\n\t\tvar preview = new mxPrintPreview(editor.graph, 1);\n\t\tpreview.open();\n\t});\n\t\n\tthis.addAction('show', function(editor)\n\t{\n\t\tmxUtils.show(editor.graph, null, 10, 10);\n\t});\n\n\tthis.addAction('exportImage', function(editor)\n\t{\n\t\tvar url = editor.getUrlImage();\n\t\t\n\t\tif (url == null || mxClient.IS_LOCAL)\n\t\t{\n\t\t\teditor.execute('show');\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar node = mxUtils.getViewXml(editor.graph, 1);\n\t\t\tvar xml = mxUtils.getXml(node, '\\n');\n\n\t\t\tmxUtils.submit(url, editor.postParameterName + '=' +\n\t\t\t\tencodeURIComponent(xml), document, '_blank');\n\t\t}\n\t});\n\t\n\tthis.addAction('refresh', function(editor)\n\t{\n\t\teditor.graph.refresh();\n\t});\n\t\n\tthis.addAction('cut', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.cut(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('copy', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.copy(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('paste', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tmxClipboard.paste(editor.graph);\n\t\t}\n\t});\n\t\n\tthis.addAction('delete', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCells();\n\t\t}\n\t});\n\t\n\tthis.addAction('group', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCell(editor.groupCells());\n\t\t}\n\t});\n\t\n\tthis.addAction('ungroup', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setSelectionCells(editor.graph.ungroupCells());\n\t\t}\n\t});\n\t\n\tthis.addAction('removeFromParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.removeCellsFromParent();\n\t\t}\n\t});\n\t\n\tthis.addAction('undo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.undo();\n\t\t}\n\t});\n\t\n\tthis.addAction('redo', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.redo();\n\t\t}\n\t});\n\t\n\tthis.addAction('zoomIn', function(editor)\n\t{\n\t\teditor.graph.zoomIn();\n\t});\n\t\n\tthis.addAction('zoomOut', function(editor)\n\t{\n\t\teditor.graph.zoomOut();\n\t});\n\t\n\tthis.addAction('actualSize', function(editor)\n\t{\n\t\teditor.graph.zoomActual();\n\t});\n\t\n\tthis.addAction('fit', function(editor)\n\t{\n\t\teditor.graph.fit();\n\t});\n\t\n\tthis.addAction('showProperties', function(editor, cell)\n\t{\n\t\teditor.showProperties(cell);\n\t});\n\t\n\tthis.addAction('selectAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectAll();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectNone', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.clearSelection();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectVertices', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectVertices();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectEdges', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectEdges();\n\t\t}\n\t});\n\t\n\tthis.addAction('edit', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled() &&\n\t\t\teditor.graph.isCellEditable(cell))\n\t\t{\n\t\t\teditor.graph.startEditingAtCell(cell);\n\t\t}\n\t});\n\t\n\tthis.addAction('toBack', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(true);\n\t\t}\n\t});\n\t\n\tthis.addAction('toFront', function(editor, cell)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.orderCells(false);\n\t\t}\n\t});\n\t\n\tthis.addAction('enterGroup', function(editor, cell)\n\t{\n\t\teditor.graph.enterGroup(cell);\n\t});\n\t\n\tthis.addAction('exitGroup', function(editor)\n\t{\n\t\teditor.graph.exitGroup();\n\t});\n\t\n\tthis.addAction('home', function(editor)\n\t{\n\t\teditor.graph.home();\n\t});\n\t\n\tthis.addAction('selectPrevious', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectPreviousCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectNext', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectNextCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectParent', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectParentCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('selectChild', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.selectChildCell();\n\t\t}\n\t});\n\t\n\tthis.addAction('collapse', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(true);\n\t\t}\n\t});\n\t\n\tthis.addAction('collapseAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(true, false, cells);\n\t\t}\n\t});\n\t\n\tthis.addAction('expand', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.foldCells(false);\n\t\t}\n\t});\n\t\n\tthis.addAction('expandAll', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\tvar cells = editor.graph.getChildVertices();\n\t\t\teditor.graph.foldCells(false, false, cells);\n\t\t}\n\t});\n\t\n\tthis.addAction('bold', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_BOLD);\n\t\t}\n\t});\n\t\n\tthis.addAction('italic', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_ITALIC);\n\t\t}\n\t});\n\t\n\tthis.addAction('underline', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.toggleCellStyleFlags(\n\t\t\t\tmxConstants.STYLE_FONTSTYLE,\n\t\t\t\tmxConstants.FONT_UNDERLINE);\n\t\t}\n\t});\n\n\tthis.addAction('alignCellsLeft', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_LEFT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignCellsBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.alignCells(mxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontLeft', function(editor)\n\t{\n\t\t\n\t\teditor.graph.setCellStyles(\n\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\tmxConstants.ALIGN_LEFT);\n\t});\n\t\n\tthis.addAction('alignFontCenter', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_CENTER);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontRight', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_ALIGN,\n\t\t\t\tmxConstants.ALIGN_RIGHT);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontTop', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_TOP);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontMiddle', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_MIDDLE);\n\t\t}\n\t});\n\t\n\tthis.addAction('alignFontBottom', function(editor)\n\t{\n\t\tif (editor.graph.isEnabled())\n\t\t{\n\t\t\teditor.graph.setCellStyles(\n\t\t\t\tmxConstants.STYLE_VERTICAL_ALIGN,\n\t\t\t\tmxConstants.ALIGN_BOTTOM);\n\t\t}\n\t});\n\t\n\tthis.addAction('zoom', function(editor)\n\t{\n\t\tvar current = editor.graph.getView().scale*100;\n\t\tvar scale = parseFloat(mxUtils.prompt(\n\t\t\tmxResources.get(editor.askZoomResource) ||\n\t\t\teditor.askZoomResource,\n\t\t\tcurrent))/100;\n\n\t\tif (!isNaN(scale))\n\t\t{\n\t\t\teditor.graph.getView().setScale(scale);\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleTasks', function(editor)\n\t{\n\t\tif (editor.tasks != null)\n\t\t{\n\t\t\teditor.tasks.setVisible(!editor.tasks.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showTasks();\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleHelp', function(editor)\n\t{\n\t\tif (editor.help != null)\n\t\t{\n\t\t\teditor.help.setVisible(!editor.help.isVisible());\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.showHelp();\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleOutline', function(editor)\n\t{\n\t\tif (editor.outline == null)\n\t\t{\n\t\t\teditor.showOutline();\n\t\t}\n\t\telse\n\t\t{\n\t\t\teditor.outline.setVisible(!editor.outline.isVisible());\n\t\t}\n\t});\n\t\n\tthis.addAction('toggleConsole', function(editor)\n\t{\n\t\tmxLog.setVisible(!mxLog.isVisible());\n\t});\n};\n\n/**\n * Function: configure\n *\n * Configures the editor using the specified node. To load the\n * configuration from a given URL the following code can be used to obtain\n * the XML node.\n * \n * (code)\n * var node = mxUtils.load(url).getDocumentElement();\n * (end)\n * \n * Parameters:\n * \n * node - XML node that contains the configuration.\n */\nmxEditor.prototype.configure = function (node)\n{\n\tif (node != null)\n\t{\n\t\t// Creates a decoder for the XML data\n\t\t// and uses it to configure the editor\n\t\tvar dec = new mxCodec(node.ownerDocument);\n\t\tdec.decode(node, this);\n\t\t\n\t\t// Resets the counters, modified state and\n\t\t// command history\n\t\tthis.resetHistory();\n\t}\n};\n\n/**\n * Function: resetFirstTime\n * \n * Resets the cookie that is used to remember if the editor has already\n * been used.\n */\nmxEditor.prototype.resetFirstTime = function ()\n{\n\tdocument.cookie =\n\t\t'mxgraph=seen; expires=Fri, 27 Jul 2001 02:47:11 UTC; path=/';\n};\n\n/**\n * Function: resetHistory\n * \n * Resets the command history, modified state and counters.\n */\nmxEditor.prototype.resetHistory = function ()\n{\n\tthis.lastSnapshot = new Date().getTime();\n\tthis.undoManager.clear();\n\tthis.ignoredChanges = 0;\n\tthis.setModified(false);\n};\n\n/**\n * Function: addAction\n * \n * Binds the specified actionname to the specified function.\n * \n * Parameters:\n * \n * actionname - String that specifies the name of the action\n * to be added.\n * funct - Function that implements the new action. The first\n * argument of the function is the editor it is used\n * with, the second argument is the cell it operates\n * upon.\n * \n * Example:\n * (code)\n * editor.addAction('test', function(editor, cell)\n * {\n * \t\tmxUtils.alert(\"test \"+cell);\n * });\n * (end)\n */\nmxEditor.prototype.addAction = function (actionname, funct)\n{\n\tthis.actions[actionname] = funct;\n};\n\n/**\n * Function: execute\n * \n * Executes the function with the given name in <actions> passing the\n * editor instance and given cell as the first and second argument. All\n * additional arguments are passed to the action as well. This method\n * contains a try-catch block and displays an error message if an action\n * causes an exception. The exception is re-thrown after the error\n * message was displayed.\n * \n * Example:\n * \n * (code)\n * editor.execute(\"showProperties\", cell);\n * (end)\n */\nmxEditor.prototype.execute = function (actionname, cell, evt)\n{\n\tvar action = this.actions[actionname];\n\t\n\tif (action != null)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Creates the array of arguments by replacing the actionname\n\t\t\t// with the editor instance in the args of this function\n\t\t\tvar args = arguments;\n\t\t\targs[0] = this;\n\t\t\t\n\t\t\t// Invokes the function on the editor using the args\n\t\t\taction.apply(this, args);\n\t\t}\n\t\tcatch (e)\n\t\t{\n\t\t\tmxUtils.error('Cannot execute ' + actionname +\n\t\t\t\t': ' + e.message, 280, true);\n\t\t\t\n\t\t\tthrow e;\n\t\t}\n\t}\n\telse\n\t{\n\t\tmxUtils.error('Cannot find action '+actionname, 280, true);\n\t}\n};\n\n/**\n * Function: addTemplate\n * \n * Adds the specified template under the given name in <templates>.\n */\nmxEditor.prototype.addTemplate = function (name, template)\n{\n\tthis.templates[name] = template;\n};\n\n/**\n * Function: getTemplate\n * \n * Returns the template for the given name.\n */\nmxEditor.prototype.getTemplate = function (name)\n{\n\treturn this.templates[name];\n};\n\n/**\n * Function: createGraph\n * \n * Creates the <graph> for the editor. The graph is created with no\n * container and is initialized from <setGraphContainer>.\n */\nmxEditor.prototype.createGraph = function ()\n{\n\tvar graph = new mxGraph(null, null, this.graphRenderHint);\n\t\n\t// Enables rubberband, tooltips, panning\n\tgraph.setTooltips(true);\n\tgraph.setPanning(true);\n\n\t// Overrides the dblclick method on the graph to\n\t// invoke the dblClickAction for a cell and reset\n\t// the selection tool in the toolbar\n\tthis.installDblClickHandler(graph);\n\t\n\t// Installs the command history\n\tthis.installUndoHandler(graph);\n\n\t// Installs the handlers for the root event\n\tthis.installDrillHandler(graph);\n\t\n\t// Installs the handler for validation\n\tthis.installChangeHandler(graph);\n\n\t// Installs the handler for calling the\n\t// insert function and consume the\n\t// event if an insert function is defined\n\tthis.installInsertHandler(graph);\n\n\t// Redirects the function for creating the\n\t// popupmenu items\n\tgraph.popupMenuHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(menu, cell, evt)\n\t\t{\n\t\t\treturn this.createPopupMenu(menu, cell, evt);\n\t\t});\n\n\t// Redirects the function for creating\n\t// new connections in the diagram\n\tgraph.connectionHandler.factoryMethod =\n\t\tmxUtils.bind(this, function(source, target)\n\t\t{\n\t\t\treturn this.createEdge(source, target);\n\t\t});\n\t\n\t// Maintains swimlanes and installs autolayout\n\tthis.createSwimlaneManager(graph);\n\tthis.createLayoutManager(graph);\n\t\n\treturn graph;\n};\n\n/**\n * Function: createSwimlaneManager\n * \n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.createSwimlaneManager = function (graph)\n{\n\tvar swimlaneMgr = new mxSwimlaneManager(graph, false);\n\n\tswimlaneMgr.isHorizontal = mxUtils.bind(this, function()\n\t{\n\t\treturn this.horizontalFlow;\n\t});\n\t\n\tswimlaneMgr.isEnabled = mxUtils.bind(this, function()\n\t{\n\t\treturn this.maintainSwimlanes;\n\t});\n\t\n\treturn swimlaneMgr;\n};\n\n/**\n * Function: createLayoutManager\n * \n * Creates a layout manager for the swimlane and diagram layouts, that\n * is, the locally defined inter- and intraswimlane layouts.\n */\nmxEditor.prototype.createLayoutManager = function (graph)\n{\n\tvar layoutMgr = new mxLayoutManager(graph);\n\t\n\tvar self = this; // closure\n\tlayoutMgr.getLayout = function(cell)\n\t{\n\t\tvar layout = null;\n\t\tvar model = self.graph.getModel();\n\t\t\n\t\tif (model.getParent(cell) != null)\n\t\t{\n\t\t\t// Executes the swimlane layout if a child of\n\t\t\t// a swimlane has been changed. The layout is\n\t\t\t// lazy created in createSwimlaneLayout.\n\t\t\tif (self.layoutSwimlanes &&\n\t\t\t\tgraph.isSwimlane(cell))\n\t\t\t{\n\t\t\t\tif (self.swimlaneLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.swimlaneLayout = self.createSwimlaneLayout();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlayout = self.swimlaneLayout;\n\t\t\t}\n\t\t\t\n\t\t\t// Executes the diagram layout if the modified\n\t\t\t// cell is a top-level cell. The layout is\n\t\t\t// lazy created in createDiagramLayout.\n\t\t\telse if (self.layoutDiagram &&\n\t\t\t\t(graph.isValidRoot(cell) ||\n\t\t\t\tmodel.getParent(model.getParent(cell)) == null))\n\t\t\t{\n\t\t\t\tif (self.diagramLayout == null)\n\t\t\t\t{\n\t\t\t\t\tself.diagramLayout = self.createDiagramLayout();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlayout = self.diagramLayout;\n\t\t\t}\n\t\t}\n\t\t\t\n\t\treturn layout;\n\t};\n\t\n\treturn layoutMgr;\n};\n\n/**\n * Function: setGraphContainer\n * \n * Sets the graph's container using <mxGraph.init>.\n */\nmxEditor.prototype.setGraphContainer = function (container)\n{\n\tif (this.graph.container == null)\n\t{\n\t\t// Creates the graph instance inside the given container and render hint\n\t\t//this.graph = new mxGraph(container, null, this.graphRenderHint);\n\t\tthis.graph.init(container);\n\n\t\t// Install rubberband selection as the last\n\t\t// action handler in the chain\n\t\tthis.rubberband = new mxRubberband(this.graph);\n\n\t\t// Disables the context menu\n\t\tif (this.disableContextMenu)\n\t\t{\n\t\t\tmxEvent.disableContextMenu(container);\n\t\t}\n\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: installDblClickHandler\n * \n * Overrides <mxGraph.dblClick> to invoke <dblClickAction>\n * on a cell and reset the selection tool in the toolbar.\n */\nmxEditor.prototype.installDblClickHandler = function (graph)\n{\n\t// Installs a listener for double click events\n\tgraph.addListener(mxEvent.DOUBLE_CLICK,\n\t\tmxUtils.bind(this, function(sender, evt)\n\t\t{\n\t\t\tvar cell = evt.getProperty('cell');\n\t\t\t\n\t\t\tif (cell != null &&\n\t\t\t\tgraph.isEnabled() &&\n\t\t\t\tthis.dblClickAction != null)\n\t\t\t{\n\t\t\t\tthis.execute(this.dblClickAction, cell);\n\t\t\t\tevt.consume();\n\t\t\t}\n\t\t})\n\t);\n};\n\t\t\n/**\n * Function: installUndoHandler\n * \n * Adds the <undoManager> to the graph model and the view.\n */\nmxEditor.prototype.installUndoHandler = function (graph)\n{\t\t\t\t\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\tvar edit = evt.getProperty('edit');\n\t\tthis.undoManager.undoableEditHappened(edit);\n\t});\n\t\n\tgraph.getModel().addListener(mxEvent.UNDO, listener);\n\tgraph.getView().addListener(mxEvent.UNDO, listener);\n\n\t// Keeps the selection state in sync\n\tvar undoHandler = function(sender, evt)\n\t{\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\tgraph.setSelectionCells(graph.getSelectionCellsForChanges(changes));\n\t};\n\t\n\tthis.undoManager.addListener(mxEvent.UNDO, undoHandler);\n\tthis.undoManager.addListener(mxEvent.REDO, undoHandler);\n};\n\t\t\n/**\n * Function: installDrillHandler\n * \n * Installs listeners for dispatching the <root> event.\n */\nmxEditor.prototype.installDrillHandler = function (graph)\n{\t\t\t\t\n\tvar listener = mxUtils.bind(this, function(sender)\n\t{\n\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t});\n\t\n\tgraph.getView().addListener(mxEvent.DOWN, listener);\n\tgraph.getView().addListener(mxEvent.UP, listener);\n};\n\n/**\n * Function: installChangeHandler\n * \n * Installs the listeners required to automatically validate\n * the graph. On each change of the root, this implementation\n * fires a <root> event.\n */\nmxEditor.prototype.installChangeHandler = function (graph)\n{\n\tvar listener = mxUtils.bind(this, function(sender, evt)\n\t{\n\t\t// Updates the modified state\n\t\tthis.setModified(true);\n\n\t\t// Automatically validates the graph\n\t\t// after each change\n\t\tif (this.validating == true)\n\t\t{\n\t\t\tgraph.validateGraph();\n\t\t}\n\n\t\t// Checks if the root has been changed\n\t\tvar changes = evt.getProperty('edit').changes;\n\t\t\n\t\tfor (var i = 0; i < changes.length; i++)\n\t\t{\n\t\t\tvar change = changes[i];\n\t\t\t\n\t\t\tif (change instanceof mxRootChange ||\n\t\t\t\t(change instanceof mxValueChange &&\n\t\t\t\tchange.cell == this.graph.model.root) ||\n\t\t\t\t(change instanceof mxCellAttributeChange &&\n\t\t\t\tchange.cell == this.graph.model.root))\n\t\t\t{\n\t\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ROOT));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\t\n\tgraph.getModel().addListener(mxEvent.CHANGE, listener);\n};\n\n/**\n * Function: installInsertHandler\n * \n * Installs the handler for invoking <insertFunction> if\n * one is defined.\n */\nmxEditor.prototype.installInsertHandler = function (graph)\n{\n\tvar self = this; // closure\n\tvar insertHandler =\n\t{\n\t\tmouseDown: function(sender, me)\n\t\t{\n\t\t\tif (self.insertFunction != null &&\n\t\t\t\t!me.isPopupTrigger() &&\n\t\t\t\t(self.forcedInserting ||\n\t\t\t\tme.getState() == null))\n\t\t\t{\n\t\t\t\tself.graph.clearSelection();\n\t\t\t\tself.insertFunction(me.getEvent(), me.getCell());\n\n\t\t\t\t// Consumes the rest of the events\n\t\t\t\t// for this gesture (down, move, up)\n\t\t\t\tthis.isActive = true;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\t\t\n\t\tmouseMove: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t},\n\t\t\n\t\tmouseUp: function(sender, me)\n\t\t{\n\t\t\tif (this.isActive)\n\t\t\t{\n\t\t\t\tthis.isActive = false;\n\t\t\t\tme.consume();\n\t\t\t}\n\t\t}\n\t};\n\t\n\tgraph.addMouseListener(insertHandler);\n};\n\n/**\n * Function: createDiagramLayout\n * \n * Creates the layout instance used to layout the\n * swimlanes in the diagram.\n */\nmxEditor.prototype.createDiagramLayout = function ()\n{\n\tvar gs = this.graph.gridSize;\n\tvar layout = new mxStackLayout(this.graph, !this.horizontalFlow,\n\t\t this.swimlaneSpacing, 2*gs, 2*gs);\n\t\n\t// Overrides isIgnored to only take into account swimlanes\n\tlayout.isVertexIgnored = function(cell)\n\t{\n\t\treturn !layout.graph.isSwimlane(cell);\n\t};\n\t\n\treturn layout;\n};\n\n/**\n * Function: createSwimlaneLayout\n * \n * Creates the layout instance used to layout the\n * children of each swimlane.\n */\nmxEditor.prototype.createSwimlaneLayout = function ()\n{\n\treturn new mxCompactTreeLayout(this.graph, this.horizontalFlow);\n};\n\n/**\n * Function: createToolbar\n * \n * Creates the <toolbar> with no container.\n */\nmxEditor.prototype.createToolbar = function ()\n{\n\treturn new mxDefaultToolbar(null, this);\n};\n\n/**\n * Function: setToolbarContainer\n * \n * Initializes the toolbar for the given container.\n */\nmxEditor.prototype.setToolbarContainer = function (container)\n{\n\tthis.toolbar.init(container);\n\t\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: setStatusContainer\n * \n * Creates the <status> using the specified container.\n * \n * This implementation adds listeners in the editor to \n * display the last saved time and the current filename \n * in the status bar.\n * \n * Parameters:\n * \n * container - DOM node that will contain the statusbar.\n */\nmxEditor.prototype.setStatusContainer = function (container)\n{\n\tif (this.status == null)\n\t{\n\t\tthis.status = container;\n\t\t\n\t\t// Prints the last saved time in the status bar\n\t\t// when files are saved\n\t\tthis.addListener(mxEvent.SAVE, mxUtils.bind(this, function()\n\t\t{\n\t\t\tvar tstamp = new Date().toLocaleString();\n\t\t\tthis.setStatus((mxResources.get(this.lastSavedResource) ||\n\t\t\t\tthis.lastSavedResource)+': '+tstamp);\n\t\t}));\n\t\t\n\t\t// Updates the statusbar to display the filename\n\t\t// when new files are opened\n\t\tthis.addListener(mxEvent.OPEN, mxUtils.bind(this, function()\n\t\t{\n\t\t\tthis.setStatus((mxResources.get(this.currentFileResource) ||\n\t\t\t\tthis.currentFileResource)+': '+this.filename);\n\t\t}));\n\t\t\n\t\t// Workaround for stylesheet directives in IE\n\t\tif (mxClient.IS_QUIRKS)\n\t\t{\n\t\t\tnew mxDivResizer(container);\n\t\t}\n\t}\n};\n\n/**\n * Function: setStatus\n * \n * Display the specified message in the status bar.\n * \n * Parameters:\n * \n * message - String the specified the message to\n * be displayed.\n */\nmxEditor.prototype.setStatus = function (message)\n{\n\tif (this.status != null && message != null)\n\t{\n\t\tthis.status.innerHTML = message;\n\t}\n};\n\n/**\n * Function: setTitleContainer\n * \n * Creates a listener to update the inner HTML of the\n * specified DOM node with the value of <getTitle>.\n * \n * Parameters:\n * \n * container - DOM node that will contain the title.\n */\nmxEditor.prototype.setTitleContainer = function (container)\n{\n\tthis.addListener(mxEvent.ROOT, mxUtils.bind(this, function(sender)\n\t{\n\t\tcontainer.innerHTML = this.getTitle();\n\t}));\n\n\t// Workaround for stylesheet directives in IE\n\tif (mxClient.IS_QUIRKS)\n\t{\n\t\tnew mxDivResizer(container);\n\t}\n};\n\n/**\n * Function: treeLayout\n * \n * Executes a vertical or horizontal compact tree layout\n * using the specified cell as an argument. The cell may\n * either be a group or the root of a tree.\n * \n * Parameters:\n * \n * cell - <mxCell> to use in the compact tree layout.\n * horizontal - Optional boolean to specify the tree's\n * orientation. Default is true.\n */\nmxEditor.prototype.treeLayout = function (cell, horizontal)\n{\n\tif (cell != null)\n\t{\n\t\tvar layout = new mxCompactTreeLayout(this.graph, horizontal);\n\t\tlayout.execute(cell);\n\t}\n};\n\n/**\n * Function: getTitle\n * \n * Returns the string value for the current root of the\n * diagram.\n */\nmxEditor.prototype.getTitle = function ()\n{\n\tvar title = '';\n\tvar graph = this.graph;\n\tvar cell = graph.getCurrentRoot();\n\t\n\twhile (cell != null &&\n\t\t   graph.getModel().getParent(\n\t\t\t\tgraph.getModel().getParent(cell)) != null)\n\t{\n\t\t// Append each label of a valid root\n\t\tif (graph.isValidRoot(cell))\n\t\t{\n\t\t\ttitle = ' > ' +\n\t\t\tgraph.convertValueToString(cell) + title;\n\t\t}\n\t\t\n\t\tcell = graph.getModel().getParent(cell);\n\t}\n\t\n\tvar prefix = this.getRootTitle();\n\t\n\treturn prefix + title;\n};\n\n/**\n * Function: getRootTitle\n * \n * Returns the string value of the root cell in\n * <mxGraph.model>.\n */\nmxEditor.prototype.getRootTitle = function ()\n{\n\tvar root = this.graph.getModel().getRoot();\n\treturn this.graph.convertValueToString(root);\n};\n\n/**\n * Function: undo\n * \n * Undo the last change in <graph>.\n */\nmxEditor.prototype.undo = function ()\n{\n\tthis.undoManager.undo();\n};\n\n/**\n * Function: redo\n * \n * Redo the last change in <graph>.\n */\nmxEditor.prototype.redo = function ()\n{\n\tthis.undoManager.redo();\n};\n\n/**\n * Function: groupCells\n * \n * Invokes <createGroup> to create a new group cell and the invokes\n * <mxGraph.groupCells>, using the grid size of the graph as the spacing\n * in the group's content area.\n */\nmxEditor.prototype.groupCells = function ()\n{\n\tvar border = (this.groupBorderSize != null) ?\n\t\tthis.groupBorderSize :\n\t\tthis.graph.gridSize;\n\treturn this.graph.groupCells(this.createGroup(), border);\n};\n\n/**\n * Function: createGroup\n * \n * Creates and returns a clone of <defaultGroup> to be used\n * as a new group cell in <group>.\n */\nmxEditor.prototype.createGroup = function ()\n{\n\tvar model = this.graph.getModel();\n\t\n\treturn model.cloneCell(this.defaultGroup);\n};\n\n/**\n * Function: open\n * \n * Opens the specified file synchronously and parses it using\n * <readGraphModel>. It updates <filename> and fires an <open>-event after\n * the file has been opened. Exceptions should be handled as follows:\n * \n * (code)\n * try\n * {\n *   editor.open(filename);\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot open ' + filename +\n *     ': ' + e.message, 280, true);\n * }\n * (end)\n *\n * Parameters:\n * \n * filename - URL of the file to be opened.\n */\nmxEditor.prototype.open = function (filename)\n{\n\tif (filename != null)\n\t{\n\t\tvar xml = mxUtils.load(filename).getXml();\n\t\tthis.readGraphModel(xml.documentElement);\n\t\tthis.filename = filename;\n\t\t\n\t\tthis.fireEvent(new mxEventObject(mxEvent.OPEN, 'filename', filename));\n\t}\n};\n\n/**\n * Function: readGraphModel\n * \n * Reads the specified XML node into the existing graph model and resets\n * the command history and modified state.\n */\nmxEditor.prototype.readGraphModel = function (node)\n{\n\tvar dec = new mxCodec(node.ownerDocument);\n\tdec.decode(node, this.graph.getModel());\n\tthis.resetHistory();\n};\n\n/**\n * Function: save\n * \n * Posts the string returned by <writeGraphModel> to the given URL or the\n * URL returned by <getUrlPost>. The actual posting is carried out by\n * <postDiagram>. If the URL is null then the resulting XML will be\n * displayed using <mxUtils.popup>. Exceptions should be handled as\n * follows:\n * \n * (code)\n * try\n * {\n *   editor.save();\n * }\n * catch (e)\n * {\n *   mxUtils.error('Cannot save : ' + e.message, 280, true);\n * }\n * (end)\n */\nmxEditor.prototype.save = function (url, linefeed)\n{\n\t// Gets the URL to post the data to\n\turl = url || this.getUrlPost();\n\n\t// Posts the data if the URL is not empty\n\tif (url != null && url.length > 0)\n\t{\n\t\tvar data = this.writeGraphModel(linefeed);\n\t\tthis.postDiagram(url, data);\n\t\t\n\t\t// Resets the modified flag\n\t\tthis.setModified(false);\n\t}\n\t\n\t// Dispatches a save event\n\tthis.fireEvent(new mxEventObject(mxEvent.SAVE, 'url', url));\n};\n\n/**\n * Function: postDiagram\n * \n * Hook for subclassers to override the posting of a diagram\n * represented by the given node to the given URL. This fires\n * an asynchronous <post> event if the diagram has been posted.\n * \n * Example:\n * \n * To replace the diagram with the diagram in the response, use the\n * following code.\n * \n * (code)\n * editor.addListener(mxEvent.POST, function(sender, evt)\n * {\n *   // Process response (replace diagram)\n *   var req = evt.getProperty('request');\n *   var root = req.getDocumentElement();\n *   editor.graph.readGraphModel(root)\n * });\n * (end)\n */\nmxEditor.prototype.postDiagram = function (url, data)\n{\n\tif (this.escapePostData)\n\t{\n\t\tdata = encodeURIComponent(data);\n\t}\n\n\tmxUtils.post(url, this.postParameterName+'='+data,\n\t\tmxUtils.bind(this, function(req)\n\t\t{\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.POST,\n\t\t\t\t'request', req, 'url', url, 'data', data));\n\t\t})\n\t);\n};\n\n/**\n * Function: writeGraphModel\n * \n * Hook to create the string representation of the diagram. The default\n * implementation uses an <mxCodec> to encode the graph model as\n * follows:\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(this.graph.getModel());\n * return mxUtils.getXml(node, this.linefeed);\n * (end)\n * \n * Parameters:\n * \n * linefeed - Optional character to be used as the linefeed. Default is\n * <linefeed>.\n */\nmxEditor.prototype.writeGraphModel = function (linefeed)\n{\n\tlinefeed = (linefeed != null) ? linefeed : this.linefeed;\n\tvar enc = new mxCodec();\n\tvar node = enc.encode(this.graph.getModel());\n\n\treturn mxUtils.getXml(node, linefeed);\n};\n\n/**\n * Function: getUrlPost\n * \n * Returns the URL to post the diagram to. This is used\n * in <save>. The default implementation returns <urlPost>,\n * adding <code>?draft=true</code>.\n */\nmxEditor.prototype.getUrlPost = function ()\n{\n\treturn this.urlPost;\n};\n\n/**\n * Function: getUrlImage\n * \n * Returns the URL to create the image with. This is typically\n * the URL of a backend which accepts an XML representation\n * of a graph view to create an image. The function is used\n * in the image action to create an image. This implementation\n * returns <urlImage>.\n */\nmxEditor.prototype.getUrlImage = function ()\n{\n\treturn this.urlImage;\n};\n\n/**\n * Function: swapStyles\n * \n * Swaps the styles for the given names in the graph's\n * stylesheet and refreshes the graph.\n */\nmxEditor.prototype.swapStyles = function (first, second)\n{\n\tvar style = this.graph.getStylesheet().styles[second];\n\tthis.graph.getView().getStylesheet().putCellStyle(\n\t\tsecond, this.graph.getStylesheet().styles[first]);\n\tthis.graph.getStylesheet().putCellStyle(first, style);\n\tthis.graph.refresh();\n};\n\n/**\n * Function: showProperties\n * \n * Creates and shows the properties dialog for the given\n * cell. The content area of the dialog is created using\n * <createProperties>.\n */\nmxEditor.prototype.showProperties = function (cell)\n{\n\tcell = cell || this.graph.getSelectionCell();\n\t\n\t// Uses the root node for the properties dialog\n\t// if not cell was passed in and no cell is\n\t// selected\n\tif (cell == null)\n\t{\n\t\tcell = this.graph.getCurrentRoot();\n\t\t\n\t\tif (cell == null)\n\t\t{\n\t\t\tcell = this.graph.getModel().getRoot();\n\t\t}\n\t}\n\t\n\tif (cell != null)\n\t{\n\t\t// Makes sure there is no in-place editor in the\n\t\t// graph and computes the location of the dialog\n\t\tthis.graph.stopEditing(true);\n\n\t\tvar offset = mxUtils.getOffset(this.graph.container);\n\t\tvar x = offset.x+10;\n\t\tvar y = offset.y;\n\t\t\n\t\t// Avoids moving the dialog if it is alredy open\n\t\tif (this.properties != null && !this.movePropertiesDialog)\n\t\t{\n\t\t\tx = this.properties.getX();\n\t\t\ty = this.properties.getY();\n\t\t}\n\t\t\n\t\t// Places the dialog near the cell for which it\n\t\t// displays the properties\n\t\telse\n\t\t{\n\t\t\tvar bounds = this.graph.getCellBounds(cell);\n\t\t\t\n\t\t\tif (bounds != null)\n\t\t\t{\n\t\t\t\tx += bounds.x+Math.min(200, bounds.width);\n\t\t\t\ty += bounds.y;\t\t\t\t\n\t\t\t}\t\t\t\n\t\t}\n\t\t\n\t\t// Hides the existing properties dialog and creates a new one with the\n\t\t// contents created in the hook method\n\t\tthis.hideProperties();\n\t\tvar node = this.createProperties(cell);\n\t\t\n\t\tif (node != null)\n\t\t{\n\t\t\t// Displays the contents in a window and stores a reference to the\n\t\t\t// window for later hiding of the window\n\t\t\tthis.properties = new mxWindow(mxResources.get(this.propertiesResource) ||\n\t\t\t\tthis.propertiesResource, node, x, y, this.propertiesWidth, this.propertiesHeight, false);\n\t\t\tthis.properties.setVisible(true);\n\t\t}\n\t}\n};\n\n/**\n * Function: isPropertiesVisible\n * \n * Returns true if the properties dialog is currently visible.\n */\nmxEditor.prototype.isPropertiesVisible = function ()\n{\n\treturn this.properties != null;\n};\n\n/**\n * Function: createProperties\n * \n * Creates and returns the DOM node that represents the contents\n * of the properties dialog for the given cell. This implementation\n * works for user objects that are XML nodes and display all the\n * node attributes in a form.\n */\nmxEditor.prototype.createProperties = function (cell)\n{\n\tvar model = this.graph.getModel();\n\tvar value = model.getValue(cell);\n\t\n\tif (mxUtils.isNode(value))\n\t{\n\t\t// Creates a form for the user object inside\n\t\t// the cell\n\t\tvar form = new mxForm('properties');\n\t\t\n\t\t// Adds a readonly field for the cell id\n\t\tvar id = form.addText('ID', cell.getId());\n\t\tid.setAttribute('readonly', 'true');\n\n\t\tvar geo = null;\n\t\tvar yField = null;\n\t\tvar xField = null;\n\t\tvar widthField = null;\n\t\tvar heightField = null;\n\n\t\t// Adds fields for the location and size\n\t\tif (model.isVertex(cell))\n\t\t{\n\t\t\tgeo = model.getGeometry(cell);\n\t\t\t\n\t\t\tif (geo != null)\n\t\t\t{\n\t\t\t\tyField = form.addText('top', geo.y);\n\t\t\t\txField = form.addText('left', geo.x);\n\t\t\t\twidthField = form.addText('width', geo.width);\n\t\t\t\theightField = form.addText('height', geo.height);\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Adds a field for the cell style\t\t\t\n\t\tvar tmp = model.getStyle(cell);\n\t\tvar style = form.addText('Style', tmp || '');\n\t\t\n\t\t// Creates textareas for each attribute of the\n\t\t// user object within the cell\n\t\tvar attrs = value.attributes;\n\t\tvar texts = [];\n\t\t\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\t// Creates a textarea with more lines for\n\t\t\t// the cell label\n\t\t\tvar val = attrs[i].value;\n\t\t\ttexts[i] = form.addTextarea(attrs[i].nodeName, val,\n\t\t\t\t(attrs[i].nodeName == 'label') ? 4 : 2);\n\t\t}\n\t\t\n\t\t// Adds an OK and Cancel button to the dialog\n\t\t// contents and implements the respective\n\t\t// actions below\n\t\t\n\t\t// Defines the function to be executed when the\n\t\t// OK button is pressed in the dialog\n\t\tvar okFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t\t\n\t\t\t// Supports undo for the changes on the underlying\n\t\t\t// XML structure / XML node attribute changes.\n\t\t\tmodel.beginUpdate();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (geo != null)\n\t\t\t\t{\n\t\t\t\t\tgeo = geo.clone();\n\t\t\t\t\t\n\t\t\t\t\tgeo.x = parseFloat(xField.value);\n\t\t\t\t\tgeo.y = parseFloat(yField.value);\n\t\t\t\t\tgeo.width = parseFloat(widthField.value);\n\t\t\t\t\tgeo.height = parseFloat(heightField.value);\n\t\t\t\t\t\n\t\t\t\t\tmodel.setGeometry(cell, geo);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Applies the style\n\t\t\t\tif (style.value.length > 0)\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, style.value);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tmodel.setStyle(cell, null);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Creates an undoable change for each\n\t\t\t\t// attribute and executes it using the\n\t\t\t\t// model, which will also make the change\n\t\t\t\t// part of the current transaction\n\t\t\t\tfor (var i=0; i<attrs.length; i++)\n\t\t\t\t{\n\t\t\t\t\tvar edit = new mxCellAttributeChange(\n\t\t\t\t\t\tcell, attrs[i].nodeName,\n\t\t\t\t\t\ttexts[i].value);\n\t\t\t\t\tmodel.execute(edit);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Checks if the graph wants cells to \n\t\t\t\t// be automatically sized and updates\n\t\t\t\t// the size as an undoable step if\n\t\t\t\t// the feature is enabled\n\t\t\t\tif (this.graph.isAutoSizeCell(cell))\n\t\t\t\t{\n\t\t\t\t\tthis.graph.updateCellSize(cell);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tmodel.endUpdate();\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Defines the function to be executed when the\n\t\t// Cancel button is pressed in the dialog\n\t\tvar cancelFunction = mxUtils.bind(this, function()\n\t\t{\n\t\t\t// Hides the dialog\n\t\t\tthis.hideProperties();\n\t\t});\n\t\t\n\t\tform.addButtons(okFunction, cancelFunction);\n\t\t\n\t\treturn form.table;\n\t}\n\n\treturn null;\n};\n\n/**\n * Function: hideProperties\n * \n * Hides the properties dialog.\n */\nmxEditor.prototype.hideProperties = function ()\n{\n\tif (this.properties != null)\n\t{\n\t\tthis.properties.destroy();\n\t\tthis.properties = null;\n\t}\n};\n\n/**\n * Function: showTasks\n * \n * Shows the tasks window. The tasks window is created using <createTasks>. The\n * default width of the window is 200 pixels, the y-coordinate of the location\n * can be specifies in <tasksTop> and the x-coordinate is right aligned with a\n * 20 pixel offset from the right border. To change the location of the tasks\n * window, the following code can be used:\n * \n * (code)\n * var oldShowTasks = mxEditor.prototype.showTasks;\n * mxEditor.prototype.showTasks = function()\n * {\n *   oldShowTasks.apply(this, arguments); // \"supercall\"\n *   \n *   if (this.tasks != null)\n *   {\n *     this.tasks.setLocation(10, 10);\n *   }\n * };\n * (end)\n */\nmxEditor.prototype.showTasks = function ()\n{\n\tif (this.tasks == null)\n\t{\n\t\tvar div = document.createElement('div');\n\t\tdiv.style.padding = '4px';\n\t\tdiv.style.paddingLeft = '20px';\n\t\tvar w = document.body.clientWidth;\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.tasksResource) ||\n\t\t\tthis.tasksResource,\n\t\t\tdiv, w - 220, this.tasksTop, 200);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\t\n\t\t// Installs a function to update the contents\n\t\t// of the tasks window on every change of the\n\t\t// model, selection or root.\n\t\tvar funct = mxUtils.bind(this, function(sender)\n\t\t{\n\t\t\tmxEvent.release(div);\n\t\t\tdiv.innerHTML = '';\n\t\t\tthis.createTasks(div);\n\t\t});\n\t\t\n\t\tthis.graph.getModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.getSelectionModel().addListener(mxEvent.CHANGE, funct);\n\t\tthis.graph.addListener(mxEvent.ROOT, funct);\n\t\t\n\t\t// Assigns the icon to the tasks window\n\t\tif (this.tasksWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.tasksWindowImage);\n\t\t}\n\t\t\n\t\tthis.tasks = wnd;\n\t\tthis.createTasks(div);\n\t}\n\t\n\tthis.tasks.setVisible(true);\n};\n\t\t\n/**\n * Function: refreshTasks\n * \n * Updates the contents of the tasks window using <createTasks>.\n */\nmxEditor.prototype.refreshTasks = function (div)\n{\n\tif (this.tasks != null)\n\t{\n\t\tvar div = this.tasks.content;\n\t\tmxEvent.release(div);\n\t\tdiv.innerHTML = '';\n\t\tthis.createTasks(div);\n\t}\n};\n\t\t\n/**\n * Function: createTasks\n * \n * Updates the contents of the given DOM node to\n * display the tasks associated with the current\n * editor state. This is invoked whenever there\n * is a possible change of state in the editor.\n * Default implementation is empty.\n */\nmxEditor.prototype.createTasks = function (div)\n{\n\t// override\n};\n\t\n/**\n * Function: showHelp\n * \n * Shows the help window. If the help window does not exist\n * then it is created using an iframe pointing to the resource\n * for the <code>urlHelp</code> key or <urlHelp> if the resource\n * is undefined.\n */\nmxEditor.prototype.showHelp = function (tasks)\n{\n\tif (this.help == null)\n\t{\n\t\tvar frame = document.createElement('iframe');\n\t\tframe.setAttribute('src', mxResources.get('urlHelp') || this.urlHelp);\n\t\tframe.setAttribute('height', '100%');\n\t\tframe.setAttribute('width', '100%');\n\t\tframe.setAttribute('frameBorder', '0');\n\t\tframe.style.backgroundColor = 'white';\n\t\n\t\tvar w = document.body.clientWidth;\n\t\tvar h = (document.body.clientHeight || document.documentElement.clientHeight);\n\t\t\n\t\tvar wnd = new mxWindow(mxResources.get(this.helpResource) || this.helpResource,\n\t\t\tframe, (w-this.helpWidth)/2, (h-this.helpHeight)/3, this.helpWidth, this.helpHeight);\n\t\twnd.setMaximizable(true);\n\t\twnd.setClosable(true);\n\t\twnd.destroyOnClose = false;\n\t\twnd.setResizable(true);\n\n\t\t// Assigns the icon to the help window\n\t\tif (this.helpWindowImage != null)\n\t\t{\n\t\t\twnd.setImage(this.helpWindowImage);\n\t\t}\n\t\t\n\t\t// Workaround for ignored iframe height 100% in FF\n\t\tif (mxClient.IS_NS)\n\t\t{\n\t\t\tvar handler = function(sender)\n\t\t\t{\n\t\t\t\tvar h = wnd.div.offsetHeight;\n\t\t\t\tframe.setAttribute('height', (h-26)+'px');\n\t\t\t};\n\t\t\t\n\t\t\twnd.addListener(mxEvent.RESIZE_END, handler);\n\t\t\twnd.addListener(mxEvent.MAXIMIZE, handler);\n\t\t\twnd.addListener(mxEvent.NORMALIZE, handler);\n\t\t\twnd.addListener(mxEvent.SHOW, handler);\n\t\t}\n\t\t\n\t\tthis.help = wnd;\n\t}\n\t\n\tthis.help.setVisible(true);\n};\n\n/**\n * Function: showOutline\n * \n * Shows the outline window. If the window does not exist, then it is\n * created using an <mxOutline>.\n */\nmxEditor.prototype.showOutline = function ()\n{\n\tvar create = this.outline == null;\n\t\n\tif (create)\n\t{\n\t\tvar div = document.createElement('div');\n\t\t\n\t\tdiv.style.overflow = 'hidden';\n\t\tdiv.style.position = 'relative';\n\t\tdiv.style.width = '100%';\n\t\tdiv.style.height = '100%';\n\t\tdiv.style.background = 'white';\n\t\tdiv.style.cursor = 'move';\n\t\t\n\t\tif (document.documentMode == 8)\n\t\t{\n\t\t\tdiv.style.filter = 'progid:DXImageTransform.Microsoft.alpha(opacity=100)';\n\t\t}\n\t\t\n\t\tvar wnd = new mxWindow(\n\t\t\tmxResources.get(this.outlineResource) ||\n\t\t\tthis.outlineResource,\n\t\t\tdiv, 600, 480, 200, 200, false);\n\t\t\t\t\n\t\t// Creates the outline in the specified div\n\t\t// and links it to the existing graph\n\t\tvar outline = new mxOutline(this.graph, div);\t\t\t\n\t\twnd.setClosable(true);\n\t\twnd.setResizable(true);\n\t\twnd.destroyOnClose = false;\n\t\t\n\t\twnd.addListener(mxEvent.RESIZE_END, function()\n\t\t{\n\t\t\toutline.update();\n\t\t});\n\t\t\n\t\tthis.outline = wnd;\n\t\tthis.outline.outline = outline;\n\t}\n\t\n\t// Finally shows the outline\n\tthis.outline.setVisible(true);\n\tthis.outline.outline.update(true);\n};\n\t\t\n/**\n * Function: setMode\n *\n * Puts the graph into the specified mode. The following modenames are\n * supported:\n * \n * select - Selects using the left mouse button, new connections\n * are disabled.\n * connect - Selects using the left mouse button or creates new\n * connections if mouse over cell hotspot. See <mxConnectionHandler>.\n * pan - Pans using the left mouse button, new connections are disabled.\n */\nmxEditor.prototype.setMode = function(modename)\n{\n\tif (modename == 'select')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(false);\n\t}\n\telse if (modename == 'connect')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = false;\n\t\tthis.graph.setConnectable(true);\n\t}\n\telse if (modename == 'pan')\n\t{\n\t\tthis.graph.panningHandler.useLeftButtonForPanning = true;\n\t\tthis.graph.setConnectable(false);\n\t}\n};\n\n/**\n * Function: createPopupMenu\n * \n * Uses <popupHandler> to create the menu in the graph's\n * panning handler. The redirection is setup in\n * <setToolbarContainer>.\n */\nmxEditor.prototype.createPopupMenu = function (menu, cell, evt)\n{\n\tthis.popupHandler.createMenu(this, menu, cell, evt);\n};\n\n/**\n * Function: createEdge\n * \n * Uses <defaultEdge> as the prototype for creating new edges\n * in the connection handler of the graph. The style of the\n * edge will be overridden with the value returned by\n * <getEdgeStyle>.\n */\nmxEditor.prototype.createEdge = function (source, target)\n{\n\t// Clones the defaultedge prototype\n\tvar e = null;\n\t\n\tif (this.defaultEdge != null)\n\t{\n\t\tvar model = this.graph.getModel();\n\t\te = model.cloneCell(this.defaultEdge);\n\t}\n\telse\n\t{\n\t\te = new mxCell('');\n\t\te.setEdge(true);\n\t\t\n\t\tvar geo = new mxGeometry();\n\t\tgeo.relative = true;\n\t\te.setGeometry(geo);\n\t}\n\t\n\t// Overrides the edge style\n\tvar style = this.getEdgeStyle();\n\t\n\tif (style != null)\n\t{\n\t\te.setStyle(style);\n\t}\n\t\n\treturn e;\n};\n\n/**\n * Function: getEdgeStyle\n * \n * Returns a string identifying the style of new edges.\n * The function is used in <createEdge> when new edges\n * are created in the graph.\n */\nmxEditor.prototype.getEdgeStyle = function ()\n{\n\treturn this.defaultEdgeStyle;\n};\n\n/**\n * Function: consumeCycleAttribute\n * \n * Returns the next attribute in <cycleAttributeValues>\n * or null, if not attribute should be used in the\n * specified cell.\n */\nmxEditor.prototype.consumeCycleAttribute = function (cell)\n{\n\treturn (this.cycleAttributeValues != null &&\n\t\tthis.cycleAttributeValues.length > 0 &&\n\t\tthis.graph.isSwimlane(cell)) ?\n\t\tthis.cycleAttributeValues[this.cycleAttributeIndex++ %\n\t\t\tthis.cycleAttributeValues.length] : null;\n};\n\n/**\n * Function: cycleAttribute\n * \n * Uses the returned value from <consumeCycleAttribute>\n * as the value for the <cycleAttributeName> key in\n * the given cell's style.\n */\nmxEditor.prototype.cycleAttribute = function (cell)\n{\n\tif (this.cycleAttributeName != null)\n\t{\n\t\tvar value = this.consumeCycleAttribute(cell);\n\t\t\n\t\tif (value != null)\n\t\t{\n\t\t\tcell.setStyle(cell.getStyle()+';'+\n\t\t\t\tthis.cycleAttributeName+'='+value);\n\t\t}\n\t}\n};\n\n/**\n * Function: addVertex\n * \n * Adds the given vertex as a child of parent at the specified\n * x and y coordinate and fires an <addVertex> event.\n */\nmxEditor.prototype.addVertex = function (parent, vertex, x, y)\n{\n\tvar model = this.graph.getModel();\n\t\n\twhile (parent != null && !this.graph.isValidDropTarget(parent))\n\t{\n\t\tparent = model.getParent(parent);\n\t}\n\t\n\tparent = (parent != null) ? parent : this.graph.getSwimlaneAt(x, y);\n\tvar scale = this.graph.getView().scale;\n\t\n\tvar geo = model.getGeometry(vertex);\n\tvar pgeo = model.getGeometry(parent);\n\t\n\tif (this.graph.isSwimlane(vertex) &&\n\t\t!this.graph.swimlaneNesting)\n\t{\n\t\tparent = null;\n\t}\n\telse if (parent == null && this.swimlaneRequired)\n\t{\n\t\treturn null;\n\t}\n\telse if (parent != null && pgeo != null)\n\t{\n\t\t// Keeps vertex inside parent\n\t\tvar state = this.graph.getView().getState(parent);\n\t\t\n\t\tif (state != null)\n\t\t{\t\t\t\n\t\t\tx -= state.origin.x * scale;\n\t\t\ty -= state.origin.y * scale;\n\t\t\t\n\t\t\tif (this.graph.isConstrainedMoving)\n\t\t\t{\n\t\t\t\tvar width = geo.width;\n\t\t\t\tvar height = geo.height;\t\t\t\t\n\t\t\t\tvar tmp = state.x+state.width;\n\t\t\t\t\n\t\t\t\tif (x+width > tmp)\n\t\t\t\t{\n\t\t\t\t\tx -= x+width - tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp = state.y+state.height;\n\t\t\t\t\n\t\t\t\tif (y+height > tmp)\n\t\t\t\t{\n\t\t\t\t\ty -= y+height - tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (pgeo != null)\n\t\t{\n\t\t\tx -= pgeo.x*scale;\n\t\t\ty -= pgeo.y*scale;\n\t\t}\n\t}\n\t\n\tgeo = geo.clone();\n\tgeo.x = this.graph.snap(x / scale -\n\t\tthis.graph.getView().translate.x -\n\t\tthis.graph.gridSize/2);\n\tgeo.y = this.graph.snap(y / scale -\n\t\tthis.graph.getView().translate.y -\n\t\tthis.graph.gridSize/2);\n\tvertex.setGeometry(geo);\n\t\n\tif (parent == null)\n\t{\n\t\tparent = this.graph.getDefaultParent();\n\t}\n\n\tthis.cycleAttribute(vertex);\n\tthis.fireEvent(new mxEventObject(mxEvent.BEFORE_ADD_VERTEX,\n\t\t\t'vertex', vertex, 'parent', parent));\n\n\tmodel.beginUpdate();\n\ttry\n\t{\n\t\tvertex = this.graph.addCell(vertex, parent);\n\t\t\n\t\tif (vertex != null)\n\t\t{\n\t\t\tthis.graph.constrainChild(vertex);\n\t\t\t\n\t\t\tthis.fireEvent(new mxEventObject(mxEvent.ADD_VERTEX, 'vertex', vertex));\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tmodel.endUpdate();\n\t}\n\t\n\tif (vertex != null)\n\t{\n\t\tthis.graph.setSelectionCell(vertex);\n\t\tthis.graph.scrollCellToVisible(vertex);\n\t\tthis.fireEvent(new mxEventObject(mxEvent.AFTER_ADD_VERTEX, 'vertex', vertex));\n\t}\n\t\n\treturn vertex;\n};\n\n/**\n * Function: destroy\n * \n * Removes the editor and all its associated resources. This does not\n * normally need to be called, it is called automatically when the window\n * unloads.\n */\nmxEditor.prototype.destroy = function ()\n{\n\tif (!this.destroyed)\n\t{\n\t\tthis.destroyed = true;\n\n\t\tif (this.tasks != null)\n\t\t{\n\t\t\tthis.tasks.destroy();\n\t\t}\n\t\t\n\t\tif (this.outline != null)\n\t\t{\n\t\t\tthis.outline.destroy();\n\t\t}\n\t\t\n\t\tif (this.properties != null)\n\t\t{\n\t\t\tthis.properties.destroy();\n\t\t}\n\t\t\n\t\tif (this.keyHandler != null)\n\t\t{\n\t\t\tthis.keyHandler.destroy();\n\t\t}\n\t\t\n\t\tif (this.rubberband != null)\n\t\t{\n\t\t\tthis.rubberband.destroy();\n\t\t}\n\t\t\n\t\tif (this.toolbar != null)\n\t\t{\n\t\t\tthis.toolbar.destroy();\n\t\t}\n\t\t\n\t\tif (this.graph != null)\n\t\t{\n\t\t\tthis.graph.destroy();\n\t\t}\n\t\n\t\tthis.status = null;\n\t\tthis.templates = null;\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nvar mxCodecRegistry =\n{\n\t/**\n\t * Class: mxCodecRegistry\n\t *\n\t * Singleton class that acts as a global registry for codecs.\n\t *\n\t * Adding an <mxCodec>:\n\t *\n\t * 1. Define a default codec with a new instance of the \n\t * object to be handled.\n\t *\n\t * (code)\n\t * var codec = new mxObjectCodec(new mxGraphModel());\n\t * (end)\n\t *\n\t * 2. Define the functions required for encoding and decoding\n\t * objects.\n\t *\n\t * (code)\n\t * codec.encode = function(enc, obj) { ... }\n\t * codec.decode = function(dec, node, into) { ... }\n\t * (end)\n\t *\n\t * 3. Register the codec in the <mxCodecRegistry>.\n\t *\n\t * (code)\n\t * mxCodecRegistry.register(codec);\n\t * (end)\n\t *\n\t * <mxObjectCodec.decode> may be used to either create a new \n\t * instance of an object or to configure an existing instance, \n\t * in which case the into argument points to the existing\n\t * object. In this case, we say the codec \"configures\" the\n\t * object.\n\t * \n\t * Variable: codecs\n\t *\n\t * Maps from constructor names to codecs.\n\t */\n\tcodecs: [],\n\t\n\t/**\n\t * Variable: aliases\n\t *\n\t * Maps from classnames to codecnames.\n\t */\n\taliases: [],\n\n\t/**\n\t * Function: register\n\t *\n\t * Registers a new codec and associates the name of the template\n\t * constructor in the codec with the codec object.\n\t *\n\t * Parameters:\n\t *\n\t * codec - <mxObjectCodec> to be registered.\n\t */\n\tregister: function(codec)\n\t{\n\t\tif (codec != null)\n\t\t{\n\t\t\tvar name = codec.getName();\n\t\t\tmxCodecRegistry.codecs[name] = codec;\n\t\t\t\n\t\t\tvar classname = mxUtils.getFunctionName(codec.template.constructor);\n\n\t\t\tif (classname != name)\n\t\t\t{\n\t\t\t\tmxCodecRegistry.addAlias(classname, name);\n\t\t\t}\n\t\t}\n\n\t\treturn codec;\n\t},\n\n\t/**\n\t * Function: addAlias\n\t *\n\t * Adds an alias for mapping a classname to a codecname.\n\t */\n\taddAlias: function(classname, codecname)\n\t{\n\t\tmxCodecRegistry.aliases[classname] = codecname;\n\t},\n\n\t/**\n\t * Function: getCodec\n\t *\n\t * Returns a codec that handles objects that are constructed\n\t * using the given constructor.\n\t *\n\t * Parameters:\n\t *\n\t * ctor - JavaScript constructor function. \n\t */\n\tgetCodec: function(ctor)\n\t{\n\t\tvar codec = null;\n\t\t\n\t\tif (ctor != null)\n\t\t{\n\t\t\tvar name = mxUtils.getFunctionName(ctor);\n\t\t\tvar tmp = mxCodecRegistry.aliases[name];\n\t\t\t\n\t\t\tif (tmp != null)\n\t\t\t{\n\t\t\t\tname = tmp;\n\t\t\t}\n\t\t\t\n\t\t\tcodec = mxCodecRegistry.codecs[name];\n\t\t\t\n\t\t\t// Registers a new default codec for the given constructor\n\t\t\t// if no codec has been previously defined.\n\t\t\tif (codec == null)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcodec = new mxObjectCodec(new ctor());\n\t\t\t\t\tmxCodecRegistry.register(codec);\n\t\t\t\t}\n\t\t\t\tcatch (e)\n\t\t\t\t{\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn codec;\n\t}\n\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxCodec\n *\n * XML codec for JavaScript object graphs. See <mxObjectCodec> for a\n * description of the general encoding/decoding scheme. This class uses the\n * codecs registered in <mxCodecRegistry> for encoding/decoding each object.\n * \n * References:\n * \n * In order to resolve references, especially forward references, the mxCodec\n * constructor must be given the document that contains the referenced\n * elements.\n *\n * Examples:\n *\n * The following code is used to encode a graph model.\n *\n * (code)\n * var encoder = new mxCodec();\n * var result = encoder.encode(graph.getModel());\n * var xml = mxUtils.getXml(result);\n * (end)\n * \n * Example:\n * \n * Using the code below, an XML document is decoded into an existing model. The\n * document may be obtained using one of the functions in mxUtils for loading\n * an XML file, eg. <mxUtils.get>, or using <mxUtils.parseXml> for parsing an\n * XML string.\n * \n * (code)\n * var doc = mxUtils.parseXml(xmlString);\n * var codec = new mxCodec(doc);\n * codec.decode(doc.documentElement, graph.getModel());\n * (end)\n * \n * Example:\n * \n * This example demonstrates parsing a list of isolated cells into an existing\n * graph model. Note that the cells do not have a parent reference so they can\n * be added anywhere in the cell hierarchy after parsing.\n * \n * (code)\n * var xml = '<root><mxCell id=\"2\" value=\"Hello,\" vertex=\"1\"><mxGeometry x=\"20\" y=\"20\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"3\" value=\"World!\" vertex=\"1\"><mxGeometry x=\"200\" y=\"150\" width=\"80\" height=\"30\" as=\"geometry\"/></mxCell><mxCell id=\"4\" value=\"\" edge=\"1\" source=\"2\" target=\"3\"><mxGeometry relative=\"1\" as=\"geometry\"/></mxCell></root>';\n * var doc = mxUtils.parseXml(xml);\n * var codec = new mxCodec(doc);\n * var elt = doc.documentElement.firstChild;\n * var cells = [];\n * \n * while (elt != null)\n * {\n *   cells.push(codec.decode(elt));\n *   elt = elt.nextSibling;\n * }\n * \n * graph.addCells(cells);\n * (end)\n * \n * Example:\n * \n * Using the following code, the selection cells of a graph are encoded and the\n * output is displayed in a dialog box.\n * \n * (code)\n * var enc = new mxCodec();\n * var cells = graph.getSelectionCells();\n * mxUtils.alert(mxUtils.getPrettyXml(enc.encode(cells)));\n * (end)\n * \n * Newlines in the XML can be converted to <br>, in which case a '<br>' argument\n * must be passed to <mxUtils.getXml> as the second argument.\n * \n * Debugging:\n * \n * For debugging I/O you can use the following code to get the sequence of\n * encoded objects:\n * \n * (code)\n * var oldEncode = mxCodec.prototype.encode;\n * mxCodec.prototype.encode = function(obj)\n * {\n *   mxLog.show();\n *   mxLog.debug('mxCodec.encode: obj='+mxUtils.getFunctionName(obj.constructor));\n *   \n *   return oldEncode.apply(this, arguments);\n * };\n * (end)\n * \n * Note that the I/O system adds object codecs for new object automatically. For\n * decoding those objects, the constructor should be written as follows:\n * \n * (code)\n * var MyObj = function(name)\n * {\n *   // ...\n * };\n * (end)\n * \n * Constructor: mxCodec\n *\n * Constructs an XML encoder/decoder for the specified\n * owner document.\n *\n * Parameters:\n *\n * document - Optional XML document that contains the data.\n * If no document is specified then a new document is created\n * using <mxUtils.createXmlDocument>.\n */\nfunction mxCodec(document)\n{\n\tthis.document = document || mxUtils.createXmlDocument();\n\tthis.objects = [];\n};\n\n/**\n * Variable: document\n *\n * The owner document of the codec.\n */\nmxCodec.prototype.document = null;\n\n/**\n * Variable: objects\n *\n * Maps from IDs to objects.\n */\nmxCodec.prototype.objects = null;\n\n/**\n * Variable: elements\n * \n * Lookup table for resolving IDs to elements.\n */\nmxCodec.prototype.elements = null;\n\n/**\n * Variable: encodeDefaults\n *\n * Specifies if default values should be encoded. Default is false.\n */\nmxCodec.prototype.encodeDefaults = false;\n\n\n/**\n * Function: putObject\n * \n * Assoiates the given object with the given ID and returns the given object.\n * \n * Parameters\n * \n * id - ID for the object to be associated with.\n * obj - Object to be associated with the ID.\n */\nmxCodec.prototype.putObject = function(id, obj)\n{\n\tthis.objects[id] = obj;\n\t\n\treturn obj;\n};\n\n/**\n * Function: getObject\n *\n * Returns the decoded object for the element with the specified ID in\n * <document>. If the object is not known then <lookup> is used to find an\n * object. If no object is found, then the element with the respective ID\n * from the document is parsed using <decode>.\n */\nmxCodec.prototype.getObject = function(id)\n{\n\tvar obj = null;\n\n\tif (id != null)\n\t{\n\t\tobj = this.objects[id];\n\t\t\n\t\tif (obj == null)\n\t\t{\n\t\t\tobj = this.lookup(id);\n\t\t\t\n\t\t\tif (obj == null)\n\t\t\t{\n\t\t\t\tvar node = this.getElementById(id);\n\t\t\t\t\n\t\t\t\tif (node != null)\n\t\t\t\t{\n\t\t\t\t\tobj = this.decode(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: lookup\n *\n * Hook for subclassers to implement a custom lookup mechanism for cell IDs.\n * This implementation always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.lookup = function(id)\n * {\n *   return model.getCell(id);\n * };\n * (end)\n *\n * Parameters:\n *\n * id - ID of the object to be returned.\n */\nmxCodec.prototype.lookup = function(id)\n{\n\treturn null;\n};\n\n/**\n * Function: getElementById\n *\n * Returns the element with the given ID from <document>.\n *\n * Parameters:\n *\n * id - String that contains the ID.\n */\nmxCodec.prototype.getElementById = function(id)\n{\n\tif (this.elements == null)\n\t{\n\t\tthis.elements = new Object();\n\t\t\n\t\tif (this.document.documentElement != null)\n\t\t{\n\t\t\tthis.addElement(this.document.documentElement);\n\t\t}\n\t}\n\t\n\treturn this.elements[id];\n};\n\n/**\n * Function: addElement\n *\n * Adds the given element to <elements> if it has an ID.\n */\nmxCodec.prototype.addElement = function(node)\n{\n\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null && this.elements[id] == null)\n\t\t{\n\t\t\tthis.elements[id] = node;\n\t\t}\n\t}\n\t\n\tnode = node.firstChild;\n\t\n\twhile (node != null)\n\t{\n\t\tthis.addElement(node);\n\t\tnode = node.nextSibling;\n\t}\n};\n\n/**\n * Function: getId\n *\n * Returns the ID of the specified object. This implementation\n * calls <reference> first and if that returns null handles\n * the object as an <mxCell> by returning their IDs using\n * <mxCell.getId>. If no ID exists for the given cell, then\n * an on-the-fly ID is generated using <mxCellPath.create>.\n *\n * Parameters:\n *\n * obj - Object to return the ID for.\n */\nmxCodec.prototype.getId = function(obj)\n{\n\tvar id = null;\n\t\n\tif (obj != null)\n\t{\n\t\tid = this.reference(obj);\n\t\t\n\t\tif (id == null && obj instanceof mxCell)\n\t\t{\n\t\t\tid = obj.getId();\n\t\t\t\n\t\t\tif (id == null)\n\t\t\t{\n\t\t\t\t// Uses an on-the-fly Id\n\t\t\t\tid = mxCellPath.create(obj);\n\t\t\t\t\n\t\t\t\tif (id.length == 0)\n\t\t\t\t{\n\t\t\t\t\tid = 'root';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn id;\n};\n\n/**\n * Function: reference\n *\n * Hook for subclassers to implement a custom method\n * for retrieving IDs from objects. This implementation\n * always returns null.\n *\n * Example:\n *\n * (code)\n * var codec = new mxCodec();\n * codec.reference = function(obj)\n * {\n *   return obj.getCustomId();\n * };\n * (end)\n *\n * Parameters:\n *\n * obj - Object whose ID should be returned.\n */\nmxCodec.prototype.reference = function(obj)\n{\n\treturn null;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns the resulting\n * XML node.\n *\n * Parameters:\n *\n * obj - Object to be encoded. \n */\nmxCodec.prototype.encode = function(obj)\n{\n\tvar node = null;\n\t\n\tif (obj != null && obj.constructor != null)\n\t{\n\t\tvar enc = mxCodecRegistry.getCodec(obj.constructor);\n\t\t\n\t\tif (enc != null)\n\t\t{\n\t\t\tnode = enc.encode(this, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (mxUtils.isNode(obj))\n\t\t\t{\n\t\t\t\tnode = mxUtils.importNode(this.document, obj, true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t    \t\tmxLog.warn('mxCodec.encode: No codec for ' + mxUtils.getFunctionName(obj.constructor));\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Decodes the given XML node. The optional \"into\"\n * argument specifies an existing object to be\n * used. If no object is given, then a new instance\n * is created using the constructor from the codec.\n *\n * The function returns the passed in object or\n * the new instance if no object was given.\n *\n * Parameters:\n *\n * node - XML node to be decoded.\n * into - Optional object to be decodec into.\n */\nmxCodec.prototype.decode = function(node, into)\n{\n\tvar obj = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\tvar ctor = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tctor = window[node.nodeName];\n\t\t}\n\t\tcatch (err)\n\t\t{\n\t\t\t// ignore\n\t\t}\n\t\t\n\t\tvar dec = mxCodecRegistry.getCodec(ctor);\n\t\t\n\t\tif (dec != null)\n\t\t{\n\t\t\tobj = dec.decode(this, node, into);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj = node.cloneNode(true);\n\t\t\tobj.removeAttribute('as');\n\t\t}\n\t}\n\t\n\treturn obj;\n};\n\n/**\n * Function: encodeCell\n *\n * Encoding of cell hierarchies is built-into the core, but\n * is a higher-level function that needs to be explicitely\n * used by the respective object encoders (eg. <mxModelCodec>,\n * <mxChildChangeCodec> and <mxRootChangeCodec>). This\n * implementation writes the given cell and its children as a\n * (flat) sequence into the given node. The children are not\n * encoded if the optional includeChildren is false. The\n * function is in charge of adding the result into the\n * given node and has no return value.\n *\n * Parameters:\n *\n * cell - <mxCell> to be encoded.\n * node - Parent XML node to add the encoded cell into.\n * includeChildren - Optional boolean indicating if the\n * function should include all descendents. Default is true. \n */\nmxCodec.prototype.encodeCell = function(cell, node, includeChildren)\n{\n\tnode.appendChild(this.encode(cell));\n\t\n\tif (includeChildren == null || includeChildren)\n\t{\n\t\tvar childCount = cell.getChildCount();\n\t\t\n\t\tfor (var i = 0; i < childCount; i++)\n\t\t{\n\t\t\tthis.encodeCell(cell.getChildAt(i), node);\n\t\t}\n\t}\n};\n\n/**\n * Function: isCellCodec\n * \n * Returns true if the given codec is a cell codec. This uses\n * <mxCellCodec.isCellCodec> to check if the codec is of the\n * given type.\n */\nmxCodec.prototype.isCellCodec = function(codec)\n{\n\tif (codec != null && typeof(codec.isCellCodec) == 'function')\n\t{\n\t\treturn codec.isCellCodec();\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: decodeCell\n *\n * Decodes cells that have been encoded using inversion, ie.\n * where the user object is the enclosing node in the XML,\n * and restores the group and graph structure in the cells.\n * Returns a new <mxCell> instance that represents the\n * given node.\n *\n * Parameters:\n *\n * node - XML node that contains the cell data.\n * restoreStructures - Optional boolean indicating whether\n * the graph structure should be restored by calling insert\n * and insertEdge on the parent and terminals, respectively.\n * Default is true.\n */\nmxCodec.prototype.decodeCell = function(node, restoreStructures)\n{\n\trestoreStructures = (restoreStructures != null) ? restoreStructures : true;\n\tvar cell = null;\n\t\n\tif (node != null && node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t{\n\t\t// Tries to find a codec for the given node name. If that does\n\t\t// not return a codec then the node is the user object (an XML node\n\t\t// that contains the mxCell, aka inversion).\n\t\tvar decoder = mxCodecRegistry.getCodec(node.nodeName);\n\t\t\n\t\t// Tries to find the codec for the cell inside the user object.\n\t\t// This assumes all node names inside the user object are either\n\t\t// not registered or they correspond to a class for cells.\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tvar child = node.firstChild;\n\t\t\t\n\t\t\twhile (child != null && !this.isCellCodec(decoder))\n\t\t\t{\n\t\t\t\tdecoder = mxCodecRegistry.getCodec(child.nodeName);\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!this.isCellCodec(decoder))\n\t\t{\n\t\t\tdecoder = mxCodecRegistry.getCodec(mxCell);\n\t\t}\n\n\t\tcell = decoder.decode(this, node);\n\t\t\n\t\tif (restoreStructures)\n\t\t{\n\t\t\tthis.insertIntoGraph(cell);\n\t\t}\n\t}\n\t\n\treturn cell;\n};\n\n/**\n * Function: insertIntoGraph\n *\n * Inserts the given cell into its parent and terminal cells.\n */\nmxCodec.prototype.insertIntoGraph = function(cell)\n{\n\tvar parent = cell.parent;\n\tvar source = cell.getTerminal(true);\n\tvar target = cell.getTerminal(false);\n\n\t// Fixes possible inconsistencies during insert into graph\n\tcell.setTerminal(null, false);\n\tcell.setTerminal(null, true);\n\tcell.parent = null;\n\t\n\tif (parent != null)\n\t{\n\t\tparent.insert(cell);\n\t}\n\n\tif (source != null)\n\t{\n\t\tsource.insertEdge(cell, true);\n\t}\n\n\tif (target != null)\n\t{\n\t\ttarget.insertEdge(cell, false);\n\t}\n};\n\n/**\n * Function: setAttribute\n *\n * Sets the attribute on the specified node to value. This is a\n * helper method that makes sure the attribute and value arguments\n * are not null.\n *\n * Parameters:\n *\n * node - XML node to set the attribute for.\n * attributes - Attributename to be set.\n * value - New value of the attribute.\n */\nmxCodec.prototype.setAttribute = function(node, attribute, value)\n{\n\tif (attribute != null && value != null)\n\t{\n\t\tnode.setAttribute(attribute, value);\n\t}\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxObjectCodec\n *\n * Generic codec for JavaScript objects that implements a mapping between\n * JavaScript objects and XML nodes that maps each field or element to an\n * attribute or child node, and vice versa.\n * \n * Atomic Values:\n * \n * Consider the following example.\n * \n * (code)\n * var obj = new Object();\n * obj.foo = \"Foo\";\n * obj.bar = \"Bar\";\n * (end)\n * \n * This object is encoded into an XML node using the following.\n * \n * (code)\n * var enc = new mxCodec();\n * var node = enc.encode(obj);\n * (end)\n * \n * The output of the encoding may be viewed using <mxLog> as follows.\n * \n * (code)\n * mxLog.show();\n * mxLog.debug(mxUtils.getPrettyXml(node));\n * (end)\n * \n * Finally, the result of the encoding looks as follows.\n * \n * (code)\n * <Object foo=\"Foo\" bar=\"Bar\"/>\n * (end)\n * \n * In the above output, the foo and bar fields have been mapped to attributes\n * with the same names, and the name of the constructor was used for the\n * nodename.\n * \n * Booleans:\n *\n * Since booleans are numbers in JavaScript, all boolean values are encoded\n * into 1 for true and 0 for false. The decoder also accepts the string true\n * and false for boolean values.\n * \n * Objects:\n * \n * The above scheme is applied to all atomic fields, that is, to all non-object\n * fields of an object. For object fields, a child node is created with a\n * special attribute that contains the fieldname. This special attribute is\n * called \"as\" and hence, as is a reserved word that should not be used for a\n * fieldname.\n * \n * Consider the following example where foo is an object and bar is an atomic\n * property of foo.\n * \n * (code)\n * var obj = {foo: {bar: \"Bar\"}};\n * (end)\n * \n * This will be mapped to the following XML structure by mxObjectCodec.\n * \n * (code)\n * <Object>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Object>\n * (end)\n * \n * In the above output, the inner Object node contains the as-attribute that\n * specifies the fieldname in the enclosing object. That is, the field foo was\n * mapped to a child node with an as-attribute that has the value foo.\n * \n * Arrays:\n * \n * Arrays are special objects that are either associative, in which case each\n * key, value pair is treated like a field where the key is the fieldname, or\n * they are a sequence of atomic values and objects, which is mapped to a\n * sequence of child nodes. For object elements, the above scheme is applied\n * without the use of the special as-attribute for creating each child. For\n * atomic elements, a special add-node is created with the value stored in the\n * value-attribute.\n * \n * For example, the following array contains one atomic value and one object\n * with a field called bar. Furthermore it contains two associative entries\n * called bar with an atomic value, and foo with an object value.\n * \n * (code)\n * var obj = [\"Bar\", {bar: \"Bar\"}];\n * obj[\"bar\"] = \"Bar\";\n * obj[\"foo\"] = {bar: \"Bar\"};\n * (end)\n * \n * This array is represented by the following XML nodes.\n * \n * (code)\n * <Array bar=\"Bar\">\n *   <add value=\"Bar\"/>\n *   <Object bar=\"Bar\"/>\n *   <Object bar=\"Bar\" as=\"foo\"/>\n * </Array>\n * (end)\n * \n * The Array node name is the name of the constructor. The additional\n * as-attribute in the last child contains the key of the associative entry,\n * whereas the second last child is part of the array sequence and does not\n * have an as-attribute.\n * \n * References:\n * \n * Objects may be represented as child nodes or attributes with ID values,\n * which are used to lookup the object in a table within <mxCodec>. The\n * <isReference> function is in charge of deciding if a specific field should\n * be encoded as a reference or not. Its default implementation returns true if\n * the fieldname is in <idrefs>, an array of strings that is used to configure\n * the <mxObjectCodec>.\n * \n * Using this approach, the mapping does not guarantee that the referenced\n * object itself exists in the document. The fields that are encoded as\n * references must be carefully chosen to make sure all referenced objects\n * exist in the document, or may be resolved by some other means if necessary.\n * \n * For example, in the case of the graph model all cells are stored in a tree\n * whose root is referenced by the model's root field. A tree is a structure\n * that is well suited for an XML representation, however, the additional edges\n * in the graph model have a reference to a source and target cell, which are\n * also contained in the tree. To handle this case, the source and target cell\n * of an edge are treated as references, whereas the children are treated as\n * objects. Since all cells are contained in the tree and no edge references a\n * source or target outside the tree, this setup makes sure all referenced\n * objects are contained in the document.\n * \n * In the case of a tree structure we must further avoid infinite recursion by\n * ignoring the parent reference of each child. This is done by returning true\n * in <isExcluded>, whose default implementation uses the array of excluded\n * fieldnames passed to the mxObjectCodec constructor.\n * \n * References are only used for cells in mxGraph. For defining other\n * referencable object types, the codec must be able to work out the ID of an\n * object. This is done by implementing <mxCodec.reference>. For decoding a\n * reference, the XML node with the respective id-attribute is fetched from the\n * document, decoded, and stored in a lookup table for later reference. For\n * looking up external objects, <mxCodec.lookup> may be implemented.\n * \n * Expressions:\n * \n * For decoding JavaScript expressions, the add-node may be used with a text\n * content that contains the JavaScript expression. For example, the following\n * creates a field called foo in the enclosing object and assigns it the value\n * of <mxConstants.ALIGN_LEFT>.\n * \n * (code)\n * <Object>\n *   <add as=\"foo\">mxConstants.ALIGN_LEFT</add>\n * </Object>\n * (end)\n * \n * The resulting object has a field called foo with the value \"left\". Its XML\n * representation looks as follows.\n * \n * (code)\n * <Object foo=\"left\"/>\n * (end)\n * \n * This means the expression is evaluated at decoding time and the result of\n * the evaluation is stored in the respective field. Valid expressions are all\n * JavaScript expressions, including function definitions, which are mapped to\n * functions on the resulting object.\n * \n * Expressions are only evaluated if <allowEval> is true.\n * \n * Constructor: mxObjectCodec\n *\n * Constructs a new codec for the specified template object.\n * The variables in the optional exclude array are ignored by\n * the codec. Variables in the optional idrefs array are\n * turned into references in the XML. The optional mapping\n * may be used to map from variable names to XML attributes.\n * The argument is created as follows:\n *\n * (code)\n * var mapping = new Object();\n * mapping['variableName'] = 'attribute-name';\n * (end)\n *\n * Parameters:\n *\n * template - Prototypical instance of the object to be\n * encoded/decoded.\n * exclude - Optional array of fieldnames to be ignored.\n * idrefs - Optional array of fieldnames to be converted to/from\n * references.\n * mapping - Optional mapping from field- to attributenames.\n */\nfunction mxObjectCodec(template, exclude, idrefs, mapping)\n{\n\tthis.template = template;\n\t\n\tthis.exclude = (exclude != null) ? exclude : [];\n\tthis.idrefs = (idrefs != null) ? idrefs : [];\n\tthis.mapping = (mapping != null) ? mapping : [];\n\t\n\tthis.reverse = new Object();\n\t\n\tfor (var i in this.mapping)\n\t{\n\t\tthis.reverse[this.mapping[i]] = i;\n\t}\n};\n\n/**\n * Variable: allowEval\n *\n * Static global switch that specifies if expressions in arrays are allowed.\n * Default is false. NOTE: Enabling this carries a possible security risk.\n */\nmxObjectCodec.allowEval = false;\n\n/**\n * Variable: template\n *\n * Holds the template object associated with this codec.\n */\nmxObjectCodec.prototype.template = null;\n\n/**\n * Variable: exclude\n *\n * Array containing the variable names that should be\n * ignored by the codec.\n */\nmxObjectCodec.prototype.exclude = null;\n\n/**\n * Variable: idrefs\n *\n * Array containing the variable names that should be\n * turned into or converted from references. See\n * <mxCodec.getId> and <mxCodec.getObject>.\n */\nmxObjectCodec.prototype.idrefs = null;\n\n/**\n * Variable: mapping\n *\n * Maps from from fieldnames to XML attribute names.\n */\nmxObjectCodec.prototype.mapping = null;\n\n/**\n * Variable: reverse\n *\n * Maps from from XML attribute names to fieldnames.\n */\nmxObjectCodec.prototype.reverse = null;\n\n/**\n * Function: getName\n * \n * Returns the name used for the nodenames and lookup of the codec when\n * classes are encoded and nodes are decoded. For classes to work with\n * this the codec registry automatically adds an alias for the classname\n * if that is different than what this returns. The default implementation\n * returns the classname of the template class.\n */\nmxObjectCodec.prototype.getName = function()\n{\n\treturn mxUtils.getFunctionName(this.template.constructor);\n};\n\n/**\n * Function: cloneTemplate\n * \n * Returns a new instance of the template for this codec.\n */\nmxObjectCodec.prototype.cloneTemplate = function()\n{\n\treturn new this.template.constructor();\n};\n\n/**\n * Function: getFieldName\n * \n * Returns the fieldname for the given attributename.\n * Looks up the value in the <reverse> mapping or returns\n * the input if there is no reverse mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getFieldName = function(attributename)\n{\n\tif (attributename != null)\n\t{\n\t\tvar mapped = this.reverse[attributename];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tattributename = mapped;\n\t\t}\n\t}\n\t\n\treturn attributename;\n};\n\n/**\n * Function: getAttributeName\n * \n * Returns the attributename for the given fieldname.\n * Looks up the value in the <mapping> or returns\n * the input if there is no mapping for the\n * given name.\n */\nmxObjectCodec.prototype.getAttributeName = function(fieldname)\n{\n\tif (fieldname != null)\n\t{\n\t\tvar mapped = this.mapping[fieldname];\n\t\t\n\t\tif (mapped != null)\n\t\t{\n\t\t\tfieldname = mapped;\n\t\t}\n\t}\n\t\n\treturn fieldname;\n};\n\n/**\n * Function: isExcluded\n *\n * Returns true if the given attribute is to be ignored by the codec. This\n * implementation returns true if the given fieldname is in <exclude> or\n * if the fieldname equals <mxObjectIdentity.FIELD_NAME>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field.\n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isExcluded = function(obj, attr, value, write)\n{\n\treturn attr == mxObjectIdentity.FIELD_NAME ||\n\t\tmxUtils.indexOf(this.exclude, attr) >= 0;\n};\n\n/**\n * Function: isReference\n *\n * Returns true if the given fieldname is to be treated\n * as a textual reference (ID). This implementation returns\n * true if the given fieldname is in <idrefs>.\n *\n * Parameters:\n *\n * obj - Object instance that contains the field.\n * attr - Fieldname of the field.\n * value - Value of the field. \n * write - Boolean indicating if the field is being encoded or decoded.\n * Write is true if the field is being encoded, else it is being decoded.\n */\nmxObjectCodec.prototype.isReference = function(obj, attr, value, write)\n{\n\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n};\n\n/**\n * Function: encode\n *\n * Encodes the specified object and returns a node\n * representing then given object. Calls <beforeEncode>\n * after creating the node and <afterEncode> with the \n * resulting node after processing.\n *\n * Enc is a reference to the calling encoder. It is used\n * to encode complex objects and create references.\n *\n * This implementation encodes all variables of an\n * object according to the following rules:\n *\n * - If the variable name is in <exclude> then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getId>\n * is used to replace the object with its ID.\n * - The variable name is mapped using <mapping>.\n * - If obj is an array and the variable name is numeric\n * (ie. an index) then it is not encoded.\n * - If the value is an object, then the codec is used to\n * create a child node with the variable name encoded into\n * the \"as\" attribute.\n * - Else, if <encodeDefaults> is true or the value differs\n * from the template value, then ...\n * - ... if obj is not an array, then the value is mapped to\n * an attribute.\n * - ... else if obj is an array, the value is mapped to an\n * add child with a value attribute or a text child node,\n * if the value is a function.\n *\n * If no ID exists for a variable in <idrefs> or if an object\n * cannot be encoded, a warning is issued using <mxLog.warn>.\n *\n * Returns the resulting XML node that represents the given\n * object.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n */\nmxObjectCodec.prototype.encode = function(enc, obj)\n{\n\tvar node = enc.document.createElement(this.getName());\n\t\n\tobj = this.beforeEncode(enc, obj, node);\n\tthis.encodeObject(enc, obj, node);\n\t\n\treturn this.afterEncode(enc, obj, node);\n};\n\t\n/**\n * Function: encodeObject\n *\n * Encodes the value of each member in then given obj into the given node using\n * <encodeValue>.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeObject = function(enc, obj, node)\n{\n\tenc.setAttribute(node, 'id', enc.getId(obj));\n\t\n    for (var i in obj)\n    {\n\t\tvar name = i;\n\t\tvar value = obj[name];\n\t\t\n    \tif (value != null && !this.isExcluded(obj, name, value, true))\n    \t{\n    \t\tif (mxUtils.isInteger(name))\n    \t\t{\n    \t\t\tname = null;\n    \t\t}\n    \t\t\n    \t\tthis.encodeValue(enc, obj, name, value, node);\n    \t}\n    }\n};\n\n/**\n * Function: encodeValue\n * \n * Converts the given value according to the mappings\n * and id-refs in this codec and uses <writeAttribute>\n * to write the attribute into the given node.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object whose property is going to be encoded.\n * name - XML node that contains the encoded object.\n * value - Value of the property to be encoded.\n * node - XML node that contains the encoded object.\n */\nmxObjectCodec.prototype.encodeValue = function(enc, obj, name, value, node)\n{\n\tif (value != null)\n\t{\n\t\tif (this.isReference(obj, name, value, true))\n\t\t{\n\t\t\tvar tmp = enc.getId(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.encode: No ID for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tvar defaultValue = this.template[name];\n\t\t\n\t\t// Checks if the value is a default value and\n\t\t// the name is correct\n\t\tif (name == null || enc.encodeDefaults || defaultValue != value)\n\t\t{\n\t\t\tname = this.getAttributeName(name);\n\t\t\tthis.writeAttribute(enc, obj, name, value, node);\t\n\t\t}\n\t}\n};\n\n/**\n * Function: writeAttribute\n * \n * Writes the given value into node using <writePrimitiveAttribute>\n * or <writeComplexAttribute> depending on the type of the value.\n */\nmxObjectCodec.prototype.writeAttribute = function(enc, obj, name, value, node)\n{\n\tif (typeof(value) != 'object' /* primitive type */)\n\t{\n\t\tthis.writePrimitiveAttribute(enc, obj, name, value, node);\n\t}\n\telse /* complex type */\n\t{\n\t\tthis.writeComplexAttribute(enc, obj, name, value, node);\n\t}\n};\n\n/**\n * Function: writePrimitiveAttribute\n * \n * Writes the given value as an attribute of the given node.\n */\nmxObjectCodec.prototype.writePrimitiveAttribute = function(enc, obj, name, value, node)\n{\n\tvalue = this.convertAttributeToXml(enc, obj, name, value, node);\n\t\n\tif (name == null)\n\t{\n\t\tvar child = enc.document.createElement('add');\n\t\t\n\t\tif (typeof(value) == 'function')\n\t\t{\n    \t\tchild.appendChild(enc.document.createTextNode(value));\n    \t}\n    \telse\n    \t{\n    \t\tenc.setAttribute(child, 'value', value);\n    \t}\n    \t\n\t\tnode.appendChild(child);\n\t}\n\telse if (typeof(value) != 'function')\n\t{\n    \tenc.setAttribute(node, name, value);\n\t}\t\t\n};\n\t\n/**\n * Function: writeComplexAttribute\n * \n * Writes the given value as a child node of the given node.\n */\nmxObjectCodec.prototype.writeComplexAttribute = function(enc, obj, name, value, node)\n{\n\tvar child = enc.encode(value);\n\t\n\tif (child != null)\n\t{\n\t\tif (name != null)\n\t\t{\n    \t\tchild.setAttribute('as', name);\n    \t}\n    \t\n    \tnode.appendChild(child);\n\t}\n\telse\n\t{\n\t\tmxLog.warn('mxObjectCodec.encode: No node for ' + this.getName() + '.' + name + ': ' + value);\n\t}\n};\n\n/**\n * Function: convertAttributeToXml\n * \n * Converts true to \"1\" and false to \"0\" is <isBooleanAttribute> returns true.\n * All other values are not converted.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value to be converted.\n */\nmxObjectCodec.prototype.convertAttributeToXml = function(enc, obj, name, value)\n{\n\t// Makes sure to encode boolean values as numeric values\n\tif (this.isBooleanAttribute(enc, obj, name, value))\n\t{\t\n\t\t// Checks if the value is true (do not use the value as is, because\n\t\t// this would check if the value is not null, so 0 would be true)\n\t\tvalue = (value == true) ? '1' : '0';\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isBooleanAttribute\n * \n * Returns true if the given object attribute is a boolean value.\n * \n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Objec to convert the attribute for.\n * name - Name of the attribute to be converted.\n * value - Value of the attribute to be converted.\n */\nmxObjectCodec.prototype.isBooleanAttribute = function(enc, obj, name, value)\n{\n\treturn (typeof(value.length) == 'undefined' && (value == true || value == false));\n};\n\n/**\n * Function: convertAttributeFromXml\n * \n * Converts booleans and numeric values to the respective types. Values are\n * numeric if <isNumericAttribute> returns true.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.convertAttributeFromXml = function(dec, attr, obj)\n{\n\tvar value = attr.value;\n\t\n\tif (this.isNumericAttribute(dec, attr, obj))\n\t{\n\t\tvalue = parseFloat(value);\n\t\t\n\t\tif (isNaN(value))\n\t\t{\n\t\t\tvalue = 0;\n\t\t}\n\t}\n\t\n\treturn value;\n};\n\n/**\n * Function: isNumericAttribute\n * \n * Returns true if the given XML attribute is or should be a numeric value.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be converted.\n * obj - Objec to convert the attribute for.\n */\nmxObjectCodec.prototype.isNumericAttribute = function(dec, attr, obj)\n{\n\t// Handles known numeric attributes for generic objects\n\tvar result = (obj.constructor == mxGeometry &&\n\t\t(attr.name == 'x' || attr.name == 'y' ||\n\t\tattr.name == 'width' || attr.name == 'height')) ||\n\t\t(obj.constructor == mxPoint &&\n\t\t(attr.name == 'x' || attr.name == 'y')) ||\n\t\tmxUtils.isNumeric(attr.value);\n\t\n\treturn result;\n};\n\n/**\n * Function: beforeEncode\n *\n * Hook for subclassers to pre-process the object before\n * encoding. This returns the input object. The return\n * value of this function is used in <encode> to perform\n * the default encoding into the given node.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node to encode the object into.\n */\nmxObjectCodec.prototype.beforeEncode = function(enc, obj, node)\n{\n\treturn obj;\n};\n\n/**\n * Function: afterEncode\n *\n * Hook for subclassers to post-process the node\n * for the given object after encoding and return the\n * post-processed node. This implementation returns \n * the input node. The return value of this method\n * is returned to the encoder from <encode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * obj - Object to be encoded.\n * node - XML node that represents the default encoding.\n */\nmxObjectCodec.prototype.afterEncode = function(enc, obj, node)\n{\n\treturn node;\n};\n\n/**\n * Function: decode\n *\n * Parses the given node into the object or returns a new object\n * representing the given node.\n *\n * Dec is a reference to the calling decoder. It is used to decode\n * complex objects and resolve references.\n *\n * If a node has an id attribute then the object cache is checked for the\n * object. If the object is not yet in the cache then it is constructed\n * using the constructor of <template> and cached in <mxCodec.objects>.\n *\n * This implementation decodes all attributes and childs of a node\n * according to the following rules:\n *\n * - If the variable name is in <exclude> or if the attribute name is \"id\"\n * or \"as\" then it is ignored.\n * - If the variable name is in <idrefs> then <mxCodec.getObject> is used\n * to replace the reference with an object.\n * - The variable name is mapped using a reverse <mapping>.\n * - If the value has a child node, then the codec is used to create a\n * child object with the variable name taken from the \"as\" attribute.\n * - If the object is an array and the variable name is empty then the\n * value or child object is appended to the array.\n * - If an add child has no value or the object is not an array then\n * the child text content is evaluated using <mxUtils.eval>.\n *\n * For add nodes where the object is not an array and the variable name\n * is defined, the default mechanism is used, allowing to override/add\n * methods as follows:\n *\n * (code)\n * <Object>\n *   <add as=\"hello\"><![CDATA[\n *     function(arg1) {\n *       mxUtils.alert('Hello '+arg1);\n *     }\n *   ]]></add>\n * </Object>\n * (end) \n *\n * If no object exists for an ID in <idrefs> a warning is issued\n * using <mxLog.warn>.\n *\n * Returns the resulting object that represents the given XML node\n * or the object given to the method as the into parameter.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * into - Optional objec to encode the node into.\n */\nmxObjectCodec.prototype.decode = function(dec, node, into)\n{\n\tvar id = node.getAttribute('id');\n\tvar obj = dec.objects[id];\n\t\n\tif (obj == null)\n\t{\n\t\tobj = into || this.cloneTemplate();\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.putObject(id, obj);\n\t\t}\n\t}\n\t\n\tnode = this.beforeDecode(dec, node, obj);\n\tthis.decodeNode(dec, node, obj);\n\t\n    return this.afterDecode(dec, node, obj);\n};\t\n\n/**\n * Function: decodeNode\n * \n * Calls <decodeAttributes> and <decodeChildren> for the given node.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeNode = function(dec, node, obj)\n{\n\tif (node != null)\n\t{\n\t\tthis.decodeAttributes(dec, node, obj);\n\t\tthis.decodeChildren(dec, node, obj);\n\t}\n};\n\n/**\n * Function: decodeAttributes\n * \n * Decodes all attributes of the given node using <decodeAttribute>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeAttributes = function(dec, node, obj)\n{\n\tvar attrs = node.attributes;\n\t\n\tif (attrs != null)\n\t{\n\t\tfor (var i = 0; i < attrs.length; i++)\n\t\t{\n\t\t\tthis.decodeAttribute(dec, attrs[i], obj);\n\t\t}\n\t}\n};\n\n/**\n * Function: isIgnoredAttribute\n * \n * Returns true if the given attribute should be ignored. This implementation\n * returns true if the attribute name is \"as\" or \"id\".\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.isIgnoredAttribute = function(dec, attr, obj)\n{\n\treturn attr.nodeName == 'as' || attr.nodeName == 'id';\n};\n\n/**\n * Function: decodeAttribute\n * \n * Reads the given attribute into the specified object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * attr - XML attribute to be decoded.\n * obj - Objec to encode the attribute into.\n */\t\nmxObjectCodec.prototype.decodeAttribute = function(dec, attr, obj)\n{\n\tif (!this.isIgnoredAttribute(dec, attr, obj))\n\t{\n\t\tvar name = attr.nodeName;\n\t\t\n\t\t// Converts the string true and false to their boolean values.\n\t\t// This may require an additional check on the obj to see if\n\t\t// the existing field is a boolean value or uninitialized, in\n\t\t// which case we may want to convert true and false to a string.\n\t\tvar value = this.convertAttributeFromXml(dec, attr, obj);\n\t\tvar fieldname = this.getFieldName(name);\n\t\t\n\t\tif (this.isReference(obj, fieldname, value, false))\n\t\t{\n\t\t\tvar tmp = dec.getObject(value);\n\t\t\t\n\t\t\tif (tmp == null)\n\t\t\t{\n\t\t    \tmxLog.warn('mxObjectCodec.decode: No object for ' +\n\t\t    \t\tthis.getName() + '.' + name + '=' + value);\n\t\t    \treturn; // exit\n\t\t    }\n\t\t    \n\t\t    value = tmp;\n\t\t}\n\n\t\tif (!this.isExcluded(obj, name, value, false))\n\t\t{\n\t\t\t//mxLog.debug(mxUtils.getFunctionName(obj.constructor)+'.'+name+'='+value);\n\t\t\tobj[name] = value;\n\t\t}\n\t}\n};\n\n/**\n * Function: decodeChildren\n * \n * Decodes all children of the given node using <decodeChild>.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChildren = function(dec, node, obj)\n{\n\tvar child = node.firstChild;\n\t\n\twhile (child != null)\n\t{\n\t\tvar tmp = child.nextSibling;\n\t\t\n\t\tif (child.nodeType == mxConstants.NODETYPE_ELEMENT &&\n\t\t\t!this.processInclude(dec, child, obj))\n\t\t{\n\t\t\tthis.decodeChild(dec, child, obj);\n\t\t}\n\t\t\n\t\tchild = tmp;\n\t}\n};\n\n/**\n * Function: decodeChild\n * \n * Reads the specified child into the given object.\n * \n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * child - XML child element to be decoded.\n * obj - Objec to encode the node into.\n */\t\nmxObjectCodec.prototype.decodeChild = function(dec, child, obj)\n{\n\tvar fieldname = this.getFieldName(child.getAttribute('as'));\n\t\n\tif (fieldname == null || !this.isExcluded(obj, fieldname, child, false))\n\t{\n\t\tvar template = this.getFieldTemplate(obj, fieldname, child);\n\t\tvar value = null;\n\t\t\n\t\tif (child.nodeName == 'add')\n\t\t{\n\t\t\tvalue = child.getAttribute('value');\n\t\t\t\n\t\t\tif (value == null && mxObjectCodec.allowEval)\n\t\t\t{\n\t\t\t\tvalue = mxUtils.eval(mxUtils.getTextContent(child));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvalue = dec.decode(child, template);\n\t\t}\n\n\t\tthis.addObjectValue(obj, fieldname, value, template);\n\t}\n};\n\n/**\n * Function: getFieldTemplate\n * \n * Returns the template instance for the given field. This returns the\n * value of the field, null if the value is an array or an empty collection\n * if the value is a collection. The value is then used to populate the\n * field for a new instance. For strongly typed languages it may be\n * required to override this to return the correct collection instance\n * based on the encoded child.\n */\t\nmxObjectCodec.prototype.getFieldTemplate = function(obj, fieldname, child)\n{\n\tvar template = obj[fieldname];\n\t\n\t// Non-empty arrays are replaced completely\n    if (template instanceof Array && template.length > 0)\n    {\n        template = null;\n    }\n    \n    return template;\n};\n\n/**\n * Function: addObjectValue\n * \n * Sets the decoded child node as a value of the given object. If the\n * object is a map, then the value is added with the given fieldname as a\n * key. If the fieldname is not empty, then setFieldValue is called or\n * else, if the object is a collection, the value is added to the\n * collection. For strongly typed languages it may be required to\n * override this with the correct code to add an entry to an object.\n */\t\nmxObjectCodec.prototype.addObjectValue = function(obj, fieldname, value, template)\n{\n\tif (value != null && value != template)\n\t{\n\t\tif (fieldname != null && fieldname.length > 0)\n\t\t{\n\t\t\tobj[fieldname] = value;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tobj.push(value);\n\t\t}\n\t\t//mxLog.debug('Decoded '+mxUtils.getFunctionName(obj.constructor)+'.'+fieldname+': '+value);\n\t}\n};\n\n/**\n * Function: processInclude\n *\n * Returns true if the given node is an include directive and\n * executes the include by decoding the XML document. Returns\n * false if the given node is not an include directive.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the encoding/decoding process.\n * node - XML node to be checked.\n * into - Optional object to pass-thru to the codec.\n */\nmxObjectCodec.prototype.processInclude = function(dec, node, into)\n{\n\tif (node.nodeName == 'include')\n\t{\n\t\tvar name = node.getAttribute('name');\n\t\t\n\t\tif (name != null)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar xml = mxUtils.load(name).getDocumentElement();\n\t\t\t\t\n\t\t\t\tif (xml != null)\n\t\t\t\t{\n\t\t\t\t\tdec.decode(xml, into);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e)\n\t\t\t{\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\treturn false;\n};\n\n/**\n * Function: beforeDecode\n *\n * Hook for subclassers to pre-process the node for\n * the specified object and return the node to be\n * used for further processing by <decode>.\n * The object is created based on the template in the \n * calling method and is never null. This implementation\n * returns the input node. The return value of this\n * function is used in <decode> to perform\n * the default decoding into the given object.\n *\n * Parameters:\n *\n * dec - <mxCodec> that controls the decoding process.\n * node - XML node to be decoded.\n * obj - Object to encode the node into.\n */\nmxObjectCodec.prototype.beforeDecode = function(dec, node, obj)\n{\n\treturn node;\n};\n\n/**\n * Function: afterDecode\n *\n * Hook for subclassers to post-process the object after\n * decoding. This implementation returns the given object\n * without any changes. The return value of this method\n * is returned to the decoder from <decode>.\n *\n * Parameters:\n *\n * enc - <mxCodec> that controls the encoding process.\n * node - XML node to be decoded.\n * obj - Object that represents the default decoding.\n */\nmxObjectCodec.prototype.afterDecode = function(dec, node, obj)\n{\n\treturn obj;\n};\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxCellCodec\n\t *\n\t * Codec for <mxCell>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - children\n\t * - edges\n\t * - overlays\n\t * - mxTransient\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t * - source\n\t * - target\n\t * \n\t * Transient fields can be added using the following code:\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).exclude.push('name_of_field');\n\t * \n\t * To subclass <mxCell>, replace the template and add an alias as\n\t * follows.\n\t * \n\t * (code)\n\t * function CustomCell(value, geometry, style)\n\t * {\n\t *   mxCell.apply(this, arguments);\n\t * }\n\t * \n\t * mxUtils.extend(CustomCell, mxCell);\n\t * \n\t * mxCodecRegistry.getCodec(mxCell).template = new CustomCell();\n\t * mxCodecRegistry.addAlias('CustomCell', 'mxCell');\n\t * (end)\n\t */\n\tvar codec = new mxObjectCodec(new mxCell(),\n\t\t['children', 'edges', 'overlays', 'mxTransient'],\n\t\t['parent', 'source', 'target']);\n\n\t/**\n\t * Function: isCellCodec\n\t *\n\t * Returns true since this is a cell codec.\n\t */\n\tcodec.isCellCodec = function()\n\t{\n\t\treturn true;\n\t};\n\n\t/**\n\t * Overidden to disable conversion of value to number.\n\t */\n\tcodec.isNumericAttribute = function(dec, attr, obj)\n\t{\n\t\treturn attr.nodeName !== 'value' && mxObjectCodec.prototype.isNumericAttribute.apply(this, arguments);\n\t};\n\t\n\t/**\n\t * Function: isExcluded\n\t *\n\t * Excludes user objects that are XML nodes.\n\t */ \n\tcodec.isExcluded = function(obj, attr, value, isWrite)\n\t{\n\t\treturn mxObjectCodec.prototype.isExcluded.apply(this, arguments) ||\n\t\t\t(isWrite && attr == 'value' &&\n\t\t\tvalue.nodeType == mxConstants.NODETYPE_ELEMENT);\n\t};\n\t\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes an <mxCell> and wraps the XML up inside the\n\t * XML of the user object (inversion).\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (obj.value != null && obj.value.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Wraps the graphical annotation up in the user object (inversion)\n\t\t\t// by putting the result of the default encoding into a clone of the\n\t\t\t// user object (node type 1) and returning this cloned user object.\n\t\t\tvar tmp = node;\n\t\t\tnode = mxUtils.importNode(enc.document, obj.value, true);\n\t\t\tnode.appendChild(tmp);\n\t\t\t\n\t\t\t// Moves the id attribute to the outermost XML node, namely the\n\t\t\t// node which denotes the object boundaries in the file.\n\t\t\tvar id = tmp.getAttribute('id');\n\t\t\tnode.setAttribute('id', id);\n\t\t\ttmp.removeAttribute('id');\n\t\t}\n\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes an <mxCell> and uses the enclosing XML node as\n\t * the user object for the cell (inversion).\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tvar inner = node.cloneNode(true);\n\t\tvar classname = this.getName();\n\t\t\n\t\tif (node.nodeName != classname)\n\t\t{\n\t\t\t// Passes the inner graphical annotation node to the\n\t\t\t// object codec for further processing of the cell.\n\t\t\tvar tmp = node.getElementsByTagName(classname)[0];\n\t\t\t\n\t\t\tif (tmp != null && tmp.parentNode == node)\n\t\t\t{\n\t\t\t\tmxUtils.removeWhitespace(tmp, true);\n\t\t\t\tmxUtils.removeWhitespace(tmp, false);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\tinner = tmp;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tinner = null;\n\t\t\t}\n\t\t\t\n\t\t\t// Creates the user object out of the XML node\n\t\t\tobj.value = node.cloneNode(true);\n\t\t\tvar id = obj.value.getAttribute('id');\n\t\t\t\n\t\t\tif (id != null)\n\t\t\t{\n\t\t\t\tobj.setId(id);\n\t\t\t\tobj.value.removeAttribute('id');\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Uses ID from XML file as ID for cell in model\n\t\t\tobj.setId(node.getAttribute('id'));\n\t\t}\n\t\t\t\n\t\t// Preprocesses and removes all Id-references in order to use the\n\t\t// correct encoder (this) for the known references to cells (all).\n\t\tif (inner != null)\n\t\t{\n\t\t\tfor (var i = 0; i < this.idrefs.length; i++)\n\t\t\t{\n\t\t\t\tvar attr = this.idrefs[i];\n\t\t\t\tvar ref = inner.getAttribute(attr);\n\t\t\t\t\n\t\t\t\tif (ref != null)\n\t\t\t\t{\n\t\t\t\t\tinner.removeAttribute(attr);\n\t\t\t\t\tvar object = dec.objects[ref] || dec.lookup(ref);\n\t\t\t\t\t\n\t\t\t\t\tif (object == null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Needs to decode forward reference\n\t\t\t\t\t\tvar element = dec.getElementById(ref);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (element != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar decoder = mxCodecRegistry.codecs[element.nodeName] || this;\n\t\t\t\t\t\t\tobject = decoder.decode(dec, element);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj[attr] = object;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn inner;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxModelCodec\n\t *\n\t * Codec for <mxGraphModel>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphModel());\n\n\t/**\n\t * Function: encodeObject\n\t *\n\t * Encodes the given <mxGraphModel> by writing a (flat) XML sequence of\n\t * cell nodes as produced by the <mxCellCodec>. The sequence is\n\t * wrapped-up in a node with the name root.\n\t */\n\tcodec.encodeObject = function(enc, obj, node)\n\t{\n\t\tvar rootNode = enc.document.createElement('root');\n\t\tenc.encodeCell(obj.getRoot(), rootNode);\n\t\tnode.appendChild(rootNode);\n\t};\n\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'root')\n\t\t{\n\t\t\tthis.decodeRoot(dec, child, obj);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t\t}\n\t};\n\n\t/**\n\t * Function: decodeRoot\n\t *\n\t * Reads the cells into the graph model. All cells\n\t * are children of the root element in the node.\n\t */\n\tcodec.decodeRoot = function(dec, root, model)\n\t{\n\t\tvar rootCell = null;\n\t\tvar tmp = root.firstChild;\n\t\t\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tvar cell = dec.decodeCell(tmp);\n\t\t\t\n\t\t\tif (cell != null && cell.getParent() == null)\n\t\t\t{\n\t\t\t\trootCell = cell;\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\n\n\t\t// Sets the root on the model if one has been decoded\n\t\tif (rootCell != null)\n\t\t{\n\t\t\tmodel.setRoot(rootCell);\n\t\t}\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxRootChangeCodec\n\t *\n\t * Codec for <mxRootChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - root\n\t */\n\tvar codec = new mxObjectCodec(new mxRootChange(),\n\t\t['model', 'previous', 'root']);\n\n\t/**\n\t * Function: onEncode\n\t *\n\t * Encodes the child recursively.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tenc.encodeCell(obj.root, node);\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the optional children as cells\n\t * using the respective decoder.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.root = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.root;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxChildChangeCodec\n\t *\n\t * Codec for <mxChildChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t * - previousIndex\n\t * - child\n\t *\n\t * Reference Fields:\n\t *\n\t * - parent\n\t */\n\tvar codec = new mxObjectCodec(new mxChildChange(),\n\t\t['model', 'child', 'previousIndex'],\n\t\t['parent', 'previous']);\n\n\t/**\n\t * Function: isReference\n\t *\n\t * Returns true for the child attribute if the child\n\t * cell had a previous parent or if we're reading the\n\t * child as an attribute rather than a child node, in\n\t * which case it's always a reference.\n\t */\n\tcodec.isReference = function(obj, attr, value, isWrite)\n\t{\n\t\tif (attr == 'child' && (obj.previous != null || !isWrite))\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn mxUtils.indexOf(this.idrefs, attr) >= 0;\n\t};\n\n\t/**\n\t * Function: afterEncode\n\t *\n\t * Encodes the child recusively and adds the result\n\t * to the given node.\n\t */\n\tcodec.afterEncode = function(enc, obj, node)\n\t{\n\t\tif (this.isReference(obj, 'child',  obj.child, true))\n\t\t{\n\t\t\t// Encodes as reference (id)\n\t\t\tnode.setAttribute('child', enc.getId(obj.child));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// At this point, the encoder is no longer able to know which cells\n\t\t\t// are new, so we have to encode the complete cell hierarchy and\n\t\t\t// ignore the ones that are already there at decoding time. Note:\n\t\t\t// This can only be resolved by moving the notify event into the\n\t\t\t// execute of the edit.\n\t\t\tenc.encodeCell(obj.child, node);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the any child nodes as using the respective\n\t * codec from the registry.\n\t */\n\tcodec.beforeDecode = function(dec, node, obj)\n\t{\n\t\tif (node.firstChild != null &&\n\t\t\tnode.firstChild.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t{\n\t\t\t// Makes sure the original node isn't modified\n\t\t\tnode = node.cloneNode(true);\n\t\t\t\n\t\t\tvar tmp = node.firstChild;\n\t\t\tobj.child = dec.decodeCell(tmp, false);\n\n\t\t\tvar tmp2 = tmp.nextSibling;\n\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\ttmp = tmp2;\n\t\t\t\n\t\t\twhile (tmp != null)\n\t\t\t{\n\t\t\t\ttmp2 = tmp.nextSibling;\n\t\t\t\t\n\t\t\t\tif (tmp.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\t// Ignores all existing cells because those do not need to\n\t\t\t\t\t// be re-inserted into the model. Since the encoded version\n\t\t\t\t\t// of these cells contains the new parent, this would leave\n\t\t\t\t\t// to an inconsistent state on the model (ie. a parent\n\t\t\t\t\t// change without a call to parentForCellChanged).\n\t\t\t\t\tvar id = tmp.getAttribute('id');\n\t\t\t\t\t\n\t\t\t\t\tif (dec.lookup(id) == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdec.decodeCell(tmp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttmp.parentNode.removeChild(tmp);\n\t\t\t\ttmp = tmp2;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvar childRef = node.getAttribute('child');\n\t\t\tobj.child = dec.getObject(childRef);\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\t\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores object state in the child change.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Cells are encoded here after a complete transaction so the previous\n\t\t// parent must be restored on the cell for the case where the cell was\n\t\t// added. This is needed for the local model to identify the cell as a\n\t\t// new cell and register the ID.\n        if (obj.child != null)\n        {\n            if (obj.child.parent != null && obj.previous != null &&\n                obj.child.parent != obj.previous)\n            {\n            \t\n                obj.previous = obj.child.parent;\n            }\n\n            obj.child.parent = obj.previous;\n            obj.previous = obj.parent;\n            obj.previousIndex = obj.index;\n        }\n\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxTerminalChangeCodec\n\t *\n\t * Codec for <mxTerminalChange>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec> and\n\t * the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - model\n\t * - previous\n\t *\n\t * Reference Fields:\n\t *\n\t * - cell\n\t * - terminal\n\t */\n\tvar codec = new mxObjectCodec(new mxTerminalChange(),\n\t\t['model', 'previous'], ['cell', 'terminal']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\tobj.previous = obj.terminal;\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxGenericChangeCodec\n *\n * Codec for <mxValueChange>s, <mxStyleChange>s, <mxGeometryChange>s,\n * <mxCollapseChange>s and <mxVisibleChange>s. This class is created\n * and registered dynamically at load time and used implicitely\n * via <mxCodec> and the <mxCodecRegistry>.\n *\n * Transient Fields:\n *\n * - model\n * - previous\n *\n * Reference Fields:\n *\n * - cell\n * \n * Constructor: mxGenericChangeCodec\n *\n * Factory function that creates a <mxObjectCodec> for\n * the specified change and fieldname.\n *\n * Parameters:\n *\n * obj - An instance of the change object.\n * variable - The fieldname for the change data.\n */\nvar mxGenericChangeCodec = function(obj, variable)\n{\n\tvar codec = new mxObjectCodec(obj,  ['model', 'previous'], ['cell']);\n\n\t/**\n\t * Function: afterDecode\n\t *\n\t * Restores the state by assigning the previous value.\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Allows forward references in sessions. This is a workaround\n\t\t// for the sequence of edits in mxGraph.moveCells and cellsAdded.\n\t\tif (mxUtils.isNode(obj.cell))\n\t\t{\n\t\t\tobj.cell = dec.decodeCell(obj.cell, false);\n\t\t}\n\n\t\tobj.previous = obj[variable];\n\n\t\treturn obj;\n\t};\n\t\n\treturn codec;\n};\n\n// Registers the codecs\nmxCodecRegistry.register(mxGenericChangeCodec(new mxValueChange(), 'value'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxStyleChange(), 'style'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxGeometryChange(), 'geometry'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCollapseChange(), 'collapsed'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxVisibleChange(), 'visible'));\nmxCodecRegistry.register(mxGenericChangeCodec(new mxCellAttributeChange(), 'value'));\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphCodec\n\t *\n\t * Codec for <mxGraph>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - graphListeners\n\t * - eventListeners\n\t * - view\n\t * - container\n\t * - cellRenderer\n\t * - editor\n\t * - selection\n\t */\n\treturn new mxObjectCodec(new mxGraph(),\n\t\t['graphListeners', 'eventListeners', 'view', 'container',\n\t\t'cellRenderer', 'editor', 'selection']);\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxGraphViewCodec\n\t *\n\t * Custom encoder for <mxGraphView>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only writes views\n\t * into a XML format that can be used to create an image for\n\t * the graph, that is, it contains absolute coordinates with\n\t * computed perimeters, edge styles and cell styles.\n\t */\n\tvar codec = new mxObjectCodec(new mxGraphView());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes the given <mxGraphView> using <encodeCell>\n\t * starting at the model's root. This returns the\n\t * top-level graph node of the recursive encoding.\n\t */\n\tcodec.encode = function(enc, view)\n\t{\n\t\treturn this.encodeCell(enc, view,\n\t\t\tview.graph.getModel().getRoot());\n\t};\n\n\t/**\n\t * Function: encodeCell\n\t *\n\t * Recursively encodes the specifed cell. Uses layer\n\t * as the default nodename. If the cell's parent is\n\t * null, then graph is used for the nodename. If\n\t * <mxGraphModel.isEdge> returns true for the cell,\n\t * then edge is used for the nodename, else if\n\t * <mxGraphModel.isVertex> returns true for the cell,\n\t * then vertex is used for the nodename.\n\t *\n\t * <mxGraph.getLabel> is used to create the label\n\t * attribute for the cell. For graph nodes and vertices\n\t * the bounds are encoded into x, y, width and height.\n\t * For edges the points are encoded into a points\n\t * attribute as a space-separated list of comma-separated\n\t * coordinate pairs (eg. x0,y0 x1,y1 ... xn,yn). All\n\t * values from the cell style are added as attribute\n\t * values to the node. \n\t */\n\tcodec.encodeCell = function(enc, view, cell)\n\t{\n\t\tvar model = view.graph.getModel();\n\t\tvar state = view.getState(cell);\n\t\tvar parent = model.getParent(cell);\n\t\t\n\t\tif (parent == null || state != null)\n\t\t{\n\t\t\tvar childCount = model.getChildCount(cell);\n\t\t\tvar geo = view.graph.getCellGeometry(cell);\n\t\t\tvar name = null;\n\t\t\t\n\t\t\tif (parent == model.getRoot())\n\t\t\t{\n\t\t\t\tname = 'layer';\n\t\t\t}\n\t\t\telse if (parent == null)\n\t\t\t{\n\t\t\t\tname = 'graph';\n\t\t\t}\n\t\t\telse if (model.isEdge(cell))\n\t\t\t{\n\t\t\t\tname = 'edge';\n\t\t\t}\n\t\t\telse if (childCount > 0 && geo != null)\n\t\t\t{\n\t\t\t\tname = 'group';\n\t\t\t}\n\t\t\telse if (model.isVertex(cell))\n\t\t\t{\n\t\t\t\tname = 'vertex';\n\t\t\t}\n\t\t\t\n\t\t\tif (name != null)\n\t\t\t{\n\t\t\t\tvar node = enc.document.createElement(name);\n\t\t\t\tvar lab = view.graph.getLabel(cell);\n\t\t\t\t\n\t\t\t\tif (lab != null)\n\t\t\t\t{\n\t\t\t\t\tnode.setAttribute('label', view.graph.getLabel(cell));\n\t\t\t\t\t\n\t\t\t\t\tif (view.graph.isHtmlLabel(cell))\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('html', true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tif (parent == null)\n\t\t\t\t{\n\t\t\t\t\tvar bounds = view.getGraphBounds();\n\t\t\t\t\t\n\t\t\t\t\tif (bounds != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(bounds.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(bounds.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(bounds.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(bounds.height));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tnode.setAttribute('scale', view.scale);\n\t\t\t\t}\n\t\t\t\telse if (state != null && geo != null)\n\t\t\t\t{\n\t\t\t\t\t// Writes each key, value in the style pair to an attribute\n\t\t\t\t    for (var i in state.style)\n\t\t\t\t    {\n\t\t\t\t    \tvar value = state.style[i];\n\t\t\n\t\t\t\t    \t// Tries to turn objects and functions into strings\n\t\t\t\t\t    if (typeof(value) == 'function' &&\n\t\t\t\t\t\t\ttypeof(value) == 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t    \tvalue = mxStyleRegistry.getName(value);\n\t\t\t\t        }\n\t\t\t\t    \t\n\t\t\t\t    \tif (value != null &&\n\t\t\t\t    \t\ttypeof(value) != 'function' &&\n\t\t\t\t\t\t\ttypeof(value) != 'object')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute(i, value);\n\t\t\t\t        }\n\t\t\t\t    }\n\t\t\t\t    \n\t\t\t\t\tvar abs = state.absolutePoints;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the list of points into one attribute\n\t\t\t\t\tif (abs != null && abs.length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar pts = Math.round(abs[0].x) + ',' + Math.round(abs[0].y);\n\t\t\n\t\t\t\t\t\tfor (var i=1; i<abs.length; i++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpts += ' ' + Math.round(abs[i].x) + ',' +\n\t\t\t\t\t\t\t\tMath.round(abs[i].y);\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\tnode.setAttribute('points', pts);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Writes the bounds into 4 attributes\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.setAttribute('x', Math.round(state.x));\n\t\t\t\t\t\tnode.setAttribute('y', Math.round(state.y));\n\t\t\t\t\t\tnode.setAttribute('width', Math.round(state.width));\n\t\t\t\t\t\tnode.setAttribute('height', Math.round(state.height));\t\t\t\t\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tvar offset = state.absoluteOffset;\n\t\t\t\t\t\n\t\t\t\t\t// Writes the offset into 2 attributes\n\t\t\t\t\tif (offset != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (offset.x != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dx', Math.round(offset.x));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (offset.y != 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tnode.setAttribute('dy', Math.round(offset.y));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\n\t\t\t\tfor (var i=0; i<childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar childNode = this.encodeCell(enc,\n\t\t\t\t\t\t\tview, model.getChildAt(cell, i));\n\t\t\t\t\t\n\t\t\t\t\tif (childNode != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tnode.appendChild(childNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn node;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxStylesheetCodec\n *\n * Codec for <mxStylesheet>s. This class is created and registered\n * dynamically at load time and used implicitely via <mxCodec>\n * and the <mxCodecRegistry>.\n */\nvar mxStylesheetCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxStylesheet());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Encodes a stylesheet. See <decode> for a description of the\n\t * format.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\tvar node = enc.document.createElement(this.getName());\n\t\t\n\t\tfor (var i in obj.styles)\n\t\t{\n\t\t\tvar style = obj.styles[i];\n\t\t\tvar styleNode = enc.document.createElement('add');\n\t\t\t\n\t\t\tif (i != null)\n\t\t\t{\n\t\t\t\tstyleNode.setAttribute('as', i);\n\t\t\t\t\n\t\t\t\tfor (var j in style)\n\t\t\t\t{\n\t\t\t\t\tvar value = this.getStringValue(j, style[j]);\n\t\t\t\t\t\n\t\t\t\t\tif (value != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar entry = enc.document.createElement('add');\n\t\t\t\t\t\tentry.setAttribute('value', value);\n\t\t\t\t\t\tentry.setAttribute('as', j);\n\t\t\t\t\t\tstyleNode.appendChild(entry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (styleNode.childNodes.length > 0)\n\t\t\t\t{\n\t\t\t\t\tnode.appendChild(styleNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t    return node;\n\t};\n\n\t/**\n\t * Function: getStringValue\n\t *\n\t * Returns the string for encoding the given value.\n\t */\n\tcodec.getStringValue = function(key, value)\n\t{\n\t\tvar type = typeof(value);\n\t\t\n\t\tif (type == 'function')\n\t\t{\n\t\t\tvalue = mxStyleRegistry.getName(style[j]);\n\t\t}\n\t\telse if (type == 'object')\n\t\t{\n\t\t\tvalue = null;\n\t\t}\n\t\t\n\t\treturn value;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new style.\n\t *\n\t * Attributes:\n\t *\n\t * as - Name of the style.\n\t * extend - Name of the style to inherit from.\n\t *\n\t * Each node contains another sequence of add and remove nodes with the following\n\t * attributes:\n\t *\n\t * as - Name of the style (see <mxConstants>).\n\t * value - Value for the style.\n\t *\n\t * Instead of the value-attribute, one can put Javascript expressions into\n\t * the node as follows if <mxStylesheetCodec.allowEval> is true:\n\t * <add as=\"perimeter\">mxPerimeter.RectanglePerimeter</add>\n\t *\n\t * A remove node will remove the entry with the name given in the as-attribute\n\t * from the style.\n\t * \n\t * Example:\n\t *\n\t * (code)\n\t * <mxStylesheet as=\"stylesheet\">\n\t *   <add as=\"text\">\n\t *     <add as=\"fontSize\" value=\"12\"/>\n\t *   </add>\n\t *   <add as=\"defaultVertex\" extend=\"text\">\n\t *     <add as=\"shape\" value=\"rectangle\"/>\n\t *   </add>\n\t * </mxStylesheet>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar obj = into || new this.template.constructor();\n\t\tvar id = node.getAttribute('id');\n\t\t\n\t\tif (id != null)\n\t\t{\n\t\t\tdec.objects[id] = obj;\n\t\t}\n\t\t\n\t\tnode = node.firstChild;\n\t\t\n\t\twhile (node != null)\n\t\t{\n\t\t\tif (!this.processInclude(dec, node, obj) && node.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\n\t\t\t\tif (as != null)\n\t\t\t\t{\n\t\t\t\t\tvar extend = node.getAttribute('extend');\n\t\t\t\t\tvar style = (extend != null) ? mxUtils.clone(obj.styles[extend]) : null;\n\t\t\t\t\t\n\t\t\t\t\tif (style == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (extend != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmxLog.warn('mxStylesheetCodec.decode: stylesheet ' +\n\t\t\t\t\t\t\t\textend + ' not found to extend');\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tstyle = new Object();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tvar entry = node.firstChild;\n\t\t\t\t\t\n\t\t\t\t\twhile (entry != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (entry.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t \tvar key = entry.getAttribute('as');\n\t\t\t\t\t\t \t\n\t\t\t\t\t\t \tif (entry.nodeName == 'add')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \tvar text = mxUtils.getTextContent(entry);\n\t\t\t\t\t\t\t \tvar value = null;\n\t\t\t\t\t\t\t \t\n\t\t\t\t\t\t\t \tif (text != null && text.length > 0 && mxStylesheetCodec.allowEval)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = mxUtils.eval(text);\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t\t \telse\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tvalue = entry.getAttribute('value');\n\t\t\t\t\t\t\t \t\t\n\t\t\t\t\t\t\t \t\tif (mxUtils.isNumeric(value))\n\t\t\t\t\t\t\t \t\t{\n\t\t\t\t\t\t\t\t\t\tvalue = parseFloat(value);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t \t}\n\n\t\t\t\t\t\t\t \tif (value != null)\n\t\t\t\t\t\t\t \t{\n\t\t\t\t\t\t\t \t\tstyle[key] = value;\n\t\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse if (entry.nodeName == 'remove')\n\t\t\t\t\t\t \t{\n\t\t\t\t\t\t \t\tdelete style[key];\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tentry = entry.nextSibling;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tobj.putCellStyle(as, style);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tnode = node.nextSibling;\n\t\t}\n\t\t\n\t\treturn obj;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input.\n */\nmxStylesheetCodec.allowEval = true;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultKeyHandlerCodec\n\t *\n\t * Custom codec for configuring <mxDefaultKeyHandler>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing key handlers, it does not encode or create key handlers.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultKeyHandler());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Binds a keystroke to an actionname.\n\t *\n\t * Attributes:\n\t *\n\t * as - Keycode.\n\t * action - Actionname to execute in editor.\n\t * control - Optional boolean indicating if\n\t * \t\tthe control key must be pressed.\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <mxDefaultKeyHandler as=\"keyHandler\">\n\t *   <add as=\"88\" control=\"true\" action=\"cut\"/>\n\t *   <add as=\"67\" control=\"true\" action=\"copy\"/>\n\t *   <add as=\"86\" control=\"true\" action=\"paste\"/>\n\t * </mxDefaultKeyHandler>\n\t * (end)\n\t *\n\t * The keycodes are for the x, c and v keys.\n\t *\n\t * See also: <mxDefaultKeyHandler.bindAction>,\n\t * http://www.js-examples.com/page/tutorials__key_codes.html\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (!this.processInclude(dec, node, into) &&\n\t\t\t\t\tnode.nodeName == 'add')\n\t\t\t\t{\n\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\tvar control = node.getAttribute('control');\n\t\t\t\t\t\n\t\t\t\t\tinto.bindAction(as, action, control);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\n/**\n * Class: mxDefaultToolbarCodec\n *\n * Custom codec for configuring <mxDefaultToolbar>s. This class is created\n * and registered dynamically at load time and used implicitely via\n * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n * data for existing toolbars handlers, it does not encode or create toolbars.\n */\nvar mxDefaultToolbarCodec = mxCodecRegistry.register(function()\n{\n\tvar codec = new mxObjectCodec(new mxDefaultToolbar());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Reads a sequence of the following child nodes\n\t * and attributes:\n\t *\n\t * Child Nodes:\n\t *\n\t * add - Adds a new item to the toolbar. See below for attributes.\n\t * separator - Adds a vertical separator. No attributes.\n\t * hr - Adds a horizontal separator. No attributes.\n\t * br - Adds a linefeed. No attributes. \n\t *\n\t * Attributes:\n\t *\n\t * as - Resource key for the label.\n\t * action - Name of the action to execute in enclosing editor.\n\t * mode - Modename (see below).\n\t * template - Template name for cell insertion.\n\t * style - Optional style to override the template style.\n\t * icon - Icon (relative/absolute URL).\n\t * pressedIcon - Optional icon for pressed state (relative/absolute URL).\n\t * id - Optional ID to be used for the created DOM element.\n\t * toggle - Optional 0 or 1 to disable toggling of the element. Default is\n\t * 1 (true).\n\t *\n\t * The action, mode and template attributes are mutually exclusive. The\n\t * style can only be used with the template attribute. The add node may\n\t * contain another sequence of add nodes with as and action attributes\n\t * to create a combo box in the toolbar. If the icon is specified then\n\t * a list of the child node is expected to have its template attribute\n\t * set and the action is ignored instead.\n\t * \n\t * Nodes with a specified template may define a function to be used for\n\t * inserting the cloned template into the graph. Here is an example of such\n\t * a node:\n\t * \n\t * (code)\n\t * <add as=\"Swimlane\" template=\"swimlane\" icon=\"images/swimlane.gif\"><![CDATA[\n\t *   function (editor, cell, evt, targetCell)\n\t *   {\n\t *     var pt = mxUtils.convertPoint(\n\t *       editor.graph.container, mxEvent.getClientX(evt),\n\t *         mxEvent.getClientY(evt));\n\t *     return editor.addVertex(targetCell, cell, pt.x, pt.y);\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * In the above function, editor is the enclosing <mxEditor> instance, cell\n\t * is the clone of the template, evt is the mouse event that represents the\n\t * drop and targetCell is the cell under the mousepointer where the drop\n\t * occurred. The targetCell is retrieved using <mxGraph.getCellAt>.\n\t *\n\t * Futhermore, nodes with the mode attribute may define a function to\n\t * be executed upon selection of the respective toolbar icon. In the\n\t * example below, the default edge style is set when this specific\n\t * connect-mode is activated:\n\t *\n\t * (code)\n\t * <add as=\"connect\" mode=\"connect\"><![CDATA[\n\t *   function (editor)\n\t *   {\n\t *     if (editor.defaultEdge != null)\n\t *     {\n\t *       editor.defaultEdge.style = 'straightEdge';\n\t *     }\n\t *   }\n\t * ]]></add>\n\t * (end)\n\t * \n\t * Both functions require <mxDefaultToolbarCodec.allowEval> to be set to true.\n\t *\n\t * Modes:\n\t *\n\t * select - Left mouse button used for rubberband- & cell-selection.\n\t * connect - Allows connecting vertices by inserting new edges.\n\t * pan - Disables selection and switches to panning on the left button.\n\t *\n\t * Example:\n\t *\n\t * To add items to the toolbar:\n\t * \n\t * (code)\n\t * <mxDefaultToolbar as=\"toolbar\">\n\t *   <add as=\"save\" action=\"save\" icon=\"images/save.gif\"/>\n\t *   <br/><hr/>\n\t *   <add as=\"select\" mode=\"select\" icon=\"images/select.gif\"/>\n\t *   <add as=\"connect\" mode=\"connect\" icon=\"images/connect.gif\"/>\n\t * </mxDefaultToolbar>\n\t * (end)\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tif (into != null)\n\t\t{\n\t\t\tvar editor = into.editor;\n\t\t\tnode = node.firstChild;\n\t\t\t\n\t\t\twhile (node != null)\n\t\t\t{\n\t\t\t\tif (node.nodeType == mxConstants.NODETYPE_ELEMENT)\n\t\t\t\t{\n\t\t\t\t\tif (!this.processInclude(dec, node, into))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (node.nodeName == 'separator')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.addSeparator();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'br')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addBreak();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'hr')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tinto.toolbar.addLine();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (node.nodeName == 'add')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar as = node.getAttribute('as');\n\t\t\t\t\t\t\tas = mxResources.get(as) || as;\n\t\t\t\t\t\t\tvar icon = node.getAttribute('icon');\n\t\t\t\t\t\t\tvar pressedIcon = node.getAttribute('pressedIcon');\n\t\t\t\t\t\t\tvar action = node.getAttribute('action');\n\t\t\t\t\t\t\tvar mode = node.getAttribute('mode');\n\t\t\t\t\t\t\tvar template = node.getAttribute('template');\n\t\t\t\t\t\t\tvar toggle = node.getAttribute('toggle') != '0';\n\t\t\t\t\t\t\tvar text = mxUtils.getTextContent(node);\n\t\t\t\t\t\t\tvar elt = null;\n\n\t\t\t\t\t\t\tif (action != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\telt = into.addItem(as, icon, action, pressedIcon);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (mode != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar funct = (mxDefaultToolbarCodec.allowEval) ? mxUtils.eval(text) : null;\n\t\t\t\t\t\t\t\telt = into.addMode(as, icon, mode, pressedIcon, funct);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (template != null || (text != null && text.length > 0))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar cell = editor.templates[template];\n\t\t\t\t\t\t\t\tvar style = node.getAttribute('style');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (cell != null && style != null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcell = editor.graph.cloneCell(cell);\n\t\t\t\t\t\t\t\t\tcell.setStyle(style);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tvar insertFunction = null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (text != null && text.length > 0 && mxDefaultToolbarCodec.allowEval)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tinsertFunction = mxUtils.eval(text);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telt = into.addPrototype(as, icon, cell, pressedIcon, insertFunction, toggle);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar children = mxUtils.getChildNodes(node);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (children.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif (icon == null)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar combo = into.addActionCombo(as);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(combo, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar act = child.getAttribute('action');\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addActionOption(combo, lab, act);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvar select = null;\n\t\t\t\t\t\t\t\t\t\tvar create = function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar template = editor.templates[select.value];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (template != null)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar clone = template.clone();\n\t\t\t\t\t\t\t\t\t\t\t\tvar style = select.options[select.selectedIndex].cellStyle;\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tif (style != null)\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tclone.setStyle(style);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn clone;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tmxLog.warn('Template '+template+' not found');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tvar img = into.addPrototype(as, icon, create, null, null, toggle);\n\t\t\t\t\t\t\t\t\t\tselect = into.addCombo();\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Selects the toolbar icon if a selection change\n\t\t\t\t\t\t\t\t\t\t// is made in the corresponding combobox.\n\t\t\t\t\t\t\t\t\t\tmxEvent.addListener(select, 'change', function()\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.selectMode(img, function(evt)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar pt = mxUtils.convertPoint(editor.graph.container,\n\t\t\t\t\t\t\t\t\t\t\t\t\tmxEvent.getClientX(evt), mxEvent.getClientY(evt));\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\treturn editor.addVertex(null, funct(), pt.x, pt.y);\n\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tinto.toolbar.noReset = false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t// Adds the entries to the combobox\n\t\t\t\t\t\t\t\t\t\tfor (var i=0; i<children.length; i++)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tvar child = children[i];\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tif (child.nodeName == 'separator')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tinto.addOption(select, '---');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\telse if (child.nodeName == 'add')\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tvar lab = child.getAttribute('as');\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = child.getAttribute('template');\n\t\t\t\t\t\t\t\t\t\t\t\tvar option = into.addOption(select, lab, tmp || template);\n\t\t\t\t\t\t\t\t\t\t\t\toption.cellStyle = child.getAttribute('style');\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Assigns an ID to the created element to access it later.\n\t\t\t\t\t\t\tif (elt != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar id = node.getAttribute('id');\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (id != null && id.length > 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\telt.setAttribute('id', id);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tnode = node.nextSibling;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n/**\n * Variable: allowEval\n * \n * Static global switch that specifies if the use of eval is allowed for\n * evaluating text content. Default is true. Set this to false if stylesheets\n * may contain user input\n */\nmxDefaultToolbarCodec.allowEval = true;\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxDefaultPopupMenuCodec\n\t *\n\t * Custom codec for configuring <mxDefaultPopupMenu>s. This class is created\n\t * and registered dynamically at load time and used implicitely via\n\t * <mxCodec> and the <mxCodecRegistry>. This codec only reads configuration\n\t * data for existing popup menus, it does not encode or create menus. Note\n\t * that this codec only passes the configuration node to the popup menu,\n\t * which uses the config to dynamically create menus. See\n\t * <mxDefaultPopupMenu.createMenu>.\n\t */\n\tvar codec = new mxObjectCodec(new mxDefaultPopupMenu());\n\n\t/**\n\t * Function: encode\n\t *\n\t * Returns null.\n\t */\n\tcodec.encode = function(enc, obj)\n\t{\n\t\treturn null;\n\t};\n\t\n\t/**\n\t * Function: decode\n\t *\n\t * Uses the given node as the config for <mxDefaultPopupMenu>.\n\t */\n\tcodec.decode = function(dec, node, into)\n\t{\n\t\tvar inc = node.getElementsByTagName('include')[0];\n\t\t\n\t\tif (inc != null)\n\t\t{\n\t\t\tthis.processInclude(dec, inc, into);\n\t\t}\n\t\telse if (into != null)\n\t\t{\n\t\t\tinto.config = node;\n\t\t}\n\t\t\n\t\treturn into;\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n/**\n * Copyright (c) 2006-2015, JGraph Ltd\n * Copyright (c) 2006-2015, Gaudenz Alder\n */\nmxCodecRegistry.register(function()\n{\n\t/**\n\t * Class: mxEditorCodec\n\t *\n\t * Codec for <mxEditor>s. This class is created and registered\n\t * dynamically at load time and used implicitely via <mxCodec>\n\t * and the <mxCodecRegistry>.\n\t *\n\t * Transient Fields:\n\t *\n\t * - modified\n\t * - lastSnapshot\n\t * - ignoredChanges\n\t * - undoManager\n\t * - graphContainer\n\t * - toolbarContainer\n\t */\n\tvar codec = new mxObjectCodec(new mxEditor(),\n\t\t['modified', 'lastSnapshot', 'ignoredChanges',\n\t\t'undoManager', 'graphContainer', 'toolbarContainer']);\n\n\t/**\n\t * Function: beforeDecode\n\t *\n\t * Decodes the ui-part of the configuration node by reading\n\t * a sequence of the following child nodes and attributes\n\t * and passes the control to the default decoding mechanism:\n\t *\n\t * Child Nodes:\n\t *\n\t * stylesheet - Adds a CSS stylesheet to the document.\n\t * resource - Adds the basename of a resource bundle.\n\t * add - Creates or configures a known UI element.\n\t *\n\t * These elements may appear in any order given that the\n\t * graph UI element is added before the toolbar element\n\t * (see Known Keys).\n\t *\n\t * Attributes:\n\t *\n\t * as - Key for the UI element (see below).\n\t * element - ID for the element in the document.\n\t * style - CSS style to be used for the element or window.\n\t * x - X coordinate for the new window.\n\t * y - Y coordinate for the new window.\n\t * width - Width for the new window.\n\t * height - Optional height for the new window.\n\t * name - Name of the stylesheet (absolute/relative URL).\n\t * basename - Basename of the resource bundle (see <mxResources>).\n\t *\n\t * The x, y, width and height attributes are used to create a new\n\t * <mxWindow> if the element attribute is not specified in an add\n\t * node. The name and basename are only used in the stylesheet and\n\t * resource nodes, respectively.\n\t *\n\t * Known Keys:\n\t *\n\t * graph - Main graph element (see <mxEditor.setGraphContainer>).\n\t * title - Title element (see <mxEditor.setTitleContainer>).\n\t * toolbar - Toolbar element (see <mxEditor.setToolbarContainer>).\n\t * status - Status bar element (see <mxEditor.setStatusContainer>).\n\t *\n\t * Example:\n\t *\n\t * (code)\n\t * <ui>\n\t *   <stylesheet name=\"css/process.css\"/>\n\t *   <resource basename=\"resources/app\"/>\n\t *   <add as=\"graph\" element=\"graph\"\n\t *     style=\"left:70px;right:20px;top:20px;bottom:40px\"/>\n\t *   <add as=\"status\" element=\"status\"/>\n\t *   <add as=\"toolbar\" x=\"10\" y=\"20\" width=\"54\"/>\n\t * </ui>\n\t * (end)\n\t */\n\tcodec.afterDecode = function(dec, node, obj)\n\t{\n\t\t// Assigns the specified templates for edges\n\t\tvar defaultEdge = node.getAttribute('defaultEdge');\n\t\t\n\t\tif (defaultEdge != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultEdge');\n\t\t\tobj.defaultEdge = obj.templates[defaultEdge];\n\t\t}\n\n\t\t// Assigns the specified templates for groups\n\t\tvar defaultGroup = node.getAttribute('defaultGroup');\n\t\t\n\t\tif (defaultGroup != null)\n\t\t{\n\t\t\tnode.removeAttribute('defaultGroup');\n\t\t\tobj.defaultGroup = obj.templates[defaultGroup];\n\t\t}\n\n\t\treturn obj;\n\t};\n\t\n\t/**\n\t * Function: decodeChild\n\t * \n\t * Overrides decode child to handle special child nodes.\n\t */\t\n\tcodec.decodeChild = function(dec, child, obj)\n\t{\n\t\tif (child.nodeName == 'Array')\n\t\t{\n\t\t\tvar role = child.getAttribute('as');\n\t\t\t\n\t\t\tif (role == 'templates')\n\t\t\t{\n\t\t\t\tthis.decodeTemplates(dec, child, obj);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (child.nodeName == 'ui')\n\t\t{\n\t\t\tthis.decodeUi(dec, child, obj);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tmxObjectCodec.prototype.decodeChild.apply(this, arguments);\n\t};\n\t\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeUi = function(dec, node, editor)\n\t{\n\t\tvar tmp = node.firstChild;\n\t\twhile (tmp != null)\n\t\t{\n\t\t\tif (tmp.nodeName == 'add')\n\t\t\t{\n\t\t\t\tvar as = tmp.getAttribute('as');\n\t\t\t\tvar elt = tmp.getAttribute('element');\n\t\t\t\tvar style = tmp.getAttribute('style');\n\t\t\t\tvar element = null;\n\n\t\t\t\tif (elt != null)\n\t\t\t\t{\n\t\t\t\t\telement = document.getElementById(elt);\n\t\t\t\t\t\n\t\t\t\t\tif (element != null && style != null)\n\t\t\t\t\t{\n\t\t\t\t\t\telement.style.cssText += ';' + style;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar x = parseInt(tmp.getAttribute('x'));\n\t\t\t\t\tvar y = parseInt(tmp.getAttribute('y'));\n\t\t\t\t\tvar width = tmp.getAttribute('width');\n\t\t\t\t\tvar height = tmp.getAttribute('height');\n\n\t\t\t\t\t// Creates a new window around the element\n\t\t\t\t\telement = document.createElement('div');\n\t\t\t\t\telement.style.cssText = style;\n\t\t\t\t\t\n\t\t\t\t\tvar wnd = new mxWindow(mxResources.get(as) || as,\n\t\t\t\t\t\telement, x, y, width, height, false, true);\n\t\t\t\t\twnd.setVisible(true);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// TODO: Make more generic\n\t\t\t\tif (as == 'graph')\n\t\t\t\t{\n\t\t\t\t\teditor.setGraphContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'toolbar')\n\t\t\t\t{\n\t\t\t\t\teditor.setToolbarContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'title')\n\t\t\t\t{\n\t\t\t\t\teditor.setTitleContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'status')\n\t\t\t\t{\n\t\t\t\t\teditor.setStatusContainer(element);\n\t\t\t\t}\n\t\t\t\telse if (as == 'map')\n\t\t\t\t{\n\t\t\t\t\teditor.setMapContainer(element);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'resource')\n\t\t\t{\n\t\t\t\tmxResources.add(tmp.getAttribute('basename'));\n\t\t\t}\n\t\t\telse if (tmp.nodeName == 'stylesheet')\n\t\t\t{\n\t\t\t\tmxClient.link('stylesheet', tmp.getAttribute('name'));\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tmp.nextSibling;\n\t\t}\t\n\t};\n\t\n\t/**\n\t * Function: decodeTemplates\n\t *\n\t * Decodes the cells from the given node as templates.\n\t */\n\tcodec.decodeTemplates = function(dec, node, editor)\n\t{\n\t\tif (editor.templates == null)\n\t\t{\n\t\t\teditor.templates = [];\n\t\t}\n\t\t\n\t\tvar children = mxUtils.getChildNodes(node);\n\t\tfor (var j=0; j<children.length; j++)\n\t\t{\n\t\t\tvar name = children[j].getAttribute('as');\n\t\t\tvar child = children[j].firstChild;\n\t\t\t\n\t\t\twhile (child != null && child.nodeType != 1)\n\t\t\t{\n\t\t\t\tchild = child.nextSibling;\n\t\t\t}\n\t\t\t\n\t\t\tif (child != null)\n\t\t\t{\n\t\t\t\t// LATER: Only single cells means you need\n\t\t\t\t// to group multiple cells within another\n\t\t\t\t// cell. This should be changed to support\n\t\t\t\t// arrays of cells, or the wrapper must\n\t\t\t\t// be automatically handled in this class.\n\t\t\t\teditor.templates[name] = dec.decodeCell(child);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Returns the codec into the registry\n\treturn codec;\n\n}());\n\n\n/*** EXPORTS FROM exports-loader ***/\nexports[\"mxClient\"] = (mxClient);\nexports[\"mxToolbar\"] = (mxToolbar);\nexports[\"mxConnectionHandler\"] = (mxConnectionHandler);\nexports[\"mxEllipse\"] = (mxEllipse);\nexports[\"mxConnectionConstraint\"] = (mxConnectionConstraint);\nexports[\"mxWindow\"] = (mxWindow);\nexports[\"mxObjectCodec\"] = (mxObjectCodec);\nexports[\"mxGraphModel\"] = (mxGraphModel);\nexports[\"mxActor\"] = (mxActor);\nexports[\"mxPopupMenu\"] = (mxPopupMenu);\nexports[\"mxShape\"] = (mxShape);\nexports[\"mxEventObject\"] = (mxEventObject);\nexports[\"mxGraph\"] = (mxGraph);\nexports[\"mxPopupMenuHandler\"] = (mxPopupMenuHandler);\nexports[\"mxPrintPreview\"] = (mxPrintPreview);\nexports[\"mxEventSource\"] = (mxEventSource);\nexports[\"mxRectangle\"] = (mxRectangle);\nexports[\"mxVertexHandler\"] = (mxVertexHandler);\nexports[\"mxMouseEvent\"] = (mxMouseEvent);\nexports[\"mxGraphView\"] = (mxGraphView);\nexports[\"mxCodecRegistry\"] = (mxCodecRegistry);\nexports[\"mxImage\"] = (mxImage);\nexports[\"mxGeometry\"] = (mxGeometry);\nexports[\"mxRubberband\"] = (mxRubberband);\nexports[\"mxConstraintHandler\"] = (mxConstraintHandler);\nexports[\"mxKeyHandler\"] = (mxKeyHandler);\nexports[\"mxDragSource\"] = (mxDragSource);\nexports[\"mxEvent\"] = (mxEvent);\nexports[\"mxUtils\"] = (mxUtils);\nexports[\"mxCodec\"] = (mxCodec);\nexports[\"mxCell\"] = (mxCell);\nexports[\"mxConstants\"] = (mxConstants);\nexports[\"mxPoint\"] = (mxPoint);\nexports[\"mxGraphHandler\"] = (mxGraphHandler);\nexports[\"mxCylinder\"] = (mxCylinder);\nexports[\"mxCellRenderer\"] = (mxCellRenderer);\nexports[\"mxUndoManager\"] = (mxUndoManager);"],"sourceRoot":""}